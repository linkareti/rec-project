<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.linkare.irn</groupId>
		<artifactId>base</artifactId>
		<version>1.5.3</version>
		<relativePath>..</relativePath>
	</parent>

	<artifactId>nascimento</artifactId>
	<packaging>war</packaging>

	<dependencies>
		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-api</artifactId>
			<version>${jee.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>${commons.lang.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${jackson.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jaxrs</artifactId>
			<version>${org.jboss.resteasy.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-validator-provider-11</artifactId>
			<version>${org.jboss.resteasy.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-multipart-provider</artifactId>
			<version>${org.jboss.resteasy.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.primefaces</groupId>
			<artifactId>primefaces</artifactId>
			<version>6.0</version>
		</dependency>
		<dependency>
			<groupId>org.primefaces.themes</groupId>
			<artifactId>all-themes</artifactId>
			<version>1.0.10</version>
		</dependency>
		<dependency>
			<groupId>org.primefaces.themes</groupId>
			<artifactId>bootstrap</artifactId>
			<version>1.0.10</version>
		</dependency>

		<!-- Webjars dependencies -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>3.3.5</version>
		</dependency>

		<!-- pzenida - added primefaces-extensions -->
		<dependency>
			<groupId>org.primefaces.extensions</groupId>
			<artifactId>primefaces-extensions</artifactId>
			<version>6.0.0</version>
		</dependency>

		<!-- pzenida - added to use @ViewAccessScoped -->
		<dependency>
			<groupId>org.apache.myfaces.extensions.cdi.bundles</groupId>

			<artifactId>myfaces-extcdi-bundle-jsf20</artifactId>
			<version>1.0.6</version>
		</dependency>

		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.2</version>
		</dependency>

		<!-- pzenida - added to be able to use function PMT -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>3.11</version>
		</dependency>

		<dependency>
			<groupId>org.omnifaces</groupId>
			<artifactId>omnifaces</artifactId>
			<version>2.1</version>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>18.0</version>
		</dependency>

		<!-- pzenida - added to be able to implement a web filter -->
		<dependency>
			<groupId>org.jboss.spec.javax.servlet</groupId>
			<artifactId>jboss-servlet-api_3.0_spec</artifactId>
			<version>1.0.2.Final</version>
			<scope>provided</scope>
		</dependency>

		<!-- pzenida - added to be able to debug in the primefaces components -->
		<dependency>
			<groupId>javax.el</groupId>
			<artifactId>javax.el-api</artifactId>
			<version>3.0.0</version>
			<scope>provided</scope>
		</dependency>

		<!-- pzenida - added to be able to use velocity for email message templates -->
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity</artifactId>
			<version>${velocity.version}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-lang</groupId>
					<artifactId>commons-lang</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity-tools</artifactId>
			<version>${velocity-tools.version}</version>
			<exclusions>
				<exclusion>
					<groupId>dom4j</groupId>
					<artifactId>dom4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- pzenida - added to be able to parse CSV files -->
		<dependency>
			<groupId>net.sf.opencsv</groupId>
			<artifactId>opencsv</artifactId>
			<version>${net.sf.opencsv.version}</version>
		</dependency>

		<!-- OpenSAML -->
		<dependency>
			<groupId>org.opensaml</groupId>
			<artifactId>opensaml</artifactId>
			<version>2.5.3</version>
			<exclusions>
				<exclusion>
					<groupId>velocity</groupId>
					<artifactId>velocity</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${commons-io.version}</version>
		</dependency>

		<!-- PDF generation -->
		<dependency>
			<groupId>org.xhtmlrenderer</groupId>
			<artifactId>flying-saucer-pdf</artifactId>
			<version>9.0.7</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-envers</artifactId>
			<version>${hibernate.version}</version>
			<scope>provided</scope>
		</dependency>


	</dependencies>

	<build>
		<!-- Maven will append the version to the finalName (which is the name 
			given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>
		<resources>
			<resource>
				<directory>${project.basedir}/src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>${project.basedir}/src/main/webapp/WEB-INF</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>${project.basedir}/src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
			<testResource>
				<directory>${project.basedir}/src/main/resources/main</directory>
				<filtering>true</filtering>
				<targetPath>${project.build.testOutputDirectory}</targetPath>
			</testResource>
		</testResources>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${version.compiler.plugin}</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>${version.war.plugin}</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<webResources>
						<resource>
							<directory>${project.basedir}/src/main/webapp</directory>
							<filtering>true</filtering>
							<includes>
								<include>**/web.xml</include>
							</includes>
						</resource>
						<resource>
							<directory>${project.basedir}/src/main/webapp</directory>
							<filtering>false</filtering>
						</resource>
					</webResources>
				</configuration>
			</plugin>

			<!-- http://igfej.mj.pt/schemas/services/mc/envioEmail?WSDL -->
			<plugin>
				<groupId>org.jvnet.jax-ws-commons</groupId>
				<artifactId>jaxws-maven-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<args>
						<arg>-b</arg>
						<arg>src/main/resources/wsdl/xsdMensagem.xsd</arg>
					</args>
					<vmArgs>
						<vmArg>-Djavax.xml.accessExternalDTD=all</vmArg>
						<vmArg>-Djavax.xml.accessExternalSchema=all</vmArg>
					</vmArgs>
				</configuration>
				<executions>
					<execution>
						<id>envioEmail</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>wsimport</goal>
						</goals>
						<configuration>
							<sourceDestDir>${project.build.sourceDirectory}</sourceDestDir>
							<packageName>com.linkare.irn.nascimento.wsclient</packageName>
							<extension>true</extension>
							<wsdlDirectory>src/main/resources/wsdl</wsdlDirectory>
							<wsdlLocation>/wsdl/*</wsdlLocation>
							<wsdlFiles>
								<wsdlFile>wsMCEnvioEmail.wsdl</wsdlFile>
							</wsdlFiles>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- JPA static model generation -->
			<plugin>
				<groupId>org.bsc.maven</groupId>
				<artifactId>maven-processor-plugin</artifactId>
				<version>2.0.5</version>
				<executions>
					<execution>
						<id>process</id>
						<goals>
							<goal>process</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<processors>
								<processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>
							</processors>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.hibernate</groupId>
						<artifactId>hibernate-jpamodelgen</artifactId>
						<version>${hibernate.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<!-- Build helper plugin adds the sources generated by the JPA 2 annotation 
				processor to the compile path -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>${build.helper.plugin.version}</version>
				<executions>
					<execution>
						<phase>process-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${project.build.directory}/generated-sources/apt</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.hibernate.orm.tooling</groupId>
				<artifactId>hibernate-enhance-maven-plugin</artifactId>
				<version>${hibernate.version}</version>
				<executions>
					<execution>
						<configuration>
							<failOnError>true</failOnError>
							<enableLazyInitialization>true</enableLazyInitialization>
							<enableDirtyTracking>false</enableDirtyTracking>
							<enableAssociationManagement>false</enableAssociationManagement>
							<enableExtendedEnhancement>false</enableExtendedEnhancement>
						</configuration>
						<goals>
							<goal>enhance</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.10.4</version>
				<configuration>
					<failOnError>false</failOnError>
				</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.hibernate.orm.tooling
										</groupId>
										<artifactId>
											hibernate-enhance-maven-plugin
										</artifactId>
										<versionRange>
											[5.0.10.Final,)
										</versionRange>
										<goals>
											<goal>enhance</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	<profiles>
		<profile>
			<!-- The default profile skips all tests, though you can tune it to run 
				just unit tests based on a custom pattern -->
			<!-- Seperate profiles are provided for running all tests, including Arquillian 
				tests that execute in the specified container -->
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<liquibase.contexts>dev</liquibase.contexts>
			</properties>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${version.surefire.plugin}</version>
						<configuration>
							<skip>false</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<hibernate.show_sql>false</hibernate.show_sql>
				<hibernate.format_sql>false</hibernate.format_sql>
				<javax.faces.PROJECT_STAGE>Production</javax.faces.PROJECT_STAGE>
				<javax.faces.FACELETS_REFRESH_PERIOD>-1</javax.faces.FACELETS_REFRESH_PERIOD>
				<session.timeout>30</session.timeout>
			</properties>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${version.surefire.plugin}</version>
						<configuration>
							<skip>false</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>prepare-database</id>
			<properties>
				<javax.persistence.jdbc.url>offline:mysql?changeLogFile=src/main/resources/databasechangelog.csv</javax.persistence.jdbc.url>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.liquibase</groupId>
						<artifactId>liquibase-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>process-resources</phase>
								<goals>
									<goal>updateSQL</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>start-mysql</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>run-mysql-service</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>target</workingDirectory>
									<executable>docker-compose</executable>
									<commandlineArgs>-f docker-compose-runner.yml up mysql-server</commandlineArgs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>do-upgradedb</id>
			<dependencies>
				<dependency>
					<groupId>com.linkare.irn</groupId>
					<artifactId>irn-upgrade-db</artifactId>
					<version>${project.version}</version>
					<type>pom</type>
					<scope>provided</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>run-irn-upgradedb-service</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>target</workingDirectory>
									<executable>docker-compose</executable>
									<commandlineArgs>-f docker-compose-runner.yml up irn-upgrade-db</commandlineArgs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>start-httpd</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>run-httpd-service</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>target</workingDirectory>
									<executable>docker-compose</executable>
									<commandlineArgs>-f docker-compose-runner.yml up httpd</commandlineArgs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>start-webapp</id>
			<properties>
				<profile.depends>docker-compose</profile.depends>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>run-nascimento-service</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>target</workingDirectory>
									<executable>docker-compose</executable>
									<commandlineArgs>-f docker-compose-runner.yml up wildfly-node1</commandlineArgs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>docker-compose</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.0.2</version>
						<executions>
							<execution>
								<id>copy-resources</id>
								<!-- here the phase you need -->
								<phase>generate-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${basedir}/target</outputDirectory>
									<nonFilteredFileExtensions>
										<nonFilteredFileExtension>p12</nonFilteredFileExtension>
										<nonFilteredFileExtension>jks</nonFilteredFileExtension>
									</nonFilteredFileExtensions>
									<resources>
										<resource>
											<directory>src/main/docker</directory>
											<filtering>true</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>build-images</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>target/docker/</workingDirectory>
									<executable>docker-compose</executable>
									<commandlineArgs>build --no-cache</commandlineArgs>
								</configuration>
							</execution>
							<execution>
								<id>push-base-images-to-nexus</id>
								<phase>deploy</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>target/docker/</workingDirectory>
									<executable>docker-compose</executable>
									<commandlineArgs>push</commandlineArgs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>release</id>
			<properties>
				<profile.depends>docker-compose</profile.depends>
			</properties>
		</profile>
		<profile>
			<id>linkare-release</id>
			<properties>
				<profile.depends>release</profile.depends>
			</properties>
		</profile>
	</profiles>
</project>
