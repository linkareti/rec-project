<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.linkare.irn</groupId>
		<artifactId>base</artifactId>
		<version>1.5.3</version>

		<relativePath>..</relativePath>
	</parent>
	
	<name>Deployment tars</name>
	<artifactId>irn-images</artifactId>
	<packaging>pom</packaging>
	<properties>
		<nascimento.host.name>nascimento</nascimento.host.name>
		<nascimento.domain.name>justica.gov.pt</nascimento.domain.name>
		<nascimento.web.context>nascimento</nascimento.web.context>
		<nascimento.image.name>${nascimento.web.context}</nascimento.image.name>
		<irn.db.name>{{"{{DOCKER-SECRET:db.secret}}"}}</irn.db.name>
		<irn.db.host>{{"{{DOCKER-SECRET:db.secret}}"}}</irn.db.host>
		<irn.db.port>{{"{{DOCKER-SECRET:db.secret}}"}}</irn.db.port>
		<irn.db.app.user>{{"{{DOCKER-SECRET:db.secret}}"}}</irn.db.app.user>
		<irn.db.app.pass>{{"{{DOCKER-SECRET:db.secret}}"}}</irn.db.app.pass>
		<irn.db.root.pass>{{"{{DOCKER-SECRET:db.secret}}"}}</irn.db.root.pass>
		<liquibase.context>prd</liquibase.context>
		<lb.logging.level>warning</lb.logging.level>
	</properties>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.0.2</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<!-- here the phase you need -->
						<phase>generate-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/docker</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>pull-images</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>pull-httpd-image</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>target</workingDirectory>
									<executable>docker</executable>
									<arguments>
										<argument>pull</argument>
										<argument>
											${repo}/${simplifiedGroupId}/httpd:${docker.base.image.version}
										</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>pull-webapp-image</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>target</workingDirectory>
									<executable>docker</executable>
									<arguments>
										<argument>pull</argument>
										<argument>
											${repo}/${simplifiedGroupId}/${nascimento.image.name}:${project.version}
										</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>pull-irn-upgrade-db-image</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>target</workingDirectory>
									<executable>docker</executable>
									<arguments>
										<argument>pull</argument>
										<argument>
											${repo}/${simplifiedGroupId}/irn-upgrade-db:${project.version}
										</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>save-images</id>
			<properties>
				<profile.depends>pull-images</profile.depends>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>save-httpd-docker-tar</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>target</workingDirectory>
									<executable>docker</executable>
									<arguments>
										<argument>save</argument>
										<argument>-o</argument>
										<argument>httpd.tar</argument>
										<argument>
											${repo}/${simplifiedGroupId}/httpd:${docker.base.image.version}
										</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>save-nascimento-docker-tar</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>target</workingDirectory>
									<executable>docker</executable>
									<arguments>
										<argument>save</argument>
										<argument>-o</argument>
										<argument>${nascimento.image.name}.tar</argument>
										<argument>
											${repo}/${simplifiedGroupId}/${nascimento.image.name}:${project.version}
										</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>save-irn-upgrade-db-docker-tar</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>target</workingDirectory>
									<executable>docker</executable>
									<arguments>
										<argument>save</argument>
										<argument>-o</argument>
										<argument>irn-upgrade-db.tar</argument>
										<argument>
											${repo}/${simplifiedGroupId}/irn-upgrade-db:${project.version}
										</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>docker-compose</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.6.0</version>
						<executions>
							<execution>
								<id>create-stack-runner-qlt</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>target</workingDirectory>
									<executable>docker-compose</executable>
									<commandlineArgs>-f docker-compose-runner.yml --log-level ERROR -f docker-compose-runner-qlt.yml config</commandlineArgs>
									<outputFile>target/docker-compose-runner-stack-qlt.yml</outputFile>
								</configuration>
							</execution>
							<execution>
								<id>create-stack-runner-prd</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>target</workingDirectory>
									<executable>docker-compose</executable>
									<commandlineArgs>-f docker-compose-runner.yml --log-level ERROR -f docker-compose-runner-prd.yml config</commandlineArgs>
									<outputFile>target/docker-compose-runner-stack-prd.yml</outputFile>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>create-tar-bundle</id>
			<properties>
				<profile.depends>save-images</profile.depends>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-assembly-plugin</artifactId>
						<configuration>
							<attach>false</attach>
							<archive>
								<manifest>
									<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								</manifest>
							</archive>
							<descriptors>
								<descriptor>src/main/assemblies/zip-all-target-dir.xml</descriptor>
							</descriptors>
							<outputDirectory>dist</outputDirectory>
						</configuration>
						<executions>
							<execution>
								<id>package-all-artifacts-as-zip</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>export-tars</id>
			<properties>
				<profile.depends>create-tar-bundle</profile.depends>
			</properties>
		</profile>
	</profiles>
</project>
