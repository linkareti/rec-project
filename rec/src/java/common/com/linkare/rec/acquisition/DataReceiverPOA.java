package com.linkare.rec.acquisition;

/**
 * com/linkare/rec/acquisition/DataReceiverPOA.java . Generated by the
 * IDL-to-Java compiler (portable), version "3.1" from
 * I:/Projects/REC/IdlCompile/ReC7.idl Sabado, 17 de Janeiro de 2004 19H00m GMT
 */
@SuppressWarnings("unchecked")
public abstract class DataReceiverPOA extends org.omg.PortableServer.Servant implements
		com.linkare.rec.acquisition.DataReceiverOperations, org.omg.CORBA.portable.InvokeHandler {

	// Constructors

	private static java.util.Hashtable _methods = new java.util.Hashtable();
	static {
		DataReceiverPOA._methods.put("newSamples", new java.lang.Integer(0));
		DataReceiverPOA._methods.put("stateChanged", new java.lang.Integer(1));
		DataReceiverPOA._methods.put("clientsListChanged", new java.lang.Integer(2));
	}

	@Override
	public org.omg.CORBA.portable.OutputStream _invoke(final String $method,
			final org.omg.CORBA.portable.InputStream in, final org.omg.CORBA.portable.ResponseHandler $rh) {
		org.omg.CORBA.portable.OutputStream out = null;
		final java.lang.Integer __method = (java.lang.Integer) DataReceiverPOA._methods.get($method);
		if (__method == null) {
			throw new org.omg.CORBA.BAD_OPERATION(0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
		}

		switch (__method.intValue()) {

		// Version 7.0 Changed this... we must only inform of the largest packet
		// known... all the packets before should be there
		case 0: // com/linkare/rec/acquisition/DataReceiver/newSamples
		{
			final int largestNumPacket = in.read_long();
			newSamples(largestNumPacket);
			out = $rh.createReply();
			break;
		}

			// Version 7.0 Changed this... now we may inform of changes in state
		case 1: // com/linkare/rec/acquisition/DataReceiver/stateChanged
		{
			final com.linkare.rec.acquisition.DataProducerState newState = com.linkare.rec.acquisition.DataProducerStateHelper
					.read(in);
			stateChanged(newState);
			out = $rh.createReply();
			break;
		}

			// Version 7.0 Changed this... now we may inform of changes in
			// clientsList
		case 2: // com/linkare/rec/acquisition/DataReceiver/clientsListChanged
		{
			clientsListChanged();
			out = $rh.createReply();
			break;
		}

		default:
			throw new org.omg.CORBA.BAD_OPERATION(0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
		}

		return out;
	} // _invoke

	// Type-specific CORBA::Object operations
	private static String[] __ids = { "IDL:com/linkare/rec/acquisition/DataReceiver:1.0" };

	@Override
	public String[] _all_interfaces(final org.omg.PortableServer.POA poa, final byte[] objectId) {
		return DataReceiverPOA.__ids.clone();
	}

	public DataReceiver _this() {
		return DataReceiverHelper.narrow(super._this_object());
	}

	public DataReceiver _this(final org.omg.CORBA.ORB orb) {
		return DataReceiverHelper.narrow(super._this_object(orb));
	}

} // class DataReceiverPOA
