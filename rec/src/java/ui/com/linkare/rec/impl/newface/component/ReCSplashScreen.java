/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReCSplashScreen.java
 *
 * Created on 31/Mai/2012, 11:47:31
 */
package com.linkare.rec.impl.newface.component;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import javax.swing.Icon;

import com.linkare.rec.impl.newface.ReCApplication;

/**
 * 
 * @author Bruno Catarino - Linkare TI
 */
public class ReCSplashScreen extends javax.swing.JDialog {

    private static final long serialVersionUID = -8376716555078768851L;

    private static final Logger log = Logger.getLogger(ReCSplashScreen.class.getName());

    private List<String> errorMessages = new ArrayList<String>();

    /**
     * 
     * Creates the <code>ReCSplashScreen</code>.
     * 
     * @param parent
     * @param modal
     */
    public ReCSplashScreen(java.awt.Frame parent) {
	super(parent);
	setUndecorated(true);
	setModal(false);
	initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogPanel = new javax.swing.JPanel();
        headerLbl = new javax.swing.JLabel();
        closeLbl = new javax.swing.JLabel();
        progressCicle = new com.linkare.rec.impl.newface.component.ProgressCicle();
        progressLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(419, 263));
        setName("Form"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(null);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.linkare.rec.impl.newface.ReCApplication.class).getContext().getResourceMap(ReCSplashScreen.class);
        dialogPanel.setBackground(resourceMap.getColor("dialogPanel.background")); // NOI18N
        dialogPanel.setBorder(new javax.swing.border.LineBorder(resourceMap.getColor("dialogPanel.border.lineColor"), 1, true)); // NOI18N
        dialogPanel.setMinimumSize(new java.awt.Dimension(419, 263));
        dialogPanel.setName("dialogPanel"); // NOI18N
        dialogPanel.setPreferredSize(new java.awt.Dimension(419, 263));
        dialogPanel.setRequestFocusEnabled(false);

        headerLbl.setIcon(resourceMap.getIcon("headerLbl.icon")); // NOI18N
        headerLbl.setBorder(null);
        headerLbl.setName("headerLbl"); // NOI18N

        closeLbl.setIcon(resourceMap.getIcon("closeLbl.icon")); // NOI18N
        closeLbl.setName("closeLbl"); // NOI18N
        closeLbl.setVisible(false);
        closeLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                closeLblMouseReleased(evt);
            }
        });

        progressCicle.setMinimumSize(new java.awt.Dimension(32, 32));
        progressCicle.setName("progressCicle"); // NOI18N
        progressCicle.setPreferredSize(new java.awt.Dimension(32, 32));
        Icon idleIcon = resourceMap.getIcon("progressCicle.idleIcon");
        Icon[] busyIcons = new Icon[ReCSplashScreen.busyIcons.length];
        for (int i = 0; i < ReCSplashScreen.busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("progressCicle.busyIcons[" + i + "]");
        }
        progressCicle.setIdleIcon(idleIcon);
        progressCicle.setBusyIcons(busyIcons);

        progressLbl.setFont(resourceMap.getFont("progressLbl.font")); // NOI18N
        progressLbl.setText(resourceMap.getString("progressLbl.text")); // NOI18N
        progressLbl.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        progressLbl.setMinimumSize(new java.awt.Dimension(381, 56));
        progressLbl.setName("progressLbl"); // NOI18N
        progressLbl.setPreferredSize(new java.awt.Dimension(381, 56));

        javax.swing.GroupLayout dialogPanelLayout = new javax.swing.GroupLayout(dialogPanel);
        dialogPanel.setLayout(dialogPanelLayout);
        dialogPanelLayout.setHorizontalGroup(
            dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogPanelLayout.createSequentialGroup()
                .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogPanelLayout.createSequentialGroup()
                        .addComponent(headerLbl, 0, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeLbl)
                        .addGap(6, 6, 6))
                    .addGroup(dialogPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(progressCicle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        dialogPanelLayout.setVerticalGroup(
            dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogPanelLayout.createSequentialGroup()
                .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerLbl)
                    .addComponent(closeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressCicle, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progressLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 44, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(dialogPanel);
        dialogPanel.setBounds(0, 0, 419, 263);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeLblMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeLblMouseReleased
	dispose();
	System.exit(0);
    }//GEN-LAST:event_closeLblMouseReleased

    /**
     * @param args
     *            the command line arguments
     */
    public static void main(String args[]) {
	java.awt.EventQueue.invokeLater(new Runnable() {

	    public void run() {
		ReCSplashScreen dialog = new ReCSplashScreen(new javax.swing.JFrame());
		dialog.addWindowListener(new java.awt.event.WindowAdapter() {

		    public void windowClosing(java.awt.event.WindowEvent e) {
			System.exit(0);
		    }
		});
		dialog.setVisible(true);
	    }
	});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel closeLbl;
    private javax.swing.JPanel dialogPanel;
    private javax.swing.JLabel headerLbl;
    private com.linkare.rec.impl.newface.component.ProgressCicle progressCicle;
    public static Icon[] busyIcons = new Icon[15];
    private javax.swing.JLabel progressLbl;
    // End of variables declaration//GEN-END:variables

    public void refreshBusyIcon(final boolean busy) {
	ReCApplication.runInEdt(new Runnable() {
	    @Override
	    public void run() {
//		progressCicle.setVisible(busy);
		if (busy) {
		    progressCicle.start();
		} else {
		    progressCicle.stop();
		}
	    }
	});
    }

    public void refreshLabel(final String label, final Object... params) {
	ReCApplication.runInEdt(new Runnable() {
	    @Override
	    public void run() {
		progressLbl.setText("<html>" + MessageFormat.format(label, params) + "</html>");
	    }
	});
    }

    public void registerErrorMessage(String error, Object... params) {
	final long SHOW_ERROR_MESSAGE_TIME = 500L;
	errorMessages.add(MessageFormat.format(error, params));
	refreshLabel(error, params);

	//FIXME it should be in the edt
	try {
	    Thread.sleep(SHOW_ERROR_MESSAGE_TIME);
	} catch (InterruptedException e) {
	    log.severe("Error while sleeping for " + SHOW_ERROR_MESSAGE_TIME + " ms");
	}
    }

    public void setCloseButtonVisible(boolean visible) {
	closeLbl.setVisible(visible);
    }

    public void showErrorMessages() {
	//TODO show this right
	progressLbl.setText(errorMessages.toString());
    }

    public List<String> getErrorMessages() {
	return errorMessages;
    }
}