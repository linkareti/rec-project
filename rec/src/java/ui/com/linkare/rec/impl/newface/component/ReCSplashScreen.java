/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReCSplashScreen.java
 *
 * Created on 31/Mai/2012, 11:47:31
 */
package com.linkare.rec.impl.newface.component;

import java.awt.Color;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import javax.swing.Icon;
import javax.swing.JLabel;

import com.linkare.rec.impl.newface.ReCApplication;

/**
 * 
 * @author Bruno Catarino - Linkare TI
 */
public class ReCSplashScreen extends javax.swing.JDialog {

	private static final long serialVersionUID = -8376716555078768851L;
	private static final Logger log = Logger.getLogger(ReCSplashScreen.class.getName());
	public static final long SHOW_LABEL_MESSAGE_TIME = 500L;
	private List<String> errorMessages = new ArrayList<String>();

	/**
	 * 
	 * Creates the <code>ReCSplashScreen</code>.
	 * 
	 * @param parent
	 * @param modal
	 */
	public ReCSplashScreen(java.awt.Frame parent) {
		super(parent);
		setUndecorated(true);
		setModal(false);
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBorderContainer = new javax.swing.JPanel();
        dialogPanel = new javax.swing.JPanel();
        headerLbl = new javax.swing.JLabel();
        closeLbl = new javax.swing.JLabel();
        progressCicle = new com.linkare.rec.impl.newface.component.ProgressCicle();
        progressLbl = new javax.swing.JLabel();
        pnlMessages = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        setResizable(false);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(ReCSplashScreen.class);
        pnlBorderContainer.setBorder(new javax.swing.border.LineBorder(resourceMap.getColor("pnlBorderContainer.border.lineColor"), 1, true)); // NOI18N
        pnlBorderContainer.setName("pnlBorderContainer"); // NOI18N
        pnlBorderContainer.setLayout(new java.awt.BorderLayout());

        dialogPanel.setBackground(resourceMap.getColor("dialogPanel.background")); // NOI18N
        dialogPanel.setName("dialogPanel"); // NOI18N
        dialogPanel.setPreferredSize(new java.awt.Dimension(440, 263));
        dialogPanel.setRequestFocusEnabled(false);

        headerLbl.setIcon(resourceMap.getIcon("headerLbl.icon")); // NOI18N
        headerLbl.setName("headerLbl"); // NOI18N

        closeLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        closeLbl.setIcon(resourceMap.getIcon("closeLbl.icon")); // NOI18N
        closeLbl.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        closeLbl.setName("closeLbl"); // NOI18N
        closeLbl.setVisible(false);
        closeLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                closeLblMouseReleased(evt);
            }
        });

        progressCicle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        progressCicle.setIcon(resourceMap.getIcon("progressCicle.icon")); // NOI18N
        progressCicle.setMinimumSize(new java.awt.Dimension(32, 32));
        progressCicle.setName("progressCicle"); // NOI18N
        progressCicle.setPreferredSize(new java.awt.Dimension(32, 32));
        Icon idleIcon = resourceMap.getIcon("progressCicle.idleIcon");
        Icon[] busyIcons = new Icon[ReCSplashScreen.busyIcons.length];
        for (int i = 0; i < ReCSplashScreen.busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("progressCicle.busyIcons[" + i + "]");
        }
        progressCicle.setIdleIcon(idleIcon);
        progressCicle.setBusyIcons(busyIcons);

        progressLbl.setFont(resourceMap.getFont("progressLbl.font")); // NOI18N
        progressLbl.setText(resourceMap.getString("progressLbl.text")); // NOI18N
        progressLbl.setMinimumSize(new java.awt.Dimension(381, 56));
        progressLbl.setName("progressLbl"); // NOI18N
        progressLbl.setPreferredSize(new java.awt.Dimension(381, 56));

        javax.swing.GroupLayout dialogPanelLayout = new javax.swing.GroupLayout(dialogPanel);
        dialogPanel.setLayout(dialogPanelLayout);
        dialogPanelLayout.setHorizontalGroup(
            dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogPanelLayout.createSequentialGroup()
                .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(dialogPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(progressCicle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE))
                    .addComponent(headerLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeLbl))
        );
        dialogPanelLayout.setVerticalGroup(
            dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogPanelLayout.createSequentialGroup()
                .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerLbl)
                    .addComponent(closeLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressCicle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progressLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pnlBorderContainer.add(dialogPanel, java.awt.BorderLayout.CENTER);

        pnlMessages.setBackground(resourceMap.getColor("pnlMessages.background")); // NOI18N
        pnlMessages.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        pnlMessages.setName("pnlMessages"); // NOI18N
        pnlMessages.setLayout(new javax.swing.BoxLayout(pnlMessages, javax.swing.BoxLayout.Y_AXIS));
        pnlBorderContainer.add(pnlMessages, java.awt.BorderLayout.SOUTH);

        getContentPane().add(pnlBorderContainer, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void closeLblMouseReleased(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_closeLblMouseReleased
		dispose();
		ReCApplication.getApplication().splashClosed();
	}// GEN-LAST:event_closeLblMouseReleased

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {
				final ReCSplashScreen dialog = new ReCSplashScreen(new javax.swing.JFrame());
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {

					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				System.out.println("Dialog visible...");
				dialog.setVisible(true);
				System.out.println("Starting parallel state change thread");
				
				(new Thread() {
					public void run() {
						System.out.println("Changing state message...");
						dialog.refreshLabel("Trying connection to A");
						dialog.registerErrorMessage("Correu mal!");
						dialog.refreshLabel("Trying connection to B");
						dialog.refreshLabel("Connection to B succeeded!");
						dialog.refreshLabel("Trying connection to C");
						dialog.registerErrorMessage("Connection to C - hostname not found!");
						dialog.setCloseButtonVisible(true);

					}
				}).start();

			}
		});

	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel closeLbl;
    private javax.swing.JPanel dialogPanel;
    private javax.swing.JLabel headerLbl;
    private javax.swing.JPanel pnlBorderContainer;
    private javax.swing.JPanel pnlMessages;
    private com.linkare.rec.impl.newface.component.ProgressCicle progressCicle;
    public static Icon[] busyIcons = new Icon[15];
    private javax.swing.JLabel progressLbl;
    // End of variables declaration//GEN-END:variables

	public void refreshBusyIcon(final boolean busy) {
		ReCApplication.runInEdt(new Runnable() {

			@Override
			public void run() {
				// progressCicle.setVisible(busy);
				if (busy) {
					progressCicle.start();
				} else {
					progressCicle.stop();
				}
			}
		});
	}

	public void refreshLabel(final String label, final Object... params) {
		refreshLabel(false, label,params);
	}
	
	/**
	 * @param isError
	 * @param label
	 * @param params
	 */
	public void refreshLabel(final boolean isError, final String label, final Object... params) {
		ReCApplication.runInEdt(new Runnable() {

			@Override
			public void run() {
				if(isError){
					progressLbl.setText("<html><body><p color='red'>" + MessageFormat.format(label, params) + "</p></body></html>");
				}
				else {
					progressLbl.setText("<html><body><p>" + MessageFormat.format(label, params) + "</p></body></html>");
				}
				try {
					Thread.sleep(SHOW_LABEL_MESSAGE_TIME*(isError?2:1));
				} catch (InterruptedException e) {
					log.severe("Error while sleeping for " + SHOW_LABEL_MESSAGE_TIME + " ms");
				}
			}
		});
	}

	

	public void registerErrorMessage(String error, Object... params) {
		errorMessages.add(MessageFormat.format(error, params));
		refreshLabel(true, error, params);
		JLabel lblError=new JLabel("<html><body color='red'>"+MessageFormat.format(error, params)+"</html></body>");
		lblError.setBackground(Color.WHITE);
		pnlMessages.add(lblError);
		repaint();
		pack();
	}
	
	public void setCloseButtonVisible(boolean visible) {
		closeLbl.setVisible(visible);
	}

	public void showErrorMessages() {
		progressLbl.setText(errorMessages.toString());
	}

	public List<String> getErrorMessages() {
		return errorMessages;
	}

}