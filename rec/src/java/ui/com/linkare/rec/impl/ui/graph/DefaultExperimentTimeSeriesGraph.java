/*
 * DefaultExperimentGraph.java
 *
 * Created on 7 de Maio de 2003, 18:47
 */

package com.linkare.rec.impl.ui.graph;

import com.linkare.rec.impl.client.experiment.DataDisplayEnum;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.JPanel;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.metadata.Scale;
import com.linkare.rec.impl.client.experiment.DefaultDatasetProxy;
import com.linkare.rec.impl.client.experiment.ExpDataDisplay;
import com.linkare.rec.impl.client.experiment.ExpDataModel;
import com.linkare.rec.impl.client.experiment.ExpDataModelListener;
import com.linkare.rec.impl.client.experiment.NewExpDataEvent;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

/**
 * 
 * @author Jos√© Pedro Pereira - Linkare TI
 */
public class DefaultExperimentTimeSeriesGraph extends javax.swing.JPanel implements ExpDataDisplay,
		ExpDataModelListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = -645433433676332049L;

	/** Creates new form DefaultExperimentGraph */
	public DefaultExperimentTimeSeriesGraph() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {
		defaultDatasetProxy = new com.linkare.rec.impl.client.experiment.DefaultDatasetProxy();
		scrollPane = new javax.swing.JScrollPane();
		labelWaitData = new javax.swing.JLabel();

		setLayout(new java.awt.BorderLayout());

		labelWaitData.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		labelWaitData.setText("waiting for data...");
		scrollPane.setViewportView(labelWaitData);

		add(scrollPane, java.awt.BorderLayout.CENTER);

	}// GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JScrollPane scrollPane;
	private com.linkare.rec.impl.client.experiment.DefaultDatasetProxy defaultDatasetProxy;
	private javax.swing.JLabel labelWaitData;

	// End of variables declaration//GEN-END:variables

	// /** Holds value of property channelX. */
	// private int channelX;

	// /** Holds value of property channelY. */
	// private int channelY;

	@Override
	public javax.swing.JComponent getDisplay() {
		return this;
	}

	@Override
	public Icon getIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/com/linkare/rec/impl/newface/resources/legacy/chart16.gif"));
	}

	private ExpDataModel model = null;

	@Override
	public void setExpDataModel(final ExpDataModel model) {
		this.model = model;
		model.addExpDataModelListener(this);
	}

	@Override
	public String getName() {
		return "Time Series Chart";
	}

	@Override
	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	@Override
	public javax.swing.JToolBar getToolBar() {
		return null;
	}

	@Override
	public void dataModelWaiting() {// BIG SILENT NOOP
	}

	@Override
	public void dataModelStoped() {
		if (header == null && model != null) {
			headerAvailable(model.getAcquisitionConfig());
		}
	}

	private HardwareAcquisitionConfig header = null;

	private void headerAvailable(final HardwareAcquisitionConfig header) {
		if (header == null) {
			return;
		}

		this.header = header;

		final JPanel fullPlot = new JPanel();
		fullPlot.setLayout(new BoxLayout(fullPlot, BoxLayout.Y_AXIS));

		final NumberAxis timeAxis = new NumberAxis("Elapsed Time [ms]");
		timeAxis.setAutoRange(true);
		timeAxis.setAutoRangeStickyZero(false);
		timeAxis.setAutoRangeIncludesZero(false);

		for (int i = 0; i < header.getChannelsConfig().length; i++) {

			final Scale scale = header.getChannelsConfig(i).getSelectedScale();

			String channelNameKey = header.getChannelsConfig(i).getChannelName();
			final String chn = ReCResourceBundle.findStringOrDefault(channelNameKey, channelNameKey);
			final String pus = scale.getPhysicsUnitSymbol();
			final String multiplier = scale.getMultiplier().toString();

			final NumberAxis valueAxis = new NumberAxis(chn + " [" + multiplier + pus + "]");
			valueAxis.setAutoRange(true);
			valueAxis.setAutoRangeStickyZero(false);
			valueAxis.setAutoRangeIncludesZero(false);

			final DefaultDatasetProxy proxy = new DefaultDatasetProxy();
			proxy.setChannelDisplay(i);
			proxy.setExpDataModel(model);

			final XYPlot plot = new XYPlot(proxy, timeAxis, valueAxis, new StandardXYItemRenderer(
					StandardXYItemRenderer.SHAPES_AND_LINES, new StandardXYToolTipGenerator()));

			chart = new JFreeChart(chn, JFreeChart.DEFAULT_TITLE_FONT, plot, false);

			final ChartPanel panelChart = new ChartPanel(chart);
			panelChart.setPreferredSize(new java.awt.Dimension(350, 300));
			// panelChart.setMinimumSize(new java.awt.Dimension(350,300));
			// panelChart.setSize(new java.awt.Dimension(350,300));
			panelChart.setMouseZoomable(true, false);

			fullPlot.add(panelChart);
		}

		scrollPane.remove(labelWaitData);
		scrollPane.setViewportView(fullPlot);

	}

	// private final boolean isScaleSet = false;

	private JFreeChart chart = null;

	@Override
	public void newSamples(final NewExpDataEvent evt) {
		if (header == null && model != null) {
			headerAvailable(model.getAcquisitionConfig());
		}
	}

	@Override
	public void dataModelEnded() {
		if (header == null && model != null) {
			headerAvailable(model.getAcquisitionConfig());
		}
	}

	@Override
	public void dataModelError() {
	}

	@Override
	public void dataModelStarted() {
		if (header == null && model != null) {
			headerAvailable(model.getAcquisitionConfig());
		}
	}

	@Override
	public void dataModelStartedNoData() {
		if (header == null && model != null) {
			headerAvailable(model.getAcquisitionConfig());
		}
	}

	@Override
	public DataDisplayEnum getDisplayType() {
		return DataDisplayEnum.CHART;
	}

}
