/*
 * ToolBarPanel.java
 *
 * Created on July 27, 2004, 10:47 AM
 */

package com.linkare.rec.impl.baseUI.control;

/**
 *
 * @author Andr√© Neto - LEFT - IST
 */

import java.beans.PropertyChangeEvent;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import javax.swing.ImageIcon;

import com.linkare.rec.impl.i18n.ReCResourceBundle;

public class ToolBarPanel extends javax.swing.JPanel {
	/**
	 * 
	 */
	private static final long serialVersionUID = 6821378059946290956L;
	private static String UI_CLIENT_LOGGER = "ReC.baseUI";

	static {
		final Logger l = LogManager.getLogManager().getLogger(ToolBarPanel.UI_CLIENT_LOGGER);
		if (l == null) {
			LogManager.getLogManager().addLogger(Logger.getLogger(ToolBarPanel.UI_CLIENT_LOGGER));
		}
	}

	/** Creates new form ToolBarPanel */
	public ToolBarPanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		jToolBar1 = new javax.swing.JToolBar();
		jToolBarLab = new javax.swing.JToolBar();
		jButtonConnect = new javax.swing.JToggleButton();
		jCheckBoxAutoPlay = new javax.swing.JCheckBox();
		jToolBarView = new javax.swing.JToolBar();
		jButtonUsers = new javax.swing.JToggleButton();
		jToggleButtonHistory = new javax.swing.JToggleButton();
		jButtonChat = new javax.swing.JToggleButton();
		jButtonVideo = new javax.swing.JToggleButton();
		jButtonApparatus = new javax.swing.JToggleButton();

		setLayout(new java.awt.BorderLayout());

		jButtonConnect.setIcon(ReCResourceBundle.findImageIconOrDefault("ReCBaseUI$rec.bui.icon.connect",
				new ImageIcon(getClass().getResource("/com/linkare/rec/impl/baseUI/resources/earth16.gif"))));
		jButtonConnect.setToolTipText(ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.tip.connect",
				"Connect to the laboratory"));
		jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonConnectActionPerformed(evt);
			}
		});

		jToolBarLab.add(jButtonConnect);

		jCheckBoxAutoPlay.setText(ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.lbl.autoplay", "Auto Play"));
		jCheckBoxAutoPlay.setToolTipText(ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.tip.autoplay",
				"Automatically connect to the apparatus"));
		jCheckBoxAutoPlay.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jCheckBoxAutoPlayActionPerformed(evt);
			}
		});

		jToolBarLab.add(jCheckBoxAutoPlay);

		jToolBar1.add(jToolBarLab);

		jButtonUsers.setIcon(ReCResourceBundle.findImageIconOrDefault("ReCBaseUI$rec.bui.icon.users", new ImageIcon(
				getClass().getResource("/com/linkare/rec/impl/baseUI/resources/UserList16_2.gif"))));
		jButtonUsers.setToolTipText(ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.tip.userslist",
				"Toggle users list"));
		jButtonUsers.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonUsersActionPerformed(evt);
			}
		});

		jToolBarView.add(jButtonUsers);

		jToggleButtonHistory.setIcon(ReCResourceBundle.findImageIconOrDefault("ReCBaseUI$rec.bui.icon.experiment",
				new ImageIcon(getClass().getResource("/com/linkare/rec/impl/baseUI/resources/Experiment16.gif"))));
		jToggleButtonHistory.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jToggleButtonHistoryActionPerformed(evt);
			}
		});

		jToolBarView.add(jToggleButtonHistory);

		jButtonChat.setIcon(ReCResourceBundle.findImageIconOrDefault("ReCBaseUI$rec.bui.icon.chat", new ImageIcon(
				getClass().getResource("/com/linkare/rec/impl/baseUI/resources/Chat16.gif"))));
		jButtonChat.setToolTipText(ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.tip.chat2", "Toggle chat"));
		jButtonChat.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonChatActionPerformed(evt);
			}
		});

		jToolBarView.add(jButtonChat);

		jButtonVideo.setIcon(ReCResourceBundle.findImageIconOrDefault("ReCBaseUI$rec.bui.icon.movie", new ImageIcon(
				getClass().getResource("/com/linkare/rec/impl/baseUI/resources/Movie16.gif"))));
		jButtonVideo.setToolTipText(ReCResourceBundle
				.findStringOrDefault("ReCBaseUI$rec.bui.tip.video", "Toggle video"));
		jButtonVideo.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonVideoActionPerformed(evt);
			}
		});

		jToolBarView.add(jButtonVideo);

		jButtonApparatus.setIcon(ReCResourceBundle.findImageIconOrDefault("ReCBaseUI$rec.bui.icon.tree", new ImageIcon(
				getClass().getResource("/com/linkare/rec/impl/baseUI/resources/tree16.gif"))));
		jButtonApparatus.setToolTipText(ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.tip.apparatus",
				"Toggle Apparatus tree"));
		jButtonApparatus.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonApparatusActionPerformed(evt);
			}
		});

		jToolBarView.add(jButtonApparatus);

		jToolBar1.add(jToolBarView);

		add(jToolBar1, java.awt.BorderLayout.CENTER);

	}// GEN-END:initComponents

	private void jToggleButtonHistoryActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jToggleButtonHistoryActionPerformed
	{// GEN-HEADEREND:event_jToggleButtonHistoryActionPerformed
		firePropertyChangeListenerPropertyChange(new PropertyChangeEvent(this, "history", Boolean.FALSE, Boolean.TRUE));
	}// GEN-LAST:event_jToggleButtonHistoryActionPerformed

	private void jCheckBoxAutoPlayActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jCheckBoxAutoPlayActionPerformed
	{// GEN-HEADEREND:event_jCheckBoxAutoPlayActionPerformed
		firePropertyChangeListenerPropertyChange(new PropertyChangeEvent(this, "autoplay", Boolean.FALSE, Boolean.TRUE));
	}// GEN-LAST:event_jCheckBoxAutoPlayActionPerformed

	private void jButtonApparatusActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonApparatusActionPerformed
	{// GEN-HEADEREND:event_jButtonApparatusActionPerformed
		firePropertyChangeListenerPropertyChange(new PropertyChangeEvent(this, "tree", Boolean.FALSE, Boolean.TRUE));
	}// GEN-LAST:event_jButtonApparatusActionPerformed

	private void jButtonVideoActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonVideoActionPerformed
	{// GEN-HEADEREND:event_jButtonVideoActionPerformed
		firePropertyChangeListenerPropertyChange(new PropertyChangeEvent(this, "video", Boolean.FALSE, Boolean.TRUE));
	}// GEN-LAST:event_jButtonVideoActionPerformed

	private void jButtonChatActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonChatActionPerformed
	{// GEN-HEADEREND:event_jButtonChatActionPerformed
		firePropertyChangeListenerPropertyChange(new PropertyChangeEvent(this, "chat", Boolean.FALSE, Boolean.TRUE));
	}// GEN-LAST:event_jButtonChatActionPerformed

	private void jButtonUsersActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonUsersActionPerformed
	{// GEN-HEADEREND:event_jButtonUsersActionPerformed
		firePropertyChangeListenerPropertyChange(new PropertyChangeEvent(this, "users", Boolean.FALSE, Boolean.TRUE));
	}// GEN-LAST:event_jButtonUsersActionPerformed

	private void jButtonConnectActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonConnectActionPerformed
	{// GEN-HEADEREND:event_jButtonConnectActionPerformed
		firePropertyChangeListenerPropertyChange(new PropertyChangeEvent(this, "connect", Boolean.FALSE, Boolean.TRUE));
	}// GEN-LAST:event_jButtonConnectActionPerformed

	/**
	 * Getter for property enableConnect.
	 * 
	 * @return Value of property enableConnect.
	 */
	public boolean isEnableConnect() {
		return enableConnect;
	}

	/**
	 * Setter for property enableConnect.
	 * 
	 * @param enableConnect New value of property enableConnect.
	 */
	public void setEnableConnect(final boolean enableConnect) {
		jButtonConnect.setEnabled(enableConnect);
		this.enableConnect = enableConnect;
	}

	/**
	 * Getter for property enableAutoPlay.
	 * 
	 * @return Value of property enableAutoPlay.
	 */
	public boolean isEnableAutoPlay() {
		return enableAutoPlay;
	}

	/**
	 * Setter for property enableAutoPlay.
	 * 
	 * @param enableAutoPlay New value of property enableAutoPlay.
	 */
	public void setEnableAutoPlay(final boolean enableAutoPlay) {
		jCheckBoxAutoPlay.setEnabled(enableAutoPlay);
		this.enableAutoPlay = enableAutoPlay;
	}

	/**
	 * Getter for property enableVideo.
	 * 
	 * @return Value of property enableVideo.
	 */
	public boolean isEnableVideo() {
		return enableVideo;
	}

	/**
	 * Setter for property enableVideo.
	 * 
	 * @param enableVideo New value of property enableVideo.
	 */
	public void setEnableVideo(final boolean enableVideo) {
		jButtonVideo.setEnabled(enableVideo);
		this.enableVideo = enableVideo;
	}

	/**
	 * Getter for property enableChat.
	 * 
	 * @return Value of property enableChat.
	 */
	public boolean isEnableChat() {
		return enableChat;
	}

	/**
	 * Setter for property enableChat.
	 * 
	 * @param enableChat New value of property enableChat.
	 */
	public void setEnableChat(final boolean enableChat) {
		jButtonChat.setEnabled(enableChat);
		this.enableChat = enableChat;
	}

	/**
	 * Getter for property enableApparatusTree.
	 * 
	 * @return Value of property enableApparatusTree.
	 */
	public boolean isEnableApparatusTree() {
		return enableApparatusTree;
	}

	/**
	 * Setter for property enableApparatusTree.
	 * 
	 * @param enableApparatusTree New value of property enableApparatusTree.
	 */
	public void setEnableApparatusTree(final boolean enableApparatusTree) {
		jButtonApparatus.setEnabled(enableApparatusTree);
		this.enableApparatusTree = enableApparatusTree;
	}

	/**
	 * Getter for property enableUsersList.
	 * 
	 * @return Value of property enableUsersList.
	 */
	public boolean isEnableUsersList() {
		return enableUsersList;
	}

	/**
	 * Setter for property enableUsersList.
	 * 
	 * @param enableUsersList New value of property enableUsersList.
	 */
	public void setEnableUsersList(final boolean enableUsersList) {
		jButtonUsers.setEnabled(enableUsersList);
		this.enableUsersList = enableUsersList;
	}

	/**
	 * Registers PropertyChangeListener to receive events.
	 * 
	 * @param listener The listener to register.
	 */
	@Override
	public synchronized void addPropertyChangeListener(final java.beans.PropertyChangeListener listener) {
		if (listenerList == null) {
			listenerList = new javax.swing.event.EventListenerList();
		}
		listenerList.add(java.beans.PropertyChangeListener.class, listener);
	}

	/**
	 * Removes PropertyChangeListener from the list of listeners.
	 * 
	 * @param listener The listener to remove.
	 */
	@Override
	public synchronized void removePropertyChangeListener(final java.beans.PropertyChangeListener listener) {
		listenerList.remove(java.beans.PropertyChangeListener.class, listener);
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param event The event to be fired
	 */
	private void firePropertyChangeListenerPropertyChange(final java.beans.PropertyChangeEvent event) {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == java.beans.PropertyChangeListener.class) {
				((java.beans.PropertyChangeListener) listeners[i + 1]).propertyChange(event);
			}
		}
	}

	/**
	 * Getter for property selectApparatusTree.
	 * 
	 * @return Value of property selectApparatusTree.
	 */
	public boolean isSelectApparatusTree() {
		return selectApparatusTree;
	}

	/**
	 * Setter for property selectApparatusTree.
	 * 
	 * @param selectApparatusTree New value of property selectApparatusTree.
	 */
	public void setSelectApparatusTree(final boolean selectApparatusTree) {
		jButtonApparatus.setSelected(selectApparatusTree);
		this.selectApparatusTree = selectApparatusTree;
	}

	/**
	 * Getter for property selectChat.
	 * 
	 * @return Value of property selectChat.
	 */
	public boolean isSelectChat() {
		return selectChat;
	}

	/**
	 * Setter for property selectChat.
	 * 
	 * @param selectChat New value of property selectChat.
	 */
	public void setSelectChat(final boolean selectChat) {
		jButtonChat.setSelected(selectChat);
		this.selectChat = selectChat;
	}

	/**
	 * Getter for property selectVideo.
	 * 
	 * @return Value of property selectVideo.
	 */
	public boolean isSelectVideo() {
		return selectVideo;
	}

	/**
	 * Setter for property selectVideo.
	 * 
	 * @param selectVideo New value of property selectVideo.
	 */
	public void setSelectVideo(final boolean selectVideo) {
		jButtonVideo.setSelected(selectVideo);
		this.selectVideo = selectVideo;
	}

	/**
	 * Getter for property selectUsersList.
	 * 
	 * @return Value of property selectUsersList.
	 */
	public boolean isSelectUsersList() {
		return selectUsersList;
	}

	/**
	 * Setter for property selectUsersList.
	 * 
	 * @param selectUsersList New value of property selectUsersList.
	 */
	public void setSelectUsersList(final boolean selectUsersList) {
		jButtonUsers.setSelected(selectUsersList);
		this.selectUsersList = selectUsersList;
	}

	/**
	 * Getter for property selectConnect.
	 * 
	 * @return Value of property selectConnect.
	 */
	public boolean isSelectConnect() {
		return selectConnect;
	}

	/**
	 * Setter for property selectConnect.
	 * 
	 * @param selectConnect New value of property selectConnect.
	 */
	public void setSelectConnect(final boolean selectConnect) {
		jButtonConnect.setSelected(selectConnect);
		this.selectConnect = selectConnect;
		if (selectConnect) {
			jButtonConnect.setIcon(ReCResourceBundle.findImageIconOrDefault("ReCBaseUI$rec.bui.icon.disconnect",
					new ImageIcon(getClass().getResource("/com/linkare/rec/impl/baseUI/resources/earth16_cuted.gif"))));
		} else {
			jButtonConnect.setIcon(ReCResourceBundle.findImageIconOrDefault("ReCBaseUI$rec.bui.icon.connect",
					new ImageIcon(getClass().getResource("/com/linkare/rec/impl/baseUI/resources/earth16.gif"))));
		}
	}

	/**
	 * Getter for property selectAutoPlay.
	 * 
	 * @return Value of property selectAutoPlay.
	 */
	public boolean isSelectAutoPlay() {
		return selectAutoPlay;
	}

	/**
	 * Setter for property selectAutoPlay.
	 * 
	 * @param selectAutoPlay New value of property selectAutoPlay.
	 */
	public void setSelectAutoPlay(final boolean selectAutoPlay) {
		jCheckBoxAutoPlay.setSelected(selectAutoPlay);
		this.selectAutoPlay = selectAutoPlay;
	}

	/**
	 * Getter for property showLabToolBar.
	 * 
	 * @return Value of property showLabToolBar.
	 */
	public boolean isShowLabToolBar() {
		return showLabToolBar;
	}

	/**
	 * Setter for property showLabToolBar.
	 * 
	 * @param showLabToolBar New value of property showLabToolBar.
	 */
	public void setShowLabToolBar(final boolean showLabToolBar) {
		this.showLabToolBar = showLabToolBar;
		if (showLabToolBar) {
			jToolBar1.add(jToolBarLab, 0);
		} else {
			jToolBar1.remove(jToolBarLab);
		}
		jToolBar1.updateUI();
	}

	/**
	 * Getter for property showViewToolBar.
	 * 
	 * @return Value of property showViewToolBar.
	 */
	public boolean isShowViewToolBar() {
		return showViewToolBar;
	}

	/**
	 * Setter for property showViewToolBar.
	 * 
	 * @param showViewToolBar New value of property showViewToolBar.
	 */
	public void setShowViewToolBar(final boolean showViewToolBar) {
		this.showViewToolBar = showViewToolBar;
		if (showViewToolBar) {
			jToolBar1.add(jToolBarView);
		} else {
			jToolBar1.remove(jToolBarView);
		}
		jToolBar1.updateUI();
	}

	/**
	 * Getter for property enableHistory.
	 * 
	 * @return Value of property enableHistory.
	 */
	public boolean isEnableHistory() {
		return enableHistory;
	}

	/**
	 * Setter for property enableHistory.
	 * 
	 * @param enableHistory New value of property enableHistory.
	 */
	public void setEnableHistory(final boolean enableHistory) {
		this.enableHistory = enableHistory;
		jToggleButtonHistory.setEnabled(enableHistory);
	}

	/**
	 * Getter for property selectHistory.
	 * 
	 * @return Value of property selectHistory.
	 */
	public boolean isSelectHistory() {
		return selectHistory;
	}

	/**
	 * Setter for property selectHistory.
	 * 
	 * @param selectHistory New value of property selectHistory.
	 */
	public void setSelectHistory(final boolean selectHistory) {
		this.selectHistory = selectHistory;
		jToggleButtonHistory.setSelected(selectHistory);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JToggleButton jButtonApparatus;
	private javax.swing.JToggleButton jButtonChat;
	private javax.swing.JToggleButton jButtonConnect;
	private javax.swing.JToggleButton jButtonUsers;
	private javax.swing.JToggleButton jButtonVideo;
	private javax.swing.JCheckBox jCheckBoxAutoPlay;
	private javax.swing.JToggleButton jToggleButtonHistory;
	private javax.swing.JToolBar jToolBar1;
	private javax.swing.JToolBar jToolBarLab;
	private javax.swing.JToolBar jToolBarView;
	// End of variables declaration//GEN-END:variables

	/**
	 * Holds value of property enableConnect.
	 */
	private boolean enableConnect = true;

	/**
	 * Holds value of property enableAutoPlay.
	 */
	private boolean enableAutoPlay = true;

	/**
	 * Holds value of property enableVideo.
	 */
	private boolean enableVideo = true;

	/**
	 * Holds value of property enableChat.
	 */
	private boolean enableChat = true;

	/**
	 * Holds value of property enableApparatusTree.
	 */
	private boolean enableApparatusTree = true;

	/**
	 * Holds value of property enableUsersList.
	 */
	private boolean enableUsersList = true;

	/** Utility field used by event firing mechanism. */
	private javax.swing.event.EventListenerList listenerList = null;

	/**
	 * Holds value of property selectApparatusTree.
	 */
	private boolean selectApparatusTree = false;

	/**
	 * Holds value of property selectChat.
	 */
	private boolean selectChat = false;

	/**
	 * Holds value of property selectVideo.
	 */
	private boolean selectVideo = false;

	/**
	 * Holds value of property selectUsersList.
	 */
	private boolean selectUsersList = false;

	/**
	 * Holds value of property selectConnect.
	 */
	private boolean selectConnect = false;

	/**
	 * Holds value of property selectAutoPlay.
	 */
	private boolean selectAutoPlay = false;

	/**
	 * Holds value of property showLabToolBar.
	 */
	private boolean showLabToolBar = true;

	/**
	 * Holds value of property showViewToolBar.
	 */
	private boolean showViewToolBar = true;

	/**
	 * Holds value of property enableHistory.
	 */
	private boolean enableHistory = true;

	/**
	 * Holds value of property selectHistory.
	 */
	private boolean selectHistory = false;

}
