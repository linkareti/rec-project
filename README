=========================
== Processo de Release ==
=========================

O processo de release dá-se do seguinte modo:

1. quando se trata de uma versão para qual ainda não existe um branche, deve-se criar o mesmo a partir da trunk e prosseguir com o processo;
2. assim que exista uma branche de release basta aceder ao job "rec-ist-release" no Jenkins, clicar em Build with Parameters e preencher as propriedades necessárias para que o processo de release seja despoletado:
    - release_branch: o branche SVN sobre o qual irá ser feita a release;
    - release_task_id: o id do bug da release no Bugzilla;
    - release_version: uma vez que o projeto não tem atualmente um modo automático de obter a sua versão é necessário indicar a versão da release de modo fazer-se o processo de tagging e de arquivamento dos artefactos da release com base nesta mesma versão;
    - svn_username / svn_password: credenciais necessárias para os comandos svn do job;
3. é efetuado o checkout do branche em questão;
4. o build.properties.sample é copiado para build.properties;
5. o script $JENKINS_HOME/linkare-release-support/jenkins_scripts/rec-apply_properties.sh é executado e faz o seguinte:
 5.1. lê linha a linha o ficheiro build_production.properties, presente na raiz do projeto e que consite das propriedades que interessam personalizar para o ambiente de produção;
 5.2. verifica se a propriedade a ser avaliada está configurada (e descomentada) no build.properties;
 5.3. se a propriedade tiver a mesma configuração do ficheiro build_production.properties, então não é feito mais nada;
 5.4. se a propriedade existir mas tiver uma configuração diferente então é substituída pelo valor presente em build_production.properties;
 5.5. se a propriedade não existir então é adicionada ao final do build.properties.
6. o projeto rec é compilado com o comando "ant -f buildall.xml dist.all";
7. é realizado um download do WSDL atual do moodle (http://e-lab.ist.utl.pt/moodle/wspp/wsdl_pp.php) e o projeto rec.web é compilado com o comando "mvn clean package";
8. é gerado, na raiz do workspace do job, o arquivo "rec-${release_version}.zip", que contém os zips das experiências, dos multicasts e do cliente, bem como o WAR do rec.web;
9. o arquivo da release é copiado, via scp, para a diretoria ~/release-archives/ do user elab em elab.ist.utl.pt;
10. é marcada uma tag SVN da versão da release;
11. é enviado um e-mail com o resultado da execução do job de release para a mailing list release@linkare.com;
12. neste ponto pode-se prosseguir com o deploy do arquivo da release no servidor de produção.

=============================
== Processo de Build Local ==
=============================

= Prep = # FIXME # Update this documentation 

* Configure ~/.m2/toolchains.xml

<toolchains>
   <toolchain>
       <type>jdk</type>
       <provides>
           <vendor>openjdk</vendor>
           <version>11</version>
       </provides>
       <configuration>
           <jdkHome>/opt/java/openjdk/jdk11.0.8</jdkHome>
       </configuration>
   </toolchain>
</toolchains>

* Ensure wget and gnused installed

* JAVA_HOME=/opt/java/openjdk/jdk11.0.8

# Only Linkare
* Linkare Root Certificate at /opt/java/openjdk/jdk11.0.8/lib/security/cacerts

# Only Linkare
* If errors occur with docker registries, add ca.crt to:
/etc/docker/certs.d/nexus.linkare.com
/etc/docker/certs.d/docker-thirdparty.linkare.com 
(Or trust linkare certificates system wide)

= Build =

$ mvn clean package -Dmaven.test.skip=true -Djarsigner.alias="REC" -Dbuild.environment=local

# After first build, fastest build (if you do not need to rebuild docker images)

$ mvn clean package -Dmaven.test.skip=true -Djarsigner.alias="REC" -Dbuild.environment=local -DskipDockerBuild

= Run =

$ docker-compose -f deployment/compose/target/docker-compose-runner.yml up -d

= Test =

# Client (webswing)
http://localhost:18080
u: user
p: pwd

# Server (payara)
http://localhost:28080/rec.web
u: admin
p: teste

= Manage =

# Client (webswing)
http://localhost:18080/admin
u: admin
p: pwd

# Server (payara)
https://localhost:24848
u: admin
p: admin

# Debug Options
-Xrunjdwp:transport=dt_socket,address=*:8000,server=y,suspend=y

# Video streaming
ffmpeg -i /dev/video0 -framerate 1 -video_size 640x480 -vcodec libx264 -maxrate 768k -bufsize 8080k -g 60 -tune zerolatency -f rtsp rtsp://localhost:8554/vtiro

#
# Optional
#

# Local architecture with 2 experiments (server side and client side)
$ mvn clean package -Dmaven.test.skip=true -Djarsigner.alias="REC" -Dbuild.environment=local-client

# rec.web hot Deploy usage

Firt you need to build:
$ mvn clean package -Dmaven.test.skip=true -Djarsigner.alias="REC" -Dbuild.environment=local -Dhot.deploy.enabled

Next builds you can run with this command:
$ mvn clean package -Dmaven.test.skip=true -Djarsigner.alias="REC" -Dbuild.environment=local -DskipDockerBuild -DskipAntBuild -Dhot.deploy.enabled

# Deploy at repository
$ mvn clean deploy -Dmaven.test.skip=true -Djarsigner.alias="REC" -Dbuild.environment=local -Drepo=docker.io -Dhub=docker.io

# Sometimes we need to install librxtx-java
/usr/share/java/RXTXcomm-2.2pre2.jar