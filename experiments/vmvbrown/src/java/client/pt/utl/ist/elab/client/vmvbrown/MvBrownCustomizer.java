/*
 * MvBrownCustomizer.java
 *
 * Created on October 27, 2004, 03:35 AM
 */

package pt.utl.ist.elab.client.vmvbrown;

/*
 * @author  nomead
 *
 */
import pt.utl.ist.elab.client.virtual.guipack.GUtils;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.metadata.HardwareInfo;
import com.linkare.rec.data.synch.Frequency;
import com.linkare.rec.impl.client.customizer.ICustomizerListener;

public class MvBrownCustomizer extends javax.swing.JPanel implements com.linkare.rec.impl.client.customizer.ICustomizer {

	/** Creates new form MvBrownCustomizer */
	public MvBrownCustomizer() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;

		modelButtonGroup = new javax.swing.ButtonGroup();
		dimButtonGroup = new javax.swing.ButtonGroup();
		animaButtonGroup = new javax.swing.ButtonGroup();
		btnPanel = new javax.swing.JPanel();
		controlBtnPanel = new javax.swing.JPanel();
		okButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		defConfBtnPanel = new javax.swing.JPanel();
		defaultButton = new javax.swing.JButton();
		mainPanel = new javax.swing.JPanel();
		modelPanel = new javax.swing.JPanel();
		langevinRadioButton = new javax.swing.JRadioButton();
		randomRadioButton = new javax.swing.JRadioButton();
		dimPanel = new javax.swing.JPanel();
		dim1RadioButton = new javax.swing.JRadioButton();
		dim2RadioButton = new javax.swing.JRadioButton();
		dim3RadioButton = new javax.swing.JRadioButton();
		dPanel = new javax.swing.JPanel();
		dSlider = new javax.swing.JSlider();
		dTextField = new javax.swing.JTextField();
		mainTabbedPane = new javax.swing.JTabbedPane();
		partPanel = new javax.swing.JPanel();
		massPanel = new javax.swing.JPanel();
		massSlider = new javax.swing.JSlider();
		massTextField = new javax.swing.JTextField();
		radiusPanel = new javax.swing.JPanel();
		radiusSlider = new javax.swing.JSlider();
		radiusTextField = new javax.swing.JTextField();
		nPartPanel = new javax.swing.JPanel();
		nPartSlider = new javax.swing.JSlider();
		nPartTextField = new javax.swing.JTextField();
		velPanel = new javax.swing.JPanel();
		velModPanel = new javax.swing.JPanel();
		velModSlider = new javax.swing.JSlider();
		velModTextField = new javax.swing.JTextField();
		velThetaPanel = new javax.swing.JPanel();
		velThetaSlider = new javax.swing.JSlider();
		velThetaTextField = new javax.swing.JTextField();
		velPhiPanel = new javax.swing.JPanel();
		velPhiSlider = new javax.swing.JSlider();
		velPhiTextField = new javax.swing.JTextField();
		langevinPanel = new javax.swing.JPanel();
		dPPanel = new javax.swing.JPanel();
		dPSlider = new javax.swing.JSlider();
		dPTextField = new javax.swing.JTextField();
		freqPanel = new javax.swing.JPanel();
		freqSlider = new javax.swing.JSlider();
		freqTextField = new javax.swing.JTextField();
		visPanel = new javax.swing.JPanel();
		visSlider = new javax.swing.JSlider();
		visTextField = new javax.swing.JTextField();
		simulSettingsPanel = new javax.swing.JPanel();
		tbsPanel = new javax.swing.JPanel();
		tbsSlider = new javax.swing.JSlider();
		tbsTextField = new javax.swing.JTextField();
		samplesPanel = new javax.swing.JPanel();
		samplesSlider = new javax.swing.JSlider();
		samplesTextField = new javax.swing.JTextField();
		graphicsPanel = new javax.swing.JPanel();
		graph2Panel = new javax.swing.JPanel();
		graph2XComboBox = new javax.swing.JComboBox();
		graph2YComboBox = new javax.swing.JComboBox();
		graph2MedCheckBox = new javax.swing.JCheckBox();
		graph2ActCheckBox = new javax.swing.JCheckBox();
		graph3Panel = new javax.swing.JPanel();
		graph3XComboBox = new javax.swing.JComboBox();
		graph3YComboBox = new javax.swing.JComboBox();
		graph3MedCheckBox = new javax.swing.JCheckBox();
		graph3ActCheckBox = new javax.swing.JCheckBox();
		graph4Panel = new javax.swing.JPanel();
		graph4XComboBox = new javax.swing.JComboBox();
		graph4YComboBox = new javax.swing.JComboBox();
		graph4MedCheckBox = new javax.swing.JCheckBox();
		graph4ActCheckBox = new javax.swing.JCheckBox();
		graph1Panel = new javax.swing.JPanel();
		graph1XComboBox = new javax.swing.JComboBox();
		graph1YComboBox = new javax.swing.JComboBox();
		graph1MedCheckBox = new javax.swing.JCheckBox();
		graph1ActCheckBox = new javax.swing.JCheckBox();
		genGraphsPanel = new javax.swing.JPanel();
		genChartsPanel = new javax.swing.JPanel();
		genPosPanel = new javax.swing.JPanel();
		xCheckBox = new javax.swing.JCheckBox();
		yCheckBox = new javax.swing.JCheckBox();
		zCheckBox = new javax.swing.JCheckBox();
		posModCheckBox = new javax.swing.JCheckBox();
		posQuadCheckBox = new javax.swing.JCheckBox();
		genPosGraphActCheckBox = new javax.swing.JCheckBox();
		genVelPanel = new javax.swing.JPanel();
		vxCheckBox = new javax.swing.JCheckBox();
		vyCheckBox = new javax.swing.JCheckBox();
		vzCheckBox = new javax.swing.JCheckBox();
		velModCheckBox = new javax.swing.JCheckBox();
		velQuadCheckBox = new javax.swing.JCheckBox();
		genVelGraphActCheckBox = new javax.swing.JCheckBox();
		animaPanel = new javax.swing.JPanel();
		radiusAnimaPanel = new javax.swing.JPanel();
		radiusAnimaSlider = new javax.swing.JSlider();
		radiusAnimaTextField = new javax.swing.JTextField();
		animaActCheckBox = new javax.swing.JCheckBox();
		chartSettingsPanel = new javax.swing.JPanel();
		widthPanel = new javax.swing.JPanel();
		widthSlider = new javax.swing.JSlider();
		widthTextField = new javax.swing.JTextField();
		heightPanel = new javax.swing.JPanel();
		heightSlider = new javax.swing.JSlider();
		heightTextField = new javax.swing.JTextField();
		otherResSettPanel = new javax.swing.JPanel();
		resAdaptedCheckBox = new javax.swing.JCheckBox();
		connectedPointsCheckBox = new javax.swing.JCheckBox();

		setLayout(new java.awt.GridBagLayout());

		setMinimumSize(new java.awt.Dimension(600, 600));
		setPreferredSize(new java.awt.Dimension(600, 600));
		btnPanel.setLayout(new java.awt.GridBagLayout());

		okButton.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.ok"));
		okButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.ok"));
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		controlBtnPanel.add(okButton);

		cancelButton.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.cancel"));
		cancelButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.tip.cancel"));
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		controlBtnPanel.add(cancelButton);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		btnPanel.add(controlBtnPanel, gridBagConstraints);

		defaultButton.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.dfc"));
		defaultButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.tip.dfc"));
		defaultButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				defaultButtonActionPerformed(evt);
			}
		});

		defConfBtnPanel.add(defaultButton);

		btnPanel.add(defConfBtnPanel, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		add(btnPanel, gridBagConstraints);

		mainPanel.setLayout(new java.awt.GridBagLayout());

		modelPanel.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.SoftBevelBorder(
				javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 102, 255),
				new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255)),
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vmvbrown/resources/messages")
						.getString("rec.exp.customizer.title.25")));
		modelPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.25"));
		modelPanel.setMinimumSize(new java.awt.Dimension(300, 60));
		modelPanel.setPreferredSize(new java.awt.Dimension(150, 60));
		langevinRadioButton.setSelected(true);
		langevinRadioButton.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.13"));
		langevinRadioButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.13"));
		modelButtonGroup.add(langevinRadioButton);
		langevinRadioButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				langevinRadioButtonActionPerformed(evt);
			}
		});

		modelPanel.add(langevinRadioButton);

		randomRadioButton.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.14"));
		randomRadioButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.14"));
		modelButtonGroup.add(randomRadioButton);
		randomRadioButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				randomRadioButtonActionPerformed(evt);
			}
		});

		modelPanel.add(randomRadioButton);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		mainPanel.add(modelPanel, gridBagConstraints);

		dimPanel.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.SoftBevelBorder(
				javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 102, 255),
				new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255)),
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vmvbrown/resources/messages")
						.getString("rec.exp.customizer.title.26")));
		dimPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.26"));
		dimPanel.setMinimumSize(new java.awt.Dimension(150, 60));
		dimPanel.setPreferredSize(new java.awt.Dimension(150, 60));
		dim1RadioButton.setText("1");
		dimButtonGroup.add(dim1RadioButton);
		dimPanel.add(dim1RadioButton);

		dim2RadioButton.setSelected(true);
		dim2RadioButton.setText("2");
		dimButtonGroup.add(dim2RadioButton);
		dimPanel.add(dim2RadioButton);

		dim3RadioButton.setText("3");
		dimButtonGroup.add(dim3RadioButton);
		dimPanel.add(dim3RadioButton);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		mainPanel.add(dimPanel, gridBagConstraints);

		dPanel.setLayout(new java.awt.GridBagLayout());

		dPanel.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.SoftBevelBorder(
				javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 102, 255),
				new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255)),
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vmvbrown/resources/messages")
						.getString("rec.exp.customizer.title.24")));
		dPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.24"));
		dPanel.setMinimumSize(new java.awt.Dimension(150, 60));
		dPanel.setPreferredSize(new java.awt.Dimension(150, 60));
		dSlider.setMajorTickSpacing(30);
		dSlider.setMinimum(10);
		dSlider.setMinorTickSpacing(6);
		dSlider.setPaintLabels(true);
		dSlider.setPaintTicks(true);
		dSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.24"));
		dSlider.setEnabled(false);
		dSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				dSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		dPanel.add(dSlider, gridBagConstraints);

		dTextField.setColumns(4);
		dTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		dTextField.setText("50");
		dTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.24"));
		dTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		dTextField.setEnabled(false);
		dTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				dTextFieldFocusLost(evt);
			}
		});

		dPanel.add(dTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		mainPanel.add(dPanel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		add(mainPanel, gridBagConstraints);

		partPanel.setLayout(new java.awt.GridBagLayout());

		partPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255),
				new java.awt.Color(0, 102, 255)));
		massPanel.setLayout(new java.awt.GridBagLayout());

		massPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.3")));
		massPanel
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.3"));
		massPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		massSlider.setMajorTickSpacing(100);
		massSlider.setMaximum(1001);
		massSlider.setMinimum(1);
		massSlider.setMinorTickSpacing(10);
		massSlider.setPaintLabels(true);
		massSlider.setPaintTicks(true);
		massSlider
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.3"));
		massSlider.setValue(100);
		massSlider.setMinimumSize(new java.awt.Dimension(200, 47));
		massSlider.setRequestFocusEnabled(false);
		massSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				massSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		massPanel.add(massSlider, gridBagConstraints);

		massTextField.setColumns(4);
		massTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		massTextField.setText("100");
		massTextField
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.3"));
		massTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		massTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				massTextFieldFocusLost(evt);
			}
		});

		massPanel.add(massTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		partPanel.add(massPanel, gridBagConstraints);

		radiusPanel.setLayout(new java.awt.GridBagLayout());

		radiusPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.4")));
		radiusPanel
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.4"));
		radiusPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		radiusSlider.setMajorTickSpacing(100);
		radiusSlider.setMaximum(1001);
		radiusSlider.setMinimum(1);
		radiusSlider.setMinorTickSpacing(10);
		radiusSlider.setPaintLabels(true);
		radiusSlider.setPaintTicks(true);
		radiusSlider
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.4"));
		radiusSlider.setValue(10);
		radiusSlider.setMinimumSize(new java.awt.Dimension(200, 47));
		radiusSlider.setRequestFocusEnabled(false);
		radiusSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				radiusSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		radiusPanel.add(radiusSlider, gridBagConstraints);

		radiusTextField.setColumns(4);
		radiusTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		radiusTextField.setText("10");
		radiusTextField
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.4"));
		radiusTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		radiusTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				radiusTextFieldFocusLost(evt);
			}
		});

		radiusPanel.add(radiusTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		partPanel.add(radiusPanel, gridBagConstraints);

		nPartPanel.setLayout(new java.awt.GridBagLayout());

		nPartPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.2")));
		nPartPanel
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.2"));
		nPartPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		nPartSlider.setMajorTickSpacing(200);
		nPartSlider.setMaximum(1001);
		nPartSlider.setMinimum(1);
		nPartSlider.setMinorTickSpacing(50);
		nPartSlider.setPaintLabels(true);
		nPartSlider.setPaintTicks(true);
		nPartSlider
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.2"));
		nPartSlider.setValue(500);
		nPartSlider.setMinimumSize(new java.awt.Dimension(200, 47));
		nPartSlider.setRequestFocusEnabled(false);
		nPartSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				nPartSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		nPartPanel.add(nPartSlider, gridBagConstraints);

		nPartTextField.setColumns(4);
		nPartTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		nPartTextField.setText("500");
		nPartTextField
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.2"));
		nPartTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		nPartTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				nPartTextFieldFocusLost(evt);
			}
		});

		nPartPanel.add(nPartTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		partPanel.add(nPartPanel, gridBagConstraints);

		mainTabbedPane
				.addTab(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.title.1"), null, partPanel, java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.1"));

		velPanel.setLayout(new java.awt.GridBagLayout());

		velPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255),
				new java.awt.Color(0, 102, 255)));
		velModPanel.setLayout(new java.awt.GridBagLayout());

		velModPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.6")));
		velModPanel
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.6"));
		velModPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		velModSlider.setMajorTickSpacing(100);
		velModSlider.setMaximum(1000);
		velModSlider.setMinorTickSpacing(10);
		velModSlider.setPaintLabels(true);
		velModSlider.setPaintTicks(true);
		velModSlider
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.6"));
		velModSlider.setValue(0);
		velModSlider.setMinimumSize(new java.awt.Dimension(200, 47));
		velModSlider.setRequestFocusEnabled(false);
		velModSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				velModSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		velModPanel.add(velModSlider, gridBagConstraints);

		velModTextField.setColumns(4);
		velModTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		velModTextField.setText("0");
		velModTextField
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.6"));
		velModTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		velModTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				velModTextFieldFocusLost(evt);
			}
		});

		velModPanel.add(velModTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		velPanel.add(velModPanel, gridBagConstraints);

		velThetaPanel.setLayout(new java.awt.GridBagLayout());

		velThetaPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.7")));
		velThetaPanel
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.7"));
		velThetaPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		velThetaSlider.setMajorTickSpacing(60);
		velThetaSlider.setMaximum(360);
		velThetaSlider.setMinorTickSpacing(10);
		velThetaSlider.setPaintLabels(true);
		velThetaSlider.setPaintTicks(true);
		velThetaSlider
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.7"));
		velThetaSlider.setValue(45);
		velThetaSlider.setMinimumSize(new java.awt.Dimension(200, 47));
		velThetaSlider.setRequestFocusEnabled(false);
		velThetaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				velThetaSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		velThetaPanel.add(velThetaSlider, gridBagConstraints);

		velThetaTextField.setColumns(4);
		velThetaTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		velThetaTextField.setText("45");
		velThetaTextField
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.7"));
		velThetaTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		velThetaTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				velThetaTextFieldFocusLost(evt);
			}
		});

		velThetaPanel.add(velThetaTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		velPanel.add(velThetaPanel, gridBagConstraints);

		velPhiPanel.setLayout(new java.awt.GridBagLayout());

		velPhiPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.8")));
		velPhiPanel
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.8"));
		velPhiPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		velPhiSlider.setMajorTickSpacing(30);
		velPhiSlider.setMaximum(180);
		velPhiSlider.setMinorTickSpacing(5);
		velPhiSlider.setPaintLabels(true);
		velPhiSlider.setPaintTicks(true);
		velPhiSlider
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.8"));
		velPhiSlider.setValue(90);
		velPhiSlider.setMinimumSize(new java.awt.Dimension(200, 47));
		velPhiSlider.setRequestFocusEnabled(false);
		velPhiSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				velPhiSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		velPhiPanel.add(velPhiSlider, gridBagConstraints);

		velPhiTextField.setColumns(4);
		velPhiTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		velPhiTextField.setText("90");
		velPhiTextField
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.8"));
		velPhiTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		velPhiTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				velPhiTextFieldFocusLost(evt);
			}
		});

		velPhiPanel.add(velPhiTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		velPanel.add(velPhiPanel, gridBagConstraints);

		mainTabbedPane
				.addTab(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.title.5"), null, velPanel, java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
						"rec.exp.customizer.tip.5"));

		langevinPanel.setLayout(new java.awt.GridBagLayout());

		langevinPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255),
				new java.awt.Color(0, 102, 255)));
		dPPanel.setLayout(new java.awt.GridBagLayout());

		dPPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.20")));
		dPPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.20"));
		dPPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		dPSlider.setMajorTickSpacing(100);
		dPSlider.setMaximum(1001);
		dPSlider.setMinimum(1);
		dPSlider.setMinorTickSpacing(10);
		dPSlider.setPaintLabels(true);
		dPSlider.setPaintTicks(true);
		dPSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.20"));
		dPSlider.setValue(10);
		dPSlider.setMinimumSize(new java.awt.Dimension(200, 47));
		dPSlider.setRequestFocusEnabled(false);
		dPSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				dPSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		dPPanel.add(dPSlider, gridBagConstraints);

		dPTextField.setColumns(4);
		dPTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		dPTextField.setText("10");
		dPTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.20"));
		dPTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		dPTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				dPTextFieldFocusLost(evt);
			}
		});

		dPPanel.add(dPTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		langevinPanel.add(dPPanel, gridBagConstraints);

		freqPanel.setLayout(new java.awt.GridBagLayout());

		freqPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.19")));
		freqPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.19"));
		freqPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		freqSlider.setMajorTickSpacing(100);
		freqSlider.setMaximum(1001);
		freqSlider.setMinimum(1);
		freqSlider.setMinorTickSpacing(10);
		freqSlider.setPaintLabels(true);
		freqSlider.setPaintTicks(true);
		freqSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.19"));
		freqSlider.setValue(25);
		freqSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				freqSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		freqPanel.add(freqSlider, gridBagConstraints);

		freqTextField.setColumns(4);
		freqTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		freqTextField.setText("25");
		freqTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.19"));
		freqTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		freqTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				freqTextFieldFocusLost(evt);
			}
		});

		freqPanel.add(freqTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		langevinPanel.add(freqPanel, gridBagConstraints);

		visPanel.setLayout(new java.awt.GridBagLayout());

		visPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.21")));
		visPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.21"));
		visPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		visSlider.setMajorTickSpacing(100);
		visSlider.setMaximum(1001);
		visSlider.setMinimum(1);
		visSlider.setMinorTickSpacing(10);
		visSlider.setPaintLabels(true);
		visSlider.setPaintTicks(true);
		visSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.21"));
		visSlider.setValue(10);
		visSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				visSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		visPanel.add(visSlider, gridBagConstraints);

		visTextField.setColumns(4);
		visTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		visTextField.setText("10");
		visTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.21"));
		visTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		visTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				visTextFieldFocusLost(evt);
			}
		});

		visPanel.add(visTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		langevinPanel.add(visPanel, gridBagConstraints);

		mainTabbedPane.addTab(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.18"), null, langevinPanel, java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.18"));

		simulSettingsPanel.setLayout(new java.awt.GridBagLayout());

		simulSettingsPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255),
				new java.awt.Color(0, 102, 255)));
		tbsPanel.setLayout(new java.awt.GridBagLayout());

		tbsPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.tbs")));
		tbsPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.tip.tbs"));
		tbsPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		tbsSlider.setMajorTickSpacing(50);
		tbsSlider.setMaximum(500);
		tbsSlider.setMinimum(50);
		tbsSlider.setMinorTickSpacing(10);
		tbsSlider.setPaintLabels(true);
		tbsSlider.setPaintTicks(true);
		tbsSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.tip.tbs"));
		tbsSlider.setValue(100);
		tbsSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				tbsSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		tbsPanel.add(tbsSlider, gridBagConstraints);

		tbsTextField.setColumns(4);
		tbsTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		tbsTextField.setText("100");
		tbsTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.tip.tbs"));
		tbsTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		tbsTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				tbsTextFieldFocusLost(evt);
			}
		});

		tbsPanel.add(tbsTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
		simulSettingsPanel.add(tbsPanel, gridBagConstraints);

		samplesPanel.setLayout(new java.awt.GridBagLayout());

		samplesPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.samples")));
		samplesPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.tip.samples"));
		samplesPanel.setMinimumSize(new java.awt.Dimension(82, 83));
		samplesPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		samplesSlider.setMajorTickSpacing(50);
		samplesSlider.setMaximum(250);
		samplesSlider.setMinimum(50);
		samplesSlider.setMinorTickSpacing(10);
		samplesSlider.setPaintLabels(true);
		samplesSlider.setPaintTicks(true);
		samplesSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.tip.samples"));
		samplesSlider.setValue(150);
		samplesSlider.setMinimumSize(new java.awt.Dimension(200, 47));
		samplesSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				samplesSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		samplesPanel.add(samplesSlider, gridBagConstraints);

		samplesTextField.setColumns(4);
		samplesTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		samplesTextField.setText("150");
		samplesTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.tip.samples"));
		samplesTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		samplesTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				samplesTextFieldFocusLost(evt);
			}
		});

		samplesPanel.add(samplesTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		simulSettingsPanel.add(samplesPanel, gridBagConstraints);

		mainTabbedPane.addTab(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.27"), null, simulSettingsPanel, java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.27"));

		graphicsPanel.setLayout(new java.awt.GridBagLayout());

		graphicsPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255),
				new java.awt.Color(0, 102, 255)));
		graph2Panel.setLayout(new java.awt.GridBagLayout());

		graph2Panel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.32")));
		graph2XComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
		graph2XComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "X^2", "Y", "Y^2", "Z",
				"Z^2", "| r |", "| r |^2", "t", "Vx", "Vx^2", "Vy", "Vy^2", "Vz", "Vz^2", "| v |", "| v |^2" }));
		graph2XComboBox.setSelectedIndex(8);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		graph2Panel.add(graph2XComboBox, gridBagConstraints);

		graph2YComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
		graph2YComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "X^2", "Y", "Y^2", "Z",
				"Z^2", "| r |", "| r |^2", "t", "Vx", "Vx^2", "Vy", "Vy^2", "Vz", "Vz^2", "| v |", "| v |^2" }));
		graph2YComboBox.setSelectedIndex(15);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		graph2Panel.add(graph2YComboBox, gridBagConstraints);

		graph2MedCheckBox.setSelected(true);
		graph2MedCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.41"));
		graph2MedCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.41"));
		graph2Panel.add(graph2MedCheckBox, new java.awt.GridBagConstraints());

		graph2ActCheckBox.setSelected(true);
		graph2ActCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.15"));
		graph2ActCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.15"));
		graph2ActCheckBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				graph2ActCheckBoxActionPerformed(evt);
			}
		});

		graph2Panel.add(graph2ActCheckBox, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		graphicsPanel.add(graph2Panel, gridBagConstraints);

		graph3Panel.setLayout(new java.awt.GridBagLayout());

		graph3Panel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.33")));
		graph3XComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
		graph3XComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "X^2", "Y", "Y^2", "Z",
				"Z^2", "| r |", "| r |^2", "t", "Vx", "Vx^2", "Vy", "Vy^2", "Vz", "Vz^2", "| v |", "| v |^2" }));
		graph3XComboBox.setSelectedIndex(8);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		graph3Panel.add(graph3XComboBox, gridBagConstraints);

		graph3YComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
		graph3YComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "X^2", "Y", "Y^2", "Z",
				"Z^2", "| r |", "| r |^2", "t", "Vx", "Vx^2", "Vy", "Vy^2", "Vz", "Vz^2", "| v |", "| v |^2" }));
		graph3YComboBox.setSelectedIndex(7);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		graph3Panel.add(graph3YComboBox, gridBagConstraints);

		graph3MedCheckBox.setSelected(true);
		graph3MedCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.41"));
		graph3MedCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.41"));
		graph3Panel.add(graph3MedCheckBox, new java.awt.GridBagConstraints());

		graph3ActCheckBox.setSelected(true);
		graph3ActCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.15"));
		graph3ActCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.15"));
		graph3ActCheckBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				graph3ActCheckBoxActionPerformed(evt);
			}
		});

		graph3Panel.add(graph3ActCheckBox, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		graphicsPanel.add(graph3Panel, gridBagConstraints);

		graph4Panel.setLayout(new java.awt.GridBagLayout());

		graph4Panel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.34")));
		graph4XComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
		graph4XComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "X^2", "Y", "Y^2", "Z",
				"Z^2", "| r |", "| r |^2", "t", "Vx", "Vx^2", "Vy", "Vy^2", "Vz", "Vz^2", "| v |", "| v |^2" }));
		graph4XComboBox.setSelectedIndex(8);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		graph4Panel.add(graph4XComboBox, gridBagConstraints);

		graph4YComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
		graph4YComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "X^2", "Y", "Y^2", "Z",
				"Z^2", "| r |", "| r |^2", "t", "Vx", "Vx^2", "Vy", "Vy^2", "Vz", "Vz^2", "| v |", "| v |^2" }));
		graph4YComboBox.setSelectedIndex(16);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		graph4Panel.add(graph4YComboBox, gridBagConstraints);

		graph4MedCheckBox.setSelected(true);
		graph4MedCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.41"));
		graph4MedCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.41"));
		graph4Panel.add(graph4MedCheckBox, new java.awt.GridBagConstraints());

		graph4ActCheckBox.setSelected(true);
		graph4ActCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.15"));
		graph4ActCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.15"));
		graph4ActCheckBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				graph4ActCheckBoxActionPerformed(evt);
			}
		});

		graph4Panel.add(graph4ActCheckBox, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		graphicsPanel.add(graph4Panel, gridBagConstraints);

		graph1Panel.setLayout(new java.awt.GridBagLayout());

		graph1Panel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.31")));
		graph1XComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
		graph1XComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "X^2", "Y", "Y^2", "Z",
				"Z^2", "| r |", "| r |^2", "t", "Vx", "Vx^2", "Vy", "Vy^2", "Vz", "Vz^2", "| v |", "| v |^2" }));
		graph1XComboBox.setSelectedIndex(8);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		graph1Panel.add(graph1XComboBox, gridBagConstraints);

		graph1YComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
		graph1YComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "X^2", "Y", "Y^2", "Z",
				"Z^2", "| r |", "| r |^2", "t", "Vx", "Vx^2", "Vy", "Vy^2", "Vz", "Vz^2", "| v |", "| v |^2" }));
		graph1YComboBox.setSelectedIndex(6);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		graph1Panel.add(graph1YComboBox, gridBagConstraints);

		graph1MedCheckBox.setSelected(true);
		graph1MedCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.41"));
		graph1MedCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.41"));
		graph1Panel.add(graph1MedCheckBox, new java.awt.GridBagConstraints());

		graph1ActCheckBox.setSelected(true);
		graph1ActCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.15"));
		graph1ActCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.15"));
		graph1ActCheckBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				graph1ActCheckBoxActionPerformed(evt);
			}
		});

		graph1Panel.add(graph1ActCheckBox, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		graphicsPanel.add(graph1Panel, gridBagConstraints);

		genGraphsPanel.setLayout(new java.awt.GridBagLayout());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		graphicsPanel.add(genGraphsPanel, gridBagConstraints);

		mainTabbedPane.addTab(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.30"), null, graphicsPanel, java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.30"));

		genChartsPanel.setLayout(new java.awt.GridBagLayout());

		genChartsPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255),
				new java.awt.Color(0, 102, 255)));
		genPosPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.39")));
		genPosPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.39"));
		xCheckBox.setSelected(true);
		xCheckBox.setText("X");
		genPosPanel.add(xCheckBox);

		yCheckBox.setSelected(true);
		yCheckBox.setText("Y");
		genPosPanel.add(yCheckBox);

		zCheckBox.setSelected(true);
		zCheckBox.setText("Z");
		genPosPanel.add(zCheckBox);

		posModCheckBox.setSelected(true);
		posModCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.35"));
		posModCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.35"));
		genPosPanel.add(posModCheckBox);

		posQuadCheckBox.setSelected(true);
		posQuadCheckBox.setText("^2");
		posQuadCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.43"));
		genPosPanel.add(posQuadCheckBox);

		genPosGraphActCheckBox.setSelected(true);
		genPosGraphActCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.15"));
		genPosGraphActCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.15"));
		genPosGraphActCheckBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				genPosGraphActCheckBoxActionPerformed(evt);
			}
		});

		genPosPanel.add(genPosGraphActCheckBox);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		genChartsPanel.add(genPosPanel, gridBagConstraints);

		genVelPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.40")));
		genVelPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.40"));
		vxCheckBox.setSelected(true);
		vxCheckBox.setText("Vx");
		genVelPanel.add(vxCheckBox);

		vyCheckBox.setSelected(true);
		vyCheckBox.setText("Vy");
		genVelPanel.add(vyCheckBox);

		vzCheckBox.setSelected(true);
		vzCheckBox.setText("Vz");
		genVelPanel.add(vzCheckBox);

		velModCheckBox.setSelected(true);
		velModCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.36"));
		velModCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.36"));
		genVelPanel.add(velModCheckBox);

		velQuadCheckBox.setSelected(true);
		velQuadCheckBox.setText("^2");
		velQuadCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.43"));
		genVelPanel.add(velQuadCheckBox);

		genVelGraphActCheckBox.setSelected(true);
		genVelGraphActCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.15"));
		genVelGraphActCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.15"));
		genVelGraphActCheckBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				genVelGraphActCheckBoxActionPerformed(evt);
			}
		});

		genVelPanel.add(genVelGraphActCheckBox);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		genChartsPanel.add(genVelPanel, gridBagConstraints);

		mainTabbedPane.addTab(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.42"), null, genChartsPanel, java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.42"));

		animaPanel.setLayout(new java.awt.GridBagLayout());

		animaPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255),
				new java.awt.Color(0, 102, 255)));
		radiusAnimaPanel.setLayout(new java.awt.GridBagLayout());

		radiusAnimaPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.23")));
		radiusAnimaPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.23"));
		radiusAnimaSlider.setMajorTickSpacing(1);
		radiusAnimaSlider.setMaximum(6);
		radiusAnimaSlider.setMinimum(1);
		radiusAnimaSlider.setPaintLabels(true);
		radiusAnimaSlider.setPaintTicks(true);
		radiusAnimaSlider.setSnapToTicks(true);
		radiusAnimaSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.23"));
		radiusAnimaSlider.setValue(3);
		radiusAnimaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				radiusAnimaSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		radiusAnimaPanel.add(radiusAnimaSlider, gridBagConstraints);

		radiusAnimaTextField.setColumns(4);
		radiusAnimaTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		radiusAnimaTextField.setText("3");
		radiusAnimaTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.23"));
		radiusAnimaTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		radiusAnimaTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				radiusAnimaTextFieldFocusLost(evt);
			}
		});

		radiusAnimaPanel.add(radiusAnimaTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		animaPanel.add(radiusAnimaPanel, gridBagConstraints);

		animaActCheckBox.setSelected(true);
		animaActCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.37"));
		animaActCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.37"));
		animaActCheckBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				animaActCheckBoxActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		animaPanel.add(animaActCheckBox, gridBagConstraints);

		mainTabbedPane.addTab(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.22"), null, animaPanel, java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.22"));

		chartSettingsPanel.setLayout(new java.awt.GridBagLayout());

		chartSettingsPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255),
				new java.awt.Color(0, 102, 255)));
		widthPanel.setLayout(new java.awt.GridBagLayout());

		widthPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.47")));
		widthPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.47"));
		widthPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		widthPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		widthSlider.setMajorTickSpacing(500);
		widthSlider.setMaximum(1550);
		widthSlider.setMinimum(50);
		widthSlider.setMinorTickSpacing(100);
		widthSlider.setPaintLabels(true);
		widthSlider.setPaintTicks(true);
		widthSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.47"));
		widthSlider.setValue(800);
		widthSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		widthSlider.setEnabled(false);
		widthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				widthSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		widthPanel.add(widthSlider, gridBagConstraints);

		widthTextField.setColumns(4);
		widthTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		widthTextField.setText("800");
		widthTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.47"));
		widthTextField.setEnabled(false);
		widthTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				widthTextFieldFocusLost(evt);
			}
		});

		widthPanel.add(widthTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		chartSettingsPanel.add(widthPanel, gridBagConstraints);

		heightPanel.setLayout(new java.awt.GridBagLayout());

		heightPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.48")));
		heightPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.48"));
		heightPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		heightPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		heightSlider.setMajorTickSpacing(500);
		heightSlider.setMaximum(1550);
		heightSlider.setMinimum(50);
		heightSlider.setMinorTickSpacing(100);
		heightSlider.setPaintLabels(true);
		heightSlider.setPaintTicks(true);
		heightSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.48"));
		heightSlider.setValue(800);
		heightSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		heightSlider.setEnabled(false);
		heightSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				heightSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		heightPanel.add(heightSlider, gridBagConstraints);

		heightTextField.setColumns(4);
		heightTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		heightTextField.setText("800");
		heightTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.48"));
		heightTextField.setEnabled(false);
		heightTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				heightTextFieldFocusLost(evt);
			}
		});

		heightPanel.add(heightTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		chartSettingsPanel.add(heightPanel, gridBagConstraints);

		resAdaptedCheckBox.setSelected(true);
		resAdaptedCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.50"));
		resAdaptedCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.50"));
		resAdaptedCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		resAdaptedCheckBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				resAdaptedCheckBoxActionPerformed(evt);
			}
		});

		otherResSettPanel.add(resAdaptedCheckBox);

		connectedPointsCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.49"));
		connectedPointsCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.49"));
		connectedPointsCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		otherResSettPanel.add(connectedPointsCheckBox);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		chartSettingsPanel.add(otherResSettPanel, gridBagConstraints);

		mainTabbedPane.addTab(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages").getString(
				"rec.exp.customizer.title.46"), null, chartSettingsPanel, java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vmvbrown/resources/messages")
				.getString("rec.exp.customizer.tip.46"));

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		add(mainTabbedPane, gridBagConstraints);

	}// GEN-END:initComponents

	private void animaActCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_animaActCheckBoxActionPerformed
		if (animaActCheckBox.isSelected()) {
			radiusAnimaSlider.setEnabled(true);
			radiusSlider.setEnabled(true);
			tbsSlider.setEnabled(true);
			tbsTextField.setEnabled(true);
		} else {
			radiusAnimaSlider.setEnabled(false);
			radiusSlider.setEnabled(false);
			tbsSlider.setEnabled(false);
			tbsTextField.setEnabled(false);
		}
	}// GEN-LAST:event_animaActCheckBoxActionPerformed

	private void resAdaptedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_resAdaptedCheckBoxActionPerformed
		if (resAdaptedCheckBox.isSelected()) {
			heightSlider.setEnabled(false);
			heightTextField.setEnabled(false);
			widthSlider.setEnabled(false);
			widthTextField.setEnabled(false);
		} else {
			heightSlider.setEnabled(true);
			heightTextField.setEnabled(true);
			widthSlider.setEnabled(true);
			widthTextField.setEnabled(true);
		}
	}// GEN-LAST:event_resAdaptedCheckBoxActionPerformed

	private void heightTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_heightTextFieldFocusLost
		try {
			double val = GUtils.validateInput(heightTextField, heightSlider, 1);
		} catch (NumberFormatException e) {
			heightTextField.setText(Integer.toString(heightSlider.getValue()));
		}
	}// GEN-LAST:event_heightTextFieldFocusLost

	private void widthTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_widthTextFieldFocusLost
		try {
			double val = GUtils.validateInput(widthTextField, widthSlider, 1);
		} catch (NumberFormatException e) {
			widthTextField.setText(Integer.toString(widthSlider.getValue()));
		}
	}// GEN-LAST:event_widthTextFieldFocusLost

	private void heightSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_heightSliderStateChanged
		heightTextField.setText("" + heightSlider.getValue());
	}// GEN-LAST:event_heightSliderStateChanged

	private void widthSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_widthSliderStateChanged
		widthTextField.setText("" + widthSlider.getValue());
	}// GEN-LAST:event_widthSliderStateChanged

	private void graph4ActCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_graph4ActCheckBoxActionPerformed
		if (graph4ActCheckBox.isSelected()) {
			graph4XComboBox.setEnabled(true);
			graph4YComboBox.setEnabled(true);
			graph4MedCheckBox.setEnabled(true);
		} else {
			graph4XComboBox.setEnabled(false);
			graph4YComboBox.setEnabled(false);
			graph4MedCheckBox.setEnabled(false);
		}
	}// GEN-LAST:event_graph4ActCheckBoxActionPerformed

	private void graph3ActCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_graph3ActCheckBoxActionPerformed
		if (graph3ActCheckBox.isSelected()) {
			graph3XComboBox.setEnabled(true);
			graph3YComboBox.setEnabled(true);
			graph3MedCheckBox.setEnabled(true);
		} else {
			graph3XComboBox.setEnabled(false);
			graph3YComboBox.setEnabled(false);
			graph3MedCheckBox.setEnabled(false);
		}
	}// GEN-LAST:event_graph3ActCheckBoxActionPerformed

	private void graph2ActCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_graph2ActCheckBoxActionPerformed
		if (graph2ActCheckBox.isSelected()) {
			graph2XComboBox.setEnabled(true);
			graph2YComboBox.setEnabled(true);
			graph2MedCheckBox.setEnabled(true);
		} else {
			graph2XComboBox.setEnabled(false);
			graph2YComboBox.setEnabled(false);
			graph2MedCheckBox.setEnabled(false);
		}
	}// GEN-LAST:event_graph2ActCheckBoxActionPerformed

	private void graph1ActCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_graph1ActCheckBoxActionPerformed
		if (graph1ActCheckBox.isSelected()) {
			graph1XComboBox.setEnabled(true);
			graph1YComboBox.setEnabled(true);
			graph1MedCheckBox.setEnabled(true);
		} else {
			graph1XComboBox.setEnabled(false);
			graph1YComboBox.setEnabled(false);
			graph1MedCheckBox.setEnabled(false);
		}
	}// GEN-LAST:event_graph1ActCheckBoxActionPerformed

	private void genVelGraphActCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_genVelGraphActCheckBoxActionPerformed
		if (genVelGraphActCheckBox.isSelected()) {
			vxCheckBox.setEnabled(true);
			vyCheckBox.setEnabled(true);
			vzCheckBox.setEnabled(true);
			velModCheckBox.setEnabled(true);
			velQuadCheckBox.setEnabled(true);
		} else {
			vxCheckBox.setEnabled(false);
			vyCheckBox.setEnabled(false);
			vzCheckBox.setEnabled(false);
			velModCheckBox.setEnabled(false);
			velQuadCheckBox.setEnabled(false);
		}
	}// GEN-LAST:event_genVelGraphActCheckBoxActionPerformed

	private void genPosGraphActCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_genPosGraphActCheckBoxActionPerformed
		if (genPosGraphActCheckBox.isSelected()) {
			xCheckBox.setEnabled(true);
			yCheckBox.setEnabled(true);
			zCheckBox.setEnabled(true);
			posModCheckBox.setEnabled(true);
			posQuadCheckBox.setEnabled(true);
		} else {
			xCheckBox.setEnabled(false);
			yCheckBox.setEnabled(false);
			zCheckBox.setEnabled(false);
			posModCheckBox.setEnabled(false);
			posQuadCheckBox.setEnabled(false);
		}
	}// GEN-LAST:event_genPosGraphActCheckBoxActionPerformed

	private void radiusAnimaTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_radiusAnimaTextFieldFocusLost
		try {
			double val = GUtils.validateInput(radiusAnimaTextField, radiusAnimaSlider, 1);
		} catch (NumberFormatException e) {
			radiusAnimaTextField.setText(Integer.toString(radiusAnimaSlider.getValue()));
		}
	}// GEN-LAST:event_radiusAnimaTextFieldFocusLost

	private void radiusAnimaSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_radiusAnimaSliderStateChanged
		radiusAnimaTextField.setText("" + radiusAnimaSlider.getValue());
	}// GEN-LAST:event_radiusAnimaSliderStateChanged

	private void dTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_dTextFieldFocusLost
		try {
			double val = GUtils.validateInput(dTextField, dSlider, 1);
		} catch (NumberFormatException e) {
			dTextField.setText(Integer.toString(dSlider.getValue()));
		}
	}// GEN-LAST:event_dTextFieldFocusLost

	private void dSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_dSliderStateChanged
		dTextField.setText("" + dSlider.getValue());
	}// GEN-LAST:event_dSliderStateChanged

	private void randomRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_randomRadioButtonActionPerformed
		dSlider.setEnabled(true);
		dTextField.setEnabled(true);

		massSlider.setEnabled(false);
		massTextField.setEnabled(false);

		radiusSlider.setEnabled(false);
		radiusTextField.setEnabled(false);

		velModSlider.setEnabled(false);
		velModTextField.setEnabled(false);
		velPhiSlider.setEnabled(false);
		velPhiTextField.setEnabled(false);
		velThetaSlider.setEnabled(false);
		velThetaTextField.setEnabled(false);

		visSlider.setEnabled(false);
		visTextField.setEnabled(false);
		freqSlider.setEnabled(false);
		freqTextField.setEnabled(false);
		dPSlider.setEnabled(false);
		dPTextField.setEnabled(false);

		velModCheckBox.setEnabled(false);
		velQuadCheckBox.setEnabled(false);
		vxCheckBox.setEnabled(false);
		vyCheckBox.setEnabled(false);
		vzCheckBox.setEnabled(false);

		setGraphVelBoxes(false);
	}// GEN-LAST:event_randomRadioButtonActionPerformed

	private void setGraphVelBoxes(boolean set) {
		setGraphVel(graph1XComboBox, set);
		setGraphVel(graph1YComboBox, set);
		setGraphVel(graph2XComboBox, set);
		setGraphVel(graph2YComboBox, set);
		setGraphVel(graph3XComboBox, set);
		setGraphVel(graph3YComboBox, set);
		setGraphVel(graph4XComboBox, set);
		setGraphVel(graph4YComboBox, set);
	}

	private void setGraphVel(javax.swing.JComboBox cBox, boolean set) {
		if (!set) {
			cBox.removeItem("Vx");
			cBox.removeItem("Vx^2");
			cBox.removeItem("Vy");
			cBox.removeItem("Vy^2");
			cBox.removeItem("Vz");
			cBox.removeItem("Vz^2");
			cBox.removeItem("| v |");
			cBox.removeItem("| v |^2");
		} else {
			cBox.addItem("Vx");
			cBox.addItem("Vx^2");
			cBox.addItem("Vy");
			cBox.addItem("Vy^2");
			cBox.addItem("Vz");
			cBox.addItem("Vz^2");
			cBox.addItem("| v |");
			cBox.addItem("| v |^2");
		}
	}

	private void langevinRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_langevinRadioButtonActionPerformed
		massSlider.setEnabled(true);
		massTextField.setEnabled(true);

		radiusSlider.setEnabled(true);
		radiusTextField.setEnabled(true);

		velModSlider.setEnabled(true);
		velModTextField.setEnabled(true);
		velPhiSlider.setEnabled(true);
		velPhiTextField.setEnabled(true);
		velThetaSlider.setEnabled(true);
		velThetaTextField.setEnabled(true);

		visSlider.setEnabled(true);
		visTextField.setEnabled(true);
		freqSlider.setEnabled(true);
		freqTextField.setEnabled(true);
		dPSlider.setEnabled(true);
		dPTextField.setEnabled(true);

		velModCheckBox.setEnabled(true);
		velQuadCheckBox.setEnabled(true);
		vxCheckBox.setEnabled(true);
		vyCheckBox.setEnabled(true);
		vzCheckBox.setEnabled(true);

		setGraphVelBoxes(true);

		dSlider.setEnabled(false);
		dTextField.setEnabled(false);
	}// GEN-LAST:event_langevinRadioButtonActionPerformed

	private void dPSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_dPSliderStateChanged
		dPTextField.setText("" + dPSlider.getValue());
	}// GEN-LAST:event_dPSliderStateChanged

	private void visTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_visTextFieldFocusLost
		try {
			double val = GUtils.validateInput(visTextField, visSlider, 1);
		} catch (NumberFormatException e) {
			visTextField.setText(Integer.toString(visSlider.getValue()));
		}
	}// GEN-LAST:event_visTextFieldFocusLost

	private void freqTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_freqTextFieldFocusLost
		try {
			double val = GUtils.validateInput(freqTextField, freqSlider, 1);
		} catch (NumberFormatException e) {
			freqTextField.setText(Integer.toString(freqSlider.getValue()));
		}
	}// GEN-LAST:event_freqTextFieldFocusLost

	private void visSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_visSliderStateChanged
		visTextField.setText("" + visSlider.getValue());
	}// GEN-LAST:event_visSliderStateChanged

	private void freqSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_freqSliderStateChanged
		freqTextField.setText("" + freqSlider.getValue());
	}// GEN-LAST:event_freqSliderStateChanged

	private void dPTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_dPTextFieldFocusLost
		try {
			double val = GUtils.validateInput(dPTextField, dPSlider, 1);
		} catch (NumberFormatException e) {
			dPTextField.setText(Integer.toString(dPSlider.getValue()));
		}
	}// GEN-LAST:event_dPTextFieldFocusLost

	private void velPhiTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_velPhiTextFieldFocusLost
		try {
			double val = GUtils.validateInput(velPhiTextField, velPhiSlider, 1);
		} catch (NumberFormatException e) {
			velPhiTextField.setText(Integer.toString(velPhiSlider.getValue()));
		}
	}// GEN-LAST:event_velPhiTextFieldFocusLost

	private void velPhiSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_velPhiSliderStateChanged
		velPhiTextField.setText("" + velPhiSlider.getValue());
	}// GEN-LAST:event_velPhiSliderStateChanged

	private void velThetaTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_velThetaTextFieldFocusLost
		try {
			double val = GUtils.validateInput(velThetaTextField, velThetaSlider, 1);
		} catch (NumberFormatException e) {
			velThetaTextField.setText(Integer.toString(velThetaSlider.getValue()));
		}
	}// GEN-LAST:event_velThetaTextFieldFocusLost

	private void velThetaSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_velThetaSliderStateChanged
		velThetaTextField.setText("" + velThetaSlider.getValue());
	}// GEN-LAST:event_velThetaSliderStateChanged

	private void velModTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_velModTextFieldFocusLost
		try {
			double val = GUtils.validateInput(velModTextField, velModSlider, 1);
		} catch (NumberFormatException e) {
			velModTextField.setText(Integer.toString(velModSlider.getValue()));
		}
	}// GEN-LAST:event_velModTextFieldFocusLost

	private void velModSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_velModSliderStateChanged
		velModTextField.setText("" + velModSlider.getValue());
	}// GEN-LAST:event_velModSliderStateChanged

	private void radiusTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_radiusTextFieldFocusLost
		try {
			double val = GUtils.validateInput(radiusTextField, radiusSlider, 1);
		} catch (NumberFormatException e) {
			radiusTextField.setText(Integer.toString(radiusSlider.getValue()));
		}
	}// GEN-LAST:event_radiusTextFieldFocusLost

	private void radiusSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_radiusSliderStateChanged
		radiusTextField.setText("" + radiusSlider.getValue());
	}// GEN-LAST:event_radiusSliderStateChanged

	private void massTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_massTextFieldFocusLost
		try {
			double val = GUtils.validateInput(massTextField, massSlider, 1);
		} catch (NumberFormatException e) {
			massTextField.setText(Integer.toString(massSlider.getValue()));
		}
	}// GEN-LAST:event_massTextFieldFocusLost

	private void massSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_massSliderStateChanged
		massTextField.setText("" + massSlider.getValue());
	}// GEN-LAST:event_massSliderStateChanged

	private void nPartTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_nPartTextFieldFocusLost
		try {
			double val = GUtils.validateInput(nPartTextField, nPartSlider, 1);
		} catch (NumberFormatException e) {
			nPartTextField.setText(Integer.toString(nPartSlider.getValue()));
		}
	}// GEN-LAST:event_nPartTextFieldFocusLost

	private void nPartSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_nPartSliderStateChanged
		nPartTextField.setText("" + nPartSlider.getValue());
	}// GEN-LAST:event_nPartSliderStateChanged

	private void samplesTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_samplesTextFieldFocusLost
		try {
			double val = GUtils.validateInput(samplesTextField, samplesSlider, 1);
		} catch (NumberFormatException e) {
			samplesTextField.setText(Integer.toString(samplesSlider.getValue()));
		}
	}// GEN-LAST:event_samplesTextFieldFocusLost

	private void tbsTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_tbsTextFieldFocusLost
		try {
			double val = GUtils.validateInput(tbsTextField, tbsSlider, 1);
		} catch (NumberFormatException e) {
			tbsTextField.setText(Integer.toString(tbsSlider.getValue()));
		}
	}// GEN-LAST:event_tbsTextFieldFocusLost

	private void samplesSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_samplesSliderStateChanged
		samplesTextField.setText("" + samplesSlider.getValue());
	}// GEN-LAST:event_samplesSliderStateChanged

	private void tbsSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_tbsSliderStateChanged
		tbsTextField.setText("" + tbsSlider.getValue());
	}// GEN-LAST:event_tbsSliderStateChanged

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformed
		fireICustomizerListenerCanceled();
	}// GEN-LAST:event_cancelButtonActionPerformed

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okButtonActionPerformed
		acqConfig.setSelectedFrequency(new Frequency((double) tbsSlider.getValue(), hardwareInfo
				.getHardwareFrequencies(0).getMinimumFrequency().getMultiplier(), hardwareInfo
				.getHardwareFrequencies(0).getMinimumFrequency().getFrequencyDefType()));
		acqConfig.setTotalSamples(samplesSlider.getValue());

		acqConfig.getSelectedHardwareParameter("langevin").setParameterValue(
				"" + (langevinRadioButton.isSelected() ? 1 : 0));

		if (langevinRadioButton.isSelected()) {

			boolean velModulus = false;
			boolean vx = false;
			boolean vy = false;
			boolean vz = false;

			if (genVelGraphActCheckBox.isSelected()) {
				velModulus = velModCheckBox.isSelected();
				vx = vxCheckBox.isSelected();
				vy = vyCheckBox.isSelected();
				vz = vzCheckBox.isSelected();
			}

			acqConfig.getSelectedHardwareParameter("velModulus").setParameterValue("" + (velModulus ? 1 : 0));
			acqConfig.getSelectedHardwareParameter("velQuad").setParameterValue(
					"" + (velQuadCheckBox.isSelected() ? 1 : 0));
			acqConfig.getSelectedHardwareParameter("vx").setParameterValue("" + (vx ? 1 : 0));
			acqConfig.getSelectedHardwareParameter("vy").setParameterValue("" + (vy ? 1 : 0));
			acqConfig.getSelectedHardwareParameter("vz").setParameterValue("" + (vz ? 1 : 0));

			double mass = (double) massSlider.getValue() / 100d;
			double radius = (double) radiusSlider.getValue() / 100d;
			double velMod = (double) velModSlider.getValue() / 100d;
			double velTheta = Math.toRadians(velThetaSlider.getValue());

			double freq = (double) freqSlider.getValue() / 100d;
			double dP = (double) dPSlider.getValue() / 100d;
			double vis = (double) visSlider.getValue() / 1000d;

			acqConfig.getSelectedHardwareParameter("mass").setParameterValue("" + (float) mass);
			acqConfig.getSelectedHardwareParameter("radius").setParameterValue("" + (float) radius);

			acqConfig.getSelectedHardwareParameter("velMod").setParameterValue("" + (float) velMod);
			acqConfig.getSelectedHardwareParameter("velTheta").setParameterValue("" + (float) velTheta);
			if (dim3RadioButton.isSelected()) {
				double velPhi = Math.toRadians(velPhiSlider.getValue());
				acqConfig.getSelectedHardwareParameter("velPhi").setParameterValue("" + (float) velPhi);
			}
			acqConfig.getSelectedHardwareParameter("freq").setParameterValue("" + (float) freq);
			acqConfig.getSelectedHardwareParameter("dP").setParameterValue("" + (float) dP);
			acqConfig.getSelectedHardwareParameter("vis").setParameterValue("" + (float) vis);
		} else {
			double d = (double) dSlider.getValue() / 10d;
			acqConfig.getSelectedHardwareParameter("d").setParameterValue("" + (float) d);
		}

		acqConfig.getSelectedHardwareParameter("radiusAnima").setParameterValue(
				"" + (byte) radiusAnimaSlider.getValue());

		boolean posModulus = false;
		boolean x = false;
		boolean y = false;
		boolean z = false;

		if (genPosGraphActCheckBox.isSelected()) {
			posModulus = posModCheckBox.isSelected();
			x = xCheckBox.isSelected();
			y = yCheckBox.isSelected();
			z = zCheckBox.isSelected();
		}

		acqConfig.getSelectedHardwareParameter("posModulus").setParameterValue("" + (posModulus ? 1 : 0));
		acqConfig.getSelectedHardwareParameter("posQuad")
				.setParameterValue("" + (posQuadCheckBox.isSelected() ? 1 : 0));
		acqConfig.getSelectedHardwareParameter("x").setParameterValue("" + (x ? 1 : 0));
		acqConfig.getSelectedHardwareParameter("y").setParameterValue("" + (y ? 1 : 0));
		acqConfig.getSelectedHardwareParameter("z").setParameterValue("" + (z ? 1 : 0));

		acqConfig.getSelectedHardwareParameter("nPart").setParameterValue("" + nPartSlider.getValue());

		if (dim1RadioButton.isSelected())
			acqConfig.getSelectedHardwareParameter("dim").setParameterValue("" + (byte) 1);
		else if (dim2RadioButton.isSelected())
			acqConfig.getSelectedHardwareParameter("dim").setParameterValue("" + (byte) 2);
		else
			acqConfig.getSelectedHardwareParameter("dim").setParameterValue("" + (byte) 3);

		if (graph1ActCheckBox.isSelected()) {
			String graph1 = ((String) graph1XComboBox.getSelectedItem()).toString().concat(
					" vs " + ((String) graph1YComboBox.getSelectedItem()).toString());
			acqConfig.getSelectedHardwareParameter("graph1").setParameterValue("" + graph1);
		} else
			acqConfig.getSelectedHardwareParameter("graph1").setParameterValue("");

		if (graph2ActCheckBox.isSelected()) {
			String graph2 = ((String) graph2XComboBox.getSelectedItem()).toString().concat(
					" vs " + ((String) graph2YComboBox.getSelectedItem()).toString());
			acqConfig.getSelectedHardwareParameter("graph2").setParameterValue("" + graph2);
		} else
			acqConfig.getSelectedHardwareParameter("graph2").setParameterValue("");

		if (graph3ActCheckBox.isSelected()) {
			String graph3 = ((String) graph3XComboBox.getSelectedItem()).toString().concat(
					" vs " + ((String) graph3YComboBox.getSelectedItem()).toString());
			acqConfig.getSelectedHardwareParameter("graph3").setParameterValue("" + graph3);
		} else
			acqConfig.getSelectedHardwareParameter("graph3").setParameterValue("");

		if (graph4ActCheckBox.isSelected()) {
			String graph4 = ((String) graph4XComboBox.getSelectedItem()).toString().concat(
					" vs " + ((String) graph4YComboBox.getSelectedItem()).toString());
			acqConfig.getSelectedHardwareParameter("graph4").setParameterValue("" + graph4);
		} else
			acqConfig.getSelectedHardwareParameter("graph4").setParameterValue("");

		acqConfig.getSelectedHardwareParameter("graph1Med").setParameterValue(
				"" + (graph1MedCheckBox.isSelected() ? 1 : 0));
		acqConfig.getSelectedHardwareParameter("graph2Med").setParameterValue(
				"" + (graph2MedCheckBox.isSelected() ? 1 : 0));
		acqConfig.getSelectedHardwareParameter("graph3Med").setParameterValue(
				"" + (graph3MedCheckBox.isSelected() ? 1 : 0));
		acqConfig.getSelectedHardwareParameter("graph4Med").setParameterValue(
				"" + (graph4MedCheckBox.isSelected() ? 1 : 0));

		if (resAdaptedCheckBox.isSelected()) {
			acqConfig.getSelectedHardwareParameter("w").setParameterValue("" + getWidth());
			acqConfig.getSelectedHardwareParameter("h").setParameterValue("" + getHeight());
		} else {
			acqConfig.getSelectedHardwareParameter("w").setParameterValue("" + (short) widthSlider.getValue());
			acqConfig.getSelectedHardwareParameter("h").setParameterValue("" + (short) heightSlider.getValue());

		}

		acqConfig.getSelectedHardwareParameter("conPts").setParameterValue(
				"" + (connectedPointsCheckBox.isSelected() ? 1 : 0));
		acqConfig.getSelectedHardwareParameter("animaAct").setParameterValue(
				"" + (animaActCheckBox.isSelected() ? 1 : 0));

		for (int i = 0; i < acqConfig.getSelectedHardwareParameters().length; i++)
			System.out.println(acqConfig.getSelectedHardwareParameters(i).getParameterName() + " = "
					+ acqConfig.getSelectedHardwareParameters(i).getParameterValue());

		fireICustomizerListenerDone();
	}// GEN-LAST:event_okButtonActionPerformed

	private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_defaultButtonActionPerformed
		tbsSlider.setValue(100);
		samplesSlider.setValue(1000);

		graph1XComboBox.setSelectedItem("t");
		graph1YComboBox.setSelectedItem("| r |");
		graph2XComboBox.setSelectedItem("t");
		graph2YComboBox.setSelectedItem("| v |");
		graph3XComboBox.setSelectedItem("t");
		graph3YComboBox.setSelectedItem("| r |^2");
		graph4XComboBox.setSelectedItem("t");
		graph4YComboBox.setSelectedItem("| v |^2");

		graph1MedCheckBox.setSelected(true);
		graph2MedCheckBox.setSelected(true);
		graph3MedCheckBox.setSelected(true);
		graph4MedCheckBox.setSelected(true);

		vxCheckBox.setSelected(true);
		vyCheckBox.setSelected(true);
		vzCheckBox.setSelected(true);
		velQuadCheckBox.setSelected(true);
		velModCheckBox.setSelected(true);

		xCheckBox.setSelected(true);
		yCheckBox.setSelected(true);
		zCheckBox.setSelected(true);
		posQuadCheckBox.setSelected(true);
		posModCheckBox.setSelected(true);

		radiusAnimaSlider.setValue(3);

		dim2RadioButton.setSelected(true);
		langevinRadioButton.setSelected(true);
		langevinRadioButtonActionPerformed(null);
		dSlider.setValue(50);

		nPartSlider.setValue(2000);
		massSlider.setValue(100);
		radiusSlider.setValue(10);

		velModSlider.setValue(0);
		velThetaSlider.setValue(45);
		velPhiSlider.setValue(90);

		freqSlider.setValue(25);
		dPSlider.setValue(10);
		visSlider.setValue(10);

		graph1ActCheckBox.setSelected(true);
		graph1ActCheckBoxActionPerformed(null);
		graph2ActCheckBox.setSelected(true);
		graph2ActCheckBoxActionPerformed(null);
		graph3ActCheckBox.setSelected(true);
		graph3ActCheckBoxActionPerformed(null);
		graph4ActCheckBox.setSelected(true);
		graph4ActCheckBoxActionPerformed(null);
		genPosGraphActCheckBox.setSelected(true);
		genPosGraphActCheckBoxActionPerformed(null);
		genVelGraphActCheckBox.setSelected(true);
		genVelGraphActCheckBoxActionPerformed(null);

		widthSlider.setValue(800);
		heightSlider.setValue(800);
		resAdaptedCheckBox.setSelected(true);
		resAdaptedCheckBoxActionPerformed(null);
		connectedPointsCheckBox.setSelected(false);

		animaActCheckBox.setSelected(true);
		animaActCheckBoxActionPerformed(null);
	}// GEN-LAST:event_defaultButtonActionPerformed

	public static void main(String args[]) {
		javax.swing.JFrame test = new javax.swing.JFrame();
		test.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		test.getContentPane().add(new MvBrownCustomizer());
		test.pack();
		test.setVisible(true);
	}

	// ****************************REC********************************************/

	/** Utility field used by event firing mechanism. */
	private javax.swing.event.EventListenerList listenerList = null;

	/**
	 * Registers ICustomizerListener to receive events.
	 * 
	 * @param listener The listener to register.
	 */
	public synchronized void addICustomizerListener(ICustomizerListener listener) {
		if (listenerList == null) {
			listenerList = new javax.swing.event.EventListenerList();
		}
		listenerList.add(ICustomizerListener.class, listener);
	}

	/**
	 * Removes ICustomizerListener from the list of listeners.
	 * 
	 * @param listener The listener to remove.
	 */
	public synchronized void removeICustomizerListener(ICustomizerListener listener) {
		listenerList.remove(ICustomizerListener.class, listener);
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerCanceled() {
		if (listenerList == null)
			return;
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {
				((ICustomizerListener) listeners[i + 1]).canceled();
			}
		}
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerDone() {
		if (listenerList == null)
			return;
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {

				((ICustomizerListener) listeners[i + 1]).done();
			}
		}
	}

	private HardwareInfo hardwareInfo = null;
	private HardwareAcquisitionConfig acqConfig = null;

	public HardwareAcquisitionConfig getAcquisitionConfig() {
		return acqConfig;
	}

	public void setHardwareAcquisitionConfig(HardwareAcquisitionConfig acqConfig) {
		this.acqConfig = acqConfig;
		if (acqConfig != null) {
			// samplesSlider.setValue(acqConfig.getTotalSamples());
			// tbsSlider.setValue((int)
			// acqConfig.getSelectedFrequency().getFrequency());

			radiusAnimaSlider.setValue(Byte.parseByte(acqConfig.getSelectedHardwareParameterValue("radiusAnima")));

			nPartSlider.setValue(Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("nPart")));

			switch (Byte.parseByte(acqConfig.getSelectedHardwareParameterValue("dim"))) {
			case 1:
				dim1RadioButton.setSelected(true);
				break;
			case 2:
				dim2RadioButton.setSelected(true);
				break;
			case 3:
				dim3RadioButton.setSelected(true);
			}

			if (acqConfig.getSelectedHardwareParameterValue("langevin").trim().equals("1") ? true : false)
				langevinRadioButton.setSelected(true);
			else
				randomRadioButton.setSelected(true);

			if (langevinRadioButton.isSelected()) {

				boolean vx = acqConfig.getSelectedHardwareParameterValue("vx").trim().equals("1") ? true : false;
				boolean vy = acqConfig.getSelectedHardwareParameterValue("vy").trim().equals("1") ? true : false;
				boolean vz = acqConfig.getSelectedHardwareParameterValue("vz").trim().equals("1") ? true : false;
				boolean velModulus = acqConfig.getSelectedHardwareParameterValue("velModulus").trim().equals("1") ? true
						: false;

				if (vx || vy || vz || velModulus) {
					velModCheckBox.setSelected(velModulus);
					velQuadCheckBox.setSelected(acqConfig.getSelectedHardwareParameterValue("velQuad").trim().equals(
							"1") ? true : false);
					vxCheckBox.setSelected(vx);
					vyCheckBox.setSelected(vy);
					vzCheckBox.setSelected(vz);
				} else {
					genVelGraphActCheckBox.setSelected(false);
					genVelGraphActCheckBoxActionPerformed(null);
				}
				massSlider.setValue((int) Math.round(Float.parseFloat(acqConfig
						.getSelectedHardwareParameterValue("mass")) * 100));
				radiusSlider.setValue((int) Math.round(Float.parseFloat(acqConfig
						.getSelectedHardwareParameterValue("radius")) * 100));

				velModSlider.setValue((int) Math.round(Float.parseFloat(acqConfig
						.getSelectedHardwareParameterValue("velMod")) * 100));
				velThetaSlider.setValue((int) Math.round(Math.toDegrees(Float.parseFloat(acqConfig
						.getSelectedHardwareParameterValue("velTheta")))));
				if (dim3RadioButton.isSelected())
					velPhiSlider.setValue((int) Math.round(Math.toDegrees(Float.parseFloat(acqConfig
							.getSelectedHardwareParameterValue("velPhi")))));

				freqSlider.setValue((int) Math.round(Float.parseFloat(acqConfig
						.getSelectedHardwareParameterValue("freq")) * 100));
				dPSlider.setValue((int) Math
						.round(Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("dP")) * 100));
				visSlider.setValue((int) Math.round(Float
						.parseFloat(acqConfig.getSelectedHardwareParameterValue("vis")) * 1000));
			} else {
				dSlider.setValue((int) Math
						.round(Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("d")) * 10));
			}

			boolean x = acqConfig.getSelectedHardwareParameterValue("x").trim().equals("1") ? true : false;
			boolean y = acqConfig.getSelectedHardwareParameterValue("y").trim().equals("1") ? true : false;
			boolean z = acqConfig.getSelectedHardwareParameterValue("z").trim().equals("1") ? true : false;
			boolean posModulus = acqConfig.getSelectedHardwareParameterValue("posModulus").trim().equals("1") ? true
					: false;

			if (x || y || z || posModulus) {
				posModCheckBox.setSelected(posModulus);
				posQuadCheckBox
						.setSelected(acqConfig.getSelectedHardwareParameterValue("posQuad").trim().equals("1") ? true
								: false);
				xCheckBox.setSelected(x);
				yCheckBox.setSelected(y);
				zCheckBox.setSelected(z);
			} else {
				genPosGraphActCheckBox.setSelected(false);
				genPosGraphActCheckBoxActionPerformed(null);
			}

			String str;
			if (!(str = acqConfig.getSelectedHardwareParameterValue("graph1")).equalsIgnoreCase("")) {
				String[] graph = str.split(" vs ");
				graph1XComboBox.setSelectedItem(graph[0]);
				graph1YComboBox.setSelectedItem(graph[1]);
				graph1MedCheckBox.setSelected(acqConfig.getSelectedHardwareParameterValue("graph1Med").trim().equals(
						"1") ? true : false);
			} else {
				graph1ActCheckBox.setSelected(false);
				graph1ActCheckBoxActionPerformed(null);
			}
			if (!(str = acqConfig.getSelectedHardwareParameterValue("graph2")).equalsIgnoreCase("")) {
				String[] graph = str.split(" vs ");
				graph2XComboBox.setSelectedItem(graph[0]);
				graph2YComboBox.setSelectedItem(graph[1]);
				graph2MedCheckBox.setSelected(acqConfig.getSelectedHardwareParameterValue("graph2Med").trim().equals(
						"1") ? true : false);
			} else {
				graph2ActCheckBox.setSelected(false);
				graph2ActCheckBoxActionPerformed(null);
			}
			if (!(str = acqConfig.getSelectedHardwareParameterValue("graph3")).equalsIgnoreCase("")) {
				String[] graph = str.split(" vs ");
				graph3XComboBox.setSelectedItem(graph[0]);
				graph3YComboBox.setSelectedItem(graph[1]);
				graph3MedCheckBox.setSelected(acqConfig.getSelectedHardwareParameterValue("graph3Med").trim().equals(
						"1") ? true : false);
			} else {
				graph3ActCheckBox.setSelected(false);
				graph3ActCheckBoxActionPerformed(null);
			}
			if (!(str = acqConfig.getSelectedHardwareParameterValue("graph4")).equalsIgnoreCase("")) {
				String[] graph = str.split(" vs ");
				graph4XComboBox.setSelectedItem(graph[0]);
				graph4YComboBox.setSelectedItem(graph[1]);
				graph4MedCheckBox.setSelected(acqConfig.getSelectedHardwareParameterValue("graph4Med").trim().equals(
						"1") ? true : false);
			} else {
				graph4ActCheckBox.setSelected(false);
				graph4ActCheckBoxActionPerformed(null);
			}

			widthSlider.setValue(Short.parseShort(acqConfig.getSelectedHardwareParameterValue("w")));
			heightSlider.setValue(Short.parseShort(acqConfig.getSelectedHardwareParameterValue("h")));

			animaActCheckBox
					.setSelected(acqConfig.getSelectedHardwareParameterValue("animaAct").trim().equals("1") ? true
							: false);
			animaActCheckBoxActionPerformed(null);

			connectedPointsCheckBox.setSelected(acqConfig.getSelectedHardwareParameterValue("conPts").trim()
					.equals("1") ? true : false);
		}
	}

	public void setHardwareInfo(HardwareInfo hardwareInfo) {
		this.hardwareInfo = hardwareInfo;
	}

	protected HardwareInfo getHardwareInfo() {
		return this.hardwareInfo;
	}

	public javax.swing.JComponent getCustomizerComponent() {
		return this;
	}

	public javax.swing.ImageIcon getCustomizerIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/vmvbrown/resources/mvbrown_iconified.gif"));
	}

	public String getCustomizerTitle() {
		return "Brownian Motion Configuration Utility";
	}

	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JCheckBox animaActCheckBox;
	private javax.swing.ButtonGroup animaButtonGroup;
	private javax.swing.JPanel animaPanel;
	private javax.swing.JPanel btnPanel;
	private javax.swing.JButton cancelButton;
	private javax.swing.JPanel chartSettingsPanel;
	private javax.swing.JCheckBox connectedPointsCheckBox;
	private javax.swing.JPanel controlBtnPanel;
	private javax.swing.JPanel dPPanel;
	private javax.swing.JSlider dPSlider;
	private javax.swing.JTextField dPTextField;
	private javax.swing.JPanel dPanel;
	private javax.swing.JSlider dSlider;
	private javax.swing.JTextField dTextField;
	private javax.swing.JPanel defConfBtnPanel;
	private javax.swing.JButton defaultButton;
	private javax.swing.JRadioButton dim1RadioButton;
	private javax.swing.JRadioButton dim2RadioButton;
	private javax.swing.JRadioButton dim3RadioButton;
	private javax.swing.ButtonGroup dimButtonGroup;
	private javax.swing.JPanel dimPanel;
	private javax.swing.JPanel freqPanel;
	private javax.swing.JSlider freqSlider;
	private javax.swing.JTextField freqTextField;
	private javax.swing.JPanel genChartsPanel;
	private javax.swing.JPanel genGraphsPanel;
	private javax.swing.JCheckBox genPosGraphActCheckBox;
	private javax.swing.JPanel genPosPanel;
	private javax.swing.JCheckBox genVelGraphActCheckBox;
	private javax.swing.JPanel genVelPanel;
	private javax.swing.JCheckBox graph1ActCheckBox;
	private javax.swing.JCheckBox graph1MedCheckBox;
	private javax.swing.JPanel graph1Panel;
	private javax.swing.JComboBox graph1XComboBox;
	private javax.swing.JComboBox graph1YComboBox;
	private javax.swing.JCheckBox graph2ActCheckBox;
	private javax.swing.JCheckBox graph2MedCheckBox;
	private javax.swing.JPanel graph2Panel;
	private javax.swing.JComboBox graph2XComboBox;
	private javax.swing.JComboBox graph2YComboBox;
	private javax.swing.JCheckBox graph3ActCheckBox;
	private javax.swing.JCheckBox graph3MedCheckBox;
	private javax.swing.JPanel graph3Panel;
	private javax.swing.JComboBox graph3XComboBox;
	private javax.swing.JComboBox graph3YComboBox;
	private javax.swing.JCheckBox graph4ActCheckBox;
	private javax.swing.JCheckBox graph4MedCheckBox;
	private javax.swing.JPanel graph4Panel;
	private javax.swing.JComboBox graph4XComboBox;
	private javax.swing.JComboBox graph4YComboBox;
	private javax.swing.JPanel graphicsPanel;
	private javax.swing.JPanel heightPanel;
	private javax.swing.JSlider heightSlider;
	private javax.swing.JTextField heightTextField;
	private javax.swing.JPanel langevinPanel;
	private javax.swing.JRadioButton langevinRadioButton;
	private javax.swing.JPanel mainPanel;
	private javax.swing.JTabbedPane mainTabbedPane;
	private javax.swing.JPanel massPanel;
	private javax.swing.JSlider massSlider;
	private javax.swing.JTextField massTextField;
	private javax.swing.ButtonGroup modelButtonGroup;
	private javax.swing.JPanel modelPanel;
	private javax.swing.JPanel nPartPanel;
	private javax.swing.JSlider nPartSlider;
	private javax.swing.JTextField nPartTextField;
	private javax.swing.JButton okButton;
	private javax.swing.JPanel otherResSettPanel;
	private javax.swing.JPanel partPanel;
	private javax.swing.JCheckBox posModCheckBox;
	private javax.swing.JCheckBox posQuadCheckBox;
	private javax.swing.JPanel radiusAnimaPanel;
	private javax.swing.JSlider radiusAnimaSlider;
	private javax.swing.JTextField radiusAnimaTextField;
	private javax.swing.JPanel radiusPanel;
	private javax.swing.JSlider radiusSlider;
	private javax.swing.JTextField radiusTextField;
	private javax.swing.JRadioButton randomRadioButton;
	private javax.swing.JCheckBox resAdaptedCheckBox;
	private javax.swing.JPanel samplesPanel;
	private javax.swing.JSlider samplesSlider;
	private javax.swing.JTextField samplesTextField;
	private javax.swing.JPanel simulSettingsPanel;
	private javax.swing.JPanel tbsPanel;
	private javax.swing.JSlider tbsSlider;
	private javax.swing.JTextField tbsTextField;
	private javax.swing.JCheckBox velModCheckBox;
	private javax.swing.JPanel velModPanel;
	private javax.swing.JSlider velModSlider;
	private javax.swing.JTextField velModTextField;
	private javax.swing.JPanel velPanel;
	private javax.swing.JPanel velPhiPanel;
	private javax.swing.JSlider velPhiSlider;
	private javax.swing.JTextField velPhiTextField;
	private javax.swing.JCheckBox velQuadCheckBox;
	private javax.swing.JPanel velThetaPanel;
	private javax.swing.JSlider velThetaSlider;
	private javax.swing.JTextField velThetaTextField;
	private javax.swing.JPanel visPanel;
	private javax.swing.JSlider visSlider;
	private javax.swing.JTextField visTextField;
	private javax.swing.JCheckBox vxCheckBox;
	private javax.swing.JCheckBox vyCheckBox;
	private javax.swing.JCheckBox vzCheckBox;
	private javax.swing.JPanel widthPanel;
	private javax.swing.JSlider widthSlider;
	private javax.swing.JTextField widthTextField;
	private javax.swing.JCheckBox xCheckBox;
	private javax.swing.JCheckBox yCheckBox;
	private javax.swing.JCheckBox zCheckBox;
	// End of variables declaration//GEN-END:variables

}
