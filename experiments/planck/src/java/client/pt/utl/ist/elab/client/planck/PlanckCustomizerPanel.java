/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PlanckCustomizerPanel.java
 *
 * Created on 09-Nov-2010, 11:29:48
 */
package pt.utl.ist.elab.client.planck;

import javax.swing.JFormattedTextField;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.synch.Frequency;
import com.linkare.rec.impl.client.customizer.AbstractCustomizer;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

/**
 * 
 * @author npadriano
 */
public class PlanckCustomizerPanel extends AbstractCustomizer {

	/** Generated UID */
	private static final long serialVersionUID = -6367415208236048245L;

	public static final int NUMBER_OF_SAMPLES_FOR_SERIES = 1625;
	public static final int PROTOCOL_1_WAIT_MS = 20000;
	public static final int PROTOCOL_2_SAMPLING_INTERVAL_MS = 44;

	/** Creates new form PlanckCustomizerPanel */
	public PlanckCustomizerPanel() {
		initComponents();

		initComponentsManual();
		validateScreen();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanelPlanck = new javax.swing.JPanel();
        jPanelPlanckColor = new javax.swing.JPanel();
        jRadioButton1PlanckColor = new javax.swing.JRadioButton();
        jRadioButton2PlanckColor = new javax.swing.JRadioButton();
        jRadioButton3PlanckColor = new javax.swing.JRadioButton();
        jRadioButton4PlanckColor = new javax.swing.JRadioButton();
        jRadioButton5PlanckColor = new javax.swing.JRadioButton();
        jPanelPlanckIntensity = new javax.swing.JPanel();
        jSliderPlanckIntensity = new javax.swing.JSlider();
        jFormattedTextFieldPlanckIntensity = new javax.swing.JFormattedTextField();
        jPanelPlanckTimeSamples = new javax.swing.JPanel();
        jSliderPlanckTimeSamples = new javax.swing.JSlider();
        jFormattedTextFieldPlanckTimeSamples = new javax.swing.JFormattedTextField();
        jPanelPlanckNumberSamples = new javax.swing.JPanel();
        jSliderPlanckNumberSamples = new javax.swing.JSlider();
        jFormattedTextFieldPlanckNumberSamples = new javax.swing.JFormattedTextField();
        jPanelControlButtons = new javax.swing.JPanel();
        jButtonOk = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jButtonDefaultConfig = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(350, 490));
        setName("OpticaCustomizer"); // NOI18N
        setPreferredSize(new java.awt.Dimension(350, 490));
        setLayout(new java.awt.BorderLayout());

        jPanelPlanck.setName("jPanelPlanck"); // NOI18N
        jPanelPlanck.setPreferredSize(new java.awt.Dimension(350, 372));

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(PlanckCustomizerPanel.class);
        jPanelPlanckColor.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanelPlanckColor.border.title"))); // NOI18N
        jPanelPlanckColor.setName("jPanelPlanckColor"); // NOI18N
        jPanelPlanckColor.setPreferredSize(new java.awt.Dimension(330, 126));

        buttonGroup1.add(jRadioButton1PlanckColor);
        jRadioButton1PlanckColor.setSelected(true);
        jRadioButton1PlanckColor.setText(resourceMap.getString("jRadioButton1PlanckColor.text")); // NOI18N
        jRadioButton1PlanckColor.setName("jRadioButton1PlanckColor"); // NOI18N
        jRadioButton1PlanckColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1PlanckColorActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2PlanckColor);
        jRadioButton2PlanckColor.setText(resourceMap.getString("jRadioButton2PlanckColor.text")); // NOI18N
        jRadioButton2PlanckColor.setName("jRadioButton2PlanckColor"); // NOI18N

        buttonGroup1.add(jRadioButton3PlanckColor);
        jRadioButton3PlanckColor.setText(resourceMap.getString("jRadioButton3PlanckColor.text")); // NOI18N
        jRadioButton3PlanckColor.setName("jRadioButton3PlanckColor"); // NOI18N

        buttonGroup1.add(jRadioButton4PlanckColor);
        jRadioButton4PlanckColor.setText(resourceMap.getString("jRadioButton4PlanckColor.text")); // NOI18N
        jRadioButton4PlanckColor.setName("jRadioButton4PlanckColor"); // NOI18N

        buttonGroup1.add(jRadioButton5PlanckColor);
        jRadioButton5PlanckColor.setText(resourceMap.getString("jRadioButton5PlanckColor.text")); // NOI18N
        jRadioButton5PlanckColor.setName("jRadioButton5PlanckColor"); // NOI18N

        javax.swing.GroupLayout jPanelPlanckColorLayout = new javax.swing.GroupLayout(jPanelPlanckColor);
        jPanelPlanckColor.setLayout(jPanelPlanckColorLayout);
        jPanelPlanckColorLayout.setHorizontalGroup(
            jPanelPlanckColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlanckColorLayout.createSequentialGroup()
                .addGroup(jPanelPlanckColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jRadioButton1PlanckColor)
                    .addComponent(jRadioButton2PlanckColor)
                    .addComponent(jRadioButton3PlanckColor))
                .addGap(86, 86, 86)
                .addGroup(jPanelPlanckColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton4PlanckColor)
                    .addComponent(jRadioButton5PlanckColor))
                .addGap(114, 114, 114))
        );
        jPanelPlanckColorLayout.setVerticalGroup(
            jPanelPlanckColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlanckColorLayout.createSequentialGroup()
                .addGroup(jPanelPlanckColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPlanckColorLayout.createSequentialGroup()
                        .addComponent(jRadioButton4PlanckColor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton5PlanckColor))
                    .addGroup(jPanelPlanckColorLayout.createSequentialGroup()
                        .addComponent(jRadioButton1PlanckColor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2PlanckColor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton3PlanckColor, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanelPlanckIntensity.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanelPlanckIntensity.border.title"))); // NOI18N
        jPanelPlanckIntensity.setName("jPanelPlanckIntensity"); // NOI18N
        jPanelPlanckIntensity.setPreferredSize(new java.awt.Dimension(330, 126));

        jSliderPlanckIntensity.setMajorTickSpacing(10);
        jSliderPlanckIntensity.setMinorTickSpacing(1);
        jSliderPlanckIntensity.setPaintLabels(true);
        jSliderPlanckIntensity.setSnapToTicks(true);
        jSliderPlanckIntensity.setMinimumSize(new java.awt.Dimension(250, 16));
        jSliderPlanckIntensity.setName("jSliderPlanckIntensity"); // NOI18N
        jSliderPlanckIntensity.setPreferredSize(new java.awt.Dimension(250, 42));
        jSliderPlanckIntensity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderPlanckIntensityStateChanged(evt);
            }
        });

        jFormattedTextFieldPlanckIntensity.setText(resourceMap.getString("jFormattedTextFieldPlanckIntensity.text")); // NOI18N
        jFormattedTextFieldPlanckIntensity.setMaximumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldPlanckIntensity.setMinimumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldPlanckIntensity.setName("jFormattedTextFieldPlanckIntensity"); // NOI18N
        jFormattedTextFieldPlanckIntensity.setPreferredSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldPlanckIntensity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldPlanckIntensityFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanelPlanckIntensityLayout = new javax.swing.GroupLayout(jPanelPlanckIntensity);
        jPanelPlanckIntensity.setLayout(jPanelPlanckIntensityLayout);
        jPanelPlanckIntensityLayout.setHorizontalGroup(
            jPanelPlanckIntensityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlanckIntensityLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSliderPlanckIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFormattedTextFieldPlanckIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelPlanckIntensityLayout.setVerticalGroup(
            jPanelPlanckIntensityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlanckIntensityLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPlanckIntensityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFormattedTextFieldPlanckIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSliderPlanckIntensity, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanelPlanckTimeSamples.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanelPlanckTimeSamples.border.title"))); // NOI18N
        jPanelPlanckTimeSamples.setName("jPanelPlanckTimeSamples"); // NOI18N
        jPanelPlanckTimeSamples.setPreferredSize(new java.awt.Dimension(330, 126));

        jSliderPlanckTimeSamples.setMajorTickSpacing(149);
        jSliderPlanckTimeSamples.setMaximum(900);
        jSliderPlanckTimeSamples.setMinimum(6);
        jSliderPlanckTimeSamples.setMinorTickSpacing(1);
        jSliderPlanckTimeSamples.setPaintLabels(true);
        jSliderPlanckTimeSamples.setSnapToTicks(true);
        jSliderPlanckTimeSamples.setMinimumSize(new java.awt.Dimension(250, 16));
        jSliderPlanckTimeSamples.setName("jSliderPlanckTimeSamples"); // NOI18N
        jSliderPlanckTimeSamples.setPreferredSize(new java.awt.Dimension(250, 42));
        jSliderPlanckTimeSamples.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderPlanckTimeSamplesStateChanged(evt);
            }
        });

        jFormattedTextFieldPlanckTimeSamples.setText(resourceMap.getString("jFormattedTextFieldPlanckTimeSamples.text")); // NOI18N
        jFormattedTextFieldPlanckTimeSamples.setMaximumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldPlanckTimeSamples.setMinimumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldPlanckTimeSamples.setName("jFormattedTextFieldPlanckTimeSamples"); // NOI18N
        jFormattedTextFieldPlanckTimeSamples.setPreferredSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldPlanckTimeSamples.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldPlanckTimeSamplesFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanelPlanckTimeSamplesLayout = new javax.swing.GroupLayout(jPanelPlanckTimeSamples);
        jPanelPlanckTimeSamples.setLayout(jPanelPlanckTimeSamplesLayout);
        jPanelPlanckTimeSamplesLayout.setHorizontalGroup(
            jPanelPlanckTimeSamplesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlanckTimeSamplesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSliderPlanckTimeSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFormattedTextFieldPlanckTimeSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelPlanckTimeSamplesLayout.setVerticalGroup(
            jPanelPlanckTimeSamplesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlanckTimeSamplesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPlanckTimeSamplesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFormattedTextFieldPlanckTimeSamples, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSliderPlanckTimeSamples, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanelPlanckNumberSamples.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanelPlanckNumberSamples.border.title"))); // NOI18N
        jPanelPlanckNumberSamples.setName("jPanelPlanckNumberSamples"); // NOI18N
        jPanelPlanckNumberSamples.setPreferredSize(new java.awt.Dimension(330, 126));

        jSliderPlanckNumberSamples.setMajorTickSpacing(83);
        jSliderPlanckNumberSamples.setMaximum(250);
        jSliderPlanckNumberSamples.setMinimum(1);
        jSliderPlanckNumberSamples.setMinorTickSpacing(1);
        jSliderPlanckNumberSamples.setPaintLabels(true);
        jSliderPlanckNumberSamples.setSnapToTicks(true);
        jSliderPlanckNumberSamples.setMinimumSize(new java.awt.Dimension(250, 16));
        jSliderPlanckNumberSamples.setName("jSliderPlanckNumberSamples"); // NOI18N
        jSliderPlanckNumberSamples.setPreferredSize(new java.awt.Dimension(250, 42));
        jSliderPlanckNumberSamples.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderPlanckNumberSamplesStateChanged(evt);
            }
        });

        jFormattedTextFieldPlanckNumberSamples.setText(resourceMap.getString("jFormattedTextFieldPlanckNumberSamples.text")); // NOI18N
        jFormattedTextFieldPlanckNumberSamples.setMaximumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldPlanckNumberSamples.setMinimumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldPlanckNumberSamples.setName("jFormattedTextFieldPlanckNumberSamples"); // NOI18N
        jFormattedTextFieldPlanckNumberSamples.setPreferredSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldPlanckNumberSamples.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldPlanckNumberSamplesFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanelPlanckNumberSamplesLayout = new javax.swing.GroupLayout(jPanelPlanckNumberSamples);
        jPanelPlanckNumberSamples.setLayout(jPanelPlanckNumberSamplesLayout);
        jPanelPlanckNumberSamplesLayout.setHorizontalGroup(
            jPanelPlanckNumberSamplesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlanckNumberSamplesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSliderPlanckNumberSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFormattedTextFieldPlanckNumberSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelPlanckNumberSamplesLayout.setVerticalGroup(
            jPanelPlanckNumberSamplesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlanckNumberSamplesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPlanckNumberSamplesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFormattedTextFieldPlanckNumberSamples, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSliderPlanckNumberSamples, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelPlanckLayout = new javax.swing.GroupLayout(jPanelPlanck);
        jPanelPlanck.setLayout(jPanelPlanckLayout);
        jPanelPlanckLayout.setHorizontalGroup(
            jPanelPlanckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlanckLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPlanckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelPlanckColor, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelPlanckIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelPlanckTimeSamples, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelPlanckNumberSamples, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelPlanckLayout.setVerticalGroup(
            jPanelPlanckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlanckLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelPlanckColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelPlanckIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelPlanckTimeSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelPlanckNumberSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelPlanckColor.getAccessibleContext().setAccessibleName(resourceMap.getString("jPanelAngularMomentumMaxVelocity1.AccessibleContext.accessibleName")); // NOI18N
        jPanelPlanckIntensity.getAccessibleContext().setAccessibleName(resourceMap.getString("jPanelAngularMomentumServoVelocity1.AccessibleContext.accessibleName")); // NOI18N
        jPanelPlanckTimeSamples.getAccessibleContext().setAccessibleName(resourceMap.getString("jPanelPlanckTimeSamples.AccessibleContext.accessibleName")); // NOI18N
        jPanelPlanckNumberSamples.getAccessibleContext().setAccessibleName(resourceMap.getString("jPanelPlanckNumberSamples.AccessibleContext.accessibleName")); // NOI18N

        add(jPanelPlanck, java.awt.BorderLayout.WEST);

        jPanelControlButtons.setName("jPanelControlButtons"); // NOI18N
        jPanelControlButtons.setPreferredSize(new java.awt.Dimension(350, 37));

        jButtonOk.setText(resourceMap.getString("Ok.label")); // NOI18N
        jButtonOk.setName("Ok"); // NOI18N
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jButtonCancel.setText(resourceMap.getString("Cancel.label")); // NOI18N
        jButtonCancel.setName("Cancel"); // NOI18N
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonDefaultConfig.setText(resourceMap.getString("DefaultConfig.label")); // NOI18N
        jButtonDefaultConfig.setName("DefaultConfig"); // NOI18N
        jButtonDefaultConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDefaultConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelControlButtonsLayout = new javax.swing.GroupLayout(jPanelControlButtons);
        jPanelControlButtons.setLayout(jPanelControlButtonsLayout);
        jPanelControlButtonsLayout.setHorizontalGroup(
            jPanelControlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelControlButtonsLayout.createSequentialGroup()
                .addComponent(jButtonOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCancel)
                .addGap(18, 18, 18)
                .addComponent(jButtonDefaultConfig)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanelControlButtonsLayout.setVerticalGroup(
            jPanelControlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelControlButtonsLayout.createSequentialGroup()
                .addGroup(jPanelControlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOk)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonDefaultConfig))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonOk.getAccessibleContext().setAccessibleName(resourceMap.getString("Ok.AccessibleContext.accessibleName")); // NOI18N
        jButtonCancel.getAccessibleContext().setAccessibleName(resourceMap.getString("jButtonCancel.AccessibleContext.accessibleName")); // NOI18N
        jButtonDefaultConfig.getAccessibleContext().setAccessibleName(resourceMap.getString("jButtonDefaultConfig.AccessibleContext.accessibleName")); // NOI18N

        add(jPanelControlButtons, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

        private void jSliderPlanckIntensityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderPlanckIntensityStateChanged
            sliderChanged(jSliderPlanckIntensity, jFormattedTextFieldPlanckIntensity);
}//GEN-LAST:event_jSliderPlanckIntensityStateChanged

        private void jFormattedTextFieldPlanckIntensityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldPlanckIntensityFocusLost
            formattedTextChanged(jSliderPlanckIntensity, jFormattedTextFieldPlanckIntensity);
}//GEN-LAST:event_jFormattedTextFieldPlanckIntensityFocusLost

        private void jSliderPlanckTimeSamplesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderPlanckTimeSamplesStateChanged
            sliderChanged(jSliderPlanckTimeSamples, jFormattedTextFieldPlanckTimeSamples);
}//GEN-LAST:event_jSliderPlanckTimeSamplesStateChanged

        private void jFormattedTextFieldPlanckTimeSamplesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldPlanckTimeSamplesFocusLost
            formattedTextChanged(jSliderPlanckTimeSamples, jFormattedTextFieldPlanckTimeSamples);
}//GEN-LAST:event_jFormattedTextFieldPlanckTimeSamplesFocusLost

        private void jSliderPlanckNumberSamplesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderPlanckNumberSamplesStateChanged
            sliderChanged(jSliderPlanckNumberSamples, jFormattedTextFieldPlanckNumberSamples);
}//GEN-LAST:event_jSliderPlanckNumberSamplesStateChanged

        private void jFormattedTextFieldPlanckNumberSamplesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldPlanckNumberSamplesFocusLost
            formattedTextChanged(jSliderPlanckNumberSamples, jFormattedTextFieldPlanckNumberSamples);
}//GEN-LAST:event_jFormattedTextFieldPlanckNumberSamplesFocusLost

        private void jRadioButton1PlanckColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1PlanckColorActionPerformed
            // TODO add your handling code here:
}//GEN-LAST:event_jRadioButton1PlanckColorActionPerformed

	private void jButtonCancelActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonCancelActionPerformed
		fireICustomizerListenerCanceled();
	}// GEN-LAST:event_jButtonCancelActionPerformed

	private void jButtonDefaultConfigActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonDefaultConfigActionPerformed
		// tab MomentoAngular
                jRadioButton1PlanckColor.setSelected(true);
                jRadioButton2PlanckColor.setSelected(false);
                jRadioButton3PlanckColor.setSelected(false);
                jRadioButton4PlanckColor.setSelected(false);
                jRadioButton5PlanckColor.setSelected(false);
		jSliderPlanckIntensity.setValue(50);
		jFormattedTextFieldPlanckIntensity.setText("50");
		jSliderPlanckTimeSamples.setValue(50);
		jFormattedTextFieldPlanckTimeSamples.setText("50");
                jSliderPlanckNumberSamples.setValue(50);
                jFormattedTextFieldPlanckNumberSamples.setText("50");
	}// GEN-LAST:event_jButtonDefaultConfigActionPerformed

	private void jButtonOkActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonOkActionPerformed

		int selectCheckBoxCount = 0;
		int nsamples = 0;
		Frequency freq = null;

		// inicializar parametros
		int color = 1;
                int intensity = 50;
		int timesamples = 50;
                int numbersamples = 50;

                if (jRadioButton1PlanckColor.isSelected()) {
			color = 1;
		} else if (jRadioButton2PlanckColor.isSelected()) {
			color = 2;
		} else if (jRadioButton3PlanckColor.isSelected()) {
			color = 3;
		} else if (jRadioButton4PlanckColor.isSelected()) {
			color = 4;
                } else if (jRadioButton5PlanckColor.isSelected()) {
			color = 5;
                } else {
			color = 0;
		}
                
                intensity = (int) jSliderPlanckIntensity.getValue();
                timesamples = (int) jSliderPlanckTimeSamples.getValue();
                numbersamples = (int) jSliderPlanckNumberSamples.getValue();
                
                //COMENTEI PARA COMPILAR
		getAcquisitionConfig().setTotalSamples(2500);
                getAcquisitionConfig().getSelectedHardwareParameter("cor").setParameterValue(String.valueOf(color));
		getAcquisitionConfig().getSelectedHardwareParameter("intensidade").setParameterValue(String.valueOf(intensity));
		getAcquisitionConfig().getSelectedHardwareParameter("tempoamostras").setParameterValue(String.valueOf(timesamples));
		getAcquisitionConfig().getSelectedHardwareParameter("namostras").setParameterValue(String.valueOf(numbersamples));

                //COMENTEI PARA COMPILAR
		//acqConfig.setSelectedFrequency(freq);

		fireICustomizerListenerDone();
	}// GEN-LAST:event_jButtonOkActionPerformed

	//private void jTabbedPanePlanckStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jTabbedPanePlanckStateChanged
	//	validateScreen();
	//}// GEN-LAST:event_jTabbedPanePlanckStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonDefaultConfig;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JFormattedTextField jFormattedTextFieldPlanckIntensity;
    private javax.swing.JFormattedTextField jFormattedTextFieldPlanckNumberSamples;
    private javax.swing.JFormattedTextField jFormattedTextFieldPlanckTimeSamples;
    private javax.swing.JPanel jPanelControlButtons;
    private javax.swing.JPanel jPanelPlanck;
    private javax.swing.JPanel jPanelPlanckColor;
    private javax.swing.JPanel jPanelPlanckIntensity;
    private javax.swing.JPanel jPanelPlanckNumberSamples;
    private javax.swing.JPanel jPanelPlanckTimeSamples;
    private javax.swing.JRadioButton jRadioButton1PlanckColor;
    private javax.swing.JRadioButton jRadioButton2PlanckColor;
    private javax.swing.JRadioButton jRadioButton3PlanckColor;
    private javax.swing.JRadioButton jRadioButton4PlanckColor;
    private javax.swing.JRadioButton jRadioButton5PlanckColor;
    private javax.swing.JSlider jSliderPlanckIntensity;
    private javax.swing.JSlider jSliderPlanckNumberSamples;
    private javax.swing.JSlider jSliderPlanckTimeSamples;
    // End of variables declaration//GEN-END:variables

	

	@Override
	public void setHardwareAcquisitionConfig(final HardwareAcquisitionConfig acqConfig) {
		super.setHardwareAcquisitionConfig(acqConfig);
		if (acqConfig != null) {
			System.out.println("PlanckCustomizer.setHardwareAcquisitionConfig(HardwareAcquisitionConfig  acqConfig)");
			System.out.println("acqConfig: [" + acqConfig + "]");

			// TODO
			// int nsamples = acqConfig.getTotalSamples();
			// sldNumSamples.setValue(nsamples);
			// tfNumSamples.setText("" + nsamples);
			//
			// int freq = (int) acqConfig.getSelectedFrequency().getFrequency();
			// sldFreq.setValue(freq);
			// tfFreq.setText("" + freq);
			//
			// float pos1f =
			// Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("UserPosLow"));
			// int pos1 = (int) Math.floor(pos1f * 1000.F);
			// sldPos1.setValue(pos1);
			// tfPos1.setValue(Float.valueOf(pos1f));
			//
			// float pos2f =
			// Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("UserPosHigh"));
			// int pos2 = (int) Math.floor(pos2f * 1000.F);
			// sldPos2.setValue(pos2);
			// tfPos2.setValue(Float.valueOf(pos2f));
		}
	}


	@Override
	public javax.swing.ImageIcon getCustomizerIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/planck/resources/planck_iconified.gif"));
	}

	@Override
	public String getCustomizerTitle() {
		return ReCResourceBundle.findStringOrDefault("planck$rec.exp.planck.customizer.title","planck$rec.exp.planck.customizer.title");
	}


	private void initComponentsManual() {
		// TODO
		// checkMaxNumSamples();
		// checkMaxTime();
		// checkPosOverlap();
	}

	private void validateScreen() {
		boolean valid = true;
		jButtonOk.setEnabled(valid);
	}

	private void sliderMultipliedChanged(final javax.swing.JSlider slider,
			final javax.swing.JFormattedTextField textField) {
		textField.setText(Float.toString((float) slider.getValue() / 10.F));
	}

	private void sliderChanged(final javax.swing.JSlider slider, final javax.swing.JFormattedTextField textField) {
		textField.setText(Integer.toString(slider.getValue()));
	}

	private void formattedMultipliedTextChanged(final javax.swing.JSlider slider,
			final javax.swing.JFormattedTextField textField) {
		String strPos1 = textField.getText();
		if (strPos1.trim().equals("")) {
			return;
		}
		strPos1 = strPos1.replace(",", ".");
		try {
			final int pos1 = (int) (Float.parseFloat(strPos1) * 10.F);
			if (pos1 <= slider.getMaximum() && pos1 >= slider.getMinimum()) {
				// slider.setValue(pos1 - slider.getMinimum());
				slider.setValue(pos1);
			} else {
				textField.setValue(Float.toString((float) slider.getValue() / 10.F));
			}
		} catch (final Exception e) {
			textField.setValue(Float.toString((float) slider.getValue() / 10.F));
		}
	}

	private void formattedTextChanged(final javax.swing.JSlider slider, final javax.swing.JFormattedTextField textField) {
		String strPos1 = textField.getText();
		if (strPos1.trim().equals("")) {
			return;
		}
		strPos1 = strPos1.replace(",", ".");
		try {
			final int pos1 = (int) Integer.parseInt(strPos1);
			if (pos1 <= slider.getMaximum() && pos1 >= slider.getMinimum()) {
				// slider.setValue(pos1 - slider.getMinimum());
				slider.setValue(pos1);
			} else {
				textField.setValue(slider.getValue());
			}
		} catch (final Exception e) {
			textField.setValue(slider.getValue());
		}
	}
}
