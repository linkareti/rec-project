/*
 * YoungInterfCustomizer.java
 *
 * Created on 29 de Dezembro de 2004, 16:38
 */

package pt.utl.ist.elab.client.vyounginterf;

/**
 *
 * @author  Emanuel Antunes
 */

import java.awt.Dimension;

import javax.swing.JFrame;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.metadata.HardwareInfo;
import com.linkare.rec.impl.client.customizer.ICustomizerListener;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

public class YoungInterfCustomizer extends javax.swing.JPanel implements
		com.linkare.rec.impl.client.customizer.ICustomizer {

	/** Creates new form YoungInterfCustomizer */
	public YoungInterfCustomizer() {
		initWavelenghtChooser();
		initComponents();

		java.util.Hashtable htDFendas = new java.util.Hashtable(7);
		for (int i = 0; i <= 600; i += 100) {
			htDFendas.put(new Integer(i), new javax.swing.JLabel("" + i / 100F));
		}
		htDFendas.put(new Integer(10), new javax.swing.JLabel("0.10"));
		jSliderDFendas.setLabelTable(htDFendas);

		java.util.Hashtable htDPlanos = new java.util.Hashtable(10);
		for (int i = 0; i < 601; i += 100) {
			htDPlanos.put(new Integer(i), new javax.swing.JLabel("" + i / 100F));
		}
		jSliderDPlanos.setLabelTable(htDPlanos);

		jPanelWave.add(wave);
	}

	public static void main(String args[]) {

		ReCResourceBundle.loadResourceBundle("ReCExpYoungInterf",
				"recresource:///pt/utl/ist/elab/client/vyounginterf/resources/messages);

		javax.swing.JFrame dummy = new javax.swing.JFrame();
		dummy.getContentPane().add(new YoungInterfCustomizer());
		dummy.pack();
		dummy.show();
		dummy.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

	}

	/**
	 * Este metodo e responsavel pela inicializacao do wavelenghtChooser e
	 * atribuicao de um metodo que detecta quando e alterado o valor do
	 * comprimento de onda (em nm).
	 */
	private void initWavelenghtChooser() {
		wave = new wavelenghtChooser();
		wave.setPreferredSize(new Dimension(430, 60));
		wave.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				waveStateChanged(evt);
			}
		});
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;

		jPanelBtns = new javax.swing.JPanel();
		jPanelOKCnl = new javax.swing.JPanel();
		jButtonOK = new javax.swing.JButton();
		jButtonCancel = new javax.swing.JButton();
		jPanelDfC = new javax.swing.JPanel();
		jButtonDefaultConfig = new javax.swing.JButton();
		jPanelRootControls = new javax.swing.JPanel();
		jPanelSliders = new javax.swing.JPanel();
		jPanelLAD = new javax.swing.JPanel();
		jPanelL = new javax.swing.JPanel();
		jPanelWave = new javax.swing.JPanel();
		jTextFieldWave = new javax.swing.JTextField();
		jPanelAD = new javax.swing.JPanel();
		jPanelA = new javax.swing.JPanel();
		jSliderDFendas = new javax.swing.JSlider();
		jTextFieldDFendas = new javax.swing.JTextField();
		jPanelD = new javax.swing.JPanel();
		jSliderDPlanos = new javax.swing.JSlider();
		jTextFieldDPlanos = new javax.swing.JTextField();
		jPanelArea = new javax.swing.JPanel();
		jSliderArea = new javax.swing.JSlider();
		jTextFieldArea = new javax.swing.JTextField();

		setLayout(new java.awt.BorderLayout());

		jPanelBtns.setLayout(new java.awt.GridBagLayout());

		jButtonOK.setText(ReCResourceBundle.findStringOrDefault("ReCExpYoungInterf$rec.exp.customizer.title.ok", "OK"));
		jButtonOK.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonOKActionPerformed(evt);
			}
		});

		jPanelOKCnl.add(jButtonOK);

		jButtonCancel.setText(ReCResourceBundle.findStringOrDefault(
				"ReCExpYoungInterf$rec.exp.customizer.title.cancel", "Cancel"));
		jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonCancelActionPerformed(evt);
			}
		});

		jPanelOKCnl.add(jButtonCancel);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		jPanelBtns.add(jPanelOKCnl, gridBagConstraints);

		jButtonDefaultConfig.setText(ReCResourceBundle.findStringOrDefault(
				"ReCExpYoungInterf$rec.exp.customizer.title.dfc", "Default config"));
		jButtonDefaultConfig.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonDefaultConfigActionPerformed(evt);
			}
		});

		jPanelDfC.add(jButtonDefaultConfig);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		jPanelBtns.add(jPanelDfC, gridBagConstraints);

		add(jPanelBtns, java.awt.BorderLayout.SOUTH);

		jPanelRootControls.setLayout(new javax.swing.BoxLayout(jPanelRootControls, javax.swing.BoxLayout.Y_AXIS));

		jPanelSliders.setLayout(new javax.swing.BoxLayout(jPanelSliders, javax.swing.BoxLayout.X_AXIS));

		jPanelLAD.setLayout(new javax.swing.BoxLayout(jPanelLAD, javax.swing.BoxLayout.Y_AXIS));

		jPanelL.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"ReCExpYoungInterf$rec.exp.customizer.title.1", "Wavelenght (\u03BB nm)")));
		jPanelWave.setLayout(new java.awt.BorderLayout());

		jPanelL.add(jPanelWave);

		jTextFieldWave.setColumns(4);
		jTextFieldWave.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldWave.setText("580");
		jTextFieldWave.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				jTextFieldWaveFocusLost(evt);
			}
		});

		jPanelL.add(jTextFieldWave);

		jPanelLAD.add(jPanelL);

		jPanelAD.setLayout(new javax.swing.BoxLayout(jPanelAD, javax.swing.BoxLayout.X_AXIS));

		jPanelA.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"ReCExpYoungInterf$rec.exp.customizer.title.2", "Distance between slits (mm)")));
		jSliderDFendas.setPaintLabels(true);
		jSliderDFendas.setPaintTicks(true);
		jSliderDFendas.setMinorTickSpacing(50);
		jSliderDFendas.setMajorTickSpacing(100);
		jSliderDFendas.setValue(200);
		jSliderDFendas.setMinimum(10);
		jSliderDFendas.setMaximum(600);
		jSliderDFendas.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				jSliderDFendasStateChanged(evt);
			}
		});

		jPanelA.add(jSliderDFendas);

		jTextFieldDFendas.setColumns(4);
		jTextFieldDFendas.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldDFendas.setText("2.0");
		jTextFieldDFendas.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				jTextFieldDFendasFocusLost(evt);
			}
		});

		jPanelA.add(jTextFieldDFendas);

		jPanelAD.add(jPanelA);

		jPanelD.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"ReCExpYoungInterf$rec.exp.customizer.title.3", "Distance between planes (m)")));
		jSliderDPlanos.setPaintLabels(true);
		jSliderDPlanos.setPaintTicks(true);
		jSliderDPlanos.setMinorTickSpacing(50);
		jSliderDPlanos.setMajorTickSpacing(100);
		jSliderDPlanos.setValue(400);
		jSliderDPlanos.setMinimum(100);
		jSliderDPlanos.setMaximum(600);
		jSliderDPlanos.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				jSliderDPlanosStateChanged(evt);
			}
		});

		jPanelD.add(jSliderDPlanos);

		jTextFieldDPlanos.setColumns(4);
		jTextFieldDPlanos.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldDPlanos.setText("4.00");
		jTextFieldDPlanos.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				jTextFieldDPlanosFocusLost(evt);
			}
		});

		jPanelD.add(jTextFieldDPlanos);

		jPanelAD.add(jPanelD);

		jPanelLAD.add(jPanelAD);

		jPanelSliders.add(jPanelLAD);

		jPanelArea.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"ReCExpYoungInterf$rec.exp.customizer.title.5", "Projection area width (mm)")));
		jPanelArea.setVerifyInputWhenFocusTarget(false);
		jSliderArea.setPaintLabels(true);
		jSliderArea.setOrientation(javax.swing.JSlider.VERTICAL);
		jSliderArea.setPaintTicks(true);
		jSliderArea.setMinorTickSpacing(1);
		jSliderArea.setMajorTickSpacing(2);
		jSliderArea.setValue(6);
		jSliderArea.setMinimum(1);
		jSliderArea.setMaximum(20);
		jSliderArea.setSnapToTicks(true);
		jSliderArea.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				jSliderAreaStateChanged(evt);
			}
		});

		jPanelArea.add(jSliderArea);

		jTextFieldArea.setColumns(4);
		jTextFieldArea.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldArea.setText("6.00");
		jTextFieldArea.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				jTextFieldAreaFocusLost(evt);
			}
		});

		jPanelArea.add(jTextFieldArea);

		jPanelSliders.add(jPanelArea);

		jPanelRootControls.add(jPanelSliders);

		add(jPanelRootControls, java.awt.BorderLayout.CENTER);

	}// GEN-END:initComponents

	private void jSliderAreaStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jSliderAreaStateChanged
		jTextFieldArea.setText("" + jSliderArea.getValue());
	}// GEN-LAST:event_jSliderAreaStateChanged

	private void jTextFieldAreaFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextFieldAreaFocusLost
		adjustSlider2(jSliderArea, jTextFieldArea);
	}// GEN-LAST:event_jTextFieldAreaFocusLost

	private void jTextFieldDPlanosFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextFieldDPlanosFocusLost
		adjustSlider3(jSliderDPlanos, jTextFieldDPlanos);
	}// GEN-LAST:event_jTextFieldDPlanosFocusLost

	private void jTextFieldDFendasFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextFieldDFendasFocusLost
		adjustSlider3(jSliderDFendas, jTextFieldDFendas);
	}// GEN-LAST:event_jTextFieldDFendasFocusLost

	private void jTextFieldWaveFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextFieldWaveFocusLost
		adjustSlider(wave, jTextFieldWave);
	}// GEN-LAST:event_jTextFieldWaveFocusLost

	private void jSliderDPlanosStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jSliderDPlanosStateChanged
		jTextFieldDPlanos.setText("" + jSliderDPlanos.getValue() / 100f);
	}// GEN-LAST:event_jSliderDPlanosStateChanged

	private void jSliderDFendasStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jSliderDFendasStateChanged
		jTextFieldDFendas.setText("" + jSliderDFendas.getValue() / 100f);
	}// GEN-LAST:event_jSliderDFendasStateChanged

	private void jButtonDefaultConfigActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonDefaultConfigActionPerformed
		jSliderArea.setValue(6);
		jSliderDFendas.setValue(200);
		jSliderDPlanos.setValue(400);
		wave.setValue(580);
	}// GEN-LAST:event_jButtonDefaultConfigActionPerformed

	private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonCancelActionPerformed
		fireICustomizerListenerCanceled();
	}// GEN-LAST:event_jButtonCancelActionPerformed

	private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonOKActionPerformed
		acqConfig.setTotalSamples(1080);

		// acqConfig.setSelectedFrequency(new
		// Frequency((double)jSliderTBS.getValue(),hardwareInfo.getHardwareFrequencies(0).getMinimumFrequency().getMultiplier(),hardwareInfo.getHardwareFrequencies(0).getMinimumFrequency().getFrequencyDefType()));

		acqConfig.getSelectedHardwareParameter("lambda").setParameterValue("" + wave.getValue());
		acqConfig.getSelectedHardwareParameter("dfendas").setParameterValue("" + jSliderDFendas.getValue() / 100F);
		acqConfig.getSelectedHardwareParameter("dplanos").setParameterValue("" + jSliderDPlanos.getValue() / 100F);
		acqConfig.getSelectedHardwareParameter("lpadrao").setParameterValue("" + jSliderArea.getValue());
		fireICustomizerListenerDone();
	}// GEN-LAST:event_jButtonOKActionPerformed

	public void waveStateChanged(javax.swing.event.ChangeEvent evt) {
		jTextFieldWave.setText("" + wave.getValue());
	}

	// Metodos que verificam a validade do que foi introduzido na text field
	private void adjustSlider(wavelenghtChooser waveLC, javax.swing.JTextField field) {
		int num = 0;
		try {
			num = Integer.parseInt(field.getText().trim());
		} catch (NumberFormatException nfe) {
			field.setText("" + waveLC.getValue());
		}
		if (num > waveLC.getMaximum() || num < waveLC.getMinimum())
			field.setText("" + waveLC.getValue());
		else
			waveLC.setValue(num);
	}

	private void adjustSlider2(javax.swing.JSlider slider, javax.swing.JTextField field) {
		int num = 0;
		try {
			num = (int) (Float.parseFloat(field.getText().trim()));
		} catch (NumberFormatException nfe) {
			field.setText("" + slider.getValue());
			return;
		}
		if (num > slider.getMaximum() || num < slider.getMinimum())
			field.setText("" + slider.getValue());
		else
			slider.setValue(num);
	}

	private void adjustSlider3(javax.swing.JSlider slider, javax.swing.JTextField field) {
		int num = 0;
		try {
			num = (int) (Float.parseFloat(field.getText().trim()) * 100);
		} catch (NumberFormatException nfe) {
			field.setText("" + slider.getValue() / 100f);
			return;
		}
		if (num > slider.getMaximum() || num < slider.getMinimum())
			field.setText("" + slider.getValue() / 100f);
		else
			slider.setValue(num);
	}

	public int getVirtualDimention(float dimReal, float dimVirtual, float aTransf) {
		return roundToInt(dimVirtual * aTransf / dimReal + dimVirtual / 2);
	}

	/**
	 *Arredonda um double para int de acordo com as casas decimais
	 */
	public int roundToInt(double number) {
		int rounded = 0;
		if (number % (int) number < 0.5) {
			rounded = (int) number;
		} else if (number % (int) number >= 0.5) {
			rounded = (int) number + 1;
		}
		return rounded;
	}

	// ****************************REC********************************************/
	/** Utility field used by event firing mechanism. */
	private javax.swing.event.EventListenerList listenerList = null;

	/**
	 * Registers ICustomizerListener to receive events.
	 * 
	 * @param listener The listener to register.
	 */
	public synchronized void addICustomizerListener(ICustomizerListener listener) {
		if (listenerList == null) {
			listenerList = new javax.swing.event.EventListenerList();
		}
		listenerList.add(ICustomizerListener.class, listener);
	}

	/**
	 * Removes ICustomizerListener from the list of listeners.
	 * 
	 * @param listener The listener to remove.
	 */
	public synchronized void removeICustomizerListener(ICustomizerListener listener) {
		listenerList.remove(ICustomizerListener.class, listener);
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerCanceled() {
		if (listenerList == null)
			return;
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {
				((ICustomizerListener) listeners[i + 1]).canceled();
			}
		}
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerDone() {
		if (listenerList == null)
			return;
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {

				((ICustomizerListener) listeners[i + 1]).done();
			}
		}
	}

	private HardwareInfo hardwareInfo = null;
	private HardwareAcquisitionConfig acqConfig = null;

	public HardwareAcquisitionConfig getAcquisitionConfig() {
		return acqConfig;
	}

	// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ESTE É PARA ALTERAR
	// /////////////////////////////////////////////////////////////////////////////////
	public void setHardwareAcquisitionConfig(HardwareAcquisitionConfig acqConfig) {
		// Aqui são fornecidos parametros do ultimo utilizador que fez a exp, e'
		// bom manter!
		this.acqConfig = acqConfig;
		if (acqConfig != null) {
			int lambda = (int) (Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("lambda")));
			int dfendas = (int) (Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("dfendas"))) / 100;
			int dplanos = (int) (Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("dplanos"))) / 100;
			int lpadrao = (int) (Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("lpadrao")));

			wave.setValue(lambda);
			jSliderArea.setValue(lpadrao);
			jSliderDFendas.setValue(dfendas);
			jSliderDPlanos.setValue(dplanos);
		}
	}

	public void setHardwareInfo(HardwareInfo hardwareInfo) {
		this.hardwareInfo = hardwareInfo;
	}

	protected HardwareInfo getHardwareInfo() {
		return this.hardwareInfo;
	}

	public javax.swing.JComponent getCustomizerComponent() {
		return this;
	}

	public javax.swing.ImageIcon getCustomizerIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/vyounginterf/resources/younginterf_iconified.png"));
	}

	// ESTE É PARA ALTERAR
	public String getCustomizerTitle() {
		return "Young's Interferences Experiment Configuration Utility";
	}

	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButtonCancel;
	private javax.swing.JButton jButtonDefaultConfig;
	private javax.swing.JButton jButtonOK;
	private javax.swing.JPanel jPanelA;
	private javax.swing.JPanel jPanelAD;
	private javax.swing.JPanel jPanelArea;
	private javax.swing.JPanel jPanelBtns;
	private javax.swing.JPanel jPanelD;
	private javax.swing.JPanel jPanelDfC;
	private javax.swing.JPanel jPanelL;
	private javax.swing.JPanel jPanelLAD;
	private javax.swing.JPanel jPanelOKCnl;
	private javax.swing.JPanel jPanelRootControls;
	private javax.swing.JPanel jPanelSliders;
	private javax.swing.JPanel jPanelWave;
	private javax.swing.JSlider jSliderArea;
	private javax.swing.JSlider jSliderDFendas;
	private javax.swing.JSlider jSliderDPlanos;
	private javax.swing.JTextField jTextFieldArea;
	private javax.swing.JTextField jTextFieldDFendas;
	private javax.swing.JTextField jTextFieldDPlanos;
	private javax.swing.JTextField jTextFieldWave;
	// End of variables declaration//GEN-END:variables
	private static wavelenghtChooser wave;

} // end YoungInterfCustomizer
