/*
 * mainPanel.java
 *
 * Created on 27 de Setembro de 2004, 4:01
 */

package pt.utl.ist.elab.client.thomson.displays;

/**
 *
 * @author  ivo
 */

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Insets;

import javax.swing.border.Border;

import com.linkare.rec.impl.i18n.ReCResourceBundle;


public class MainPanel extends javax.swing.JPanel implements com.linkare.rec.impl.client.experiment.ExpDataDisplay, com.linkare.rec.impl.client.experiment.ExpDataModelListener
{
    
    /** Creates new form mainPanel */
    public MainPanel()
    {
        initComponents();
        jPanel1.setBorder(new ImageBorder(new javax.swing.ImageIcon(getClass().getResource("/pt/utl/ist/elab/client/thomson/resources/mainpanelback.jpg")).getImage(), true));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jTextFieldTI = new javax.swing.JTextField();
        jTextFieldTDefleccao = new javax.swing.JTextField();
        jTextFieldTAceleracao = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(640, 480));
        jTextFieldTI.setBackground(new java.awt.Color(204, 255, 204));
        jTextFieldTI.setColumns(8);
        jTextFieldTI.setEditable(false);
        jTextFieldTI.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTI.setText("(mA)");
        jTextFieldTI.setPreferredSize(new java.awt.Dimension(92, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(54, 20, 54, 0);
        jPanel1.add(jTextFieldTI, gridBagConstraints);

        jTextFieldTDefleccao.setBackground(new java.awt.Color(204, 255, 204));
        jTextFieldTDefleccao.setColumns(8);
        jTextFieldTDefleccao.setEditable(false);
        jTextFieldTDefleccao.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTDefleccao.setText("(V)");
        jTextFieldTDefleccao.setPreferredSize(new java.awt.Dimension(92, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(23, 140, 23, 0);
        jPanel1.add(jTextFieldTDefleccao, gridBagConstraints);

        jTextFieldTAceleracao.setBackground(new java.awt.Color(204, 255, 204));
        jTextFieldTAceleracao.setColumns(8);
        jTextFieldTAceleracao.setEditable(false);
        jTextFieldTAceleracao.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTAceleracao.setText("(V)");
        jTextFieldTAceleracao.setPreferredSize(new java.awt.Dimension(92, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(140, 0, 140, 0);
        jPanel1.add(jTextFieldTAceleracao, gridBagConstraints);

        jScrollPane1.setViewportView(jPanel1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    public static void main(String args[])
    {
        
        javax.swing.JFrame dummy = new javax.swing.JFrame();
        dummy.getContentPane().add(new MainPanel(), java.awt.BorderLayout.CENTER );
        dummy.pack();
        dummy.show();
        
    }
    
    
    public class ImageBorder implements Border
    {
        private Image image;
        
        /** Creates a new instance of ImageBorder */
        public ImageBorder(Image image, boolean fill)
        {
            this.image = image;
            this.fill = fill;
        }
        
        
        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height)
        {
            if(image == null)
            {
                return;
            }
            if(!fill)
            {
                int x0 = x + (width-image.getWidth(null))/2;
                int y0 = y + (height-image.getHeight(null))/2;
                g.drawImage(image, x0, y0, null);
            }
            else
            {
                g.drawImage(image, 0, 0, width, height,  null);
            }
        }
        
        public Insets getBorderInsets(Component c)
        {
            return new Insets(0,0,0,0);
        }
        
        public boolean isBorderOpaque()
        {
            return true;
        }
        
        private boolean fill = true;
        public void setFill(boolean fill)
        {
            this.fill = fill;
        }
    }
    
    public void dataModelEnded()
    {
    }
    
    public void dataModelError()
    {
    }
    
    private String signI = "";
    
    public void dataModelStarted()
    {
        double i = Double.parseDouble(model.getAcquisitionConfig().getSelectedHardwareParameterValue("correntebobines"));

        if(i<0)
            signI = "-";        
    }
    
    public void dataModelStartedNoData()
    {
    }
    
    public void dataModelStoped()
    {
    }
    
    public void dataModelWaiting()
    {
    }
    
    public javax.swing.JComponent getDisplay()
    {
        return this;
    }
    
    public javax.swing.Icon getIcon()
    {
        return new javax.swing.ImageIcon(getClass().getResource("/pt/utl/ist/elab/client/thomson/resources/thomson_iconified.png"));
    }
    
    public javax.swing.JMenuBar getMenuBar()
    {
        return null;
    }
    
    public javax.swing.JToolBar getToolBar()
    {
        return null;
    }
    
    public void newSamples(com.linkare.rec.impl.client.experiment.NewExpDataEvent evt)
    {
        if(model == null)
            return;
                
        for(int i=evt.getSamplesStartIndex(); i<=evt.getSamplesEndIndex(); i++)
        {
            if(model.getValueAt(i, 0) != null)
                jTextFieldTI.setText(signI + model.getValueAt(i, 0).getValue().getIntValue() + " (mA)");
            if(model.getValueAt(i, 1) != null)
                jTextFieldTAceleracao.setText(model.getValueAt(i, 1).getValue().getIntValue() + " (V)");
            if(model.getValueAt(i, 2) != null)
                jTextFieldTDefleccao.setText(model.getValueAt(i, 2).getValue().getIntValue() + " (V)");
        }
    }
    
    private com.linkare.rec.impl.client.experiment.ExpDataModel model = null;
    public void setExpDataModel(com.linkare.rec.impl.client.experiment.ExpDataModel model)
    {
        if(this.model!=null)
            model.removeExpDataModelListener(this);
        
        this.model=model;
        
        if(this.model!=null)
            this.model.addExpDataModelListener(this);
    }
    
    public String getName()
    {
        return ReCResourceBundle.findStringOrDefault("ReCExpThomson$rec.exp.display.thomson.title.sensor", "Sensors");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldTAceleracao;
    private javax.swing.JTextField jTextFieldTDefleccao;
    private javax.swing.JTextField jTextFieldTI;
    // End of variables declaration//GEN-END:variables
    
}
