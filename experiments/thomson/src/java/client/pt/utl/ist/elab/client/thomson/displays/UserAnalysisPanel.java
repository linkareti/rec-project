/*
 * UserAnalysisPanel.java
 *
 * Created on September 2, 2005, 12:50 PM
 */

package pt.utl.ist.elab.client.thomson.displays;

/**
 *
 * @author Andr√© Neto - LEFT - IST
 */

import com.linkare.rec.impl.client.experiment.DataDisplayEnum;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Image;
import java.awt.Point;
import java.awt.Robot;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import com.linkare.rec.impl.i18n.ReCResourceBundle;
import com.linkare.rec.impl.utils.Defaults;

public class UserAnalysisPanel extends javax.swing.JPanel implements
		com.linkare.rec.impl.client.experiment.ExpDataDisplay,
		com.linkare.rec.impl.client.experiment.ExpDataModelListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = -7637754421473532894L;
	private Robot robot = null;
	private AnalizadorImagens imageAnalyser = null;
	private Component editingComponent = null;
	private final java.text.DecimalFormat df = new java.text.DecimalFormat("###0.0");
	private final java.text.DecimalFormat ndf = new java.text.DecimalFormat("0.0E0");
	public static final String THOMSON_N_ESP = "Thomson.N.Esp";
	private static final double N_ESP = Double.parseDouble(Defaults.defaultIfEmpty(
			System.getProperty(UserAnalysisPanel.THOMSON_N_ESP), "640"));
	public static final String THOMSON_D_ESP = "Thomson.D.Esp";
	private static final double D_ESP = Double.parseDouble(Defaults.defaultIfEmpty(
			System.getProperty(UserAnalysisPanel.THOMSON_D_ESP), "0.07"));
	private double corrente = 0;
	private double tensao = 0;
	private final double miu_0 = 8.99E-7;

	/** Creates new form UserAnalysisPanel */
	public UserAnalysisPanel() {
		initComponents();

		imageAnalyser = new AnalizadorImagens();

		try {
			robot = new Robot();
		} catch (final java.awt.AWTException awte) {
			awte.printStackTrace();
		}

		populateAll();
	}

	private void populateAll() {
		jSliderCross.setValue(imageAnalyser.CROSS);
		jSliderD1.setValue(imageAnalyser.D1);
		jSliderD2.setValue(imageAnalyser.D2);
		jSliderBeamBlue.setValue(imageAnalyser.AZUL_RAIO);
		jSliderP.setValue(imageAnalyser.P);
		jSliderRansac.setValue(imageAnalyser.RANSAC_ERROR);
		updatePreview(jPanelB1Preview,
				new Color(imageAnalyser.PRETO_R1, imageAnalyser.PRETO_G1, imageAnalyser.PRETO_B1));
		updatePreview(jPanelBluePreview, new Color(imageAnalyser.AZUL_R, imageAnalyser.AZUL_G, imageAnalyser.AZUL_B));
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()//GEN-BEGIN:initComponents
	{
		java.awt.GridBagConstraints gridBagConstraints;

		jDialogColorPicker = new javax.swing.JDialog();
		jPanelColorPicker = new javax.swing.JPanel();
		jDialogChooser = new javax.swing.JDialog();
		jPanel4 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		jLabel4 = new javax.swing.JLabel();
		jSliderBeamBlue = new javax.swing.JSlider();
		jTextFieldRBlue = new javax.swing.JTextField();
		jLabel5 = new javax.swing.JLabel();
		jSliderCross = new javax.swing.JSlider();
		jTextFieldCross = new javax.swing.JTextField();
		jLabel6 = new javax.swing.JLabel();
		jSliderD1 = new javax.swing.JSlider();
		jTextFieldD1 = new javax.swing.JTextField();
		jLabel7 = new javax.swing.JLabel();
		jSliderD2 = new javax.swing.JSlider();
		jTextFieldD2 = new javax.swing.JTextField();
		jLabel8 = new javax.swing.JLabel();
		jSliderP = new javax.swing.JSlider();
		jTextFieldP = new javax.swing.JTextField();
		jLabel9 = new javax.swing.JLabel();
		jSliderRansac = new javax.swing.JSlider();
		jTextFieldRansac = new javax.swing.JTextField();
		jPanelB1 = new javax.swing.JPanel();
		jLabel10 = new javax.swing.JLabel();
		jTextFieldB1R = new javax.swing.JTextField();
		jLabel11 = new javax.swing.JLabel();
		jTextFieldB1G = new javax.swing.JTextField();
		jLabel12 = new javax.swing.JLabel();
		jTextFieldB1B = new javax.swing.JTextField();
		jPanelB1Preview = new javax.swing.JPanel();
		jButtonB1Pick = new javax.swing.JButton();
		jButtonB1Select = new javax.swing.JButton();
		jPanelBlue = new javax.swing.JPanel();
		jLabel16 = new javax.swing.JLabel();
		jTextFieldBlueR = new javax.swing.JTextField();
		jLabel17 = new javax.swing.JLabel();
		jTextFieldBlueG = new javax.swing.JTextField();
		jLabel18 = new javax.swing.JLabel();
		jTextFieldBlueB = new javax.swing.JTextField();
		jPanelBluePreview = new javax.swing.JPanel();
		jButtonBluePick = new javax.swing.JButton();
		jButtonBlueSelect = new javax.swing.JButton();
		jPanel5 = new javax.swing.JPanel();
		jButtonEditOK = new javax.swing.JButton();
		jButtonEditCancel = new javax.swing.JButton();
		jColorChooser = new javax.swing.JColorChooser();
		jDialogZoom = new javax.swing.JDialog();
		jLabelZoom = new javax.swing.JLabel();
		jPanel7 = new javax.swing.JPanel();
		jButtonZoom = new javax.swing.JButton();
		jPanelContainer = new javax.swing.JPanel();
		jPanelOriginal = new javax.swing.JPanel();
		jLabelOriginal = new javax.swing.JLabel();
		jPanelEdge = new javax.swing.JPanel();
		jLabelEdges = new javax.swing.JLabel();
		jPanelLines = new javax.swing.JPanel();
		jLabelLines = new javax.swing.JLabel();
		jPanelAlign = new javax.swing.JPanel();
		jLabelAlign = new javax.swing.JLabel();
		jPanelBeam = new javax.swing.JPanel();
		jLabelBeam = new javax.swing.JLabel();
		jPanelFinal = new javax.swing.JPanel();
		jLabelFinal = new javax.swing.JLabel();
		jPanel6 = new javax.swing.JPanel();
		jPanel1 = new javax.swing.JPanel();
		jButtonEdit = new javax.swing.JButton();
		jPanel3 = new javax.swing.JPanel();
		jTextFieldX = new javax.swing.JTextField();
		jTextFieldY = new javax.swing.JTextField();
		jTextFieldR = new javax.swing.JTextField();
		jTextFieldI = new javax.swing.JTextField();
		jTextFieldV = new javax.swing.JTextField();
		jTextFieldQM = new javax.swing.JTextField();

		jPanelColorPicker.setPreferredSize(new java.awt.Dimension(640, 480));
		jPanelColorPicker.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseReleased(final java.awt.event.MouseEvent evt) {
				jPanelColorPickerMouseReleased(evt);
			}
		});
		jPanelColorPicker.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			public void mouseMoved(final java.awt.event.MouseEvent evt) {
				jPanelColorPickerMouseMoved(evt);
			}
		});

		jDialogColorPicker.getContentPane().add(jPanelColorPicker, java.awt.BorderLayout.CENTER);

		jPanel4.setLayout(new java.awt.GridBagLayout());

		jPanel2.setLayout(new java.awt.GridBagLayout());

		jPanel2.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.distances","thomson$rec.exp.display.distances")));
		jLabel4.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.beamblue","thomson$rec.exp.display.beamblue"));
		jLabel4.setToolTipText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.tip.beamblue","thomson$rec.exp.display.tip.beamblue"));
		jPanel2.add(jLabel4, new java.awt.GridBagConstraints());

		jSliderBeamBlue.setMaximum(255);
		jSliderBeamBlue.setMinorTickSpacing(10);
		jSliderBeamBlue.setPaintLabels(true);
		jSliderBeamBlue.setPaintTicks(true);
		jSliderBeamBlue.setValue(0);
		jSliderBeamBlue.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jSliderBeamBlueStateChanged(evt);
			}
		});

		jPanel2.add(jSliderBeamBlue, new java.awt.GridBagConstraints());

		jTextFieldRBlue.setColumns(4);
		jTextFieldRBlue.setEditable(false);
		jTextFieldRBlue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldRBlue.setText("0");
		jPanel2.add(jTextFieldRBlue, new java.awt.GridBagConstraints());

		jLabel5.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.cross","thomson$rec.exp.display.cross"));
		jLabel5.setToolTipText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.tip.cross","thomson$rec.exp.display.tip.cross"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		jPanel2.add(jLabel5, gridBagConstraints);

		jSliderCross.setMinorTickSpacing(10);
		jSliderCross.setPaintLabels(true);
		jSliderCross.setPaintTicks(true);
		jSliderCross.setValue(0);
		jSliderCross.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jSliderCrossStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		jPanel2.add(jSliderCross, gridBagConstraints);

		jTextFieldCross.setColumns(4);
		jTextFieldCross.setEditable(false);
		jTextFieldCross.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldCross.setText("0");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		jPanel2.add(jTextFieldCross, gridBagConstraints);

		jLabel6.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.d1","thomson$rec.exp.display.d1"));
		jLabel6.setToolTipText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.tip.d1","thomson$rec.exp.display.tip.d1"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		jPanel2.add(jLabel6, gridBagConstraints);

		jSliderD1.setMinorTickSpacing(10);
		jSliderD1.setPaintLabels(true);
		jSliderD1.setPaintTicks(true);
		jSliderD1.setValue(0);
		jSliderD1.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jSliderD1StateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		jPanel2.add(jSliderD1, gridBagConstraints);

		jTextFieldD1.setColumns(4);
		jTextFieldD1.setEditable(false);
		jTextFieldD1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldD1.setText("0");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 2;
		jPanel2.add(jTextFieldD1, gridBagConstraints);

		jLabel7.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.d2","thomson$rec.exp.display.d2"));
		jLabel7.setToolTipText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.tip.d2","thomson$rec.exp.display.tip.d2"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		jPanel2.add(jLabel7, gridBagConstraints);

		jSliderD2.setMaximum(255);
		jSliderD2.setMinorTickSpacing(10);
		jSliderD2.setPaintLabels(true);
		jSliderD2.setPaintTicks(true);
		jSliderD2.setValue(0);
		jSliderD2.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jSliderD2StateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 3;
		jPanel2.add(jSliderD2, gridBagConstraints);

		jTextFieldD2.setColumns(4);
		jTextFieldD2.setEditable(false);
		jTextFieldD2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldD2.setText("0");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 3;
		jPanel2.add(jTextFieldD2, gridBagConstraints);

		jLabel8.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.p","thomson$rec.exp.display.p"));
		jLabel8.setToolTipText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.tip.p","thomson$rec.exp.display.tip.p"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		jPanel2.add(jLabel8, gridBagConstraints);

		jSliderP.setMajorTickSpacing(1);
		jSliderP.setMaximum(5);
		jSliderP.setMinimum(1);
		jSliderP.setMinorTickSpacing(1);
		jSliderP.setPaintLabels(true);
		jSliderP.setPaintTicks(true);
		jSliderP.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jSliderPStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 4;
		jPanel2.add(jSliderP, gridBagConstraints);

		jTextFieldP.setColumns(4);
		jTextFieldP.setEditable(false);
		jTextFieldP.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldP.setText("0");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 4;
		jPanel2.add(jTextFieldP, gridBagConstraints);

		jLabel9.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.ransac","thomson$rec.exp.display.ransac"));
		jLabel9.setToolTipText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.tip.ransac","thomson$rec.exp.display.tip.ransac"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 5;
		jPanel2.add(jLabel9, gridBagConstraints);

		jSliderRansac.setMinimum(1);
		jSliderRansac.setMinorTickSpacing(10);
		jSliderRansac.setPaintLabels(true);
		jSliderRansac.setPaintTicks(true);
		jSliderRansac.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jSliderRansacStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 5;
		jPanel2.add(jSliderRansac, gridBagConstraints);

		jTextFieldRansac.setColumns(4);
		jTextFieldRansac.setEditable(false);
		jTextFieldRansac.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldRansac.setText("0");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 5;
		jPanel2.add(jTextFieldRansac, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		jPanel4.add(jPanel2, gridBagConstraints);

		jPanelB1.setLayout(new java.awt.GridBagLayout());

		jPanelB1.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findStringOrDefault("thomson$rec.exp.display.black","thomson$rec.exp.display.black")));
		jPanelB1.setToolTipText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.tip.black","thomson$rec.exp.display.tip.black"));
		jLabel10.setForeground(new java.awt.Color(255, 0, 0));
		jLabel10.setText("R");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanelB1.add(jLabel10, gridBagConstraints);

		jTextFieldB1R.setColumns(4);
		jTextFieldB1R.setEditable(false);
		jTextFieldB1R.setForeground(new java.awt.Color(255, 0, 0));
		jTextFieldB1R.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldB1R.setText("0");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanelB1.add(jTextFieldB1R, gridBagConstraints);

		jLabel11.setForeground(new java.awt.Color(0, 255, 0));
		jLabel11.setText("G");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanelB1.add(jLabel11, gridBagConstraints);

		jTextFieldB1G.setColumns(4);
		jTextFieldB1G.setEditable(false);
		jTextFieldB1G.setForeground(new java.awt.Color(0, 255, 0));
		jTextFieldB1G.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldB1G.setText("0");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanelB1.add(jTextFieldB1G, gridBagConstraints);

		jLabel12.setForeground(new java.awt.Color(0, 0, 255));
		jLabel12.setText("B");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanelB1.add(jLabel12, gridBagConstraints);

		jTextFieldB1B.setColumns(4);
		jTextFieldB1B.setEditable(false);
		jTextFieldB1B.setForeground(new java.awt.Color(0, 0, 255));
		jTextFieldB1B.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldB1B.setText("0");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanelB1.add(jTextFieldB1B, gridBagConstraints);

		jPanelB1Preview.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
		jPanelB1Preview.setPreferredSize(new java.awt.Dimension(50, 50));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridheight = 3;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanelB1.add(jPanelB1Preview, gridBagConstraints);

		jButtonB1Pick.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.pick","thomson$rec.exp.display.pick"));
		jButtonB1Pick.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonB1PickActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
		jPanelB1.add(jButtonB1Pick, gridBagConstraints);

		jButtonB1Select.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.selectcolor","thomson$rec.exp.display.selectcolor"));
		jButtonB1Select.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonB1SelectActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
		jPanelB1.add(jButtonB1Select, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		jPanel4.add(jPanelB1, gridBagConstraints);

		jPanelBlue.setLayout(new java.awt.GridBagLayout());

		jPanelBlue.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findStringOrDefault("thomson$rec.exp.display.blue","thomson$rec.exp.display.blue")));
		jPanelBlue.setToolTipText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.tip.blue","thomson$rec.exp.display.tip.blue"));
		jLabel16.setForeground(new java.awt.Color(255, 0, 0));
		jLabel16.setText("R");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanelBlue.add(jLabel16, gridBagConstraints);

		jTextFieldBlueR.setColumns(4);
		jTextFieldBlueR.setEditable(false);
		jTextFieldBlueR.setForeground(new java.awt.Color(255, 0, 0));
		jTextFieldBlueR.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldBlueR.setText("0");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanelBlue.add(jTextFieldBlueR, gridBagConstraints);

		jLabel17.setForeground(new java.awt.Color(0, 255, 0));
		jLabel17.setText("G");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanelBlue.add(jLabel17, gridBagConstraints);

		jTextFieldBlueG.setColumns(4);
		jTextFieldBlueG.setEditable(false);
		jTextFieldBlueG.setForeground(new java.awt.Color(0, 255, 0));
		jTextFieldBlueG.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldBlueG.setText("0");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanelBlue.add(jTextFieldBlueG, gridBagConstraints);

		jLabel18.setForeground(new java.awt.Color(0, 0, 255));
		jLabel18.setText("B");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanelBlue.add(jLabel18, gridBagConstraints);

		jTextFieldBlueB.setColumns(4);
		jTextFieldBlueB.setEditable(false);
		jTextFieldBlueB.setForeground(new java.awt.Color(0, 0, 255));
		jTextFieldBlueB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldBlueB.setText("0");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanelBlue.add(jTextFieldBlueB, gridBagConstraints);

		jPanelBluePreview.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
		jPanelBluePreview.setPreferredSize(new java.awt.Dimension(50, 50));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridheight = 3;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanelBlue.add(jPanelBluePreview, gridBagConstraints);

		jButtonBluePick.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.pick","thomson$rec.exp.display.pick"));
		jButtonBluePick.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonBluePickActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
		jPanelBlue.add(jButtonBluePick, gridBagConstraints);

		jButtonBlueSelect.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.selectcolor","thomson$rec.exp.display.selectcolor"));
		jButtonBlueSelect.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonBlueSelectActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
		jPanelBlue.add(jButtonBlueSelect, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		jPanel4.add(jPanelBlue, gridBagConstraints);

		jDialogChooser.getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);

		jPanel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
		jButtonEditOK.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.ok","thomson$rec.exp.display.ok"));
		jButtonEditOK.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonEditOKActionPerformed(evt);
			}
		});

		jPanel5.add(jButtonEditOK);

		jButtonEditCancel.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.cancel","thomson$rec.exp.display.cancel"));
		jButtonEditCancel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonEditCancelActionPerformed(evt);
			}
		});

		jPanel5.add(jButtonEditCancel);

		jDialogChooser.getContentPane().add(jPanel5, java.awt.BorderLayout.SOUTH);

		jDialogZoom.getContentPane().add(jLabelZoom, java.awt.BorderLayout.CENTER);

		jPanel7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
		jButtonZoom.setText("OK");
		jButtonZoom.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonZoomActionPerformed(evt);
			}
		});

		jPanel7.add(jButtonZoom);

		jDialogZoom.getContentPane().add(jPanel7, java.awt.BorderLayout.SOUTH);

		setLayout(new java.awt.BorderLayout());

		addComponentListener(new java.awt.event.ComponentAdapter() {
			public void componentResized(final java.awt.event.ComponentEvent evt) {
				formComponentResized(evt);
			}
		});

		jPanelContainer.setLayout(new java.awt.GridLayout(2, 3, 10, 10));

		jPanelOriginal.setLayout(new java.awt.BorderLayout());

		jPanelOriginal.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findStringOrDefault("thomson$rec.exp.display.original","thomson$rec.exp.display.original")));
		jPanelOriginal.setMinimumSize(new java.awt.Dimension(160, 120));
		jPanelOriginal.setPreferredSize(new java.awt.Dimension(160, 120));
		jLabelOriginal.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseReleased(final java.awt.event.MouseEvent evt) {
				jLabelOriginalMouseReleased(evt);
			}
		});

		jPanelOriginal.add(jLabelOriginal, java.awt.BorderLayout.CENTER);

		jPanelContainer.add(jPanelOriginal);

		jPanelEdge.setLayout(new java.awt.BorderLayout());

		jPanelEdge.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findStringOrDefault("thomson$rec.exp.display.edges","thomson$rec.exp.display.edges")));
		jPanelEdge.setMinimumSize(new java.awt.Dimension(160, 120));
		jPanelEdge.setPreferredSize(new java.awt.Dimension(160, 120));
		jLabelEdges.setOpaque(true);
		jLabelEdges.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseReleased(final java.awt.event.MouseEvent evt) {
				jLabelEdgesMouseReleased(evt);
			}
		});

		jPanelEdge.add(jLabelEdges, java.awt.BorderLayout.CENTER);

		jPanelContainer.add(jPanelEdge);

		jPanelLines.setLayout(new java.awt.BorderLayout());

		jPanelLines.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findStringOrDefault("thomson$rec.exp.display.lines","thomson$rec.exp.display.lines")));
		jPanelLines.setMinimumSize(new java.awt.Dimension(160, 120));
		jPanelLines.setPreferredSize(new java.awt.Dimension(160, 120));
		jLabelLines.setOpaque(true);
		jLabelLines.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseReleased(final java.awt.event.MouseEvent evt) {
				jLabelLinesMouseReleased(evt);
			}
		});

		jPanelLines.add(jLabelLines, java.awt.BorderLayout.CENTER);

		jPanelContainer.add(jPanelLines);

		jPanelAlign.setLayout(new java.awt.BorderLayout());

		jPanelAlign.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findStringOrDefault("thomson$rec.exp.display.align","thomson$rec.exp.display.align")));
		jPanelAlign.setDoubleBuffered(false);
		jPanelAlign.setMinimumSize(new java.awt.Dimension(160, 120));
		jPanelAlign.setPreferredSize(new java.awt.Dimension(160, 120));
		jLabelAlign.setOpaque(true);
		jLabelAlign.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseReleased(final java.awt.event.MouseEvent evt) {
				jLabelAlignMouseReleased(evt);
			}
		});

		jPanelAlign.add(jLabelAlign, java.awt.BorderLayout.CENTER);

		jPanelContainer.add(jPanelAlign);

		jPanelBeam.setLayout(new java.awt.BorderLayout());

		jPanelBeam.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findStringOrDefault("thomson$rec.exp.display.beam","thomson$rec.exp.display.beam")));
		jPanelBeam.setMinimumSize(new java.awt.Dimension(160, 120));
		jPanelBeam.setPreferredSize(new java.awt.Dimension(160, 120));
		jLabelBeam.setOpaque(true);
		jLabelBeam.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseReleased(final java.awt.event.MouseEvent evt) {
				jLabelBeamMouseReleased(evt);
			}
		});

		jPanelBeam.add(jLabelBeam, java.awt.BorderLayout.CENTER);

		jPanelContainer.add(jPanelBeam);

		jPanelFinal.setLayout(new java.awt.BorderLayout());

		jPanelFinal.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findStringOrDefault("thomson$rec.exp.display.final","thomson$rec.exp.display.final")));
		jPanelFinal.setMinimumSize(new java.awt.Dimension(160, 120));
		jPanelFinal.setPreferredSize(new java.awt.Dimension(160, 120));
		jLabelFinal.setOpaque(true);
		jLabelFinal.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseReleased(final java.awt.event.MouseEvent evt) {
				jLabelFinalMouseReleased(evt);
			}
		});

		jPanelFinal.add(jLabelFinal, java.awt.BorderLayout.CENTER);

		jPanelContainer.add(jPanelFinal);

		add(jPanelContainer, java.awt.BorderLayout.CENTER);

		jPanel6.setLayout(new java.awt.BorderLayout());

		jPanel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
		jButtonEdit.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.changeanalysisvalues","thomson$rec.exp.display.changeanalysisvalues"));
		jButtonEdit.setEnabled(false);
		jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonEditActionPerformed(evt);
			}
		});

		jPanel1.add(jButtonEdit);

		jPanel6.add(jPanel1, java.awt.BorderLayout.CENTER);

		jTextFieldX.setBackground(new java.awt.Color(204, 255, 204));
		jTextFieldX.setColumns(9);
		jTextFieldX.setEditable(false);
		jTextFieldX.setText("X0=");
		jTextFieldX.setPreferredSize(new java.awt.Dimension(103, 21));
		jPanel3.add(jTextFieldX);

		jTextFieldY.setBackground(new java.awt.Color(204, 255, 204));
		jTextFieldY.setColumns(9);
		jTextFieldY.setEditable(false);
		jTextFieldY.setText("Y0=");
		jTextFieldY.setPreferredSize(new java.awt.Dimension(103, 21));
		jPanel3.add(jTextFieldY);

		jTextFieldR.setBackground(new java.awt.Color(204, 255, 204));
		jTextFieldR.setColumns(9);
		jTextFieldR.setEditable(false);
		jTextFieldR.setText("R=");
		jTextFieldR.setPreferredSize(new java.awt.Dimension(103, 21));
		jPanel3.add(jTextFieldR);

		jTextFieldI.setBackground(new java.awt.Color(255, 204, 255));
		jTextFieldI.setColumns(9);
		jTextFieldI.setEditable(false);
		jTextFieldI.setText("I=");
		jTextFieldI.setPreferredSize(new java.awt.Dimension(103, 21));
		jPanel3.add(jTextFieldI);

		jTextFieldV.setBackground(new java.awt.Color(255, 204, 255));
		jTextFieldV.setColumns(9);
		jTextFieldV.setEditable(false);
		jTextFieldV.setText("V=");
		jTextFieldV.setPreferredSize(new java.awt.Dimension(103, 21));
		jPanel3.add(jTextFieldV);

		jTextFieldQM.setBackground(new java.awt.Color(255, 204, 255));
		jTextFieldQM.setColumns(9);
		jTextFieldQM.setEditable(false);
		jTextFieldQM.setText("q/m=");
		jTextFieldQM.setPreferredSize(new java.awt.Dimension(103, 21));
		jPanel3.add(jTextFieldQM);

		jPanel6.add(jPanel3, java.awt.BorderLayout.NORTH);

		add(jPanel6, java.awt.BorderLayout.SOUTH);

	}//GEN-END:initComponents

	private void jSliderRansacStateChanged(final javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_jSliderRansacStateChanged
	{// GEN-HEADEREND:event_jSliderRansacStateChanged
		jTextFieldRansac.setText("" + jSliderRansac.getValue());
	}// GEN-LAST:event_jSliderRansacStateChanged

	private void jSliderPStateChanged(final javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_jSliderPStateChanged
	{// GEN-HEADEREND:event_jSliderPStateChanged
		jTextFieldP.setText("" + jSliderP.getValue());
	}// GEN-LAST:event_jSliderPStateChanged

	private void jButtonZoomActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonZoomActionPerformed
	{// GEN-HEADEREND:event_jButtonZoomActionPerformed
		jDialogZoom.hide();
	}// GEN-LAST:event_jButtonZoomActionPerformed

	private void jSliderBeamBlueStateChanged(final javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_jSliderBeamBlueStateChanged
	{// GEN-HEADEREND:event_jSliderBeamBlueStateChanged
		jTextFieldRBlue.setText("" + jSliderBeamBlue.getValue());
	}// GEN-LAST:event_jSliderBeamBlueStateChanged

	private void formComponentResized(final java.awt.event.ComponentEvent evt)// GEN-FIRST:event_formComponentResized
	{// GEN-HEADEREND:event_formComponentResized
		readd();
	}// GEN-LAST:event_formComponentResized

	private void jLabelFinalMouseReleased(final java.awt.event.MouseEvent evt)// GEN-FIRST:event_jLabelFinalMouseReleased
	{// GEN-HEADEREND:event_jLabelFinalMouseReleased
		showZoom(jLabelFinal);
	}// GEN-LAST:event_jLabelFinalMouseReleased

	private void jLabelBeamMouseReleased(final java.awt.event.MouseEvent evt)// GEN-FIRST:event_jLabelBeamMouseReleased
	{// GEN-HEADEREND:event_jLabelBeamMouseReleased
		showZoom(jLabelBeam);
	}// GEN-LAST:event_jLabelBeamMouseReleased

	private void jLabelAlignMouseReleased(final java.awt.event.MouseEvent evt)// GEN-FIRST:event_jLabelAlignMouseReleased
	{// GEN-HEADEREND:event_jLabelAlignMouseReleased
		showZoom(jLabelAlign);
	}// GEN-LAST:event_jLabelAlignMouseReleased

	private void jLabelLinesMouseReleased(final java.awt.event.MouseEvent evt)// GEN-FIRST:event_jLabelLinesMouseReleased
	{// GEN-HEADEREND:event_jLabelLinesMouseReleased
		showZoom(jLabelLines);
	}// GEN-LAST:event_jLabelLinesMouseReleased

	private void jLabelEdgesMouseReleased(final java.awt.event.MouseEvent evt)// GEN-FIRST:event_jLabelEdgesMouseReleased
	{// GEN-HEADEREND:event_jLabelEdgesMouseReleased
		showZoom(jLabelEdges);
	}// GEN-LAST:event_jLabelEdgesMouseReleased

	private void jLabelOriginalMouseReleased(final java.awt.event.MouseEvent evt)// GEN-FIRST:event_jLabelOriginalMouseReleased
	{// GEN-HEADEREND:event_jLabelOriginalMouseReleased
		showZoom(jLabelOriginal);
	}// GEN-LAST:event_jLabelOriginalMouseReleased

	private void jPanelColorPickerMouseMoved(final java.awt.event.MouseEvent evt)// GEN-FIRST:event_jPanelColorPickerMouseMoved
	{// GEN-HEADEREND:event_jPanelColorPickerMouseMoved
		if (editingComponent == null) {
			return;
		}

		final Point p = new Point(evt.getX(), evt.getY());
		SwingUtilities.convertPointToScreen(p, jPanelColorPicker);
		final Color crgb = robot.getPixelColor((int) p.getX(), (int) p.getY());

		if (editingComponent.equals(jPanelB1)) {
			updatePreview(jPanelB1Preview, crgb);
		} else if (editingComponent.equals(jPanelBlue)) {
			updatePreview(jPanelBluePreview, crgb);
		}
	}// GEN-LAST:event_jPanelColorPickerMouseMoved

	private void jPanelColorPickerMouseReleased(final java.awt.event.MouseEvent evt)// GEN-FIRST:event_jPanelColorPickerMouseReleased
	{// GEN-HEADEREND:event_jPanelColorPickerMouseReleased
		if (editingComponent == null) {
			return;
		}

		editingComponent = null;

		jDialogChooser.toFront();

		jButtonB1Pick.setEnabled(true);
		jButtonBluePick.setEnabled(true);

		jDialogColorPicker.hide();

		jPanelColorPicker.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
	}// GEN-LAST:event_jPanelColorPickerMouseReleased

	private void jButtonBlueSelectActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonBlueSelectActionPerformed
	{// GEN-HEADEREND:event_jButtonBlueSelectActionPerformed
		final Color selectedColor = jColorChooser.showDialog(this,
				ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.selectcolor","thomson$rec.exp.display.selectcolor"), jPanelBluePreview.getBackground());
		updatePreview(jPanelBluePreview, selectedColor);
	}// GEN-LAST:event_jButtonBlueSelectActionPerformed

	private void jButtonBluePickActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonBluePickActionPerformed
	{// GEN-HEADEREND:event_jButtonBluePickActionPerformed
		editingComponent = jPanelBlue;
		jPanelColorPicker.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
		jButtonBluePick.setEnabled(false);
		showColorPicker();
	}// GEN-LAST:event_jButtonBluePickActionPerformed

	private void jButtonB1SelectActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonB1SelectActionPerformed
	{// GEN-HEADEREND:event_jButtonB1SelectActionPerformed
		final Color selectedColor = jColorChooser.showDialog(this,
				ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.selectcolor","thomson$rec.exp.display.selectcolor"), jPanelB1Preview.getBackground());
		updatePreview(jPanelB1Preview, selectedColor);
	}// GEN-LAST:event_jButtonB1SelectActionPerformed

	private void jButtonB1PickActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonB1PickActionPerformed
	{// GEN-HEADEREND:event_jButtonB1PickActionPerformed
		editingComponent = jPanelB1;
		jPanelColorPicker.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
		jButtonB1Pick.setEnabled(false);
		showColorPicker();
	}// GEN-LAST:event_jButtonB1PickActionPerformed

	private void jButtonEditActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonEditActionPerformed
	{// GEN-HEADEREND:event_jButtonEditActionPerformed
		jDialogChooser.pack();
		jDialogChooser.setLocationRelativeTo(this);
		jDialogChooser.show();
	}// GEN-LAST:event_jButtonEditActionPerformed

	private void jButtonEditOKActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonEditOKActionPerformed
	{// GEN-HEADEREND:event_jButtonEditOKActionPerformed
		jDialogChooser.hide();
		final Color b1 = jPanelB1Preview.getBackground();
		final Color blue = jPanelBluePreview.getBackground();

		imageAnalyser.PRETO_R1 = b1.getRed();
		imageAnalyser.PRETO_G1 = b1.getGreen();
		imageAnalyser.PRETO_B1 = b1.getBlue();

		imageAnalyser.AZUL_R = blue.getRed();
		imageAnalyser.AZUL_G = blue.getGreen();
		imageAnalyser.AZUL_B = blue.getBlue();

		imageAnalyser.AZUL_RAIO = jSliderBeamBlue.getValue();

		imageAnalyser.P = jSliderP.getValue();

		imageAnalyser.RANSAC_ERROR = jSliderRansac.getValue();

		imageAnalyser.D1 = jSliderD1.getValue();
		imageAnalyser.D2 = jSliderD2.getValue();
		imageAnalyser.CROSS = jSliderCross.getValue();

		paintImage(jLabelOriginal, null);
		paintImage(jLabelEdges, null);
		paintImage(jLabelLines, null);
		paintImage(jLabelAlign, null);
		paintImage(jLabelBeam, null);
		paintImage(jLabelFinal, null);

		new Thread() {
			public void run() {
				buildImages(imageAnalyser.getOriginalImage());
			}
		}.start();
	}// GEN-LAST:event_jButtonEditOKActionPerformed

	private void jButtonEditCancelActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonEditCancelActionPerformed
	{// GEN-HEADEREND:event_jButtonEditCancelActionPerformed
		jDialogChooser.hide();
	}// GEN-LAST:event_jButtonEditCancelActionPerformed

	private void jSliderD2StateChanged(final javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_jSliderD2StateChanged
	{// GEN-HEADEREND:event_jSliderD2StateChanged
		jTextFieldD2.setText("" + jSliderD2.getValue());
	}// GEN-LAST:event_jSliderD2StateChanged

	private void jSliderD1StateChanged(final javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_jSliderD1StateChanged
	{// GEN-HEADEREND:event_jSliderD1StateChanged
		jTextFieldD1.setText("" + jSliderD1.getValue());
	}// GEN-LAST:event_jSliderD1StateChanged

	private void jSliderCrossStateChanged(final javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_jSliderCrossStateChanged
	{// GEN-HEADEREND:event_jSliderCrossStateChanged
		jTextFieldCross.setText("" + jSliderCross.getValue());
	}// GEN-LAST:event_jSliderCrossStateChanged

	public static void main(final String args[]) {
		ReCResourceBundle.loadResourceBundle("thomson",
				"recresource:///pt/utl/ist/elab/client/thomson/resources/messages");
		final JFrame test = new JFrame();
		final UserAnalysisPanel uap = new UserAnalysisPanel();
		test.getContentPane().add(uap);
		test.pack();
		test.setVisible(true);
		try {
			final Image img = javax.imageio.ImageIO.read(new java.io.File("/home/andre/Image1.jpg"));
			uap.imageAnalyser.setOriginalImage(img);
			uap.jButtonEdit.setEnabled(true);
			uap.buildImages(img);
		} catch (final Exception e) {
			e.printStackTrace();
		}
	}

	private void updatePreview(final JPanel preview, final Color crgb) {
		if (preview.equals(jPanelB1Preview)) {
			jPanelB1Preview.setBackground(crgb);
			jTextFieldB1R.setText("" + crgb.getRed());
			jTextFieldB1G.setText("" + crgb.getGreen());
			jTextFieldB1B.setText("" + crgb.getBlue());
		} else if (preview.equals(jPanelBluePreview)) {
			jPanelBluePreview.setBackground(crgb);
			jTextFieldBlueR.setText("" + crgb.getRed());
			jTextFieldBlueG.setText("" + crgb.getGreen());
			jTextFieldBlueB.setText("" + crgb.getBlue());
		}
	}

	private void showColorPicker() {
		jDialogChooser.setLocation(0, 0);
		jDialogColorPicker.setLocation(jDialogChooser.getWidth(), 0);
		jDialogColorPicker.pack();
		jDialogColorPicker.show();
	}

	public void setImageN(final java.awt.Image img, final int n) {
		if (n == 0) {
			jPanelColorPicker.setBorder(new ImageBorder(img, true));
			paintImage(jLabelOriginal, img);
		} else if (n == 1) {
			paintImage(jLabelEdges, img);
		} else if (n == 2) {
			paintImage(jLabelLines, img);
		} else if (n == 3) {
			paintImage(jLabelAlign, img);
		} else if (n == 4) {
			paintImage(jLabelBeam, img);
		} else if (n == 5) {
			paintImage(jLabelFinal, img);
		}
	}

	private void buildImages(final byte[] imageBA) {
		buildImages(imageAnalyser.byteArray2Image(imageBA));
	}

	private void buildImages(final Image img) {
		jButtonEdit.setEnabled(false);
		double user_corrente = 0;
		if (model != null) {
			user_corrente = Double.parseDouble(model.getAcquisitionConfig().getSelectedHardwareParameterValue(
					"correntebobines"));
		}

		imageAnalyser.setIsUp(user_corrente < 0);

		imageAnalyser.setOriginalImage(img);
		setImageN(img, 0);

		final Image[] imagesAlinhada = imageAnalyser.getImagemAlinhada(null);

		if (imagesAlinhada == null) {
			jButtonEdit.setEnabled(true);
			paintImage(jLabelEdges, null);
			paintImage(jLabelLines, null);
			paintImage(jLabelAlign, null);
			paintImage(jLabelBeam, null);
			paintImage(jLabelFinal, null);
			return;
		}

		setImageN(imagesAlinhada[0], 1);
		setImageN(imagesAlinhada[1], 2);
		setImageN(imagesAlinhada[2], 3);
		setImageN(imagesAlinhada[3], 4);
		final double[] xyr = imageAnalyser.getCircunferenciaPontos(imagesAlinhada[3]);
		jTextFieldX.setText("X0=" + df.format(xyr[0]) + "(cm)");
		jTextFieldY.setText("Y0=" + df.format(xyr[1]) + "(cm)");
		jTextFieldR.setText("R=" + df.format((xyr[2] / 50)) + "(cm)");
		setImageN(imageAnalyser.getFinalimage(imagesAlinhada[2]), 5);

		String modo = null;

		if (model != null) {
			modo = model.getAcquisitionConfig().getSelectedHardwareParameterValue("modo");
		}

		if (modo != null && modo.equals("defmag")) {
			final double b = miu_0 * UserAnalysisPanel.N_ESP / 2 * (corrente / 1000) / UserAnalysisPanel.D_ESP;
			final double qm = 2 * tensao / (Math.pow(xyr[2] / 5000, 2) * Math.pow(b, 2));
			jTextFieldQM.setText("q/m=" + ndf.format(qm) + "(C/Kg)");
		} else {
			jTextFieldQM.setText("-");
		}

		jButtonEdit.setEnabled(true);
	}

	public void dataModelEnded() {
	}

	public void dataModelError() {
	}

	public void dataModelStarted() {
	}

	public void dataModelStartedNoData() {
	}

	public void dataModelStoped() {
	}

	public void dataModelWaiting() {
	}

	public javax.swing.JComponent getDisplay() {
		return this;
	}

	public javax.swing.Icon getIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/thomson/resources/thomson_iconified.png"));
	}

	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	public javax.swing.JToolBar getToolBar() {
		return null;
	}

	public void newSamples(final com.linkare.rec.impl.client.experiment.NewExpDataEvent evt) {
		if (model == null) {
			return;
		}
		for (int i = evt.getSamplesStartIndex(); i <= evt.getSamplesEndIndex(); i++) {
			if (model.getValueAt(i, model.getChannelIndex("Image")) != null) {
				buildImages(model.getValueAt(i, model.getChannelIndex("Image")).getValue().getByteArrayValue()
						.getData());
			}
			if (model.getValueAt(i, 0) != null) {
				String signI = "";
				final double c = Double.parseDouble(model.getAcquisitionConfig().getSelectedHardwareParameterValue(
						"correntebobines"));
				if (c < 0) {
					signI = "-";
				}

				jTextFieldI.setText("I=" + signI + df.format(model.getValueAt(i, 0).getValue().getIntValue()) + "(mA)");
				corrente = model.getValueAt(i, 0).getValue().getIntValue();
			}
			if (model.getValueAt(i, 1) != null) {
				jTextFieldV.setText("V=" + df.format(model.getValueAt(i, 1).getValue().getIntValue()) + "(V)");
				tensao = model.getValueAt(i, 1).getValue().getIntValue();
			}
		}
	}

	private com.linkare.rec.impl.client.experiment.ExpDataModel model = null;

	public void setExpDataModel(final com.linkare.rec.impl.client.experiment.ExpDataModel model) {
		if (this.model != null) {
			model.removeExpDataModelListener(this);
		}

		this.model = model;

		if (this.model != null) {
			this.model.addExpDataModelListener(this);
		}
	}

	public String getName() {
		return ReCResourceBundle.findStringOrDefault("thomson$rec.exp.display.thomson.title.3", "Analasys Panel");
	}

	private void paintImage(final JLabel label, final Image img) {
		ImageIcon icon = null;
		if (img != null) {
			icon = new ImageIcon(img.getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_DEFAULT));
			label.setIcon(icon);
		} else {
			label.setIcon(null);
			label.setBackground(Color.BLACK);
		}
	}

	private void readd() {
		paintImage(jLabelOriginal, imageAnalyser.getOriginalImage());

		paintImage(jLabelEdges, imageAnalyser.getImage(0));

		paintImage(jLabelLines, imageAnalyser.getImage(1));

		paintImage(jLabelAlign, imageAnalyser.getImage(2));

		paintImage(jLabelBeam, imageAnalyser.getImage(3));

		paintImage(jLabelFinal, imageAnalyser.getFinalimage(imageAnalyser.getImage(2)));
	}

	private void showZoom(final JLabel label) {
		Image img = null;
		if (label.getIcon() == null) {
			return;
		}

		if (label.equals(jLabelOriginal)) {
			img = imageAnalyser.getOriginalImage();
		} else if (label.equals(jLabelEdges)) {
			img = imageAnalyser.getImage(0);
		} else if (label.equals(jLabelLines)) {
			img = imageAnalyser.getImage(1);
		} else if (label.equals(jLabelAlign)) {
			img = imageAnalyser.getImage(2);
		} else if (label.equals(jLabelBeam)) {
			img = imageAnalyser.getImage(3);
		} else if (label.equals(jLabelFinal)) {
			img = imageAnalyser.getFinalimage(imageAnalyser.getImage(2));
		}

		if (img == null) {
			return;
		}

		jLabelZoom.setIcon(new ImageIcon(img));
		jDialogZoom.pack();
		jDialogZoom.show();
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButtonB1Pick;
	private javax.swing.JButton jButtonB1Select;
	private javax.swing.JButton jButtonBluePick;
	private javax.swing.JButton jButtonBlueSelect;
	private javax.swing.JButton jButtonEdit;
	private javax.swing.JButton jButtonEditCancel;
	private javax.swing.JButton jButtonEditOK;
	private javax.swing.JButton jButtonZoom;
	private javax.swing.JColorChooser jColorChooser;
	private javax.swing.JDialog jDialogChooser;
	private javax.swing.JDialog jDialogColorPicker;
	private javax.swing.JDialog jDialogZoom;
	private javax.swing.JLabel jLabel10;
	private javax.swing.JLabel jLabel11;
	private javax.swing.JLabel jLabel12;
	private javax.swing.JLabel jLabel16;
	private javax.swing.JLabel jLabel17;
	private javax.swing.JLabel jLabel18;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JLabel jLabelAlign;
	private javax.swing.JLabel jLabelBeam;
	private javax.swing.JLabel jLabelEdges;
	private javax.swing.JLabel jLabelFinal;
	private javax.swing.JLabel jLabelLines;
	private javax.swing.JLabel jLabelOriginal;
	private javax.swing.JLabel jLabelZoom;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JPanel jPanel7;
	private javax.swing.JPanel jPanelAlign;
	private javax.swing.JPanel jPanelB1;
	private javax.swing.JPanel jPanelB1Preview;
	private javax.swing.JPanel jPanelBeam;
	private javax.swing.JPanel jPanelBlue;
	private javax.swing.JPanel jPanelBluePreview;
	private javax.swing.JPanel jPanelColorPicker;
	private javax.swing.JPanel jPanelContainer;
	private javax.swing.JPanel jPanelEdge;
	private javax.swing.JPanel jPanelFinal;
	private javax.swing.JPanel jPanelLines;
	private javax.swing.JPanel jPanelOriginal;
	private javax.swing.JSlider jSliderBeamBlue;
	private javax.swing.JSlider jSliderCross;
	private javax.swing.JSlider jSliderD1;
	private javax.swing.JSlider jSliderD2;
	private javax.swing.JSlider jSliderP;
	private javax.swing.JSlider jSliderRansac;
	private javax.swing.JTextField jTextFieldB1B;
	private javax.swing.JTextField jTextFieldB1G;
	private javax.swing.JTextField jTextFieldB1R;
	private javax.swing.JTextField jTextFieldBlueB;
	private javax.swing.JTextField jTextFieldBlueG;
	private javax.swing.JTextField jTextFieldBlueR;
	private javax.swing.JTextField jTextFieldCross;
	private javax.swing.JTextField jTextFieldD1;
	private javax.swing.JTextField jTextFieldD2;
	private javax.swing.JTextField jTextFieldI;
	private javax.swing.JTextField jTextFieldP;
	private javax.swing.JTextField jTextFieldQM;
	private javax.swing.JTextField jTextFieldR;
	private javax.swing.JTextField jTextFieldRBlue;
	private javax.swing.JTextField jTextFieldRansac;
	private javax.swing.JTextField jTextFieldV;
	private javax.swing.JTextField jTextFieldX;
	private javax.swing.JTextField jTextFieldY;
	// End of variables declaration//GEN-END:variables
    @Override
    public DataDisplayEnum getDisplayType() {
        return DataDisplayEnum.ANALYSIS;
    }

}
