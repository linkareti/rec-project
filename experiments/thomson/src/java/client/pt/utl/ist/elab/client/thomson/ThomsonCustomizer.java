/*
 * ThomsonCustomizer.java
 *
 * Created on October 8, 2004, 11:29 AM
 */

package pt.utl.ist.elab.client.thomson;

/**
 *
 * @author Andr√© Neto - LEFT - IST
 */

import javax.swing.SwingConstants;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.metadata.HardwareInfo;
import com.linkare.rec.impl.client.customizer.ICustomizerListener;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

public class ThomsonCustomizer extends javax.swing.JPanel implements com.linkare.rec.impl.client.customizer.ICustomizer {
	/**
	 * 
	 */
	private static final long serialVersionUID = 2142273204510667774L;

	/** Creates new form ThomsonCustomizer */
	public ThomsonCustomizer() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		java.awt.GridBagConstraints gridBagConstraints;

		buttonGroup1 = new javax.swing.ButtonGroup();
		jPanel1 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		jSliderTAce = new javax.swing.JSlider();
		jTextFieldTAce = new javax.swing.JTextField();
		jPanel3 = new javax.swing.JPanel();
		jSliderTDef = new javax.swing.JSlider();
		jTextFieldTDef = new javax.swing.JTextField();
		jPanel4 = new javax.swing.JPanel();
		jSliderIHelm = new javax.swing.JSlider();
		jTextFieldIHelm = new javax.swing.JTextField();
		jPanel5 = new javax.swing.JPanel();
		jPanel6 = new javax.swing.JPanel();
		jRadioButtonB = new javax.swing.JRadioButton();
		jRadioButtonF = new javax.swing.JRadioButton();
		jCheckBoxVideo = new javax.swing.JCheckBox();
		jLabel1 = new javax.swing.JLabel();
		jPanelSend = new javax.swing.JPanel();
		jButtonOK = new javax.swing.JButton();
		jButtonCancel = new javax.swing.JButton();
		jLabel2 = new javax.swing.JLabel();
		jButtonDefaults = new javax.swing.JButton();
		jLabel3 = new javax.swing.JLabel();

		setLayout(new java.awt.BorderLayout());

		setMinimumSize(new java.awt.Dimension(400, 400));
		setPreferredSize(new java.awt.Dimension(420, 400));
		jPanel1.setLayout(new java.awt.GridLayout(3, 0, 0, 10));

		jPanel1.setMinimumSize(new java.awt.Dimension(700, 239));
		jPanel2.setLayout(new java.awt.GridBagLayout());

		jSliderTAce.setMajorTickSpacing(500);
		jSliderTAce.setMaximum(4000);
		jSliderTAce.setMinimum(2000);
		jSliderTAce.setMinorTickSpacing(1);
		jSliderTAce.setPaintLabels(true);
		jSliderTAce.setPaintTicks(true);
		jSliderTAce.setToolTipText("escolher o valor da tens\u00e3o de acelera\u00e7\u00e3o dos electr\u00f5es");
		jSliderTAce.setValue(4000);
		jSliderTAce.setBorder(new javax.swing.border.TitledBorder(null, ReCResourceBundle
				.findStringOrDefault("thomson$rec.exp.thomson.lbl.vpot","thomson$rec.exp.thomson.lbl.vpot"), javax.swing.border.TitledBorder.LEFT,
				javax.swing.border.TitledBorder.TOP));
		jSliderTAce.setMinimumSize(new java.awt.Dimension(200, 67));
		jSliderTAce.setName("tensao1");
		jSliderTAce.setPreferredSize(new java.awt.Dimension(300, 59));
		jSliderTAce.setValueIsAdjusting(true);
		jSliderTAce.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jSliderTAceStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		jPanel2.add(jSliderTAce, gridBagConstraints);

		jTextFieldTAce.setBackground(new java.awt.Color(0, 255, 255));
		jTextFieldTAce.setColumns(5);
		jTextFieldTAce.setHorizontalAlignment(SwingConstants.RIGHT);
		jTextFieldTAce.setText("4000");
		jTextFieldTAce.setVerifyInputWhenFocusTarget(false);
		jTextFieldTAce.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusLost(final java.awt.event.FocusEvent evt) {
				jTextFieldTAceFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		jPanel2.add(jTextFieldTAce, gridBagConstraints);

		jPanel1.add(jPanel2);

		jPanel3.setLayout(new java.awt.GridBagLayout());

		jSliderTDef.setMajorTickSpacing(1000);
		jSliderTDef.setMaximum(5000);
		jSliderTDef.setMinorTickSpacing(1);
		jSliderTDef.setPaintLabels(true);
		jSliderTDef.setPaintTicks(true);
		jSliderTDef.setSnapToTicks(true);
		jSliderTDef.setValue(0);
		jSliderTDef.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findStringOrDefault("thomson$rec.exp.thomson.lbl.dpot","thomson$rec.exp.thomson.lbl.dpot")));
		jSliderTDef.setPreferredSize(new java.awt.Dimension(300, 59));
		jSliderTDef.setEnabled(false);
		jSliderTDef.setValueIsAdjusting(true);
		jSliderTDef.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jSliderTDefStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		jPanel3.add(jSliderTDef, gridBagConstraints);

		jTextFieldTDef.setBackground(new java.awt.Color(0, 255, 255));
		jTextFieldTDef.setColumns(5);
		jTextFieldTDef.setHorizontalAlignment(SwingConstants.RIGHT);
		jTextFieldTDef.setText("0");
		jTextFieldTDef.setVerifyInputWhenFocusTarget(false);
		jTextFieldTDef.setEnabled(false);
		jTextFieldTDef.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusLost(final java.awt.event.FocusEvent evt) {
				jTextFieldTDefFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
		jPanel3.add(jTextFieldTDef, gridBagConstraints);

		jPanel1.add(jPanel3);

		jPanel4.setLayout(new java.awt.GridBagLayout());

		jSliderIHelm.setMajorTickSpacing(500);
		jSliderIHelm.setMaximum(2000);
		jSliderIHelm.setMinimum(-2000);
		jSliderIHelm.setMinorTickSpacing(1);
		jSliderIHelm.setPaintLabels(true);
		jSliderIHelm.setPaintTicks(true);
		jSliderIHelm.setSnapToTicks(true);
		jSliderIHelm.setValue(800);
		jSliderIHelm.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findStringOrDefault("thomson$rec.exp.thomson.lbl.current","thomson$rec.exp.thomson.lbl.current")));
		jSliderIHelm.setPreferredSize(new java.awt.Dimension(300, 59));
		jSliderIHelm.setValueIsAdjusting(true);
		jSliderIHelm.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jSliderIHelmStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		jPanel4.add(jSliderIHelm, gridBagConstraints);

		jTextFieldIHelm.setBackground(new java.awt.Color(0, 255, 255));
		jTextFieldIHelm.setColumns(5);
		jTextFieldIHelm.setHorizontalAlignment(SwingConstants.RIGHT);
		jTextFieldIHelm.setText("800");
		jTextFieldIHelm.setVerifyInputWhenFocusTarget(false);
		jTextFieldIHelm.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusLost(final java.awt.event.FocusEvent evt) {
				jTextFieldIHelmFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
		jPanel4.add(jTextFieldIHelm, gridBagConstraints);

		jPanel1.add(jPanel4);

		add(jPanel1, java.awt.BorderLayout.NORTH);

		jPanel5.setLayout(new java.awt.BorderLayout());

		jPanel6.setLayout(new java.awt.GridLayout(3, 0));

		jRadioButtonB.setSelected(true);
		jRadioButtonB.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.thomson.lbl.magdef","thomson$rec.exp.thomson.lbl.magdef"));
		buttonGroup1.add(jRadioButtonB);
		jRadioButtonB.addMouseListener(new java.awt.event.MouseAdapter() {
			@Override
			public void mouseReleased(final java.awt.event.MouseEvent evt) {
				jRadioButtonBMouseReleased(evt);
			}
		});

		jPanel6.add(jRadioButtonB);

		jRadioButtonF.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.thomson.lbl.eqforce","thomson$rec.exp.thomson.lbl.eqforce"));
		buttonGroup1.add(jRadioButtonF);
		jRadioButtonF.addMouseListener(new java.awt.event.MouseAdapter() {
			@Override
			public void mouseReleased(final java.awt.event.MouseEvent evt) {
				jRadioButtonFMouseReleased(evt);
			}
		});

		jPanel6.add(jRadioButtonF);

		jCheckBoxVideo.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.thomson.lbl.wvideo","thomson$rec.exp.thomson.lbl.wvideo"));
		jPanel6.add(jCheckBoxVideo);

		jPanel5.add(jPanel6, java.awt.BorderLayout.WEST);

		jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/thomson/resources/customizerbackimg.png")));
		jPanel5.add(jLabel1, java.awt.BorderLayout.CENTER);

		add(jPanel5, java.awt.BorderLayout.CENTER);

		jPanelSend.setLayout(new java.awt.GridBagLayout());

		jPanelSend.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
		jPanelSend.setMinimumSize(new java.awt.Dimension(350, 42));
		jPanelSend.setPreferredSize(new java.awt.Dimension(350, 42));
		jButtonOK.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
		jButtonOK.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.thomson.lbl.ok","thomson$rec.exp.thomson.lbl.ok"));
		jButtonOK.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonOKActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		jPanelSend.add(jButtonOK, gridBagConstraints);

		jButtonCancel.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
		jButtonCancel.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.thomson.lbl.cancel","thomson$rec.exp.thomson.lbl.cancel"));
		jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonCancelActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		jPanelSend.add(jButtonCancel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 10.0;
		jPanelSend.add(jLabel2, gridBagConstraints);

		jButtonDefaults.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
		jButtonDefaults.setText(ReCResourceBundle.findStringOrDefault("thomson$rec.exp.dftcfg.thomson.title.1","thomson$rec.exp.dftcfg.thomson.title.1"));
		jButtonDefaults.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonDefaultsActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 1;
		jPanelSend.add(jButtonDefaults, gridBagConstraints);

		jLabel3.setText("    ");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weighty = 1.0;
		jPanelSend.add(jLabel3, gridBagConstraints);

		add(jPanelSend, java.awt.BorderLayout.SOUTH);

	}// GEN-END:initComponents

	private void jButtonCancelActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonCancelActionPerformed
	{// GEN-HEADEREND:event_jButtonCancelActionPerformed
		fireICustomizerListenerCanceled();
	}// GEN-LAST:event_jButtonCancelActionPerformed

	private void jButtonOKActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonOKActionPerformed
	{// GEN-HEADEREND:event_jButtonOKActionPerformed
		acqConfig.getSelectedHardwareParameter("correntebobines").setParameterValue("" + jSliderIHelm.getValue());
		acqConfig.getSelectedHardwareParameter("tensaoaceleracao").setParameterValue("" + jSliderTAce.getValue());
		acqConfig.getSelectedHardwareParameter("video").setParameterValue("" + ((jCheckBoxVideo.isSelected()) ? 1 : 0));
		acqConfig.getSelectedHardwareParameter("modo").setParameterValue(
				((jRadioButtonB.isSelected()) ? "defmag" : "eqforce"));
		acqConfig.setTotalSamples(((jCheckBoxVideo.isSelected()) ? 14 : 7));
		fireICustomizerListenerDone();
	}// GEN-LAST:event_jButtonOKActionPerformed

	private void jButtonDefaultsActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonDefaultsActionPerformed
	{// GEN-HEADEREND:event_jButtonDefaultsActionPerformed
		jRadioButtonB.setSelected(true);
		jCheckBoxVideo.setSelected(false);
		jSliderTAce.setValue(4000);
		jSliderTAce.setEnabled(true);
		jTextFieldTAce.setEnabled(true);
		jSliderTDef.setEnabled(false);
		jTextFieldTDef.setEnabled(false);
		jSliderTDef.setValue(0);
		jSliderIHelm.setValue(400);
	}// GEN-LAST:event_jButtonDefaultsActionPerformed

	private void jRadioButtonFMouseReleased(final java.awt.event.MouseEvent evt)// GEN-FIRST:event_jRadioButtonFMouseReleased
	{// GEN-HEADEREND:event_jRadioButtonFMouseReleased
		jSliderTDef.setEnabled(true);
		jTextFieldTDef.setEnabled(true);
		jSliderTDef.setValue(jSliderTAce.getValue());
	}// GEN-LAST:event_jRadioButtonFMouseReleased

	private void jRadioButtonBMouseReleased(final java.awt.event.MouseEvent evt)// GEN-FIRST:event_jRadioButtonBMouseReleased
	{// GEN-HEADEREND:event_jRadioButtonBMouseReleased
		jSliderTDef.setEnabled(false);
		jTextFieldTDef.setEnabled(false);
		jSliderTDef.setValue(0);
	}// GEN-LAST:event_jRadioButtonBMouseReleased

	private void jTextFieldIHelmFocusLost(final java.awt.event.FocusEvent evt)// GEN-FIRST:event_jTextFieldIHelmFocusLost
	{// GEN-HEADEREND:event_jTextFieldIHelmFocusLost
		adjustSlider(jSliderIHelm, jTextFieldIHelm);
	}// GEN-LAST:event_jTextFieldIHelmFocusLost

	private void jSliderIHelmStateChanged(final javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_jSliderIHelmStateChanged
	{// GEN-HEADEREND:event_jSliderIHelmStateChanged
		jTextFieldIHelm.setText("" + jSliderIHelm.getValue());
	}// GEN-LAST:event_jSliderIHelmStateChanged

	private void jTextFieldTDefFocusLost(final java.awt.event.FocusEvent evt)// GEN-FIRST:event_jTextFieldTDefFocusLost
	{// GEN-HEADEREND:event_jTextFieldTDefFocusLost
		adjustSlider(jSliderTDef, jTextFieldTDef);
	}// GEN-LAST:event_jTextFieldTDefFocusLost

	private void jSliderTDefStateChanged(final javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_jSliderTDefStateChanged
	{// GEN-HEADEREND:event_jSliderTDefStateChanged
		jTextFieldTDef.setText("" + jSliderTDef.getValue());
		if (jSliderTDef.isEnabled() && jSliderTDef.getValue() < 500) {
			jSliderTDef.setValue(500);
		}
		if (jSliderTDef.isEnabled()) {
			jSliderTAce.setValue(jSliderTDef.getValue());
		}
	}// GEN-LAST:event_jSliderTDefStateChanged

	private void jTextFieldTAceFocusLost(final java.awt.event.FocusEvent evt)// GEN-FIRST:event_jTextFieldTAceFocusLost
	{// GEN-HEADEREND:event_jTextFieldTAceFocusLost
		adjustSlider(jSliderTAce, jTextFieldTAce);
	}// GEN-LAST:event_jTextFieldTAceFocusLost

	private void jSliderTAceStateChanged(final javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_jSliderTAceStateChanged
	{// GEN-HEADEREND:event_jSliderTAceStateChanged
		jTextFieldTAce.setText("" + jSliderTAce.getValue());
		if (jSliderTDef.isEnabled()) {
			jSliderTDef.setValue(jSliderTAce.getValue());
		}
	}// GEN-LAST:event_jSliderTAceStateChanged

	private void adjustSlider(final javax.swing.JSlider slider, final javax.swing.JTextField field) {
		int num = 0;
		try {
			num = Integer.parseInt(field.getText().trim());
		} catch (final NumberFormatException nfe) {
			field.setText("" + slider.getValue());
		}
		if (num > slider.getMaximum() || num < slider.getMinimum()) {
			field.setText("" + slider.getValue());
		} else {
			slider.setValue(num);
		}
	}

	/*
	 * public static void main(String args[]) { javax.swing.JFrame dummy = new
	 * javax.swing.JFrame(); dummy.getContentPane().add(new ThomsonCustomizer(),
	 * java.awt.BorderLayout.CENTER); dummy.pack(); dummy.show(); }
	 */

	/** Utility field used by event firing mechanism. */
	private javax.swing.event.EventListenerList listenerList = null;

	/**
	 * Registers ICustomizerListener to receive events.
	 * 
	 * @param listener The listener to register.
	 */
	@Override
	public synchronized void addICustomizerListener(final ICustomizerListener listener) {
		if (listenerList == null) {
			listenerList = new javax.swing.event.EventListenerList();
		}
		listenerList.add(ICustomizerListener.class, listener);
	}

	/**
	 * Removes ICustomizerListener from the list of listeners.
	 * 
	 * @param listener The listener to remove.
	 */
	@Override
	public synchronized void removeICustomizerListener(final ICustomizerListener listener) {
		listenerList.remove(ICustomizerListener.class, listener);
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerCanceled() {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {
				((ICustomizerListener) listeners[i + 1]).canceled();
			}
		}
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerDone() {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {

				((ICustomizerListener) listeners[i + 1]).done();
			}
		}
	}

	private HardwareInfo hardwareInfo = null;
	private HardwareAcquisitionConfig acqConfig = null;

	@Override
	public HardwareAcquisitionConfig getAcquisitionConfig() {
		return acqConfig;
	}

	@Override
	public void setHardwareAcquisitionConfig(final HardwareAcquisitionConfig acqConfig) {
		this.acqConfig = acqConfig;
		if (acqConfig != null) {
			final int ta = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("tensaoaceleracao"));
			jSliderTAce.setValue(ta);
			final int bobines = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("correntebobines"));
			jSliderIHelm.setValue(bobines);
			final int video = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("video"));
			jCheckBoxVideo.setSelected(video == 1);
			final String modo = acqConfig.getSelectedHardwareParameterValue("modo");

			jRadioButtonB.setSelected(modo.equals("defmag"));
		}
	}

	@Override
	public void setHardwareInfo(final HardwareInfo hardwareInfo) {
		this.hardwareInfo = hardwareInfo;
	}

	protected HardwareInfo getHardwareInfo() {
		return hardwareInfo;
	}

	@Override
	public javax.swing.JComponent getCustomizerComponent() {
		return this;
	}

	@Override
	public javax.swing.ImageIcon getCustomizerIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/thomson/resources/thomson_iconified.png"));
	}

	@Override
	public String getCustomizerTitle() {
		return ReCResourceBundle.findStringOrDefault("thomson$rec.exp.thomson.customizer.title","thomson$rec.exp.thomson.customizer.title");
	}

	@Override
	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.JButton jButtonCancel;
	private javax.swing.JButton jButtonDefaults;
	private javax.swing.JButton jButtonOK;
	private javax.swing.JCheckBox jCheckBoxVideo;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JPanel jPanelSend;
	private javax.swing.JRadioButton jRadioButtonB;
	private javax.swing.JRadioButton jRadioButtonF;
	private javax.swing.JSlider jSliderIHelm;
	private javax.swing.JSlider jSliderTAce;
	private javax.swing.JSlider jSliderTDef;
	private javax.swing.JTextField jTextFieldIHelm;
	private javax.swing.JTextField jTextFieldTAce;
	private javax.swing.JTextField jTextFieldTDef;
	// End of variables declaration//GEN-END:variables

}
