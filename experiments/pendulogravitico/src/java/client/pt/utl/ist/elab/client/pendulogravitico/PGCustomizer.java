/*
 * RadioactividadeCustomizer.java
 *
 * Created on 16 de Maio de 2003, 10:11
 */

package pt.utl.ist.elab.client.pendulogravitico;

import java.util.Hashtable;

import javax.swing.JLabel;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.metadata.HardwareInfo;
import com.linkare.rec.data.synch.Frequency;
import com.linkare.rec.impl.client.customizer.ICustomizerListener;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

/**
 * 
 * @author Jos√© Pedro Pereira - Linkare TI
 */
public class PGCustomizer extends javax.swing.JPanel implements com.linkare.rec.impl.client.customizer.ICustomizer {

	java.text.DecimalFormat df = new java.text.DecimalFormat("0.0#");

	/** Creates new form RadioactividadeCustomizer */
	public PGCustomizer() {
		initComponents();
		Hashtable slidersHLabels = new Hashtable(11);
		slidersHLabels.put(new Integer(152), new JLabel("15.2"));
		slidersHLabels.put(new Integer(160), new JLabel("16.0"));
		slidersHLabels.put(new Integer(170), new JLabel("17.0"));
		slidersHLabels.put(new Integer(180), new JLabel("18.0"));
		slidersHLabels.put(new Integer(190), new JLabel("19.0"));
		slidersHLabels.put(new Integer(200), new JLabel("20.0"));
		slidersHLabels.put(new Integer(210), new JLabel("21.0"));
		slidersHLabels.put(new Integer(220), new JLabel("22.0"));
		slidersHLabels.put(new Integer(230), new JLabel("23.0"));
		slidersHLabels.put(new Integer(240), new JLabel("24.0"));
		slidersHLabels.put(new Integer(248), new JLabel("24.8"));

		sldHeight.setLabelTable(slidersHLabels);

		Hashtable slidersTLabels = new Hashtable(12);
		slidersTLabels.put(new Integer(11), new JLabel("1.1"));
		slidersTLabels.put(new Integer(20), new JLabel("2.0"));
		slidersTLabels.put(new Integer(30), new JLabel("3.0"));
		slidersTLabels.put(new Integer(40), new JLabel("4.0"));
		slidersTLabels.put(new Integer(50), new JLabel("5.0"));
		slidersTLabels.put(new Integer(60), new JLabel("6.0"));
		slidersTLabels.put(new Integer(70), new JLabel("7.0"));
		slidersTLabels.put(new Integer(80), new JLabel("8.0"));
		slidersTLabels.put(new Integer(90), new JLabel("9.0"));
		slidersTLabels.put(new Integer(100), new JLabel("10.0"));
		slidersTLabels.put(new Integer(110), new JLabel("11.0"));
		slidersTLabels.put(new Integer(120), new JLabel("12.0"));
		slidersTLabels.put(new Integer(135), new JLabel("13.5"));

		sldAngle.setLabelTable(slidersTLabels);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		java.awt.GridBagConstraints gridBagConstraints;

		buttonGroupStatus = new javax.swing.ButtonGroup();
		jPanel2 = new javax.swing.JPanel();
		btnOK = new javax.swing.JButton();
		btnCancel = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		btnDefaults = new javax.swing.JButton();
		jLabel3 = new javax.swing.JLabel();
		jPanel3 = new javax.swing.JPanel();
		jPanel5 = new javax.swing.JPanel();
		sldAngle = new javax.swing.JSlider();
		jPanel7 = new javax.swing.JPanel();
		tfAngle = new javax.swing.JTextField();
		jPanel6 = new javax.swing.JPanel();
		sldNumSamples = new javax.swing.JSlider();
		lblErrorSamplesTooHigh = new javax.swing.JLabel();
		jPanel8 = new javax.swing.JPanel();
		tfNumSamples = new javax.swing.JTextField();
		jPanel1 = new javax.swing.JPanel();
		sldFreq = new javax.swing.JSlider();
		jPanel9 = new javax.swing.JPanel();
		tfFreq = new javax.swing.JTextField();
		jPanel51 = new javax.swing.JPanel();
		sldHeight = new javax.swing.JSlider();
		jPanel4 = new javax.swing.JPanel();
		tfHeight = new javax.swing.JTextField();

		setLayout(new java.awt.BorderLayout());

		setMinimumSize(new java.awt.Dimension(420, 400));
		setPreferredSize(new java.awt.Dimension(600, 400));
		jPanel2.setLayout(new java.awt.GridBagLayout());

		jPanel2.setMinimumSize(new java.awt.Dimension(350, 42));
		jPanel2.setPreferredSize(new java.awt.Dimension(350, 42));
		btnOK.setText(ReCResourceBundle.findString("ReCExpPG$rec.exp.lbl.pg.ok"));
		btnOK.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnOKActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		jPanel2.add(btnOK, gridBagConstraints);

		btnCancel.setText(ReCResourceBundle.findString("ReCExpPG$rec.exp.lbl.pg.cancel"));
		btnCancel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnCancelActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		jPanel2.add(btnCancel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 10.0;
		jPanel2.add(jLabel1, gridBagConstraints);

		btnDefaults.setText(ReCResourceBundle.findString("ReCExpPG$rec.exp.lbl.pg.dftacq"));
		btnDefaults.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnDefaultsActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 1;
		jPanel2.add(btnDefaults, gridBagConstraints);

		jLabel3.setText("    ");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weighty = 1.0;
		jPanel2.add(jLabel3, gridBagConstraints);

		add(jPanel2, java.awt.BorderLayout.SOUTH);

		jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));

		jPanel3.setMinimumSize(new java.awt.Dimension(350, 160));
		jPanel5.setLayout(new java.awt.BorderLayout());

		jPanel5.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findString("ReCExpPG$rec.exp.lbl.pg.iniang")));
		jPanel5.setMinimumSize(new java.awt.Dimension(350, 80));
		jPanel5.setPreferredSize(new java.awt.Dimension(450, 80));
		sldAngle.setMajorTickSpacing(10);
		sldAngle.setMaximum(135);
		sldAngle.setMinimum(11);
		sldAngle.setMinorTickSpacing(1);
		sldAngle.setPaintLabels(true);
		sldAngle.setPaintTicks(true);
		sldAngle.setPaintTrack(false);
		sldAngle.setSnapToTicks(true);
		sldAngle.setMinimumSize(new java.awt.Dimension(250, 42));
		sldAngle.setPreferredSize(new java.awt.Dimension(250, 42));
		sldAngle.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				sldAngleStateChanged(evt);
			}
		});

		jPanel5.add(sldAngle, java.awt.BorderLayout.CENTER);

		jPanel7.setLayout(new java.awt.GridBagLayout());

		tfAngle.setColumns(3);
		tfAngle.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		tfAngle.setText("5.0");
		tfAngle.setMaximumSize(new java.awt.Dimension(30, 16));
		tfAngle.setMinimumSize(new java.awt.Dimension(30, 16));
		tfAngle.setPreferredSize(new java.awt.Dimension(37, 16));
		tfAngle.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				tfAngleFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel7.add(tfAngle, gridBagConstraints);

		jPanel5.add(jPanel7, java.awt.BorderLayout.EAST);

		jPanel3.add(jPanel5);

		jPanel6.setLayout(new java.awt.BorderLayout());

		jPanel6.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findString("ReCExpPG$rec.exp.lbl.pg.ns")));
		jPanel6.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
		jPanel6.setMinimumSize(new java.awt.Dimension(350, 80));
		jPanel6.setPreferredSize(new java.awt.Dimension(350, 80));
		sldNumSamples.setMajorTickSpacing(100);
		sldNumSamples.setMaximum(500);
		sldNumSamples.setMinorTickSpacing(50);
		sldNumSamples.setPaintLabels(true);
		sldNumSamples.setPaintTicks(true);
		sldNumSamples.setPaintTrack(false);
		sldNumSamples.setValue(250);
		sldNumSamples.setMaximumSize(new java.awt.Dimension(1000, 32767));
		sldNumSamples.setMinimumSize(new java.awt.Dimension(250, 42));
		sldNumSamples.setPreferredSize(new java.awt.Dimension(250, 42));
		sldNumSamples.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				sldNumSamplesStateChanged(evt);
			}
		});

		jPanel6.add(sldNumSamples, java.awt.BorderLayout.CENTER);

		lblErrorSamplesTooHigh.setForeground(new java.awt.Color(255, 0, 0));
		lblErrorSamplesTooHigh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		lblErrorSamplesTooHigh.setEnabled(false);
		jPanel6.add(lblErrorSamplesTooHigh, java.awt.BorderLayout.NORTH);

		jPanel8.setLayout(new java.awt.GridBagLayout());

		tfNumSamples.setColumns(3);
		tfNumSamples.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		tfNumSamples.setText("250");
		tfNumSamples.setMaximumSize(new java.awt.Dimension(30, 16));
		tfNumSamples.setMinimumSize(new java.awt.Dimension(30, 16));
		tfNumSamples.setPreferredSize(new java.awt.Dimension(37, 16));
		tfNumSamples.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				tfNumSamplesFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel8.add(tfNumSamples, gridBagConstraints);

		jPanel6.add(jPanel8, java.awt.BorderLayout.EAST);

		jPanel3.add(jPanel6);

		jPanel1.setLayout(new java.awt.BorderLayout());

		jPanel1.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findString("ReCExpPG$rec.exp.lbl.pg.freq")));
		jPanel1.setMinimumSize(new java.awt.Dimension(350, 80));
		jPanel1.setPreferredSize(new java.awt.Dimension(350, 80));
		sldFreq.setMajorTickSpacing(25);
		sldFreq.setMaximum(110);
		sldFreq.setMinimum(1);
		sldFreq.setMinorTickSpacing(5);
		sldFreq.setPaintLabels(true);
		sldFreq.setPaintTicks(true);
		sldFreq.setPaintTrack(false);
		sldFreq.setValue(100);
		sldFreq.setMaximumSize(new java.awt.Dimension(1000, 32767));
		sldFreq.setMinimumSize(new java.awt.Dimension(255, 80));
		sldFreq.setPreferredSize(new java.awt.Dimension(255, 80));
		sldFreq.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				sldFreqStateChanged(evt);
			}
		});

		jPanel1.add(sldFreq, java.awt.BorderLayout.CENTER);

		jPanel9.setLayout(new java.awt.GridBagLayout());

		tfFreq.setColumns(3);
		tfFreq.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		tfFreq.setText("100");
		tfFreq.setMaximumSize(new java.awt.Dimension(30, 16));
		tfFreq.setMinimumSize(new java.awt.Dimension(30, 16));
		tfFreq.setPreferredSize(new java.awt.Dimension(37, 16));
		tfFreq.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				tfFreqFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel9.add(tfFreq, gridBagConstraints);

		jPanel1.add(jPanel9, java.awt.BorderLayout.EAST);

		jPanel3.add(jPanel1);

		add(jPanel3, java.awt.BorderLayout.CENTER);

		jPanel51.setLayout(new java.awt.BorderLayout());

		jPanel51.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findString("ReCExpPG$rec.exp.lbl.pg.iniheight")));
		jPanel51.setMinimumSize(new java.awt.Dimension(100, 350));
		jPanel51.setPreferredSize(new java.awt.Dimension(150, 350));
		sldHeight.setMajorTickSpacing(10);
		sldHeight.setMaximum(248);
		sldHeight.setMinimum(152);
		sldHeight.setMinorTickSpacing(1);
		sldHeight.setOrientation(javax.swing.JSlider.VERTICAL);
		sldHeight.setPaintLabels(true);
		sldHeight.setPaintTicks(true);
		sldHeight.setPaintTrack(false);
		sldHeight.setValue(230);
		sldHeight.setMaximumSize(new java.awt.Dimension(1000, 32767));
		sldHeight.setMinimumSize(new java.awt.Dimension(50, 250));
		sldHeight.setPreferredSize(new java.awt.Dimension(50, 250));
		sldHeight.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				sldHeightStateChanged(evt);
			}
		});

		jPanel51.add(sldHeight, java.awt.BorderLayout.CENTER);

		jPanel4.setLayout(new java.awt.GridBagLayout());

		tfHeight.setColumns(3);
		tfHeight.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		tfHeight.setText("23.0");
		tfHeight.setMaximumSize(new java.awt.Dimension(30, 16));
		tfHeight.setMinimumSize(new java.awt.Dimension(30, 16));
		tfHeight.setPreferredSize(new java.awt.Dimension(37, 16));
		tfHeight.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				tfHeightFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel4.add(tfHeight, gridBagConstraints);

		jPanel51.add(jPanel4, java.awt.BorderLayout.EAST);

		add(jPanel51, java.awt.BorderLayout.WEST);

	}// GEN-END:initComponents

	private void tfAngleFocusLost(java.awt.event.FocusEvent evt)// GEN-FIRST:event_tfAngleFocusLost
	{// GEN-HEADEREND:event_tfAngleFocusLost
		String strAngle = tfAngle.getText();
		if (strAngle.trim().equals(""))
			return;
		try {
			int angle = (int) (Float.parseFloat(strAngle) * 10);
			if (angle <= sldAngle.getMaximum() && angle > sldAngle.getMinimum())
				sldAngle.setValue(angle);
			else
				tfAngle.setText("" + sldAngle.getValue() / 10f);
		} catch (Exception e) {
			tfAngle.setText("" + sldAngle.getValue() / 10f);
		}
	}// GEN-LAST:event_tfAngleFocusLost

	private void tfNumSamplesFocusLost(java.awt.event.FocusEvent evt)// GEN-FIRST:event_tfNumSamplesFocusLost
	{// GEN-HEADEREND:event_tfNumSamplesFocusLost
		String strNumSamples = tfNumSamples.getText();
		if (strNumSamples.trim().equals(""))
			return;
		try {
			int numSamples = Integer.parseInt(strNumSamples);
			if (numSamples <= sldNumSamples.getMaximum() && numSamples > sldNumSamples.getMinimum())
				sldNumSamples.setValue(numSamples);
			else
				tfNumSamples.setText("" + sldNumSamples.getValue());
		} catch (Exception e) {
			tfNumSamples.setText("" + sldNumSamples.getValue());
		}
		checkMaxNumSamples();

	}// GEN-LAST:event_tfNumSamplesFocusLost

	private void tfFreqFocusLost(java.awt.event.FocusEvent evt)// GEN-FIRST:event_tfFreqFocusLost
	{// GEN-HEADEREND:event_tfFreqFocusLost
		String strFreq = tfFreq.getText();
		if (strFreq.trim().equals(""))
			return;
		try {
			int Freq = Integer.parseInt(strFreq);
			if (Freq <= sldFreq.getMaximum() && Freq > sldFreq.getMinimum())
				sldFreq.setValue(Freq);
			else
				tfFreq.setText("" + sldFreq.getValue());
		} catch (Exception e) {
			tfFreq.setText("" + sldFreq.getValue());
		}
		checkMaxNumSamples();
	}// GEN-LAST:event_tfFreqFocusLost

	private void tfHeightFocusLost(java.awt.event.FocusEvent evt)// GEN-FIRST:event_tfHeightFocusLost
	{// GEN-HEADEREND:event_tfHeightFocusLost
		String strHeight = tfHeight.getText();
		if (strHeight.trim().equals(""))
			return;
		try {
			int height = (int) (Float.parseFloat(strHeight) * 10);
			if (height <= sldHeight.getMaximum() && height > sldHeight.getMinimum())
				sldHeight.setValue(height);
			else
				tfHeight.setText("" + sldHeight.getValue() / 10f);
		} catch (Exception e) {
			tfHeight.setText("" + sldHeight.getValue() / 10f);
		}
	}// GEN-LAST:event_tfHeightFocusLost

	private void sldHeightStateChanged(javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_sldHeightStateChanged
	{// GEN-HEADEREND:event_sldHeightStateChanged
		tfHeight.setText("" + (sldHeight.getValue() / 10f));
	}// GEN-LAST:event_sldHeightStateChanged

	private void sldAngleStateChanged(javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_sldAngleStateChanged
	{// GEN-HEADEREND:event_sldAngleStateChanged
		tfAngle.setText("" + (sldAngle.getValue() / 10f));
	}// GEN-LAST:event_sldAngleStateChanged

	private void sldFreqStateChanged(javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_sldFreqStateChanged
	{// GEN-HEADEREND:event_sldFreqStateChanged
		if (sldFreq.getValue() == 0) {
			sldFreq.setValue(1);

		}
		tfFreq.setText("" + sldFreq.getValue());

		checkMaxNumSamples();
	}// GEN-LAST:event_sldFreqStateChanged

	private void checkMaxNumSamples() {
		lblErrorSamplesTooHigh.setEnabled((((float) sldNumSamples.getValue() / sldFreq.getValue()) > 60));
		btnOK.setEnabled(!lblErrorSamplesTooHigh.isEnabled());

		if (!btnOK.isEnabled())
			lblErrorSamplesTooHigh.setText(ReCResourceBundle.findStringOrDefault("ReCExpPG$rec.exp.lbl.pg.maxsamples",
					"The number of samples must be: ")
					+ (sldFreq.getValue() * 60));
		else
			lblErrorSamplesTooHigh.setText(ReCResourceBundle.findStringOrDefault("ReCExpPG$rec.exp.lbl.pg.time",
					"Exp duration: ")
					+ df.format((float) sldNumSamples.getValue() / sldFreq.getValue()) + " s");
	}

	private void sldNumSamplesStateChanged(javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_sldNumSamplesStateChanged
	{// GEN-HEADEREND:event_sldNumSamplesStateChanged

		if (sldNumSamples.getValue() == 0) {
			sldNumSamples.setValue(1);

		}
		tfNumSamples.setText("" + sldNumSamples.getValue());
		checkMaxNumSamples();

	}// GEN-LAST:event_sldNumSamplesStateChanged

	private void btnDefaultsActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnDefaultsActionPerformed
	{// GEN-HEADEREND:event_btnDefaultsActionPerformed
		sldNumSamples.setValue(250);
		tfNumSamples.setText("250");
		sldAngle.setValue(50);
		tfAngle.setText("" + 5.0);
		sldFreq.setValue(100);
		tfFreq.setText("" + 100);
		sldHeight.setValue(230);
		tfHeight.setText("" + 23.0);
	}// GEN-LAST:event_btnDefaultsActionPerformed

	private void btnCancelActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnCancelActionPerformed
	{// GEN-HEADEREND:event_btnCancelActionPerformed
		fireICustomizerListenerCanceled();
	}// GEN-LAST:event_btnCancelActionPerformed

	private void btnOKActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnOKActionPerformed
	{// GEN-HEADEREND:event_btnOKActionPerformed

		acqConfig.setTotalSamples(sldNumSamples.getValue() == 0 ? 1 : sldNumSamples.getValue());
		acqConfig.getSelectedHardwareParameter("Altura").setParameterValue("" + sldHeight.getValue() / 10f);
		acqConfig.getSelectedHardwareParameter("Angulo inicial").setParameterValue("" + sldAngle.getValue() / 10f);
		acqConfig.setSelectedFrequency(new Frequency((double) sldFreq.getValue(), hardwareInfo
				.getHardwareFrequencies(0).getMinimumFrequency().getMultiplier()));
		fireICustomizerListenerDone();
	}// GEN-LAST:event_btnOKActionPerformed

	public static void main(String[] args) {
		ReCResourceBundle.loadResourceBundle("ReCExpPG",
				"recresource:///pt/utl/ist/elab/client/pendulogravitico/resources/messages);
		javax.swing.JFrame dummy = new javax.swing.JFrame();
		PGCustomizer pg = new PGCustomizer();
		dummy.getContentPane().add(pg, java.awt.BorderLayout.CENTER);
		dummy.pack();
		dummy.show();
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnCancel;
	private javax.swing.JButton btnDefaults;
	private javax.swing.JButton btnOK;
	private javax.swing.ButtonGroup buttonGroupStatus;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel51;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JPanel jPanel7;
	private javax.swing.JPanel jPanel8;
	private javax.swing.JPanel jPanel9;
	private javax.swing.JLabel lblErrorSamplesTooHigh;
	private javax.swing.JSlider sldAngle;
	private javax.swing.JSlider sldFreq;
	private javax.swing.JSlider sldHeight;
	private javax.swing.JSlider sldNumSamples;
	private javax.swing.JTextField tfAngle;
	private javax.swing.JTextField tfFreq;
	private javax.swing.JTextField tfHeight;
	private javax.swing.JTextField tfNumSamples;
	// End of variables declaration//GEN-END:variables

	/** Utility field used by event firing mechanism. */
	private javax.swing.event.EventListenerList listenerList = null;

	/**
	 * Registers ICustomizerListener to receive events.
	 * 
	 * @param listener The listener to register.
	 */
	public synchronized void addICustomizerListener(ICustomizerListener listener) {
		if (listenerList == null) {
			listenerList = new javax.swing.event.EventListenerList();
		}
		listenerList.add(ICustomizerListener.class, listener);
	}

	/**
	 * Removes ICustomizerListener from the list of listeners.
	 * 
	 * @param listener The listener to remove.
	 */
	public synchronized void removeICustomizerListener(ICustomizerListener listener) {
		listenerList.remove(ICustomizerListener.class, listener);
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerCanceled() {
		if (listenerList == null)
			return;
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {
				((ICustomizerListener) listeners[i + 1]).canceled();
			}
		}
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerDone() {
		if (listenerList == null)
			return;
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {

				((ICustomizerListener) listeners[i + 1]).done();
			}
		}
	}

	private HardwareInfo hardwareInfo = null;
	private HardwareAcquisitionConfig acqConfig = null;

	public HardwareAcquisitionConfig getAcquisitionConfig() {
		return acqConfig;
	}

	public void setHardwareAcquisitionConfig(HardwareAcquisitionConfig acqConfig) {
		this.acqConfig = acqConfig;
		if (acqConfig != null) {
			sldNumSamples.setValue(acqConfig.getTotalSamples());
			tfNumSamples.setText("" + acqConfig.getTotalSamples());
			float height = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("Altura"));
			sldHeight.setValue((int) (height * 10));
			// tfHeight.setText(""+height);
			float teta = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("Angulo inicial"));
			sldAngle.setValue((int) (teta * 10));
			// tfAngle.setText(""+teta);

			int freq = (int) acqConfig.getSelectedFrequency().getFrequency();
			sldFreq.setValue(freq);
			tfFreq.setText("" + freq);

		}
	}

	public void setHardwareInfo(HardwareInfo hardwareInfo) {
		this.hardwareInfo = hardwareInfo;
	}

	protected HardwareInfo getHardwareInfo() {
		return this.hardwareInfo;
	}

	public javax.swing.JComponent getCustomizerComponent() {
		return this;
	}

	public javax.swing.ImageIcon getCustomizerIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/pendulogravitico/resources/pendulo_iconified.gif"));
	}

	public String getCustomizerTitle() {
		return "Gravity Pendulum Experiment Configuration Utility";
	}

	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

}
