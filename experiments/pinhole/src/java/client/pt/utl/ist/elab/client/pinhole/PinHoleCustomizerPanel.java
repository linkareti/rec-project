/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OpticaCustomizerPanel.java
 *
 * Created on 09-Nov-2010, 11:29:48
 */
package pt.utl.ist.elab.client.pinhole;

import java.util.Dictionary;
import java.util.Enumeration;
import java.util.Hashtable;

import javax.swing.AbstractButton;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.impl.client.customizer.AbstractCustomizer;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

/**
 *
 * @author npadriano
 */
public class PinHoleCustomizerPanel extends AbstractCustomizer {

    /** Generated UID */
    private static final long serialVersionUID = -6367415208236048245L;
    public static final int NUMBER_OF_SAMPLES_FOR_SERIES = 1625;
    public static final int PROTOCOL_1_WAIT_MS = 20000;
    public static final int PROTOCOL_2_SAMPLING_INTERVAL_MS = 44;
    public static final int PROTOCOL_3_SAMPLING_INTERVAL_MS = 43;
    public static final int PROTOCOL_4_SAMPLING_INTERVAL_MS = 45;
    public static final int PROTOCOL_5_SAMPLING_INTERVAL_MS = 60000;

    /** Creates new form OpticaCustomizerPanel */
    public PinHoleCustomizerPanel() {
        initComponents();

        initComponentsManual();
        validateScreen();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pinholeSelect = new javax.swing.ButtonGroup();
        jTabbedPanePinhole = new javax.swing.JTabbedPane();
        jPanelConfiguration = new javax.swing.JPanel();
        jPanelLedDistance = new javax.swing.JPanel();
        jSliderLedDistanceInitial = new javax.swing.JSlider();
        jSliderLedDistanceFinal = new javax.swing.JSlider();
        jFormattedTextFieldLedDistanceFinal = new javax.swing.JFormattedTextField();
        jFormattedTextFieldLedDistanceInitial = new javax.swing.JFormattedTextField();
        jPanelTimeBetweenSamples = new javax.swing.JPanel();
        jSliderTimeBetweenSamples = new javax.swing.JSlider();
        jFormattedTextFieldTimeBetweenSamples = new javax.swing.JFormattedTextField();
        jPanelPinHoleDiameter = new javax.swing.JPanel();
        jRadioButtonD10 = new javax.swing.JRadioButton();
        jRadioButtonD30 = new javax.swing.JRadioButton();
        jRadioButtonD60 = new javax.swing.JRadioButton();
        jRadioButtonD85 = new javax.swing.JRadioButton();
        jRadioButtonD110 = new javax.swing.JRadioButton();
        jRadioButton260 = new javax.swing.JRadioButton();
        jPanelDistanceBetweenSamples = new javax.swing.JPanel();
        jSliderDistanceBetweenSamples = new javax.swing.JSlider();
        jFormattedTextFieldDistanceBetweenSamples = new javax.swing.JFormattedTextField();
        jPanelCalibration = new javax.swing.JPanel();
        jPanelCalibrationButtons = new javax.swing.JPanel();
        jCheckBoxCalibrationPinhole = new javax.swing.JCheckBox();
        jCheckBoxCalibrationLeds = new javax.swing.JCheckBox();
        jLabelCalibration = new javax.swing.JLabel();
        jPanelControlButtons = new javax.swing.JPanel();
        jButtonOk = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jButtonDefaultConfig = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(350, 490));
        setName("PinholeCustomizer"); // NOI18N
        setPreferredSize(new java.awt.Dimension(350, 490));
        setLayout(new java.awt.BorderLayout());

        jTabbedPanePinhole.setName("jTabbedPanePinhole"); // NOI18N
        jTabbedPanePinhole.setPreferredSize(new java.awt.Dimension(350, 417));
        jTabbedPanePinhole.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPanePinholeStateChanged(evt);
            }
        });

        jPanelConfiguration.setName("jPanelConfiguration"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.linkare.rec.impl.newface.ReCApplication.class).getContext().getResourceMap(PinHoleCustomizerPanel.class);
        jPanelLedDistance.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanelLedDistance.border.title"))); // NOI18N
        jPanelLedDistance.setName("jPanelLedDistance"); // NOI18N
        jPanelLedDistance.setPreferredSize(new java.awt.Dimension(330, 126));

        jSliderLedDistanceInitial.setMajorTickSpacing(550);
        jSliderLedDistanceInitial.setMaximum(3680);
        jSliderLedDistanceInitial.setMinimum(1480);
        jSliderLedDistanceInitial.setMinorTickSpacing(10);
        jSliderLedDistanceInitial.setPaintLabels(true);
        jSliderLedDistanceInitial.setSnapToTicks(true);
        jSliderLedDistanceInitial.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jSliderLedDistanceInitial.border.title"))); // NOI18N
        jSliderLedDistanceInitial.setMinimumSize(new java.awt.Dimension(250, 16));
        jSliderLedDistanceInitial.setName("jSliderLedDistanceInitial"); // NOI18N
        jSliderLedDistanceInitial.setPreferredSize(new java.awt.Dimension(250, 42));

        jSliderLedDistanceInitial.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderLedDistanceInitialStateChanged(evt);
            }
        });

        jSliderLedDistanceFinal.setMajorTickSpacing(550);
        jSliderLedDistanceFinal.setMaximum(3680);
        jSliderLedDistanceFinal.setMinimum(1480);
        jSliderLedDistanceFinal.setMinorTickSpacing(10);
        jSliderLedDistanceFinal.setPaintLabels(true);
        jSliderLedDistanceFinal.setSnapToTicks(true);
        jSliderLedDistanceFinal.setValue(1500);
        jSliderLedDistanceFinal.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jSliderLedDistanceFinal.border.title"))); // NOI18N
        jSliderLedDistanceFinal.setMinimumSize(new java.awt.Dimension(250, 16));
        jSliderLedDistanceFinal.setName("jSliderLedDistanceFinal"); // NOI18N
        jSliderLedDistanceFinal.setPreferredSize(new java.awt.Dimension(250, 42));
        jSliderLedDistanceFinal.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderLedDistanceFinalStateChanged(evt);
            }
        });

        jFormattedTextFieldLedDistanceFinal.setText(resourceMap.getString("jFormattedTextFieldLedDistanceFinal.text")); // NOI18N
        jFormattedTextFieldLedDistanceFinal.setMaximumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldLedDistanceFinal.setMinimumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldLedDistanceFinal.setName("jFormattedTextFieldLedDistanceFinal"); // NOI18N
        jFormattedTextFieldLedDistanceFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldLedDistanceFinalFocusLost(evt);
            }
        });

        jFormattedTextFieldLedDistanceInitial.setMaximumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldLedDistanceInitial.setMinimumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldLedDistanceInitial.setName("jFormattedTextFieldLedDistanceInitial"); // NOI18N
        jFormattedTextFieldLedDistanceInitial.setPreferredSize(new java.awt.Dimension(40, 19));

        jFormattedTextFieldLedDistanceInitial.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldLedDistanceInitialFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanelLedDistanceLayout = new javax.swing.GroupLayout(jPanelLedDistance);
        jPanelLedDistance.setLayout(jPanelLedDistanceLayout);
        jPanelLedDistanceLayout.setHorizontalGroup(
            jPanelLedDistanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLedDistanceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLedDistanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelLedDistanceLayout.createSequentialGroup()
                        .addComponent(jSliderLedDistanceInitial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFormattedTextFieldLedDistanceInitial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelLedDistanceLayout.createSequentialGroup()
                        .addComponent(jSliderLedDistanceFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFormattedTextFieldLedDistanceFinal, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelLedDistanceLayout.setVerticalGroup(
            jPanelLedDistanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLedDistanceLayout.createSequentialGroup()
                .addGroup(jPanelLedDistanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLedDistanceLayout.createSequentialGroup()
                        .addComponent(jSliderLedDistanceInitial, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jSliderLedDistanceFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelLedDistanceLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jFormattedTextFieldLedDistanceInitial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jFormattedTextFieldLedDistanceFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21))
        );

        jPanelTimeBetweenSamples.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanelTimeBetweenSamples.border.title"))); // NOI18N
        jPanelTimeBetweenSamples.setName("jPanelTimeBetweenSamples"); // NOI18N

        jSliderTimeBetweenSamples.setMajorTickSpacing(100);
        jSliderTimeBetweenSamples.setMaximum(300);
        jSliderTimeBetweenSamples.setMinorTickSpacing(1);
        jSliderTimeBetweenSamples.setPaintLabels(true);
        jSliderTimeBetweenSamples.setSnapToTicks(true);
        jSliderTimeBetweenSamples.setMinimumSize(new java.awt.Dimension(250, 16));
        jSliderTimeBetweenSamples.setName("jSliderTimeBetweenSamples"); // NOI18N
        jSliderTimeBetweenSamples.setPreferredSize(new java.awt.Dimension(250, 42));
        jSliderTimeBetweenSamples.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderTimeBetweenSamplesStateChanged(evt);
            }
        });

        jFormattedTextFieldTimeBetweenSamples.setText(resourceMap.getString("jFormattedTextFieldTimeBetweenSamples.text")); // NOI18N
        jFormattedTextFieldTimeBetweenSamples.setMaximumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldTimeBetweenSamples.setMinimumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldTimeBetweenSamples.setName("jFormattedTextFieldTimeBetweenSamples"); // NOI18N
        jFormattedTextFieldTimeBetweenSamples.setPreferredSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldTimeBetweenSamples.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldTimeBetweenSamplesFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanelTimeBetweenSamplesLayout = new javax.swing.GroupLayout(jPanelTimeBetweenSamples);
        jPanelTimeBetweenSamples.setLayout(jPanelTimeBetweenSamplesLayout);
        jPanelTimeBetweenSamplesLayout.setHorizontalGroup(
            jPanelTimeBetweenSamplesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTimeBetweenSamplesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSliderTimeBetweenSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFormattedTextFieldTimeBetweenSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelTimeBetweenSamplesLayout.setVerticalGroup(
            jPanelTimeBetweenSamplesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTimeBetweenSamplesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTimeBetweenSamplesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jSliderTimeBetweenSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextFieldTimeBetweenSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelPinHoleDiameter.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanelPinHoleSize.border.title"))); // NOI18N
        jPanelPinHoleDiameter.setName("jPanelPinHoleSize"); // NOI18N
        jPanelPinHoleDiameter.setPreferredSize(new java.awt.Dimension(330, 95));

        pinholeSelect.add(jRadioButtonD10);
        jRadioButtonD10.setSelected(true);
        jRadioButtonD10.setText(resourceMap.getString("jRadioButtonD10.text")); // NOI18N
        jRadioButtonD10.setHideActionText(true);
        jRadioButtonD10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRadioButtonD10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jRadioButtonD10.setName("jRadioButtonD10"); // NOI18N
        jRadioButtonD10.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        pinholeSelect.add(jRadioButtonD30);
        jRadioButtonD30.setText(resourceMap.getString("jRadioButtonD30.text")); // NOI18N
        jRadioButtonD30.setHideActionText(true);
        jRadioButtonD30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRadioButtonD30.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jRadioButtonD30.setName("jRadioButtonD30"); // NOI18N
        jRadioButtonD30.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        pinholeSelect.add(jRadioButtonD60);
        jRadioButtonD60.setText(resourceMap.getString("jRadioButtonD60.text")); // NOI18N
        jRadioButtonD60.setHideActionText(true);
        jRadioButtonD60.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRadioButtonD60.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jRadioButtonD60.setName("jRadioButtonD60"); // NOI18N
        jRadioButtonD60.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        pinholeSelect.add(jRadioButtonD85);
        jRadioButtonD85.setText(resourceMap.getString("jRadioButtonD85.text")); // NOI18N
        jRadioButtonD85.setHideActionText(true);
        jRadioButtonD85.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRadioButtonD85.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jRadioButtonD85.setName("jRadioButtonD85"); // NOI18N
        jRadioButtonD85.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        pinholeSelect.add(jRadioButtonD110);
        jRadioButtonD110.setText(resourceMap.getString("jRadioButtonD110.text")); // NOI18N
        jRadioButtonD110.setHideActionText(true);
        jRadioButtonD110.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRadioButtonD110.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jRadioButtonD110.setName("jRadioButtonD110"); // NOI18N
        jRadioButtonD110.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        pinholeSelect.add(jRadioButton260);
        jRadioButton260.setText(resourceMap.getString("jRadioButton260.text")); // NOI18N
        jRadioButton260.setHideActionText(true);
        jRadioButton260.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRadioButton260.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jRadioButton260.setName("jRadioButton260"); // NOI18N
        jRadioButton260.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout jPanelPinHoleDiameterLayout = new javax.swing.GroupLayout(jPanelPinHoleDiameter);
        jPanelPinHoleDiameter.setLayout(jPanelPinHoleDiameterLayout);
        jPanelPinHoleDiameterLayout.setHorizontalGroup(
            jPanelPinHoleDiameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPinHoleDiameterLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jRadioButtonD10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonD30, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonD60, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonD85, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonD110, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton260, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanelPinHoleDiameterLayout.setVerticalGroup(
            jPanelPinHoleDiameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPinHoleDiameterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPinHoleDiameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jRadioButton260)
                    .addComponent(jRadioButtonD110)
                    .addComponent(jRadioButtonD85)
                    .addComponent(jRadioButtonD60)
                    .addComponent(jRadioButtonD30)
                    .addComponent(jRadioButtonD10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelDistanceBetweenSamples.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanelDistanceBetweenSamples.border.title"))); // NOI18N
        jPanelDistanceBetweenSamples.setName("jPanelDistanceBetweenSamples"); // NOI18N

        jSliderDistanceBetweenSamples.setMajorTickSpacing(730);
        jSliderDistanceBetweenSamples.setMaximum(2200);
        jSliderDistanceBetweenSamples.setMinimum(10);
        jSliderDistanceBetweenSamples.setMinorTickSpacing(10);
        jSliderDistanceBetweenSamples.setPaintLabels(true);
        jSliderDistanceBetweenSamples.setName("jSliderDistanceBetweenSamples"); // NOI18N
        jSliderDistanceBetweenSamples.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderDistanceBetweenSamplesStateChanged(evt);
            }
        });

        jFormattedTextFieldDistanceBetweenSamples.setText(resourceMap.getString("jFormattedTextFieldDistanceBetweenSamples.text")); // NOI18N
        jFormattedTextFieldDistanceBetweenSamples.setName("jFormattedTextFieldDistanceBetweenSamples"); // NOI18N
        jFormattedTextFieldDistanceBetweenSamples.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jFormattedTextFieldDistanceBetweenSamplesPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanelDistanceBetweenSamplesLayout = new javax.swing.GroupLayout(jPanelDistanceBetweenSamples);
        jPanelDistanceBetweenSamples.setLayout(jPanelDistanceBetweenSamplesLayout);
        jPanelDistanceBetweenSamplesLayout.setHorizontalGroup(
            jPanelDistanceBetweenSamplesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDistanceBetweenSamplesLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(jSliderDistanceBetweenSamples, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jFormattedTextFieldDistanceBetweenSamples, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelDistanceBetweenSamplesLayout.setVerticalGroup(
            jPanelDistanceBetweenSamplesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDistanceBetweenSamplesLayout.createSequentialGroup()
                .addGroup(jPanelDistanceBetweenSamplesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jFormattedTextFieldDistanceBetweenSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSliderDistanceBetweenSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelConfigurationLayout = new javax.swing.GroupLayout(jPanelConfiguration);
        jPanelConfiguration.setLayout(jPanelConfigurationLayout);
        jPanelConfigurationLayout.setHorizontalGroup(
            jPanelConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfigurationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelDistanceBetweenSamples, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelLedDistance, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                    .addComponent(jPanelPinHoleDiameter, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                    .addComponent(jPanelTimeBetweenSamples, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelConfigurationLayout.setVerticalGroup(
            jPanelConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConfigurationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelLedDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelDistanceBetweenSamples, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelPinHoleDiameter, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelTimeBetweenSamples, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );

        jPanelLedDistance.getAccessibleContext().setAccessibleName(resourceMap.getString("jPanelLedDistance.AccessibleContext.accessibleName")); // NOI18N
        jPanelPinHoleDiameter.getAccessibleContext().setAccessibleName(resourceMap.getString("jPanelPinHoleSize.AccessibleContext.accessibleName")); // NOI18N

        jTabbedPanePinhole.addTab(resourceMap.getString("jPanelConfiguration.TabConstraints.tabTitle"), jPanelConfiguration); // NOI18N

        jPanelCalibration.setName("jPanelCalibration"); // NOI18N

        jPanelCalibrationButtons.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanelCalibrationButtons.border.title"))); // NOI18N
        jPanelCalibrationButtons.setName("jPanelCalibrationButtons"); // NOI18N
        jPanelCalibrationButtons.setPreferredSize(new java.awt.Dimension(330, 83));

        jCheckBoxCalibrationPinhole.setSelected(true);
        jCheckBoxCalibrationPinhole.setText(resourceMap.getString("jCheckBoxCalibrationPinhole.text")); // NOI18N
        jCheckBoxCalibrationPinhole.setName("jCheckBoxCalibrationPinhole"); // NOI18N
        jCheckBoxCalibrationPinhole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCalibrationPinholeActionPerformed(evt);
            }
        });

        jCheckBoxCalibrationLeds.setText(resourceMap.getString("jCheckBoxCalibrationLeds.text")); // NOI18N
        jCheckBoxCalibrationLeds.setName("jCheckBoxCalibrationLeds"); // NOI18N
        jCheckBoxCalibrationLeds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCalibrationLedsActionPerformed(evt);
            }
        });

        jLabelCalibration.setForeground(resourceMap.getColor("jLabelCalibration.foreground")); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pt/utl/ist/elab/pinhole/resources/PinHoleCustomizerPanel"); // NOI18N
        jLabelCalibration.setText(bundle.getString("jLabelCalibration.text")); // NOI18N
        jLabelCalibration.setEnabled(false);
        jLabelCalibration.setName("jLabelCalibration"); // NOI18N

        javax.swing.GroupLayout jPanelCalibrationButtonsLayout = new javax.swing.GroupLayout(jPanelCalibrationButtons);
        jPanelCalibrationButtons.setLayout(jPanelCalibrationButtonsLayout);
        jPanelCalibrationButtonsLayout.setHorizontalGroup(
            jPanelCalibrationButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCalibrationButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCalibrationButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxCalibrationLeds)
                    .addComponent(jCheckBoxCalibrationPinhole)
                    .addComponent(jLabelCalibration))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanelCalibrationButtonsLayout.setVerticalGroup(
            jPanelCalibrationButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCalibrationButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxCalibrationPinhole)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxCalibrationLeds)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelCalibration)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelCalibrationLayout = new javax.swing.GroupLayout(jPanelCalibration);
        jPanelCalibration.setLayout(jPanelCalibrationLayout);
        jPanelCalibrationLayout.setHorizontalGroup(
            jPanelCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCalibrationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelCalibrationButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelCalibrationLayout.setVerticalGroup(
            jPanelCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCalibrationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelCalibrationButtons, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(320, Short.MAX_VALUE))
        );

        jTabbedPanePinhole.addTab(resourceMap.getString("jPanelCalibration.TabConstraints.tabTitle"), jPanelCalibration); // NOI18N

        add(jTabbedPanePinhole, java.awt.BorderLayout.CENTER);

        jPanelControlButtons.setName("jPanelControlButtons"); // NOI18N
        jPanelControlButtons.setPreferredSize(new java.awt.Dimension(350, 37));

        jButtonOk.setText(resourceMap.getString("Ok.label")); // NOI18N
        jButtonOk.setName("Ok"); // NOI18N
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jButtonCancel.setText(resourceMap.getString("Cancel.label")); // NOI18N
        jButtonCancel.setName("Cancel"); // NOI18N
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonDefaultConfig.setText(resourceMap.getString("DefaultConfig.label")); // NOI18N
        jButtonDefaultConfig.setName("DefaultConfig"); // NOI18N
        jButtonDefaultConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDefaultConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelControlButtonsLayout = new javax.swing.GroupLayout(jPanelControlButtons);
        jPanelControlButtons.setLayout(jPanelControlButtonsLayout);
        jPanelControlButtonsLayout.setHorizontalGroup(
            jPanelControlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelControlButtonsLayout.createSequentialGroup()
                .addComponent(jButtonOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCancel)
                .addGap(18, 18, 18)
                .addComponent(jButtonDefaultConfig)
                .addContainerGap(59, Short.MAX_VALUE))
        );
        jPanelControlButtonsLayout.setVerticalGroup(
            jPanelControlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelControlButtonsLayout.createSequentialGroup()
                .addGroup(jPanelControlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOk)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonDefaultConfig))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jButtonOk.getAccessibleContext().setAccessibleName(resourceMap.getString("Ok.AccessibleContext.accessibleName")); // NOI18N
        jButtonCancel.getAccessibleContext().setAccessibleName(resourceMap.getString("jButtonCancel.AccessibleContext.accessibleName")); // NOI18N
        jButtonDefaultConfig.getAccessibleContext().setAccessibleName(resourceMap.getString("jButtonDefaultConfig.AccessibleContext.accessibleName")); // NOI18N

        add(jPanelControlButtons, java.awt.BorderLayout.PAGE_END);

    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        fireICustomizerListenerCanceled();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonDefaultConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDefaultConfigActionPerformed
        // tab Brewster
        jSliderLedDistanceInitial.setValue(1480);
        jFormattedTextFieldLedDistanceInitial.setText("148");
        jSliderLedDistanceFinal.setValue(3680);
        jFormattedTextFieldLedDistanceFinal.setText("368");
        jSliderTimeBetweenSamples.setValue(30);
        jFormattedTextFieldTimeBetweenSamples.setText("3.0");
        pinholeSelect.setSelected(jRadioButtonD10.getModel(), true);

        // tab Calibration
        jCheckBoxCalibrationPinhole.setSelected(true);
        jCheckBoxCalibrationLeds.setSelected(false);

    }//GEN-LAST:event_jButtonDefaultConfigActionPerformed

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed

        // inicializar parametros
        int protocol = 1;
        int pos_initial = 148;
        int pos_final = 368;
        int delta_pos = 1;
        float delay = 0.0F;
        float pinhole = 0.1F;
        int motor = 0;

        protocol = jTabbedPanePinhole.getSelectedIndex() + 1;

        if (protocol == 1) {
            pos_initial = jSliderLedDistanceInitial.getValue() / 10;
            pos_final = jSliderLedDistanceFinal.getValue() / 10;
            delta_pos = jSliderDistanceBetweenSamples.getValue() / 10;
            delay = (float) (jSliderTimeBetweenSamples.getValue()) / 10.F;
            Enumeration<AbstractButton> phlist = pinholeSelect.getElements();
            while (phlist.hasMoreElements()) {
                AbstractButton bt = phlist.nextElement();
                if (bt.isSelected()) {
                    pinhole = Float.valueOf(bt.getText());
                    break;
                }
            }
        } else if (protocol == 2) {
            if (jCheckBoxCalibrationPinhole.isSelected()) {
                motor = 1;
            }
            if (jCheckBoxCalibrationLeds.isSelected()) {
                motor += 2;
            }
            if (motor > 0) {
                --motor;
            }
        }

        getAcquisitionConfig().getSelectedHardwareParameter("protocolo").setParameterValue(String.valueOf(protocol));
        getAcquisitionConfig().getSelectedHardwareParameter("pos_initial").setParameterValue(String.valueOf(pos_initial));
        getAcquisitionConfig().getSelectedHardwareParameter("pos_final").setParameterValue(String.valueOf(pos_final));
        getAcquisitionConfig().getSelectedHardwareParameter("delta_pos").setParameterValue(String.valueOf(delta_pos));
        getAcquisitionConfig().getSelectedHardwareParameter("delay").setParameterValue(String.valueOf(delay));
        getAcquisitionConfig().getSelectedHardwareParameter("pinhole").setParameterValue(String.valueOf(pinhole));
        getAcquisitionConfig().getSelectedHardwareParameter("motor").setParameterValue(String.valueOf(motor));

        fireICustomizerListenerDone();
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jTabbedPanePinholeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPanePinholeStateChanged
        validateScreen();
}//GEN-LAST:event_jTabbedPanePinholeStateChanged

    private void jCheckBoxCalibrationLedsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCalibrationLedsActionPerformed
        validateScreen();
}//GEN-LAST:event_jCheckBoxCalibrationLedsActionPerformed

    private void jCheckBoxCalibrationPinholeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCalibrationPinholeActionPerformed
        validateScreen();
}//GEN-LAST:event_jCheckBoxCalibrationPinholeActionPerformed

    private void jFormattedTextFieldTimeBetweenSamplesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldTimeBetweenSamplesFocusLost
        formattedMultipliedTextChanged(jSliderTimeBetweenSamples, jFormattedTextFieldTimeBetweenSamples);
}//GEN-LAST:event_jFormattedTextFieldTimeBetweenSamplesFocusLost

    private void jSliderTimeBetweenSamplesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderTimeBetweenSamplesStateChanged
        sliderMultipliedChanged(jSliderTimeBetweenSamples, jFormattedTextFieldTimeBetweenSamples);
        validateScreen();
}//GEN-LAST:event_jSliderTimeBetweenSamplesStateChanged

    private void jFormattedTextFieldLedDistanceInitialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldLedDistanceInitialFocusLost
        formattedMultipliedTextChanged(jSliderLedDistanceInitial, jFormattedTextFieldLedDistanceInitial);
}//GEN-LAST:event_jFormattedTextFieldLedDistanceInitialFocusLost

    private void jFormattedTextFieldLedDistanceFinalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldLedDistanceFinalFocusLost
        formattedMultipliedTextChanged(jSliderLedDistanceFinal, jFormattedTextFieldLedDistanceFinal);
}//GEN-LAST:event_jFormattedTextFieldLedDistanceFinalFocusLost

    private void jSliderLedDistanceFinalStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderLedDistanceFinalStateChanged
        sliderMultipliedChanged(jSliderLedDistanceFinal, jFormattedTextFieldLedDistanceFinal);
        validateScreen();
}//GEN-LAST:event_jSliderLedDistanceFinalStateChanged

    private void jSliderLedDistanceInitialStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderLedDistanceInitialStateChanged
        sliderMultipliedChanged(jSliderLedDistanceInitial, jFormattedTextFieldLedDistanceInitial);
        validateScreen();
}//GEN-LAST:event_jSliderLedDistanceInitialStateChanged

    private void jSliderDistanceBetweenSamplesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderDistanceBetweenSamplesStateChanged
        sliderMultipliedChanged(jSliderDistanceBetweenSamples, jFormattedTextFieldDistanceBetweenSamples);
        validateScreen();
    }//GEN-LAST:event_jSliderDistanceBetweenSamplesStateChanged

    private void jFormattedTextFieldDistanceBetweenSamplesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jFormattedTextFieldDistanceBetweenSamplesPropertyChange
        formattedMultipliedTextChanged(jSliderDistanceBetweenSamples, jFormattedTextFieldDistanceBetweenSamples);
    }//GEN-LAST:event_jFormattedTextFieldDistanceBetweenSamplesPropertyChange
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonDefaultConfig;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JCheckBox jCheckBoxCalibrationLeds;
    private javax.swing.JCheckBox jCheckBoxCalibrationPinhole;
    private javax.swing.JFormattedTextField jFormattedTextFieldDistanceBetweenSamples;
    private javax.swing.JFormattedTextField jFormattedTextFieldLedDistanceFinal;
    private javax.swing.JFormattedTextField jFormattedTextFieldLedDistanceInitial;
    private javax.swing.JFormattedTextField jFormattedTextFieldTimeBetweenSamples;
    private javax.swing.JLabel jLabelCalibration;
    private javax.swing.JPanel jPanelCalibration;
    private javax.swing.JPanel jPanelCalibrationButtons;
    private javax.swing.JPanel jPanelConfiguration;
    private javax.swing.JPanel jPanelControlButtons;
    private javax.swing.JPanel jPanelDistanceBetweenSamples;
    private javax.swing.JPanel jPanelLedDistance;
    private javax.swing.JPanel jPanelPinHoleDiameter;
    private javax.swing.JPanel jPanelTimeBetweenSamples;
    private javax.swing.JRadioButton jRadioButton260;
    private javax.swing.JRadioButton jRadioButtonD10;
    private javax.swing.JRadioButton jRadioButtonD110;
    private javax.swing.JRadioButton jRadioButtonD30;
    private javax.swing.JRadioButton jRadioButtonD60;
    private javax.swing.JRadioButton jRadioButtonD85;
    private javax.swing.JSlider jSliderDistanceBetweenSamples;
    private javax.swing.JSlider jSliderLedDistanceFinal;
    private javax.swing.JSlider jSliderLedDistanceInitial;
    private javax.swing.JSlider jSliderTimeBetweenSamples;
    private javax.swing.JTabbedPane jTabbedPanePinhole;
    private javax.swing.ButtonGroup pinholeSelect;
    // End of variables declaration//GEN-END:variables

    



    @Override
    public void setHardwareAcquisitionConfig(HardwareAcquisitionConfig acqConfig) {
        super.setHardwareAcquisitionConfig(acqConfig);
        if (acqConfig != null) {
            System.out.println("PinholeCustomizer.setHardwareAcquisitionConfig(HardwareAcquisitionConfig  acqConfig)");
            System.out.println("acqConfig: [" + acqConfig + "]");

            // TODO
//			int nsamples = acqConfig.getTotalSamples();
//			sldNumSamples.setValue(nsamples);
//			tfNumSamples.setText("" + nsamples);
//
//			int freq = (int) acqConfig.getSelectedFrequency().getFrequency();
//			sldFreq.setValue(freq);
//			tfFreq.setText("" + freq);
//
//			float pos1f = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("UserPosLow"));
//			int pos1 = (int) Math.floor(pos1f * 1000.F);
//			sldPos1.setValue(pos1);
//
//			float pos2f = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("UserPosHigh"));
//			int pos2 = (int) Math.floor(pos2f * 1000.F);
//			sldPos2.setValue(pos2);
        }
    }

     @Override
    public javax.swing.ImageIcon getCustomizerIcon() {
        return new javax.swing.ImageIcon(getClass().getResource("/pt/utl/ist/elab/client/pinhole/resources/optica_iconified.gif"));
    }

    @Override
    public String getCustomizerTitle() {
        return ReCResourceBundle.findStringOrDefault("pinhole$rec.exp.pinhole.customizer.title","pinhole$rec.exp.pinhole.customizer.title");
    }

 
    private void installDecimalFormatter(JFormattedTextField ftf) {
        /*
        DecimalFormat formatDecimal = new DecimalFormat("0.0");
        formatDecimal.setDecimalSeparatorAlwaysShown(true);
        formatDecimal.setGroupingUsed(false);
        formatDecimal.setMinimumFractionDigits(1);

        NumberFormatter formatter = new NumberFormatter(formatDecimal);
        formatter.setCommitsOnValidEdit(true);
        formatter.setOverwriteMode(true);
        formatter.install(ftf);
         */
    }

//    private void installNaturalFormatter(JFormattedTextField ftf) {
//        /*
//        DecimalFormat naturalFormat = new DecimalFormat("0");
//        naturalFormat.setDecimalSeparatorAlwaysShown(false);
//        naturalFormat.setGroupingUsed(false);
//        naturalFormat.setMinimumFractionDigits(0);
//
//        NumberFormatter formatter = new NumberFormatter(naturalFormat);
//        formatter.setCommitsOnValidEdit(true);
//        formatter.setOverwriteMode(true);
//        formatter.install(ftf);
//         */
//    }

    private void initComponentsManual() {

        jLabelCalibration.setVisible(false);

        Dictionary<Integer, JLabel> sliderLedDistanceInitialLabels = new Hashtable<Integer, JLabel>();
        sliderLedDistanceInitialLabels.put(Integer.valueOf(1480), new JLabel("148"));
        sliderLedDistanceInitialLabels.put(Integer.valueOf(2030), new JLabel("203"));
        sliderLedDistanceInitialLabels.put(Integer.valueOf(2580), new JLabel("258"));
        sliderLedDistanceInitialLabels.put(Integer.valueOf(3130), new JLabel("313"));
        sliderLedDistanceInitialLabels.put(Integer.valueOf(3680), new JLabel("368"));

        Dictionary<Integer, JLabel> sliderLedDistanceFinalLabels = new Hashtable<Integer, JLabel>();
        sliderLedDistanceFinalLabels.put(Integer.valueOf(1480), new JLabel("148"));
        sliderLedDistanceFinalLabels.put(Integer.valueOf(2030), new JLabel("203"));
        sliderLedDistanceFinalLabels.put(Integer.valueOf(2580), new JLabel("258"));
        sliderLedDistanceFinalLabels.put(Integer.valueOf(3130), new JLabel("313"));
        sliderLedDistanceFinalLabels.put(Integer.valueOf(3680), new JLabel("368"));

        Dictionary<Integer, JLabel> sliderDistanceSamplesLabels = new Hashtable<Integer, JLabel>();
        sliderDistanceSamplesLabels.put(Integer.valueOf(10), new JLabel("1.0"));
        sliderDistanceSamplesLabels.put(Integer.valueOf(740), new JLabel("74.0"));
        sliderDistanceSamplesLabels.put(Integer.valueOf(1470), new JLabel("147.0"));
        sliderDistanceSamplesLabels.put(Integer.valueOf(2200), new JLabel("220.0"));

        Dictionary<Integer, JLabel> sliderTimeSamplesLabels = new Hashtable<Integer, JLabel>();
        sliderTimeSamplesLabels.put(Integer.valueOf(0), new JLabel("0.0"));
        sliderTimeSamplesLabels.put(Integer.valueOf(100), new JLabel("10.0"));
        sliderTimeSamplesLabels.put(Integer.valueOf(200), new JLabel("20.0"));
        sliderTimeSamplesLabels.put(Integer.valueOf(300), new JLabel("30.0"));

        jSliderLedDistanceInitial.setLabelTable(sliderLedDistanceInitialLabels);
        jSliderLedDistanceFinal.setLabelTable(sliderLedDistanceFinalLabels);
        jSliderDistanceBetweenSamples.setLabelTable(sliderDistanceSamplesLabels);
        jSliderTimeBetweenSamples.setLabelTable(sliderTimeSamplesLabels);
        installDecimalFormatter(jFormattedTextFieldLedDistanceInitial);
        installDecimalFormatter(jFormattedTextFieldLedDistanceFinal);
        installDecimalFormatter(jFormattedTextFieldDistanceBetweenSamples);
        installDecimalFormatter(jFormattedTextFieldTimeBetweenSamples);
    }

    private void validateScreen() {
        boolean valid = true;
        int protocol = jTabbedPanePinhole.getSelectedIndex()+1;

        if (protocol == 1) {
            float tTotal = (float) (java.lang.Math.abs(jSliderLedDistanceFinal.getValue() - jSliderLedDistanceInitial.getValue())) / (float) jSliderDistanceBetweenSamples.getValue();
            if (tTotal > 60.0) {
                valid = false;
            }
        } else if (protocol == 2) {
            jLabelCalibration.setEnabled(false);
            if (jCheckBoxCalibrationLeds.isSelected() == false && jCheckBoxCalibrationPinhole.isSelected() == false) {
                valid = false;
                jLabelCalibration.setEnabled(true);
            }
        } else {
            valid = false;
        }

        jButtonOk.setEnabled(valid);
    }

    private void sliderMultipliedChanged(javax.swing.JSlider slider, javax.swing.JFormattedTextField textField) {
        textField.setText(Float.toString((float) slider.getValue() / 10.F));
    }

//    private void sliderChanged(javax.swing.JSlider slider, javax.swing.JFormattedTextField textField) {
//        textField.setText(Integer.toString(slider.getValue()));
//    }

    private void formattedMultipliedTextChanged(javax.swing.JSlider slider, javax.swing.JFormattedTextField textField) {
        String strPos1 = textField.getText();
        if (strPos1.trim().equals("")) {
            return;
        }
        strPos1 = strPos1.replace(",", ".");
        try {
            int pos1 = (int) (Float.parseFloat(strPos1) * 10.F);
            if (pos1 <= slider.getMaximum() && pos1 >= slider.getMinimum()) {
//                slider.setValue(pos1 - slider.getMinimum());
                slider.setValue(pos1);
            } else {
                textField.setValue(Float.toString((float) slider.getValue() / 10.F));
            }
        } catch (Exception e) {
            textField.setValue(Float.toString((float) slider.getValue() / 10.F));
        }
    }

//    private void formattedTextChanged(javax.swing.JSlider slider, javax.swing.JFormattedTextField textField) {
//        String strPos1 = textField.getText();
//        if (strPos1.trim().equals("")) {
//            return;
//        }
//        strPos1 = strPos1.replace(",", ".");
//        try {
//            int pos1 = (int) Integer.parseInt(strPos1);
//            if (pos1 <= slider.getMaximum() && pos1 >= slider.getMinimum()) {
////                slider.setValue(pos1 - slider.getMinimum());
//                slider.setValue(pos1);
//            } else {
//                textField.setValue(slider.getValue());
//            }
//        } catch (Exception e) {
//            textField.setValue(slider.getValue());
//        }
//    }
}
