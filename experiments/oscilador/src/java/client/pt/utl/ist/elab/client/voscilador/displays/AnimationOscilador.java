/*
 * Animation.java
 *
 * Created on 8 de Abril de 2005, 18:08
 */

package pt.utl.ist.elab.client.voscilador.displays;

/**
 *
 * @author  RF
 */

import javax.swing.*;
import java.io.*;
import java.awt.*;
import org.opensourcephysics.display.*;
import com.linkare.rec.impl.client.experiment.ExpDataModel;
import com.linkare.rec.impl.client.experiment.NewExpDataEvent;
import com.linkare.rec.data.acquisition.PhysicsValue;
import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.impl.client.experiment.ExpDataDisplay;
import com.linkare.rec.impl.client.experiment.ExpDataModelListener;
import com.linkare.rec.impl.i18n.*;


public class AnimationOscilador extends javax.swing.JPanel implements ExpDataDisplay, ExpDataModelListener{
    
    /** Creates new form Animation */
    public AnimationOscilador() {
        painel2DLateralFixo = new PlottingPanel("x(m)", "z(m)", ReCResourceBundle.findStringOrDefault("ReCExpOscilador$rec.exp.display.oscilador.title.anim1", "2D Lateral Fixed Animation"));
        painel2DLateral = new PlottingPanel(ReCResourceBundle.findStringOrDefault("ReCExpOscilador$rec.exp.display.oscilador.title.anim2", "Radius (m)"), "z(m)", ReCResourceBundle.findStringOrDefault("ReCExpOscilador$rec.exp.display.oscilador.title.anim3", "2D Lateral Animation"));
        painel2DSuperior = new PlottingPanel("y(m)", "x(m)", ReCResourceBundle.findStringOrDefault("ReCExpOscilador$rec.exp.display.oscilador.title.anim4", "2D Superior Animation"));
        
        contaLateralFixa = new Circle();
        contaLateral = new Circle();
        contaSuperior = new Circle();
        
        dataParabolaLateralFixo = new Dataset(Color.BLACK, Color.BLACK, true);
        dataParabolaLateral = new Dataset(Color.BLACK, Color.BLACK, true);
        dataParabolaSuperior = new Dataset(Color.BLACK, Color.BLACK, true);
        
        dataRastoLateralFixo = new Dataset(Color.CYAN, Color.CYAN, true);
        dataRastoLateral = new Dataset(Color.CYAN, Color.CYAN, true);
        dataRastoSuperior = new Dataset(Color.CYAN, Color.CYAN, true);
        
        dataParabolaLateral.setMarkerShape(0);
        dataParabolaSuperior.setMarkerShape(0);
        dataParabolaLateralFixo.setMarkerShape(0);
        dataRastoLateral.setMarkerShape(0);
        dataRastoSuperior.setMarkerShape(0);
        dataRastoLateralFixo.setMarkerShape(0);
        
        painel2DSuperior.addDrawable(dataRastoSuperior);
        painel2DSuperior.addDrawable(dataParabolaSuperior);
        painel2DSuperior.addDrawable(contaSuperior);
        painel2DLateralFixo.addDrawable(dataRastoLateralFixo);
        painel2DLateralFixo.addDrawable(dataParabolaLateralFixo);
        painel2DLateralFixo.addDrawable(contaLateralFixa);
        painel2DLateral.addDrawable(dataRastoLateral);
        painel2DLateral.addDrawable(dataParabolaLateral);
        painel2DLateral.addDrawable(contaLateral);
        initComponents();
        jPanel1.add(painel2DLateralFixo, java.awt.BorderLayout.CENTER);
        jPanel1.add(painel2DLateral, java.awt.BorderLayout.CENTER);
        jPanel1.add(painel2DSuperior, java.awt.BorderLayout.CENTER);
        //jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        add(jPanel1, java.awt.BorderLayout.CENTER);

        add(jPanel2, java.awt.BorderLayout.NORTH);

        add(jPanel3, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents
    
    public static void main(String args[]) {
        javax.swing.JFrame dummy = new javax.swing.JFrame();
        dummy.getContentPane().add(new AnimationOscilador());
        dummy.pack();
        dummy.show();
    }
    
    //Queremos fazer alguma coisa quandos os dados acabarem?
    public void dataModelEnded() {
    }
    
    //Queremos fazer alguma coisa quandos acontecer um erro?
    public void dataModelError() {
    }
    
    //Queremos fazer alguma coisa quando for dado o start e existirem dados?
    public void dataModelStarted() {
    }
    
    //Queremos fazer alguma coisa quando for dado o start e ainda não existirem dados?
    //Eu garanto que quando chegamos a este estado, já existe o header da experiência!
    public void dataModelStartedNoData() {
        HardwareAcquisitionConfig header = model.getAcquisitionConfig();
        //vamos lá ver o que o utilizador escolheu, para colocar a animação nas posições iniciais correctas!
        
        float a = Float.parseFloat(header.getSelectedHardwareParameterValue("a"));
        float alturaInicial = Float.parseFloat(header.getSelectedHardwareParameterValue("alturaInicial"));
        float g = Float.parseFloat(header.getSelectedHardwareParameterValue("g"));
        float frequencia = Float.parseFloat(header.getSelectedHardwareParameterValue("frequencia"));
        painel2DLateralFixo.setPreferredMinMax(Math.sqrt(alturaInicial/a)*1.2, -Math.sqrt(alturaInicial/a)*1.2, alturaInicial*1.2, 0);
        painel2DLateral.setPreferredMinMax(Math.sqrt(alturaInicial/a)*1.2, -Math.sqrt(alturaInicial/a)*1.2, alturaInicial*1.2, 0);
        
        
    }
    
    //Queremos fazer alguma coisa quando for dado parado?
    public void dataModelStoped() {
    }
    
    //Queremos fazer alguma coisa em estado de espera?
    public void dataModelWaiting() {
    }
    
    public javax.swing.JComponent getDisplay() {
        return this;
    }
    
    //O icon associado a este painel!
    public javax.swing.Icon getIcon() {
        return new javax.swing.ImageIcon(getClass().getResource("/com/linkare/rec/impl/baseUI/resources/sensor16.gif"));
    }
    
    public javax.swing.JMenuBar getMenuBar() {
        return null;
    }
    
    public javax.swing.JToolBar getToolBar() {
        return null;
    }
    
    
    
    public void newSamples(NewExpDataEvent evt) {
        
        
        //Esta é a maneira clássica de tirar as amostras dos canais que nos interessam!
        for(int i=evt.getSamplesStartIndex(); i<=evt.getSamplesEndIndex(); i++) {
            
            //sample, canal
            if(model.getValueAt(i,1) != null) {
                contaLateral.setX(model.getValueAt(i,1).getValue().getFloatValue());
            }
            if(model.getValueAt(i,2) != null) {
                contaLateralFixa.setX(model.getValueAt(i,2).getValue().getFloatValue());
                contaSuperior.setX(model.getValueAt(i,2).getValue().getFloatValue());
            }
            if(model.getValueAt(i,3) != null) {
                contaSuperior.setY(model.getValueAt(i,3).getValue().getFloatValue());
            }
            if(model.getValueAt(i,4) != null) {
                contaLateral.setY(model.getValueAt(i,4).getValue().getFloatValue());
                contaLateralFixa.setY(model.getValueAt(i,4).getValue().getFloatValue());
            }
            if(model.getValueAt(i,2) != null && model.getValueAt(i,3) != null){
                dataRastoSuperior.append(model.getValueAt(i,2).getValue().getFloatValue(), model.getValueAt(i,3).getValue().getFloatValue());
            }
            if(model.getValueAt(i,1) != null && model.getValueAt(i,4) != null){
                dataRastoLateral.append(model.getValueAt(i,1).getValue().getFloatValue(), model.getValueAt(i,4).getValue().getFloatValue());
            }
            if(model.getValueAt(i,2) != null && model.getValueAt(i,4) != null){
                dataRastoLateralFixo.append(model.getValueAt(i,2).getValue().getFloatValue(), model.getValueAt(i,4).getValue().getFloatValue());
            }
            if(model.getValueAt(i,15) != null && model.getValueAt(i,13) != null && model.getValueAt(i,14) != null) {
                dataParabolaSuperior.clear();
                dataParabolaLateral.clear();
                dataParabolaLateralFixo.clear();
                dataParabolaSuperior.append(model.getValueAt(i,15).getValue().getFloatValue()*Math.cos(model.getValueAt(i,13).getValue().getFloatValue()),model.getValueAt(i,15).getValue().getFloatValue()*Math.sin(model.getValueAt(i,13).getValue().getFloatValue()));
                dataParabolaSuperior.append(-model.getValueAt(i,15).getValue().getFloatValue()*Math.cos(model.getValueAt(i,13).getValue().getFloatValue()),-model.getValueAt(i,15).getValue().getFloatValue()*Math.sin(model.getValueAt(i,13).getValue().getFloatValue()));
                double aux1 = -1;
                while (aux1 <= 1){
                    dataParabolaLateralFixo.append(model.getValueAt(i,15).getValue().getFloatValue()*aux1*Math.cos(model.getValueAt(i,13).getValue().getFloatValue()), aux1*model.getValueAt(i,15).getValue().getFloatValue()*aux1*model.getValueAt(i,15).getValue().getFloatValue()*(model.getValueAt(i,14).getValue().getFloatValue()));
                    dataParabolaLateral.append(model.getValueAt(i,15).getValue().getFloatValue()*aux1, aux1*model.getValueAt(i,15).getValue().getFloatValue()*aux1*model.getValueAt(i,15).getValue().getFloatValue()*model.getValueAt(i,14).getValue().getFloatValue());
                    aux1 += 0.1;
                }
            }
            if(model.getValueAt(i,15) != null && model.getValueAt(i,14) != null) {
                painel2DLateral.setPreferredMinMax(-model.getValueAt(i,15).getValue().getFloatValue()*1.2, model.getValueAt(i,15).getValue().getFloatValue()*1.2, -model.getValueAt(i,15).getValue().getFloatValue()*model.getValueAt(i,15).getValue().getFloatValue()*0.1*model.getValueAt(i,14).getValue().getFloatValue(), model.getValueAt(i,15).getValue().getFloatValue()*model.getValueAt(i,15).getValue().getFloatValue()*1.2*model.getValueAt(i,14).getValue().getFloatValue());
                painel2DLateralFixo.setPreferredMinMax(-model.getValueAt(i,15).getValue().getFloatValue()*1.2, model.getValueAt(i,15).getValue().getFloatValue()*1.2, -model.getValueAt(i,15).getValue().getFloatValue()*model.getValueAt(i,15).getValue().getFloatValue()*0.1*model.getValueAt(i,14).getValue().getFloatValue(), model.getValueAt(i,15).getValue().getFloatValue()*model.getValueAt(i,15).getValue().getFloatValue()*1.2*model.getValueAt(i,14).getValue().getFloatValue());
                painel2DSuperior.setPreferredMinMax(-model.getValueAt(i,15).getValue().getFloatValue()*1.2, model.getValueAt(i,15).getValue().getFloatValue()*1.2, -model.getValueAt(i,15).getValue().getFloatValue()*1.2, model.getValueAt(i,15).getValue().getFloatValue()*1.2);
            }
            
            repaint();
            painel2DLateral.repaint();
            painel2DLateralFixo.repaint();
            painel2DSuperior.repaint();
            
            
        }
    }
    
    
    
    public void setExpDataModel(ExpDataModel model) {
        if(this.model!=null)
            this.model.removeExpDataModelListener(this);
        this.model=model;
        if(this.model!=null)
            this.model.addExpDataModelListener(this);
        
    }
    
    
    private ExpDataModel model=null;
    private PlottingPanel painel2DLateralFixo, painel2DLateral, painel2DSuperior;
    private Circle contaLateralFixa, contaLateral, contaSuperior;
    Dataset dataParabolaLateralFixo, dataRastoLateralFixo, dataParabolaLateral, dataRastoLateral, dataParabolaSuperior, dataRastoSuperior;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
    
}
