/*
 * Superficies.java
 *
 * Created on 28 de Marï¿½o de 2005, 14:34
 */

package pt.utl.ist.elab.virtual.client.cargas3d.displays;

import pt.utl.ist.elab.driver.virtual.utils.ByteUtil;
import pt.utl.ist.elab.virtual.client.cargas3d.Sistema;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.impl.client.experiment.ExpDataDisplay;
import com.linkare.rec.impl.client.experiment.ExpDataModel;
import com.linkare.rec.impl.client.experiment.ExpDataModelListener;
import com.linkare.rec.impl.client.experiment.NewExpDataEvent;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

/**
 *
 * @author  n0dP2
 */
public class Superficies extends javax.swing.JPanel implements ExpDataDisplay, ExpDataModelListener{
    java.util.ArrayList[][] superficies;
    java.util.ArrayList sist;
    java.util.ArrayList sup20 = new java.util.ArrayList();
    /** Creates new form Superficies */
    Painel painel=new Painel();
    public Superficies() {
        initComponents();
        painel.setMessage(ReCResourceBundle.findStringOrDefault("ReCExpCargas3D$rec.exp.customizer.title.14","Ajust the slider to visualise more equimodal surfaces"));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();

        setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(550, 500));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(500, 500));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 500));
        jPanel1.add(painel);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(jPanel1, gridBagConstraints);

        jSlider1.setMaximum(19);
        jSlider1.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider1.setToolTipText(ReCResourceBundle.findStringOrDefault("ReCExpCargas3D$rec.exp.customizer.title.13","Ajust the slider to visualise more equimodal surfaces"));
        jSlider1.setValue(0);
        jSlider1.setEnabled(false);
        jSlider1.setMinimumSize(new java.awt.Dimension(24, 450));
        jSlider1.setPreferredSize(new java.awt.Dimension(24, 500));
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(jSlider1, gridBagConstraints);

    }//GEN-END:initComponents
    
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        painel.clear();
        addCargas();
        painel.addDrawable((org.opensourcephysics.displayejs.InteractivePoints)sup20.get(jSlider1.getValue()));
        painel.setAlpha(painel.getAlpha());
        painel.repaint();
    }//GEN-LAST:event_jSlider1StateChanged
    
    public void newSamples(NewExpDataEvent evt) {
        painel.clear();
        setCargasHeader();
        addCargas();
        for(int i=evt.getSamplesStartIndex(); i<=evt.getSamplesEndIndex(); i++) {
            
            //sample, canal
            if(model.getValueAt(i,1) != null) {
                superficies = (java.util.ArrayList[][])ByteUtil.byteArrayToObject(model.getValueAt(i,1).getValue().getByteArrayValue().getData());
                toPanelSuperficies(superficies,sup20);
                painel.addDrawable((org.opensourcephysics.displayejs.InteractivePoints)(sup20.get(0)));
                painel.repaint();
                jSlider1.setEnabled(true);
            }
        }
    }
    
    //Queremos fazer alguma coisa quandos os dados acabarem?
    public void dataModelEnded() {
    }
    
    //Queremos fazer alguma coisa quandos acontecer um erro?
    public void dataModelError() {
    }
    
    //Queremos fazer alguma coisa quando for dado o start e existirem dados?
    public void dataModelStarted() {
    }
    
    //Queremos fazer alguma coisa quando for dado o start e ainda n?o existirem dados?
    //Eu garanto que quando chegamos a este estado, j? existe o header da experi?ncia!
    public void dataModelStartedNoData() {
        setCargasHeader();
        addCargas();
    }
    
    //Queremos fazer alguma coisa quando for dado parado?
    public void dataModelStoped() {
    }
    
    //Queremos fazer alguma coisa em estado de espera?
    public void dataModelWaiting() {
    }
    
    public javax.swing.JComponent getDisplay() {
        return this;
    }
    
    //O icon associado a este painel!
    public javax.swing.Icon getIcon() {
        return new javax.swing.ImageIcon(getClass().getResource("/com/linkare/rec/impl/baseUI/resources/sensor16.gif"));
    }
    
    public javax.swing.JMenuBar getMenuBar() {
        return null;
    }
    
    public javax.swing.JToolBar getToolBar() {
        return null;
    }
    
    //Este c?digo ? SEMPRE igual e tem de existir!
    private ExpDataModel model=null;
    public void setExpDataModel(ExpDataModel model) {
        if(this.model!=null)
            this.model.removeExpDataModelListener(this);
        this.model=model;
        if(this.model!=null)
            this.model.addExpDataModelListener(this);
        
    }
    
    public static void main(String args[]) {
        javax.swing.JFrame dummy = new javax.swing.JFrame();
        dummy.getContentPane().add(new Superficies());
        dummy.setDefaultCloseOperation(dummy.EXIT_ON_CLOSE);
        dummy.pack();
        dummy.show();
    }
    private void setCargasHeader(){
        HardwareAcquisitionConfig header = model.getAcquisitionConfig();
        sist=Sistema.stringToSistema(header.getSelectedHardwareParameterValue("Sistema"));
    }
    
    private void addCargas(){
        for(int i=0;i<sist.size();i++){
            painel.addDrawable((org.opensourcephysics.displayejs.InteractiveCharge)sist.get(i));
        }
        painel.repaint();
    }
    
    private void toPanelSuperficies(java.util.ArrayList[][] superficies_, java.util.ArrayList sup){
        java.util.ArrayList[] listax_;
        java.util.ArrayList[] listay_;
        java.util.ArrayList[] listaz_;
        
        
        listax_=superficies_[0];
        listay_=superficies_[1];
        listaz_=superficies_[2];
        
        double[][] arrayPontos;
        for(int i=0;i<20;i++){
            org.opensourcephysics.displayejs.InteractivePoints superficie_ = new org.opensourcephysics.displayejs.InteractivePoints();
            superficie_.getStyle().setEdgeColor(new java.awt.Color(44,186,0));
            arrayPontos = new double[listax_[i].size()][3];
            
            for(int j=0;j<listax_[i].size();j++){
                arrayPontos[j][0]=(double)(((Float)listax_[i].get(j)).floatValue());
                arrayPontos[j][1]=(double)(((Float)listay_[i].get(j)).floatValue());
                arrayPontos[j][2]=(double)(((Float)listaz_[i].get(j)).floatValue());
            }
            if(listax_[i].size()!=0){
                superficie_.setData(arrayPontos);
                sup.add(superficie_);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables
    
}
