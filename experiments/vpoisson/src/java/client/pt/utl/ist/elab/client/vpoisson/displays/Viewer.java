/*
 * Superficies.java
 *
 * Created on 28 de Marï¿½o de 2005, 14:34
 */

package pt.utl.ist.elab.client.vpoisson.displays;

import java.text.DecimalFormat;

import org.opensourcephysics.frames.Scalar2DFrame;

import pt.utl.ist.elab.driver.virtual.utils.ByteUtil;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.impl.client.experiment.ExpDataDisplay;
import com.linkare.rec.impl.client.experiment.ExpDataModel;
import com.linkare.rec.impl.client.experiment.ExpDataModelListener;
import com.linkare.rec.impl.client.experiment.NewExpDataEvent;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

/**
 * 
 * @author n0dP2
 */
public class Viewer extends javax.swing.JPanel implements ExpDataDisplay, ExpDataModelListener {
	private double[][][] solutions = new double[20][30][10];
	private int Nx = 0;
	private int Ny = 0;
	private int Nz = 0;
	private DecimalFormat df = new DecimalFormat("0.000");

	public Viewer() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		java.awt.GridBagConstraints gridBagConstraints;

		jPanel9 = new javax.swing.JPanel();
		jPanel45 = new javax.swing.JPanel();
		jButtonShowSolutionX = new javax.swing.JButton();
		jLabelXCutN = new javax.swing.JLabel();
		jLabelXCut = new javax.swing.JLabel();
		jSliderSolutionX = new javax.swing.JSlider();
		jPanel46 = new javax.swing.JPanel();
		jButtonShowSolutionY = new javax.swing.JButton();
		jLabelYCutN = new javax.swing.JLabel();
		jLabelYCut = new javax.swing.JLabel();
		jSliderSolutionY = new javax.swing.JSlider();
		jPanel47 = new javax.swing.JPanel();
		jButtonShowSolutionZ = new javax.swing.JButton();
		jLabelZCutN = new javax.swing.JLabel();
		jSliderSolutionZ = new javax.swing.JSlider();
		jLabelZCut = new javax.swing.JLabel();
		jPanel16 = new javax.swing.JPanel();
		jLabelXCut7 = new javax.swing.JLabel();

		setLayout(new java.awt.BorderLayout());

		setPreferredSize(new java.awt.Dimension(550, 500));
		jPanel9.setLayout(new java.awt.GridBagLayout());

		jPanel45.setLayout(new java.awt.GridBagLayout());

		jButtonShowSolutionX.setText(ReCResourceBundle.findString("ReCExpPoisson$rec.exp.poisson.show"));
		jButtonShowSolutionX.setEnabled(false);
		jButtonShowSolutionX.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonShowSolutionXActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
		jPanel45.add(jButtonShowSolutionX, gridBagConstraints);

		jLabelXCutN.setText("nx = 1");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
		jPanel45.add(jLabelXCutN, gridBagConstraints);

		jLabelXCut.setText("x=0.000");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
		jPanel45.add(jLabelXCut, gridBagConstraints);

		jSliderSolutionX.setMinimum(1);
		jSliderSolutionX.setPaintLabels(true);
		jSliderSolutionX.setValue(1);
		jSliderSolutionX.setMaximumSize(new java.awt.Dimension(100, 25));
		jSliderSolutionX.setMinimumSize(new java.awt.Dimension(100, 16));
		jSliderSolutionX.setPreferredSize(new java.awt.Dimension(100, 16));
		jSliderSolutionX.setEnabled(false);
		jSliderSolutionX.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				jSliderSolutionXStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
		jPanel45.add(jSliderSolutionX, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		jPanel9.add(jPanel45, gridBagConstraints);

		jPanel46.setLayout(new java.awt.GridBagLayout());

		jButtonShowSolutionY.setText(ReCResourceBundle.findString("ReCExpPoisson$rec.exp.poisson.show"));
		jButtonShowSolutionY.setEnabled(false);
		jButtonShowSolutionY.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonShowSolutionYActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
		jPanel46.add(jButtonShowSolutionY, gridBagConstraints);

		jLabelYCutN.setText("ny = 1");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
		jPanel46.add(jLabelYCutN, gridBagConstraints);

		jLabelYCut.setText("y=0.000");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
		jPanel46.add(jLabelYCut, gridBagConstraints);

		jSliderSolutionY.setMinimum(1);
		jSliderSolutionY.setPaintLabels(true);
		jSliderSolutionY.setValue(1);
		jSliderSolutionY.setMaximumSize(new java.awt.Dimension(100, 16));
		jSliderSolutionY.setMinimumSize(new java.awt.Dimension(100, 16));
		jSliderSolutionY.setPreferredSize(new java.awt.Dimension(100, 16));
		jSliderSolutionY.setEnabled(false);
		jSliderSolutionY.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				jSliderSolutionYStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
		jPanel46.add(jSliderSolutionY, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		jPanel9.add(jPanel46, gridBagConstraints);

		jPanel47.setLayout(new java.awt.GridBagLayout());

		jButtonShowSolutionZ.setText(ReCResourceBundle.findString("ReCExpPoisson$rec.exp.poisson.show"));
		jButtonShowSolutionZ.setEnabled(false);
		jButtonShowSolutionZ.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonShowSolutionZActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
		jPanel47.add(jButtonShowSolutionZ, gridBagConstraints);

		jLabelZCutN.setText("nz = 1");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
		jPanel47.add(jLabelZCutN, gridBagConstraints);

		jSliderSolutionZ.setMinimum(1);
		jSliderSolutionZ.setPaintLabels(true);
		jSliderSolutionZ.setValue(1);
		jSliderSolutionZ.setMaximumSize(new java.awt.Dimension(100, 16));
		jSliderSolutionZ.setMinimumSize(new java.awt.Dimension(100, 16));
		jSliderSolutionZ.setPreferredSize(new java.awt.Dimension(100, 16));
		jSliderSolutionZ.setEnabled(false);
		jSliderSolutionZ.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				jSliderSolutionZStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
		jPanel47.add(jSliderSolutionZ, gridBagConstraints);

		jLabelZCut.setText("z=0.000");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
		jPanel47.add(jLabelZCut, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		jPanel9.add(jPanel47, gridBagConstraints);

		jPanel16.setLayout(new java.awt.GridBagLayout());

		jLabelXCut7.setText(ReCResourceBundle.findString("ReCExpPoisson$rec.exp.poisson.cuts"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
		jPanel16.add(jLabelXCut7, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 0);
		jPanel9.add(jPanel16, gridBagConstraints);

		add(jPanel9, java.awt.BorderLayout.CENTER);

	}// GEN-END:initComponents

	private void jSliderSolutionZStateChanged(javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_jSliderSolutionZStateChanged
	{// GEN-HEADEREND:event_jSliderSolutionZStateChanged
		jLabelZCutN.setText("nz = " + jSliderSolutionZ.getValue());
		jLabelZCut.setText("z="
				+ df.format((jSliderSolutionZ.getValue() - 1) / (double) (jSliderSolutionZ.getMaximum() - 1)));
	}// GEN-LAST:event_jSliderSolutionZStateChanged

	private void jSliderSolutionYStateChanged(javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_jSliderSolutionYStateChanged
	{// GEN-HEADEREND:event_jSliderSolutionYStateChanged
		jLabelYCutN.setText("ny = " + jSliderSolutionY.getValue());
		jLabelYCut.setText("y="
				+ df.format((jSliderSolutionY.getValue() - 1) / (double) (jSliderSolutionY.getMaximum() - 1)));
	}// GEN-LAST:event_jSliderSolutionYStateChanged

	private void jSliderSolutionXStateChanged(javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_jSliderSolutionXStateChanged
	{// GEN-HEADEREND:event_jSliderSolutionXStateChanged
		jLabelXCutN.setText("nx = " + jSliderSolutionX.getValue());
		jLabelXCut.setText("x="
				+ df.format((jSliderSolutionX.getValue() - 1) / (double) (jSliderSolutionX.getMaximum() - 1)));
	}// GEN-LAST:event_jSliderSolutionXStateChanged

	private void jButtonShowSolutionZActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonShowSolutionZActionPerformed
	{// GEN-HEADEREND:event_jButtonShowSolutionZActionPerformed
		int zc = jSliderSolutionZ.getValue() - 1;

		double[][] zsol = new double[solutions.length][solutions[0].length];
		for (int i = 0; i < zsol.length; i++) {
			double[] temp = new double[solutions[0].length];
			for (int j = 0; j < temp.length; j++)
				temp[j] = solutions[i][j][zc];

			System.arraycopy(temp, 0, zsol[i], 0, solutions[0].length);
		}
		String z = jLabelZCut.getText();
		myScalar2DFrame(zsol, "x", "y", "rho at z = " + z);
	}// GEN-LAST:event_jButtonShowSolutionZActionPerformed

	private void jButtonShowSolutionYActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonShowSolutionYActionPerformed
	{// GEN-HEADEREND:event_jButtonShowSolutionYActionPerformed
		int yc = jSliderSolutionY.getValue() - 1;

		double[][] ysol = new double[solutions.length][solutions[0][0].length];
		for (int i = 0; i < ysol.length; i++)
			System.arraycopy(solutions[i][yc], 0, ysol[i], 0, solutions[0][0].length);
		String y = jLabelYCut.getText();
		myScalar2DFrame(ysol, "x", "z", "rho at y = " + y);
	}// GEN-LAST:event_jButtonShowSolutionYActionPerformed

	private void jButtonShowSolutionXActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonShowSolutionXActionPerformed
	{// GEN-HEADEREND:event_jButtonShowSolutionXActionPerformed
		double[][] xsol = solutions[jSliderSolutionX.getValue() - 1];
		String x = jLabelXCut.getText();
		myScalar2DFrame(xsol, "y", "z", "rho at x = " + x);
	}// GEN-LAST:event_jButtonShowSolutionXActionPerformed

	public void newSamples(NewExpDataEvent evt) {
		for (int i = evt.getSamplesStartIndex(); i <= evt.getSamplesEndIndex(); i++) {

			if (model.getValueAt(i, 0) != null) {
				solutions = (double[][][]) ByteUtil.byteArrayToObject(model.getValueAt(i, 0).getValue()
						.getByteArrayValue().getData());
				if (solutions != null)
					enableAll();
			}
		}
	}

	// Queremos fazer alguma coisa quandos os dados acabarem?
	public void dataModelEnded() {
	}

	// Queremos fazer alguma coisa quandos acontecer um erro?
	public void dataModelError() {
	}

	// Queremos fazer alguma coisa quando for dado o start e existirem dados?
	public void dataModelStarted() {
	}

	// Queremos fazer alguma coisa quando for dado o start e ainda n?o existirem
	// dados?
	// Eu garanto que quando chegamos a este estado, j? existe o header da
	// experi?ncia!
	public void dataModelStartedNoData() {
		updateNs();
	}

	// Queremos fazer alguma coisa quando for dado parado?
	public void dataModelStoped() {
	}

	// Queremos fazer alguma coisa em estado de espera?
	public void dataModelWaiting() {
	}

	public javax.swing.JComponent getDisplay() {
		return this;
	}

	// O icon associado a este painel!
	public javax.swing.Icon getIcon() {
		return new javax.swing.ImageIcon(getClass().getResource("/com/linkare/rec/impl/baseUI/resources/sensor16.gif"));
	}

	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	public javax.swing.JToolBar getToolBar() {
		return null;
	}

	// Este c?digo ? SEMPRE igual e tem de existir!
	private ExpDataModel model = null;

	public void setExpDataModel(ExpDataModel model) {
		if (this.model != null)
			this.model.removeExpDataModelListener(this);
		this.model = model;
		if (this.model != null)
			this.model.addExpDataModelListener(this);

	}

	public static void main(String args[]) {
		ReCResourceBundle.loadResourceBundle("ReCExpPoisson",
				"recresource:///pt/utl/ist/elab/client/vpoisson/resources/ReCExpPoisson");
		javax.swing.JFrame dummy = new javax.swing.JFrame();
		dummy.getContentPane().add(new Viewer());
		dummy.setDefaultCloseOperation(dummy.EXIT_ON_CLOSE);
		dummy.pack();
		dummy.show();
	}

	private void updateNs() {
		HardwareAcquisitionConfig header = model.getAcquisitionConfig();
		Nx = Integer.parseInt(header.getSelectedHardwareParameterValue("Nx"));
		Ny = Integer.parseInt(header.getSelectedHardwareParameterValue("Ny"));
		Nz = Integer.parseInt(header.getSelectedHardwareParameterValue("Nz"));
		jSliderSolutionX.setMaximum(Nx);
		jSliderSolutionY.setMaximum(Ny);
		jSliderSolutionZ.setMaximum(Nz);
	}

	private void enableAll() {
		jSliderSolutionX.setEnabled(true);
		jSliderSolutionY.setEnabled(true);
		jSliderSolutionY.setEnabled(true);
		jButtonShowSolutionX.setEnabled(true);
		jButtonShowSolutionY.setEnabled(true);
		jButtonShowSolutionZ.setEnabled(true);
	}

	// returns the minimum value of the 2d matrix m
	private double getMatrixMin(double[][] m) {
		double min = m[0][0];

		for (int x = 0; x < m.length; x++)
			for (int y = 0; y < m[0].length; y++)
				if (m[x][y] < min)
					min = m[x][y];

		return min;
	}

	// returns the maximum value of the 2d matrix m
	private double getMatrixMax(double[][] m) {
		double max = m[0][0];

		for (int x = 0; x < m.length; x++)
			for (int y = 0; y < m[0].length; y++)
				if (m[x][y] > max)
					max = m[x][y];

		return max;
	}

	// constructs and shows a Scalar2DFrame(OSP) with color legend
	private void myScalar2DFrame(double[][] data, String label1, String label2, String title) {
		Scalar2DFrame frame = new Scalar2DFrame(label1, label2, title);
		frame.setPreferredMinMax(0.0, 1.0, 0.0, 1.0);
		frame.setAutoscaleX(true);
		frame.setAutoscaleY(true);
		frame.resizeGrid(Ny + 2, Nz + 2);
		frame.setAll(data, 0, 1, 0, 1);

		frame.show();

		int w = frame.getDrawingPanel().getWidth();
		int h = frame.getDrawingPanel().getHeight();

		javax.swing.JPanel panel = new javax.swing.JPanel();
		panel.setBackground(java.awt.Color.BLUE);
		panel.setMaximumSize(new java.awt.Dimension(w, h + 50));
		panel.setMinimumSize(new java.awt.Dimension(w, h + 50));
		panel.setPreferredSize(new java.awt.Dimension(w, h + 50));
		panel.setLayout(null);
		frame.getContentPane().add(panel);
		frame.setSize(w, frame.getHeight() + 50);
		javax.swing.JPanel legend = new javax.swing.JPanel();
		legend.setBackground(java.awt.Color.WHITE);
		legend.setMaximumSize(new java.awt.Dimension(w, 50));
		legend.setMinimumSize(new java.awt.Dimension(w, 50));
		legend.setPreferredSize(new java.awt.Dimension(w, 50));
		legend.setLayout(null);

		panel.add(legend);

		legend.setBounds(0, h, w, 50);

		javax.swing.JPanel minColor = new javax.swing.JPanel();
		minColor.setBackground(java.awt.Color.MAGENTA);
		minColor.setMaximumSize(new java.awt.Dimension(w, 50));
		minColor.setMinimumSize(new java.awt.Dimension(w, 50));
		minColor.setPreferredSize(new java.awt.Dimension(w, 50));
		minColor.setLayout(null);

		javax.swing.JPanel maxColor = new javax.swing.JPanel();
		maxColor.setBackground(java.awt.Color.RED);
		maxColor.setMaximumSize(new java.awt.Dimension(w, 50));
		maxColor.setMinimumSize(new java.awt.Dimension(w, 50));
		maxColor.setPreferredSize(new java.awt.Dimension(w, 50));
		maxColor.setLayout(null);

		javax.swing.JLabel minLabel = new javax.swing.JLabel();
		minLabel.setText("" + getMatrixMin(data));

		javax.swing.JLabel maxLabel = new javax.swing.JLabel();
		maxLabel.setText("" + getMatrixMax(data));

		legend.add(minColor);
		legend.add(maxColor);
		legend.add(minLabel);
		legend.add(maxLabel);

		minColor.setBounds(10, 20, 20, 10);
		maxColor.setBounds((int) Math.floor(w / 2) + 10, 20, 20, 10);
		minLabel.setBounds(40, 20, 100, 30);
		maxLabel.setBounds((int) Math.floor(w / 2) + 40, 20, 100, 30);

		frame.pack();
		frame.show();
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButtonShowSolutionX;
	private javax.swing.JButton jButtonShowSolutionY;
	private javax.swing.JButton jButtonShowSolutionZ;
	private javax.swing.JLabel jLabelXCut;
	private javax.swing.JLabel jLabelXCut7;
	private javax.swing.JLabel jLabelXCutN;
	private javax.swing.JLabel jLabelYCut;
	private javax.swing.JLabel jLabelYCutN;
	private javax.swing.JLabel jLabelZCut;
	private javax.swing.JLabel jLabelZCutN;
	private javax.swing.JPanel jPanel16;
	private javax.swing.JPanel jPanel45;
	private javax.swing.JPanel jPanel46;
	private javax.swing.JPanel jPanel47;
	private javax.swing.JPanel jPanel9;
	private javax.swing.JSlider jSliderSolutionX;
	private javax.swing.JSlider jSliderSolutionY;
	private javax.swing.JSlider jSliderSolutionZ;
	// End of variables declaration//GEN-END:variables

}
