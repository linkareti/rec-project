/*
 * Superficies.java
 *
 * Created on 28 de Marï¿½o de 2005, 14:34
 */

package pt.utl.ist.elab.client.vcargas3d.displays;

import javax.swing.JFrame;
import javax.swing.SwingConstants;

import org.opensourcephysics.displayejs.InteractiveCharge;
import org.opensourcephysics.displayejs.InteractivePoints;

import pt.utl.ist.elab.client.vcargas3d.Sistema;
import pt.utl.ist.elab.driver.virtual.utils.ByteUtil;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.impl.client.experiment.ExpDataDisplay;
import com.linkare.rec.impl.client.experiment.ExpDataModel;
import com.linkare.rec.impl.client.experiment.ExpDataModelListener;
import com.linkare.rec.impl.client.experiment.NewExpDataEvent;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

/**
 * 
 * @author n0dP2
 */
public class Superficies extends javax.swing.JPanel implements ExpDataDisplay, ExpDataModelListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = 6798743703031713247L;
	java.util.ArrayList<Float>[][] superficies;
	java.util.ArrayList<InteractiveCharge> sist;
	java.util.ArrayList<InteractivePoints> sup20 = new java.util.ArrayList<InteractivePoints>();
	/** Creates new form Superficies */
	Painel painel = new Painel();

	public Superficies() {
		initComponents();
		painel.setMessage(ReCResourceBundle.findStringOrDefault("cargas3d$rec.exp.customizer.title.14",
				"Ajust the slider to visualise more equimodal surfaces"));
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;

		jPanel1 = new javax.swing.JPanel();
		jSlider1 = new javax.swing.JSlider();

		setLayout(new java.awt.GridBagLayout());

		setPreferredSize(new java.awt.Dimension(550, 500));
		jPanel1.setLayout(new java.awt.BorderLayout());

		jPanel1.setMinimumSize(new java.awt.Dimension(500, 500));
		jPanel1.setPreferredSize(new java.awt.Dimension(500, 500));
		jPanel1.add(painel);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
		add(jPanel1, gridBagConstraints);

		jSlider1.setMaximum(19);
		jSlider1.setOrientation(SwingConstants.VERTICAL);
		jSlider1.setToolTipText(ReCResourceBundle.findStringOrDefault("cargas3d$rec.exp.customizer.title.13",
				"Ajust the slider to visualise more equimodal surfaces"));
		jSlider1.setValue(0);
		jSlider1.setEnabled(false);
		jSlider1.setMinimumSize(new java.awt.Dimension(24, 450));
		jSlider1.setPreferredSize(new java.awt.Dimension(24, 500));
		jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jSlider1StateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
		add(jSlider1, gridBagConstraints);

	}// GEN-END:initComponents

	private void jSlider1StateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jSlider1StateChanged
		painel.clear();
		addCargas();
		painel.addDrawable(sup20.get(jSlider1.getValue()));
		painel.setAlpha(painel.getAlpha());
		painel.repaint();
	}// GEN-LAST:event_jSlider1StateChanged

	@SuppressWarnings("unchecked")
	@Override
	public void newSamples(final NewExpDataEvent evt) {
		painel.clear();
		setCargasHeader();
		addCargas();
		for (int i = evt.getSamplesStartIndex(); i <= evt.getSamplesEndIndex(); i++) {

			// sample, canal
			if (model.getValueAt(i, 1) != null) {
				superficies = (java.util.ArrayList<Float>[][]) ByteUtil.byteArrayToObject(model.getValueAt(i, 1).getValue()
						.getByteArrayValue().getData());
				toPanelSuperficies(superficies, sup20);
				painel.addDrawable((sup20.get(0)));
				painel.repaint();
				jSlider1.setEnabled(true);
			}
		}
	}

	// Queremos fazer alguma coisa quandos os dados acabarem?
	@Override
	public void dataModelEnded() {
	}

	// Queremos fazer alguma coisa quandos acontecer um erro?
	@Override
	public void dataModelError() {
	}

	// Queremos fazer alguma coisa quando for dado o start e existirem dados?
	@Override
	public void dataModelStarted() {
	}

	// Queremos fazer alguma coisa quando for dado o start e ainda n?o existirem
	// dados?
	// Eu garanto que quando chegamos a este estado, j? existe o header da
	// experi?ncia!
	@Override
	public void dataModelStartedNoData() {
		setCargasHeader();
		addCargas();
	}

	// Queremos fazer alguma coisa quando for dado parado?
	@Override
	public void dataModelStoped() {
	}

	// Queremos fazer alguma coisa em estado de espera?
	@Override
	public void dataModelWaiting() {
	}

	@Override
	public javax.swing.JComponent getDisplay() {
		return this;
	}

	// O icon associado a este painel!
	@Override
	public javax.swing.Icon getIcon() {
		return new javax.swing.ImageIcon(getClass().getResource("/com/linkare/rec/impl/baseUI/resources/sensor16.gif"));
	}

	@Override
	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	@Override
	public javax.swing.JToolBar getToolBar() {
		return null;
	}

	// Este c?digo ? SEMPRE igual e tem de existir!
	private ExpDataModel model = null;

	@Override
	public void setExpDataModel(final ExpDataModel model) {
		if (this.model != null) {
			this.model.removeExpDataModelListener(this);
		}
		this.model = model;
		if (this.model != null) {
			this.model.addExpDataModelListener(this);
		}

	}

	public static void main(final String args[]) {
		final javax.swing.JFrame dummy = new javax.swing.JFrame();
		dummy.getContentPane().add(new Superficies());
		dummy.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		dummy.pack();
		dummy.setVisible(true);
	}

	private void setCargasHeader() {
		final HardwareAcquisitionConfig header = model.getAcquisitionConfig();
		sist = Sistema.stringToSistema(header.getSelectedHardwareParameterValue("Sistema"));
	}

	private void addCargas() {
		for (int i = 0; i < sist.size(); i++) {
			painel.addDrawable(sist.get(i));
		}
		painel.repaint();
	}

	private void toPanelSuperficies(final java.util.ArrayList<Float>[][] superficies_,
			final java.util.ArrayList<InteractivePoints> sup) {
		java.util.ArrayList<Float>[] listax_;
		java.util.ArrayList<Float>[] listay_;
		java.util.ArrayList<Float>[] listaz_;

		listax_ = superficies_[0];
		listay_ = superficies_[1];
		listaz_ = superficies_[2];

		double[][] arrayPontos;
		for (int i = 0; i < 20; i++) {
			final org.opensourcephysics.displayejs.InteractivePoints superficie_ = new org.opensourcephysics.displayejs.InteractivePoints();
			superficie_.getStyle().setEdgeColor(new java.awt.Color(44, 186, 0));
			arrayPontos = new double[listax_[i].size()][3];

			for (int j = 0; j < listax_[i].size(); j++) {
				arrayPontos[j][0] = listax_[i].get(j).floatValue();
				arrayPontos[j][1] = listay_[i].get(j).floatValue();
				arrayPontos[j][2] = listaz_[i].get(j).floatValue();
			}
			if (listax_[i].size() != 0) {
				superficie_.setData(arrayPontos);
				sup.add(superficie_);
			}
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel jPanel1;
	private javax.swing.JSlider jSlider1;
	// End of variables declaration//GEN-END:variables

}
