/*
 * TiroCustomizer.java
 *
 * Created on 17 de Fevereiro de 2005, 5:07
 */

package pt.utl.ist.elab.client.vtiro;

import javax.swing.SwingConstants;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.metadata.HardwareInfo;
import com.linkare.rec.data.synch.Frequency;
import com.linkare.rec.impl.client.customizer.ICustomizerListener;

/**
 * 
 * @author nomead
 */
public class TiroCustomizer extends javax.swing.JPanel implements com.linkare.rec.impl.client.customizer.ICustomizer {

	/**
	 * 
	 */
	private static final long serialVersionUID = 7955478140331063895L;
	private InteractiveTiro tiro;

	/** Creates new form TiroCustomizer */
	public TiroCustomizer() {
		initComponents();

		java.awt.GridBagConstraints gridBagConstraints;
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridheight = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = .7;
		gridBagConstraints.weighty = .7;
		mainPanel.add(tiro = new InteractiveTiro(), gridBagConstraints);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;

		mainPanel = new javax.swing.JPanel();
		commandsPanel = new javax.swing.JPanel();
		okButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		defaultButton = new javax.swing.JButton();
		gPanel = new javax.swing.JPanel();
		gSlider = new javax.swing.JSlider();
		gTextField = new javax.swing.JTextField();

		setLayout(new java.awt.BorderLayout());

		mainPanel.setLayout(new java.awt.GridBagLayout());

		mainPanel.setMinimumSize(new java.awt.Dimension(600, 600));
		mainPanel.setPreferredSize(new java.awt.Dimension(600, 600));
		commandsPanel.setLayout(new java.awt.GridBagLayout());

		commandsPanel.setMinimumSize(new java.awt.Dimension(100, 100));
		commandsPanel.setPreferredSize(new java.awt.Dimension(100, 100));
		okButton.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vtiro/resources/messages")
				.getString("rec.exp.customizer.title.ok"));
		okButton.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vtiro/resources/messages")
				.getString("rec.exp.customizer.tip.ok"));
		okButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		commandsPanel.add(okButton, gridBagConstraints);

		cancelButton.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vtiro/resources/messages")
				.getString("rec.exp.customizer.title.cancel"));
		cancelButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vtiro/resources/messages").getString("rec.exp.customizer.tip.cancel"));
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		commandsPanel.add(cancelButton, gridBagConstraints);

		defaultButton.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vtiro/resources/messages")
				.getString("rec.exp.customizer.title.dfc"));
		defaultButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vtiro/resources/messages").getString("rec.exp.customizer.tip.dfc"));
		defaultButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				defaultButtonActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		commandsPanel.add(defaultButton, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		mainPanel.add(commandsPanel, gridBagConstraints);

		gPanel.setLayout(new java.awt.GridBagLayout());

		gPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vtiro/resources/messages").getString("rec.exp.customizer.title.2")));
		gPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vtiro/resources/messages")
				.getString("rec.exp.customizer.tip.2"));
		gPanel.setMinimumSize(new java.awt.Dimension(82, 114));
		gPanel.setPreferredSize(new java.awt.Dimension(82, 114));
		gSlider.setMajorTickSpacing(50);
		gSlider.setMaximum(500);
		gSlider.setMinorTickSpacing(10);
		gSlider.setPaintLabels(true);
		gSlider.setPaintTicks(true);
		gSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vtiro/resources/messages")
				.getString("rec.exp.customizer.tip.2"));
		gSlider.setValue(98);
		gSlider.setMinimumSize(new java.awt.Dimension(200, 47));
		gSlider.setRequestFocusEnabled(false);
		gSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				gSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gPanel.add(gSlider, gridBagConstraints);

		gTextField.setColumns(4);
		gTextField.setHorizontalAlignment(SwingConstants.CENTER);
		gTextField.setText("98");
		gTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vtiro/resources/messages")
				.getString("rec.exp.customizer.tip.2"));
		gTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		gTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusLost(final java.awt.event.FocusEvent evt) {
				gTextFieldFocusLost(evt);
			}
		});

		gPanel.add(gTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		mainPanel.add(gPanel, gridBagConstraints);

		add(mainPanel, java.awt.BorderLayout.CENTER);

	}// GEN-END:initComponents

	private void gTextFieldFocusLost(final java.awt.event.FocusEvent evt) {// GEN-FIRST:event_gTextFieldFocusLost
		try {
			pt.utl.ist.elab.client.virtual.guipack.GUtils.validateInput(gTextField, gSlider, 1);
		} catch (final NumberFormatException e) {
			gTextField.setText(Integer.toString(gSlider.getValue()));
		}
	}// GEN-LAST:event_gTextFieldFocusLost

	private void gSliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_gSliderStateChanged
		gTextField.setText("" + gSlider.getValue());
	}// GEN-LAST:event_gSliderStateChanged

	private void okButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okButtonActionPerformed
		final double w = tiro.getW();
		final double h = tiro.getH();
		final double v = tiro.getVel();
		final double theta = tiro.getTheta();
		final double g = gSlider.getValue() / 10d;

		acqConfig.setSelectedFrequency(new Frequency(100d, hardwareInfo.getHardwareFrequencies(0).getMinimumFrequency()
				.getMultiplier(), hardwareInfo.getHardwareFrequencies(0).getMinimumFrequency().getFrequencyDefType()));
		acqConfig.setTotalSamples(3000);

		acqConfig.getSelectedHardwareParameter("w").setParameterValue("" + (float) w);
		acqConfig.getSelectedHardwareParameter("h").setParameterValue("" + (float) h);
		acqConfig.getSelectedHardwareParameter("v").setParameterValue("" + (float) v);
		acqConfig.getSelectedHardwareParameter("theta").setParameterValue("" + (float) theta);
		acqConfig.getSelectedHardwareParameter("g").setParameterValue("" + (float) g);

		for (int i = 0; i < acqConfig.getSelectedHardwareParameters().length; i++) {
			System.out.println(acqConfig.getSelectedHardwareParameters(i).getParameterName() + " = "
					+ acqConfig.getSelectedHardwareParameters(i).getParameterValue());
		}

		fireICustomizerListenerDone();
	}// GEN-LAST:event_okButtonActionPerformed

	private void cancelButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformed
		fireICustomizerListenerCanceled();
	}// GEN-LAST:event_cancelButtonActionPerformed

	private void defaultButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_defaultButtonActionPerformed
		gSlider.setValue(98);
		tiro.config(10, 10, 6.7, Math.toRadians(26.56));
	}// GEN-LAST:event_defaultButtonActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(final String args[]) {
		final javax.swing.JFrame test = new javax.swing.JFrame();
		test.addWindowListener(new java.awt.event.WindowAdapter() {
			@Override
			public void windowClosing(final java.awt.event.WindowEvent e) {
				System.exit(0);
			}
		});
		test.getContentPane().add(new TiroCustomizer());
		test.pack();
		test.setVisible(true);
	}

	// ****************************REC********************************************/

	/** Utility field used by event firing mechanism. */
	private javax.swing.event.EventListenerList listenerList = null;

	/**
	 * Registers ICustomizerListener to receive events.
	 * 
	 * @param listener The listener to register.
	 */
	@Override
	public synchronized void addICustomizerListener(final ICustomizerListener listener) {
		if (listenerList == null) {
			listenerList = new javax.swing.event.EventListenerList();
		}
		listenerList.add(ICustomizerListener.class, listener);
	}

	/**
	 * Removes ICustomizerListener from the list of listeners.
	 * 
	 * @param listener The listener to remove.
	 */
	@Override
	public synchronized void removeICustomizerListener(final ICustomizerListener listener) {
		listenerList.remove(ICustomizerListener.class, listener);
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerCanceled() {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {
				((ICustomizerListener) listeners[i + 1]).canceled();
			}
		}
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerDone() {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {

				((ICustomizerListener) listeners[i + 1]).done();
			}
		}
	}

	private HardwareInfo hardwareInfo = null;
	private HardwareAcquisitionConfig acqConfig = null;

	@Override
	public HardwareAcquisitionConfig getAcquisitionConfig() {
		return acqConfig;
	}

	@Override
	public void setHardwareAcquisitionConfig(final HardwareAcquisitionConfig acqConfig) {
		this.acqConfig = acqConfig;
		if (acqConfig != null) {
			gSlider.setValue(Math.round(Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("g")) * 10));
			final double w = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("w"));
			final double h = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("h"));
			final double v = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("v"));
			final double theta = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("theta"));

			tiro.config(w, h, v, theta);
		}
	}

	@Override
	public void setHardwareInfo(final HardwareInfo hardwareInfo) {
		this.hardwareInfo = hardwareInfo;
	}

	protected HardwareInfo getHardwareInfo() {
		return hardwareInfo;
	}

	@Override
	public javax.swing.JComponent getCustomizerComponent() {
		return this;
	}

	@Override
	public javax.swing.ImageIcon getCustomizerIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/vtiro/resources/tiro_iconified.PNG"));
	}

	@Override
	public String getCustomizerTitle() {
		return "Shot Configuration Utility";
	}

	@Override
	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton cancelButton;
	private javax.swing.JPanel commandsPanel;
	private javax.swing.JButton defaultButton;
	private javax.swing.JPanel gPanel;
	private javax.swing.JSlider gSlider;
	private javax.swing.JTextField gTextField;
	private javax.swing.JPanel mainPanel;
	private javax.swing.JButton okButton;
	// End of variables declaration//GEN-END:variables

}
