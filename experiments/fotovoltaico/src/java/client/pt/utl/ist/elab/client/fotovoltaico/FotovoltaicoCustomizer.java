/*
 * FotovoltaicoCustomizer.java
 *
 * Created on 13 de Outubro de 2017
 */
package pt.utl.ist.elab.client.fotovoltaico;

import java.text.DecimalFormat;
import java.util.Hashtable;

import javax.swing.JLabel;
import javax.swing.text.NumberFormatter;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.impl.client.customizer.AbstractCustomizer;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

/**
 *
 * @author Andr√© Sancho Duarte - IPFN
 */
public class FotovoltaicoCustomizer extends AbstractCustomizer {

    /**
     *
     */
    private static final long serialVersionUID = -775367629564418034L;
    private static DecimalFormat decimalFormat = new DecimalFormat("0.0");

    static {
        decimalFormat.setDecimalSeparatorAlwaysShown(true);
        decimalFormat.setGroupingUsed(false);
        decimalFormat.setMinimumFractionDigits(1);
    }

    /**
     * Creates new form RadioactividadeCustomizer
     */
    public FotovoltaicoCustomizer() {
        initComponents();

        Hashtable<Integer, JLabel> slidersPosLabels = new Hashtable<Integer, JLabel>(4);
        slidersPosLabels.put(new Integer(3000), new JLabel("3.0"));
        slidersPosLabels.put(new Integer(5000), new JLabel("5.0"));
        slidersPosLabels.put(new Integer(6000), new JLabel("6.0"));
        slidersPosLabels.put(new Integer(7500), new JLabel("7.5"));

        NumberFormatter formatterUserPos1 = new NumberFormatter(decimalFormat);
        NumberFormatter formatterUserPos2 = new NumberFormatter(decimalFormat);

        // formatterUserPos1.setAllowsInvalid(false);
        // formatterUserPos2.setAllowsInvalid(false);
        formatterUserPos1.setCommitsOnValidEdit(true);
        formatterUserPos2.setCommitsOnValidEdit(true);

        formatterUserPos1.setOverwriteMode(true);
        formatterUserPos2.setOverwriteMode(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        protocolButtonGroup = new javax.swing.ButtonGroup();
        buttonPanel = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnDefaults = new javax.swing.JButton();
        slidersPanel = new javax.swing.JPanel();
        protocolPanel = new javax.swing.JPanel();
        angleSweepRadioButton = new javax.swing.JRadioButton();
        buckSweepRadioButton = new javax.swing.JRadioButton();
        buckFindMaxRadioButton = new javax.swing.JRadioButton();
        sweepPanel1 = new javax.swing.JPanel();
        buckPanel = new javax.swing.JPanel();
        sldAngle = new javax.swing.JSlider();
        tfAngle = new javax.swing.JTextField();
        anglePanel = new javax.swing.JPanel();
        sldBuck = new javax.swing.JSlider();
        tfBuck = new javax.swing.JTextField();
        colorPanel = new javax.swing.JPanel();
        redSldPanel = new javax.swing.JPanel();
        sldRedComponent = new javax.swing.JSlider();
        tfRedComponent = new javax.swing.JTextField();
        greenSldPanel = new javax.swing.JPanel();
        sldGreenComponent = new javax.swing.JSlider();
        tfGreenComponent = new javax.swing.JTextField();
        blueSldPanel = new javax.swing.JPanel();
        sldBlueComponent = new javax.swing.JSlider();
        tfBlueComponent = new javax.swing.JTextField();

        setMinimumSize(new java.awt.Dimension(350, 460));
        setPreferredSize(new java.awt.Dimension(350, 460));
        setLayout(null);

        buttonPanel.setMinimumSize(new java.awt.Dimension(350, 42));
        buttonPanel.setPreferredSize(new java.awt.Dimension(350, 42));
        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 5));

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });
        buttonPanel.add(btnOK);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/fotovoltaico/resources/messages"); // NOI18N
        btnCancel.setText(bundle.getString("rec.exp.fotovoltaico.lbl.cancel")); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        buttonPanel.add(btnCancel);

        jLabel1.setText("   ");
        buttonPanel.add(jLabel1);

        btnDefaults.setText(ReCResourceBundle.findStringOrDefault("fotovoltaico$rec.exp.fotovoltaico.lbl.dftcfg","fotovoltaico$rec.exp.fotovoltaico.lbl.dftcfg")); // NOI18N
        btnDefaults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefaultsActionPerformed(evt);
            }
        });
        buttonPanel.add(btnDefaults);

        add(buttonPanel);
        buttonPanel.setBounds(0, 440, 460, 42);

        slidersPanel.setMinimumSize(new java.awt.Dimension(700, 320));
        slidersPanel.setLayout(new java.awt.BorderLayout());

        protocolPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("rec.exp.fotovoltaico.lbl.protocol"))); // NOI18N
        protocolPanel.setLayout(new java.awt.GridBagLayout());

        protocolButtonGroup.add(angleSweepRadioButton);
        angleSweepRadioButton.setSelected(true);
        angleSweepRadioButton.setText(bundle.getString("rec.exp.fotovoltaico.lbl.protocol.anglesweep")); // NOI18N
        angleSweepRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                angleSweepRadioButtonStateChanged(evt);
            }
        });
        protocolPanel.add(angleSweepRadioButton, new java.awt.GridBagConstraints());

        protocolButtonGroup.add(buckSweepRadioButton);
        buckSweepRadioButton.setText(bundle.getString("rec.exp.fotovoltaico.lbl.protocol.bucksweep")); // NOI18N
        buckSweepRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                buckSweepRadioButtonStateChanged(evt);
            }
        });
        protocolPanel.add(buckSweepRadioButton, new java.awt.GridBagConstraints());

        protocolButtonGroup.add(buckFindMaxRadioButton);
        buckFindMaxRadioButton.setText(bundle.getString("rec.exp.fotovoltaico.lbl.protocol.buckfindmax")); // NOI18N
        buckFindMaxRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                buckFindMaxRadioButtonStateChanged(evt);
            }
        });
        protocolPanel.add(buckFindMaxRadioButton, new java.awt.GridBagConstraints());

        slidersPanel.add(protocolPanel, java.awt.BorderLayout.PAGE_START);

        buckPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(ReCResourceBundle.findStringOrDefault("fotovoltaico$rec.exp.fotovoltaico.lbl.angle","fotovoltaico$rec.exp.fotovoltaico.lbl.angle"))); // NOI18N
        buckPanel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        buckPanel.setMinimumSize(new java.awt.Dimension(350, 180));
        buckPanel.setPreferredSize(new java.awt.Dimension(350, 180));
        buckPanel.setLayout(new java.awt.GridBagLayout());

        sldAngle.setMajorTickSpacing(25);
        sldAngle.setMinorTickSpacing(5);
        sldAngle.setPaintLabels(true);
        sldAngle.setPaintTicks(true);
        sldAngle.setPaintTrack(false);
        sldAngle.setToolTipText("");
        sldAngle.setValue(0);
        sldAngle.setEnabled(false);
        sldAngle.setMaximumSize(new java.awt.Dimension(1000, 32767));
        sldAngle.setMinimumSize(new java.awt.Dimension(250, 42));
        sldAngle.setPreferredSize(new java.awt.Dimension(250, 42));
        sldAngle.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldAngleStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weighty = 10.0;
        buckPanel.add(sldAngle, gridBagConstraints);

        tfAngle.setColumns(3);
        tfAngle.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfAngle.setText("0");
        tfAngle.setToolTipText("");
        tfAngle.setEnabled(false);
        tfAngle.setMaximumSize(new java.awt.Dimension(30, 16));
        tfAngle.setMinimumSize(new java.awt.Dimension(30, 16));
        tfAngle.setPreferredSize(new java.awt.Dimension(37, 16));
        tfAngle.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfAngleFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        buckPanel.add(tfAngle, gridBagConstraints);

        sweepPanel1.add(buckPanel);

        anglePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(ReCResourceBundle.findStringOrDefault("fotovoltaico$rec.exp.fotovoltaico.lbl.buck","fotovoltaicorec.exp.fotovoltaico.lbl.buck"))); // NOI18N
        anglePanel.setMinimumSize(new java.awt.Dimension(350, 80));
        anglePanel.setPreferredSize(new java.awt.Dimension(350, 180));
        anglePanel.setLayout(new java.awt.GridBagLayout());

        sldBuck.setMajorTickSpacing(20);
        sldBuck.setMinorTickSpacing(5);
        sldBuck.setPaintLabels(true);
        sldBuck.setPaintTicks(true);
        sldBuck.setPaintTrack(false);
        sldBuck.setToolTipText("");
        sldBuck.setMaximumSize(new java.awt.Dimension(1000, 32767));
        sldBuck.setMinimumSize(new java.awt.Dimension(255, 80));
        sldBuck.setPreferredSize(new java.awt.Dimension(255, 80));
        sldBuck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldBuckStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 10.0;
        anglePanel.add(sldBuck, gridBagConstraints);

        tfBuck.setColumns(4);
        tfBuck.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfBuck.setText("50");
        tfBuck.setMaximumSize(new java.awt.Dimension(30, 16));
        tfBuck.setMinimumSize(new java.awt.Dimension(30, 16));
        tfBuck.setPreferredSize(new java.awt.Dimension(48, 16));
        tfBuck.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfBuckFocusLost(evt);
            }
        });
        tfBuck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfBuckActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        anglePanel.add(tfBuck, gridBagConstraints);

        sweepPanel1.add(anglePanel);

        slidersPanel.add(sweepPanel1, java.awt.BorderLayout.CENTER);

        colorPanel.setMinimumSize(new java.awt.Dimension(350, 80));
        colorPanel.setPreferredSize(new java.awt.Dimension(350, 180));

        redSldPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("rec.exp.fotovoltaico.lbl.color.red"))); // NOI18N

        sldRedComponent.setMajorTickSpacing(85);
        sldRedComponent.setMaximum(255);
        sldRedComponent.setMinorTickSpacing(17);
        sldRedComponent.setPaintLabels(true);
        sldRedComponent.setPaintTicks(true);
        sldRedComponent.setPaintTrack(false);
        sldRedComponent.setToolTipText("");
        sldRedComponent.setValue(128);
        sldRedComponent.setMaximumSize(new java.awt.Dimension(1000, 32767));
        sldRedComponent.setMinimumSize(new java.awt.Dimension(255, 80));
        sldRedComponent.setPreferredSize(new java.awt.Dimension(255, 80));
        sldRedComponent.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldRedComponentStateChanged(evt);
            }
        });
        redSldPanel.add(sldRedComponent);

        tfRedComponent.setColumns(4);
        tfRedComponent.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfRedComponent.setText("128");
        tfRedComponent.setToolTipText("");
        tfRedComponent.setMaximumSize(new java.awt.Dimension(30, 16));
        tfRedComponent.setMinimumSize(new java.awt.Dimension(30, 16));
        tfRedComponent.setPreferredSize(new java.awt.Dimension(48, 16));
        tfRedComponent.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfRedComponentFocusLost(evt);
            }
        });
        tfRedComponent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfRedComponentActionPerformed(evt);
            }
        });
        redSldPanel.add(tfRedComponent);

        colorPanel.add(redSldPanel);

        greenSldPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("rec.exp.fotovoltaico.lbl.color.green"))); // NOI18N

        sldGreenComponent.setMajorTickSpacing(51);
        sldGreenComponent.setMaximum(255);
        sldGreenComponent.setMinorTickSpacing(17);
        sldGreenComponent.setPaintLabels(true);
        sldGreenComponent.setPaintTicks(true);
        sldGreenComponent.setPaintTrack(false);
        sldGreenComponent.setToolTipText("");
        sldGreenComponent.setValue(128);
        sldGreenComponent.setMaximumSize(new java.awt.Dimension(1000, 32767));
        sldGreenComponent.setMinimumSize(new java.awt.Dimension(255, 80));
        sldGreenComponent.setPreferredSize(new java.awt.Dimension(255, 80));
        sldGreenComponent.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldGreenComponentStateChanged(evt);
            }
        });
        greenSldPanel.add(sldGreenComponent);

        tfGreenComponent.setColumns(4);
        tfGreenComponent.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfGreenComponent.setText("128");
        tfGreenComponent.setToolTipText("");
        tfGreenComponent.setMaximumSize(new java.awt.Dimension(30, 16));
        tfGreenComponent.setMinimumSize(new java.awt.Dimension(30, 16));
        tfGreenComponent.setPreferredSize(new java.awt.Dimension(48, 16));
        tfGreenComponent.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfGreenComponentFocusLost(evt);
            }
        });
        tfGreenComponent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfGreenComponentActionPerformed(evt);
            }
        });
        greenSldPanel.add(tfGreenComponent);

        colorPanel.add(greenSldPanel);

        blueSldPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("rec.exp.fotovoltaico.lbl.color.blue"))); // NOI18N

        sldBlueComponent.setMajorTickSpacing(51);
        sldBlueComponent.setMaximum(255);
        sldBlueComponent.setMinorTickSpacing(17);
        sldBlueComponent.setPaintLabels(true);
        sldBlueComponent.setPaintTicks(true);
        sldBlueComponent.setPaintTrack(false);
        sldBlueComponent.setToolTipText("");
        sldBlueComponent.setValue(128);
        sldBlueComponent.setMaximumSize(new java.awt.Dimension(1000, 32767));
        sldBlueComponent.setMinimumSize(new java.awt.Dimension(255, 80));
        sldBlueComponent.setPreferredSize(new java.awt.Dimension(255, 80));
        sldBlueComponent.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldBlueComponentStateChanged(evt);
            }
        });
        blueSldPanel.add(sldBlueComponent);

        tfBlueComponent.setColumns(4);
        tfBlueComponent.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfBlueComponent.setText("128");
        tfBlueComponent.setToolTipText("");
        tfBlueComponent.setMaximumSize(new java.awt.Dimension(30, 16));
        tfBlueComponent.setMinimumSize(new java.awt.Dimension(30, 16));
        tfBlueComponent.setPreferredSize(new java.awt.Dimension(48, 16));
        tfBlueComponent.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfBlueComponentFocusLost(evt);
            }
        });
        tfBlueComponent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfBlueComponentActionPerformed(evt);
            }
        });
        blueSldPanel.add(tfBlueComponent);

        colorPanel.add(blueSldPanel);

        slidersPanel.add(colorPanel, java.awt.BorderLayout.WEST);

        add(slidersPanel);
        slidersPanel.setBounds(0, 0, 720, 420);
    }// </editor-fold>//GEN-END:initComponents

    private void tfBuckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfBuckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfBuckActionPerformed

    private void tfRedComponentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfRedComponentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfRedComponentActionPerformed

    private void tfRedComponentFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfRedComponentFocusLost
        String strRedComp = tfRedComponent.getText();
        if (strRedComp.trim().equals("")) {
            return;
        }
        try {
            int red = Integer.parseInt(strRedComp);
            if (red <= sldRedComponent.getMaximum() && red > 0) {
                sldRedComponent.setValue(red);
            } else {
                tfRedComponent.setText("" + sldRedComponent.getValue());
            }
        } catch (Exception e) {
            tfRedComponent.setText("" + sldRedComponent.getValue());
        }
    }//GEN-LAST:event_tfRedComponentFocusLost

    private void sldRedComponentStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldRedComponentStateChanged
        tfRedComponent.setText("" + sldRedComponent.getValue());
    }//GEN-LAST:event_sldRedComponentStateChanged

    private void sldGreenComponentStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldGreenComponentStateChanged
        tfGreenComponent.setText("" + sldGreenComponent.getValue());
    }//GEN-LAST:event_sldGreenComponentStateChanged

    private void tfGreenComponentFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfGreenComponentFocusLost
        String strGreenComp = tfGreenComponent.getText();
        if (strGreenComp.trim().equals("")) {
            return;
        }
        try {
            int green = Integer.parseInt(strGreenComp);
            if (green <= sldGreenComponent.getMaximum() && green > 0) {
                sldGreenComponent.setValue(green);
            } else {
                tfGreenComponent.setText("" + sldGreenComponent.getValue());
            }
        } catch (Exception e) {
            tfGreenComponent.setText("" + sldGreenComponent.getValue());
        }
    }//GEN-LAST:event_tfGreenComponentFocusLost

    private void tfGreenComponentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfGreenComponentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfGreenComponentActionPerformed

    private void sldBlueComponentStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldBlueComponentStateChanged
        tfBlueComponent.setText("" + sldBlueComponent.getValue());
    }//GEN-LAST:event_sldBlueComponentStateChanged

    private void tfBlueComponentFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfBlueComponentFocusLost
        String strBlueComp = tfBlueComponent.getText();
        if (strBlueComp.trim().equals("")) {
            return;
        }
        try {
            int blue = Integer.parseInt(strBlueComp);
            if (blue <= sldBlueComponent.getMaximum() && blue > 0) {
                sldBlueComponent.setValue(blue);
            } else {
                tfBlueComponent.setText("" + sldBlueComponent.getValue());
            }
        } catch (Exception e) {
            tfBlueComponent.setText("" + sldBlueComponent.getValue());
        }
    }//GEN-LAST:event_tfBlueComponentFocusLost

    private void tfBlueComponentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfBlueComponentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfBlueComponentActionPerformed

    private void sldBuckStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldBuckStateChanged
        if (sldBuck.getValue() <= 0) {
            sldBuck.setValue(1);
        }
        tfBuck.setText("" + sldBuck.getValue());
    }//GEN-LAST:event_sldBuckStateChanged

    private void sldAngleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldAngleStateChanged
        tfAngle.setText("" + sldAngle.getValue());
    }//GEN-LAST:event_sldAngleStateChanged

    private void angleSweepRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_angleSweepRadioButtonStateChanged
        if (angleSweepRadioButton.isSelected()) {
            sldAngle.setEnabled(false);
            tfAngle.setEnabled(false);
        } else {
            sldAngle.setEnabled(true);
            tfAngle.setEnabled(true);
        }
    }//GEN-LAST:event_angleSweepRadioButtonStateChanged

    private void buckSweepRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_buckSweepRadioButtonStateChanged
        if (buckSweepRadioButton.isSelected() || buckFindMaxRadioButton.isSelected()) {
            sldBuck.setEnabled(false);
            tfBuck.setEnabled(false);
        } else {
            sldBuck.setEnabled(true);
            tfBuck.setEnabled(true);
        }
    }//GEN-LAST:event_buckSweepRadioButtonStateChanged

    private void buckFindMaxRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_buckFindMaxRadioButtonStateChanged
        if (buckFindMaxRadioButton.isSelected() || buckSweepRadioButton.isSelected()) {
            sldBuck.setEnabled(false);
            tfBuck.setEnabled(false);
        } else {
            sldBuck.setEnabled(true);
            tfBuck.setEnabled(true);
        }
    }//GEN-LAST:event_buckFindMaxRadioButtonStateChanged

    private void tfBuckFocusLost(java.awt.event.FocusEvent evt)// GEN-FIRST:event_tfAngleFocusLost
    {// GEN-HEADEREND:event_tfAngleFocusLost
        String strBuck = tfBuck.getText();
        if (strBuck.trim().equals("")) {
            return;
        }
        try {
            int buck = Integer.parseInt(strBuck);
            if (buck >= sldBuck.getMinimum() && buck <= sldBuck.getMaximum()) {
                sldBuck.setValue(buck);
            } else {
                tfBuck.setText("" + sldBuck.getValue());
            }
        } catch (Exception e) {
            tfBuck.setText("" + sldBuck.getValue());
        }
    }// GEN-LAST:event_tfAngleFocusLost

    private void tfAngleFocusLost(java.awt.event.FocusEvent evt)// GEN-FIRST:event_tfCoilCurrentFocusLost
    {// GEN-HEADEREND:event_tfCoilCurrentFocusLost
        String strAngle = tfAngle.getText();
        if (strAngle.trim().equals("")) {
            return;
        }
        try {
            int angle = Integer.parseInt(strAngle);
            if (angle <= sldAngle.getMaximum() && angle >= sldAngle.getMinimum()) {
                sldAngle.setValue(angle);
            } else {
                tfAngle.setText("" + sldAngle.getValue());
            }
        } catch (Exception e) {
            tfAngle.setText("" + sldAngle.getValue());
        }
    }// GEN-LAST:event_tfCoilCurrentFocusLost

    private void btnDefaultsActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnDefaultsActionPerformed
    {// GEN-HEADEREND:event_btnDefaultsActionPerformed
        angleSweepRadioButton.setEnabled(true);
        sldAngle.setValue(75);
        tfAngle.setText("75");
        sldBuck.setValue(5);
        tfBuck.setText("5");
        sldRedComponent.setValue(255);
        tfRedComponent.setText("255");
        sldGreenComponent.setValue(76);
        tfGreenComponent.setText("76");
        sldBlueComponent.setValue(58);
        tfBlueComponent.setText("58");
    }// GEN-LAST:event_btnDefaultsActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnCancelActionPerformed
    {// GEN-HEADEREND:event_btnCancelActionPerformed
        fireICustomizerListenerCanceled();
    }// GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnOKActionPerformed
    {// GEN-HEADEREND:event_btnOKActionPerformed

        String protocol = "1";
        int nsamples = 120;

        if (buckSweepRadioButton.isSelected()) {
            protocol = "2";
            nsamples = 100;
        } else if (buckFindMaxRadioButton.isSelected()) {
            protocol = "3";
            nsamples = 24;
        }

        getAcquisitionConfig().getSelectedHardwareParameter("protocol").setParameterValue(protocol);
        getAcquisitionConfig().getSelectedHardwareParameter("red_comp").setParameterValue("" + sldRedComponent.getValue());
        getAcquisitionConfig().getSelectedHardwareParameter("green_comp").setParameterValue("" + sldGreenComponent.getValue());
        getAcquisitionConfig().getSelectedHardwareParameter("blue_comp").setParameterValue("" + sldBlueComponent.getValue());
        getAcquisitionConfig().getSelectedHardwareParameter("buck").setParameterValue("" + sldBuck.getValue());
        getAcquisitionConfig().getSelectedHardwareParameter("angle").setParameterValue("" + sldAngle.getValue());
        getAcquisitionConfig().setTotalSamples(nsamples);

        fireICustomizerListenerDone();
    }// GEN-LAST:event_btnOKActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel anglePanel;
    private javax.swing.JRadioButton angleSweepRadioButton;
    private javax.swing.JPanel blueSldPanel;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDefaults;
    private javax.swing.JButton btnOK;
    private javax.swing.JRadioButton buckFindMaxRadioButton;
    private javax.swing.JPanel buckPanel;
    private javax.swing.JRadioButton buckSweepRadioButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel colorPanel;
    private javax.swing.JPanel greenSldPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.ButtonGroup protocolButtonGroup;
    private javax.swing.JPanel protocolPanel;
    private javax.swing.JPanel redSldPanel;
    private javax.swing.JSlider sldAngle;
    private javax.swing.JSlider sldBlueComponent;
    private javax.swing.JSlider sldBuck;
    private javax.swing.JSlider sldGreenComponent;
    private javax.swing.JSlider sldRedComponent;
    private javax.swing.JPanel slidersPanel;
    private javax.swing.JPanel sweepPanel1;
    private javax.swing.JTextField tfAngle;
    private javax.swing.JTextField tfBlueComponent;
    private javax.swing.JTextField tfBuck;
    private javax.swing.JTextField tfGreenComponent;
    private javax.swing.JTextField tfRedComponent;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setHardwareAcquisitionConfig(HardwareAcquisitionConfig acqConfig) {
        super.setHardwareAcquisitionConfig(acqConfig);

        if (acqConfig != null) {
            System.out.println("FotovoltaicoCustomizer.setHardwareAcquisitionConfig(HardwareAcquisitionConfig  acqConfig)");
            System.out.println("acqConfig: [" + acqConfig + "]");

        }
    }

    @Override
    public javax.swing.ImageIcon getCustomizerIcon() {
        return new javax.swing.ImageIcon(getClass().getResource(
                "/pt/utl/ist/elab/client/fotovoltaico/resources/fotovoltaico_iconified.gif"));
    }

    @Override
    public String getCustomizerTitle() {
        return ReCResourceBundle.findStringOrDefault("fotovoltaico$rec.exp.fotovoltaico.customizer.title",
                "fotovoltaico$rec.exp.fotovoltaico.customizer.title");
    }
}
