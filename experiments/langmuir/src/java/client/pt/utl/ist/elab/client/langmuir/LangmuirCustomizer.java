package pt.utl.ist.elab.client.langmuir;


import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.metadata.ChannelParameter;
import com.linkare.rec.data.metadata.HardwareInfo;
import com.linkare.rec.impl.client.customizer.AbstractCustomizer;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

/**
 * 
 * @author Jo√£o Loureiro - IPFN
 */

public class LangmuirCustomizer extends AbstractCustomizer {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8933425098694295695L;
	
	
	private int MINIMUM_VALUE_INDEX = 0;
    private int MAXIMUM_VALUE_INDEX = 1;
    private int STEP_VALUE_INDEX = 2;
    
	/** Creates new form RadioactividadeCustomizer */
	public LangmuirCustomizer() {
		initComponents();
		
		//TODO:Check this out at a latter time
		/*
		checkMaxNumSamples();
		checkMaxTime();
		checkPosOverlap();
*/
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	   private void initComponents() {
	        java.awt.GridBagConstraints gridBagConstraints;

	        jPanel1 = new javax.swing.JPanel();
	        sldSigA = new javax.swing.JSlider();
	        tfSigA = new javax.swing.JFormattedTextField();
	        jPanel2 = new javax.swing.JPanel();
	        sldSigP = new javax.swing.JSlider();
	        tfSigP = new javax.swing.JFormattedTextField();
	        jPanel3 = new javax.swing.JPanel();
	        sldPress = new javax.swing.JSlider();
	        tfPress = new javax.swing.JFormattedTextField();
	        jPanel4 = new javax.swing.JPanel();
	        sldNumSamples = new javax.swing.JSlider();
	        lblErrorSamplesTooHigh = new javax.swing.JLabel();
	        tfNumSamples = new javax.swing.JFormattedTextField();
	        jPanel5 = new javax.swing.JPanel();
	        sldNumPeriod = new javax.swing.JSlider();
	        tfNumPeriod = new javax.swing.JFormattedTextField();
	        jPanel6 = new javax.swing.JPanel();
	        
	        
	        rButG2 = new javax.swing.ButtonGroup();
	        rBut2op1 = new javax.swing.JRadioButton();
	        rBut2op2 = new javax.swing.JRadioButton();
	        rBut2op3 = new javax.swing.JRadioButton();
	        btnDef = new javax.swing.JButton();
	        btnOK = new javax.swing.JButton();
	        btnCancel = new javax.swing.JButton();

	        //setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

	        //java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("messages"); // NOI18N
	     
	        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(ReCResourceBundle.findString("langmuir$rec.exp.customizer.title1"))); // NOI18N
	        jPanel1.setMinimumSize(new java.awt.Dimension(350, 160));
	        jPanel1.setPreferredSize(new java.awt.Dimension(350, 160));
	        jPanel1.setLayout(new java.awt.GridBagLayout());

	        
	        sldSigA.setMaximum(80);
	        sldSigA.setMinimum(10);
	        sldSigA.setMajorTickSpacing(10);
	        sldSigA.setMinorTickSpacing(5);
	        sldSigA.setPaintLabels(true);
	        sldSigA.setPaintTicks(true);
	        sldSigA.setPaintTrack(false);
	        sldSigA.setSnapToTicks(false);
	        sldSigA.setMinimumSize(new java.awt.Dimension(250, 42));
	        sldSigA.setPreferredSize(new java.awt.Dimension(250, 42));
	        sldSigA.addChangeListener(new javax.swing.event.ChangeListener() {
	            public void stateChanged(javax.swing.event.ChangeEvent evt) {
	                sldSigAStateChanged(evt);
	            }
	        });
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 0;
	        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
	        gridBagConstraints.weighty = 10.0;
	        jPanel1.add(sldSigA, gridBagConstraints);

	        tfSigA.setText("100");
	        tfSigA.addFocusListener(new java.awt.event.FocusAdapter() {
	            public void focusLost(java.awt.event.FocusEvent evt) {
	                tfSigAFocusLost(evt);
	            }
	        });
	        tfSigA.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                tfSigAActionPerformed(evt);
	            }
	        });
	        
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
	        jPanel1.add(tfSigA, gridBagConstraints);

	        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(ReCResourceBundle.findString("langmuir$rec.exp.customizer.title2")))); // NOI18N
	        jPanel2.setMinimumSize(new java.awt.Dimension(350, 160));
	        jPanel2.setPreferredSize(new java.awt.Dimension(350, 160));
	        jPanel2.setLayout(new java.awt.GridBagLayout());

	        sldSigP.setMajorTickSpacing(12);
	        sldSigP.setMaximum(50);
	        sldSigP.setMinimum(2);
	        sldSigP.setMinorTickSpacing(3);
	        sldSigP.setPaintLabels(true);
	        sldSigP.setPaintTicks(true);
	        sldSigP.setPaintTrack(false);
	        sldSigP.setSnapToTicks(false);
	        sldSigP.setMinimumSize(new java.awt.Dimension(250, 42));
	        sldSigP.setPreferredSize(new java.awt.Dimension(250, 42));
	        sldSigP.addChangeListener(new javax.swing.event.ChangeListener() {
	            public void stateChanged(javax.swing.event.ChangeEvent evt) {
	                sldSigPStateChanged(evt);
	            }
	        });
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 0;
	        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
	        gridBagConstraints.weighty = 10.0;
	        jPanel2.add(sldSigP, gridBagConstraints);

	        tfSigP.setText("100");
	        tfSigP.addFocusListener(new java.awt.event.FocusAdapter() {
	            public void focusLost(java.awt.event.FocusEvent evt) {
	                tfSigPFocusLost(evt);
	            }
	        });
	        tfSigP.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                tfSigPActionPerformed(evt);
	            }
	        });
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
	        jPanel2.add(tfSigP, gridBagConstraints);

	        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(ReCResourceBundle.findString("langmuir$rec.exp.customizer.title3"))); // NOI18N
	        jPanel3.setAutoscrolls(true);
	        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
	        jPanel3.setDoubleBuffered(false);
	        jPanel3.setInheritsPopupMenu(true);
	        jPanel3.setMinimumSize(new java.awt.Dimension(350, 150));
	        jPanel3.setPreferredSize(new java.awt.Dimension(350, 150));
	        jPanel3.setLayout(new java.awt.GridBagLayout());

	        sldPress.setMaximum(100);
	        sldPress.setMinimum(0);
	        sldPress.setMajorTickSpacing(20);
	        sldPress.setMinorTickSpacing(5);
	        sldPress.setPaintLabels(true);
	        sldPress.setPaintTicks(true);
	        sldPress.setPaintTrack(false);
	        sldPress.setSnapToTicks(false);
	        sldPress.setMinimumSize(new java.awt.Dimension(250, 42));
	        sldPress.setPreferredSize(new java.awt.Dimension(250, 42));
	        sldPress.addChangeListener(new javax.swing.event.ChangeListener() {
	            public void stateChanged(javax.swing.event.ChangeEvent evt) {
	                sldPressStateChanged(evt);
	            }
	        });
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 0;
	        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
	        gridBagConstraints.weighty = 10.0;
	        jPanel3.add(sldPress, gridBagConstraints);

	        tfPress.setText("1000");
	        tfPress.addFocusListener(new java.awt.event.FocusAdapter() {
	            public void focusLost(java.awt.event.FocusEvent evt) {
	                tfPressFocusLost(evt);
	            }
	        });
	        tfPress.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                tfPressActionPerformed(evt);
	            }
	        });
	        
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
	        
	        jPanel3.add(tfPress, gridBagConstraints);
	        
	        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(ReCResourceBundle.findString("langmuir$rec.exp.customizer.title4"))); // NOI18N
	        jPanel4.setMinimumSize(new java.awt.Dimension(350, 80));
	        jPanel4.setPreferredSize(new java.awt.Dimension(350, 80));
	        jPanel4.setLayout(new java.awt.GridBagLayout());

	        sldNumSamples.setMajorTickSpacing(9);
	        sldNumSamples.setMaximum(47);
	        sldNumSamples.setMinimum(2);
	        sldNumSamples.setMinorTickSpacing(3);
	        sldNumSamples.setPaintLabels(true);
	        sldNumSamples.setPaintTicks(true);
	        sldNumSamples.setPaintTrack(false);
	        sldNumSamples.setValue(10);
	        sldNumSamples.setMaximumSize(new java.awt.Dimension(1000, 32767));
	        sldNumSamples.setMinimumSize(new java.awt.Dimension(250, 42));
	        sldNumSamples.setPreferredSize(new java.awt.Dimension(250, 42));
	        sldNumSamples.addChangeListener(new javax.swing.event.ChangeListener() {
	            public void stateChanged(javax.swing.event.ChangeEvent evt) {
	                sldNumSamplesStateChanged(evt);
	            }
	        });
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 0;
	        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
	        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
	        gridBagConstraints.weighty = 10.0;
	        jPanel4.add(sldNumSamples, gridBagConstraints);

	        lblErrorSamplesTooHigh.setForeground(new java.awt.Color(255, 0, 0));
	        lblErrorSamplesTooHigh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	        //lblErrorSamplesTooHigh.setText(ReCResourceBundle.findStringOrDefault("boylemariotte$rec.exp.customizer.label2","boylemariotte$rec.exp.customizer.label2")); // NOI18N
	        lblErrorSamplesTooHigh.setEnabled(false);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 1;
	        gridBagConstraints.gridwidth = 2;
	        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
	        jPanel4.add(lblErrorSamplesTooHigh, gridBagConstraints);

	        tfNumSamples.setText("100");
	        tfNumSamples.addFocusListener(new java.awt.event.FocusAdapter() {
	            public void focusLost(java.awt.event.FocusEvent evt) {
	                tfNumSamplesFocusLost(evt);
	            }
	        });
	        tfNumSamples.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	            	tfNumSamplesActionPerformed(evt);
	            }
	        });
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
	        jPanel4.add(tfNumSamples, gridBagConstraints);

	        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(ReCResourceBundle.findString("langmuir$rec.exp.customizer.title5"))); // NOI18N
	        jPanel5.setMinimumSize(new java.awt.Dimension(350, 80));
	        jPanel5.setPreferredSize(new java.awt.Dimension(350, 80));
	        jPanel5.setLayout(new java.awt.GridBagLayout());

	        sldNumPeriod.setMajorTickSpacing(5);
	        sldNumPeriod.setMaximum(50);
	        sldNumPeriod.setMinimum(5);
	        sldNumPeriod.setMinorTickSpacing(1);
	        sldNumPeriod.setPaintLabels(true);
	        sldNumPeriod.setPaintTicks(true);
	        sldNumPeriod.setPaintTrack(false);
	        sldNumPeriod.setMaximumSize(new java.awt.Dimension(1000, 32767));
	        sldNumPeriod.setMinimumSize(new java.awt.Dimension(250, 80));
	        sldNumPeriod.setPreferredSize(new java.awt.Dimension(250, 80));
	        sldNumPeriod.addChangeListener(new javax.swing.event.ChangeListener() {
	            public void stateChanged(javax.swing.event.ChangeEvent evt) {
	                sldNumPeriodStateChanged(evt);
	            }
	        });
	        jPanel5.add(sldNumPeriod, new java.awt.GridBagConstraints());

	        tfNumPeriod.setText("1000");
	        tfNumPeriod.addFocusListener(new java.awt.event.FocusAdapter() {
	            public void focusLost(java.awt.event.FocusEvent evt) {
	                tfNumPeriodFocusLost(evt);
	            }
	        });
	        tfNumPeriod.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	            	tfNumPeriodActionPerformed(evt);
	            }
	        });
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
	        jPanel5.add(tfNumPeriod, gridBagConstraints);

	        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(ReCResourceBundle.findString("langmuir$rec.exp.customizer.title6"))); // NOI18N
	        jPanel6.setMinimumSize(new java.awt.Dimension(350, 80));
	        jPanel6.setPreferredSize(new java.awt.Dimension(350, 80));
	        jPanel6.setLayout(new java.awt.GridBagLayout());

	        
	        rBut2op1.addFocusListener(new java.awt.event.FocusAdapter() {
	            public void focusLost(java.awt.event.FocusEvent evt) {
	            	rBut2op1FocusLost(evt);
	            }
	        });
	        rBut2op1.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	            	rBut2op1ActionPerformed(evt);
	            }
	        });
	        
	        rBut2op2.addFocusListener(new java.awt.event.FocusAdapter() {
	            public void focusLost(java.awt.event.FocusEvent evt) {
	            	rBut2op2FocusLost(evt);
	            }
	        });
	        rBut2op2.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	            	rBut2op2ActionPerformed(evt);
	            }
	        });
	        
	        rBut2op3.addFocusListener(new java.awt.event.FocusAdapter() {
	            public void focusLost(java.awt.event.FocusEvent evt) {
	            	rBut2op3FocusLost(evt);
	            }
	        });
	        rBut2op3.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	            	rBut2op3ActionPerformed(evt);
	            }
	        });
	        
	        rButG2.add(rBut2op1);
	        rButG2.add(rBut2op2);
	        rButG2.add(rBut2op3);
	        
	        rBut2op1.setText(ReCResourceBundle.findString("langmuir$rec.exp.customizer.radio2.op1"));
	        jPanel6.add(rBut2op1, new java.awt.GridBagConstraints());

	        rBut2op2.setText(ReCResourceBundle.findString("langmuir$rec.exp.customizer.radio2.op2"));
	        jPanel6.add(rBut2op2, new java.awt.GridBagConstraints());

	        rBut2op3.setText(ReCResourceBundle.findString("langmuir$rec.exp.customizer.radio2.op3"));
	        jPanel6.add(rBut2op3, new java.awt.GridBagConstraints());

	        btnDef.setText("Default parameters");
	        btnDef.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	            	btnDefActionPerformed(evt);
	            }
	        });

	        btnOK.setText("OK");
	        btnOK.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                btnOKActionPerformed(evt);
	            }
	        });

	        btnCancel.setText("Cancel");
	        btnCancel.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                btnCancelActionPerformed(evt);
	            }
	        });

	        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
	        this.setLayout(layout);
	        layout.setHorizontalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(layout.createSequentialGroup()
	                .addContainerGap()
	                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addGroup(layout.createSequentialGroup()
	                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
	                    .addGroup(layout.createSequentialGroup()
	                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                            .addGroup(layout.createSequentialGroup()
	                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
	                            .addGroup(layout.createSequentialGroup()
	                                .addComponent(btnOK)
	                                .addGap(0, 0, 0)
	                                .addComponent(btnCancel)
	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                                .addComponent(btnDef)
	                                .addGap(14, 14, 14)))
	                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))))
	                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	        );
	        layout.setVerticalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(layout.createSequentialGroup()
	                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addGroup(layout.createSequentialGroup()
	                        .addContainerGap()
	                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                            .addComponent(btnOK)
	                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                                .addComponent(btnCancel)
	                                .addComponent(btnDef))))
	                    .addGroup(layout.createSequentialGroup()
	                        .addGap(20, 20, 20)
	                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
	                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	        );

	        jPanel1.getAccessibleContext().setAccessibleName(ReCResourceBundle.findString("langmuir$rec.exp.customizer.title1")); // NOI18N
	        jPanel2.getAccessibleContext().setAccessibleName(ReCResourceBundle.findString("langmuir$rec.exp.customizer.title2")); // NOI18N
	        jPanel3.getAccessibleContext().setAccessibleName(ReCResourceBundle.findString("langmuir$rec.exp.customizer.title3")); // NOI18N
	        jPanel4.getAccessibleContext().setAccessibleName(ReCResourceBundle.findString("langmuir$rec.exp.customizer.title4")); // NOI18N
	        jPanel5.getAccessibleContext().setAccessibleName(ReCResourceBundle.findString("langmuir$rec.exp.customizer.title5")); // NOI18N
	        jPanel6.getAccessibleContext().setAccessibleName(ReCResourceBundle.findString("langmuir$rec.exp.customizer.title6")); // NOI18N
	    }

    /**Amplitude Box**/
    private void sldSigAStateChanged(javax.swing.event.ChangeEvent evt) {
    	tfSigA.setText(Integer.toString(sldSigA.getValue()));
    }
    
    private void tfSigAFocusLost(java.awt.event.FocusEvent evt) {
    	int parsed = Integer.parseInt(tfSigA.getText());
    	if(parsed > sldSigA.getMaximum()){parsed = sldSigA.getMaximum();}
    	if(parsed < sldSigA.getMinimum()){parsed = sldSigA.getMinimum();}	
    	sldSigA.setValue(parsed);
    }
    
    private void tfSigAActionPerformed(java.awt.event.ActionEvent evt) {
    	int parsed = Integer.parseInt(tfSigA.getText());
    	if(parsed > sldSigA.getMaximum()){parsed = sldSigA.getMaximum();}
    	if(parsed < sldSigA.getMinimum()){parsed = sldSigA.getMinimum();}	
    	sldSigA.setValue(parsed);
    }
    
    
    /**Period **/
    private void sldSigPStateChanged(javax.swing.event.ChangeEvent evt) {
    	tfSigP.setText(Integer.toString(sldSigP.getValue()));
    }
    
    private void tfSigPFocusLost(java.awt.event.FocusEvent evt) {
    	int parsed = Integer.parseInt(tfSigP.getText());
    	if(parsed > sldSigP.getMaximum()){parsed = sldSigP.getMaximum();}
    	if(parsed < sldSigP.getMinimum()){parsed = sldSigP.getMinimum();}	
    	sldSigP.setValue(parsed);
    }
    
    private void tfSigPActionPerformed(java.awt.event.ActionEvent evt) {
    	int parsed = Integer.parseInt(tfSigP.getText());
    	if(parsed > sldSigP.getMaximum()){parsed = sldSigP.getMaximum();}
    	if(parsed < sldSigP.getMinimum()){parsed = sldSigP.getMinimum();}	
    	sldSigA.setValue(parsed);
    }
    
    /**Pressure **/
    private void sldPressStateChanged(javax.swing.event.ChangeEvent evt) {
    	tfPress.setText(Double.toString( ((double)(sldPress.getValue()))/10 ));
    }
    
    private void tfPressFocusLost(java.awt.event.FocusEvent evt) {
    	
    	int parsed = (int) (Double.parseDouble(tfPress.getText())*10);
    	if(parsed > sldPress.getMaximum()){parsed = sldPress.getMaximum();}
    	if(parsed < sldPress.getMinimum()){parsed = sldPress.getMinimum();}	
    	sldPress.setValue(parsed);
    }
    
    private void tfPressActionPerformed(java.awt.event.ActionEvent evt) {
    	int parsed = (int) (Double.parseDouble(tfPress.getText())*10);
    	if(parsed > sldPress.getMaximum()){parsed = sldPress.getMaximum();}
    	if(parsed < sldPress.getMinimum()){parsed = sldPress.getMinimum();}	
    	sldSigA.setValue(parsed);
    }
    
    /**Num Samples **/
    private void sldNumSamplesStateChanged(javax.swing.event.ChangeEvent evt) {
    	tfNumSamples.setText(Integer.toString(sldNumSamples.getValue()));
    }
    
    private void tfNumSamplesFocusLost(java.awt.event.FocusEvent evt) {
    	int parsed = Integer.parseInt(tfNumSamples.getText());
    	if(parsed > sldNumSamples.getMaximum()){parsed = sldNumSamples.getMaximum();}
    	if(parsed < sldNumSamples.getMinimum()){parsed = sldNumSamples.getMinimum();}	
    	sldNumSamples.setValue(parsed);
    }
    
    private void tfNumSamplesActionPerformed(java.awt.event.ActionEvent evt) {
    	int parsed = Integer.parseInt(tfNumSamples.getText());
    	if(parsed > sldNumSamples.getMaximum()){parsed = sldNumSamples.getMaximum();}
    	if(parsed < sldNumSamples.getMinimum()){parsed = sldNumSamples.getMinimum();}	
    	sldNumSamples.setValue(parsed);
    }    

    /** NumPeriod **/
    private void sldNumPeriodStateChanged(javax.swing.event.ChangeEvent evt) {
    	tfNumPeriod.setText(Integer.toString(sldNumPeriod.getValue()));
    }
    
    private void tfNumPeriodFocusLost(java.awt.event.FocusEvent evt) {
    	int parsed = Integer.parseInt(tfNumPeriod.getText());
    	if(parsed > sldNumPeriod.getMaximum()){parsed = sldNumPeriod.getMaximum();}
    	if(parsed < sldNumPeriod.getMinimum()){parsed = sldNumPeriod.getMinimum();}	
    	sldNumPeriod.setValue(parsed);
    }
    
    private void tfNumPeriodActionPerformed(java.awt.event.ActionEvent evt) {
    	int parsed = Integer.parseInt(tfNumPeriod.getText());
    	if(parsed > sldNumPeriod.getMaximum()){parsed = sldNumPeriod.getMaximum();}
    	if(parsed < sldNumPeriod.getMinimum()){parsed = sldNumPeriod.getMinimum();}	
    	sldNumPeriod.setValue(parsed);
    } 

    
    /** rBut2op1 **/
    private void rBut2op1FocusLost(java.awt.event.FocusEvent evt) {
    }
    
    private void rBut2op1ActionPerformed(java.awt.event.ActionEvent evt) {
    }
    
    /** rBut2op2 **/
    private void rBut2op2FocusLost(java.awt.event.FocusEvent evt) {
    }
    
    private void rBut2op2ActionPerformed(java.awt.event.ActionEvent evt) {
    } 
    
    /** rBut2op3 **/
    private void rBut2op3FocusLost(java.awt.event.FocusEvent evt) {
    }
    
    private void rBut2op3ActionPerformed(java.awt.event.ActionEvent evt) {
    } 

	
	private void btnDefActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnDefaultsActionPerformed
	{// GEN-HEADEREND:event_btnDefaultsActionPerformed
		
		//TODO:Set the default values for experiment
		/*
		sldNumSamples.setValue(18);
		tfNumSamples.setText("18");
		sldPos1.setValue(0);
		tfPos1.setValue(new Float(0.0));
		sldPos2.setValue(3600);
		tfPos2.setValue(new Float(360.0));
		sldNumPeriod.setValue(150);
		tfNumPeriod.setText("150");
		*/
	}// GEN-LAST:event_btnDefaultsActionPerformed

	private void btnCancelActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnCancelActionPerformed
	{// GEN-HEADEREND:event_btnCancelActionPerformed
		fireICustomizerListenerCanceled();
	}// GEN-LAST:event_btnCancelActionPerformed

	private void btnOKActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnOKActionPerformed
	{// GEN-HEADEREND:event_btnOKActionPerformed

		final int nsamples = (sldNumSamples.getValue()*sldNumPeriod.getValue()) < 10 ? 10 : (sldNumSamples.getValue()*sldNumPeriod.getValue());
		getAcquisitionConfig().setTotalSamples(nsamples);
		
		
		getAcquisitionConfig().getSelectedHardwareParameter("amplitude").setParameterValue(String.valueOf(sldSigA.getValue()));
		getAcquisitionConfig().getSelectedHardwareParameter("sigperiod").setParameterValue("" + sldSigP.getValue());
		getAcquisitionConfig().getSelectedHardwareParameter("numsamps").setParameterValue("" + sldNumSamples.getValue());
		getAcquisitionConfig().getSelectedHardwareParameter("numperiod").setParameterValue("" + sldNumPeriod.getValue());
		getAcquisitionConfig().getSelectedHardwareParameter("pressure").setParameterValue("" + sldPress.getValue());
		//acqConfig.getSelectedHardwareParameter("freq").setParameterValue("" + sldFreq.getValue());
		
		
		// acqConfig.setSelectedFrequency(new Frequency((double)
		// sldFreq.getValue(), hardwareInfo
		// .getHardwareFrequencies(0).getMinimumFrequency().getMultiplier(),
		// hardwareInfo
		// .getHardwareFrequencies(0).getMinimumFrequency().getFrequencyDefType()));

		fireICustomizerListenerDone();

	}// GEN-LAST:event_btnOKActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDef;
    private javax.swing.JButton btnOK;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblErrorSamplesTooHigh;
    

    private javax.swing.ButtonGroup rButG2;
    private javax.swing.JRadioButton rBut2op1;
    private javax.swing.JRadioButton rBut2op2;
    private javax.swing.JRadioButton rBut2op3;
    private javax.swing.JSlider sldNumPeriod;
    private javax.swing.JSlider sldNumSamples;
    private javax.swing.JSlider sldPress;
    private javax.swing.JSlider sldSigA;
    private javax.swing.JSlider sldSigP;
    private javax.swing.JFormattedTextField tfNumPeriod;
    private javax.swing.JFormattedTextField tfNumSamples;
    private javax.swing.JFormattedTextField tfPress;
    private javax.swing.JFormattedTextField tfSigA;
    private javax.swing.JFormattedTextField tfSigP;
    // End of variables declaration//GEN-END:variables

	
	@Override
	public void setHardwareAcquisitionConfig(final HardwareAcquisitionConfig acqConfig) {
		super.setHardwareAcquisitionConfig(acqConfig);
		//TODO
		
		if (acqConfig != null) {
			System.out.println("LangmuirCustomizer.setHardwareAcquisitionConfig(HardwareAcquisitionConfig  acqConfig)");
			System.out.println("acqConfig: [" + acqConfig + "]");


		}
        //throw new UnsupportedOperationException("Not supported yet.");
		
	}

	@Override
	public void setHardwareInfo(final HardwareInfo hardwareInfo) {
		super.setHardwareInfo(hardwareInfo);
		int max;
		int min;
		int minorspacing;
		int majorspacing;
		
        ChannelParameter SigAParameter = hardwareInfo.getHardwareParameter("amplitude");
        max = Integer.valueOf(SigAParameter.getParameterSelectionList()[MAXIMUM_VALUE_INDEX]);
        min = Integer.valueOf(SigAParameter.getParameterSelectionList()[MINIMUM_VALUE_INDEX]);
        majorspacing = (max - min)/4;
        minorspacing = (majorspacing)/2;
        sldSigA.setMaximum(max);
        sldSigA.setMinimum(min);
        sldSigA.setMajorTickSpacing(majorspacing);
        sldSigA.setMinorTickSpacing(minorspacing);
        //sldSigA.setSnapToTicks(false);
        
        ChannelParameter SigPParameter = hardwareInfo.getHardwareParameter("sigperiod");
        max = Integer.valueOf(SigPParameter.getParameterSelectionList()[MAXIMUM_VALUE_INDEX]);
        min = Integer.valueOf(SigPParameter.getParameterSelectionList()[MINIMUM_VALUE_INDEX]);
        majorspacing = (max - min)/4;
        minorspacing = (majorspacing)/2;
        sldSigP.setMaximum(max);
        sldSigP.setMinimum(min);
        sldSigP.setMajorTickSpacing(majorspacing);
        sldSigP.setMinorTickSpacing(minorspacing);
        //sldSigP.setSnapToTicks(false);
        
        ChannelParameter PressParameter = hardwareInfo.getHardwareParameter("pressure");
        max = Integer.valueOf(PressParameter.getParameterSelectionList()[MAXIMUM_VALUE_INDEX]);
        min = Integer.valueOf(PressParameter.getParameterSelectionList()[MINIMUM_VALUE_INDEX]);
        majorspacing = (max - min)/4;
        minorspacing = (majorspacing)/2;
        sldPress.setMaximum(max);
        sldPress.setMinimum(min);
        sldPress.setMajorTickSpacing(majorspacing);
        sldPress.setMinorTickSpacing(minorspacing);
        //sldPress.setSnapToTicks(false);
        
        ChannelParameter NumSamplesParameter = hardwareInfo.getHardwareParameter("numsamps");
        max = Integer.valueOf(NumSamplesParameter.getParameterSelectionList()[MAXIMUM_VALUE_INDEX]);
        min = Integer.valueOf(NumSamplesParameter.getParameterSelectionList()[MINIMUM_VALUE_INDEX]);
        majorspacing = (max - min)/4;
        minorspacing = (majorspacing)/2;
        sldNumSamples.setMaximum(max);
        sldNumSamples.setMinimum(min);
        sldNumSamples.setMajorTickSpacing(majorspacing);
        sldNumSamples.setMinorTickSpacing(minorspacing);
        //sldNumSamples.setSnapToTicks(false);
        
        ChannelParameter NumPeriodParameter = hardwareInfo.getHardwareParameter("numperiod");
        max = Integer.valueOf(NumPeriodParameter.getParameterSelectionList()[MAXIMUM_VALUE_INDEX]);
        min = Integer.valueOf(NumPeriodParameter.getParameterSelectionList()[MINIMUM_VALUE_INDEX]);
        majorspacing = (max - min)/4;
        minorspacing = (majorspacing)/2;
        sldNumPeriod.setMaximum(max);
        sldNumPeriod.setMinimum(min);
        sldNumPeriod.setMajorTickSpacing(majorspacing);
        sldNumPeriod.setMinorTickSpacing(minorspacing);
        //sldFreq.setSnapToTicks(false);
		
	}

	
	@Override
	public javax.swing.ImageIcon getCustomizerIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/langmuir/resources/langmuir_iconified.gif"));
	}

	@Override
	public String getCustomizerTitle() {
		return ReCResourceBundle.findString("langmuir$rec.exp.langmuir.customizer.title");
	}

    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LangmuirCustomizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LangmuirCustomizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LangmuirCustomizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LangmuirCustomizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new LangmuirCustomizer().setVisible(true);
            }
        });
    }

}
