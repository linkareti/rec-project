/*
 * Mag3DCustomizer.java
 *
 * Created on 13 de Outubro de 2017
 */
package pt.utl.ist.elab.client.planoinclinado;

import java.text.DecimalFormat;
import java.util.Hashtable;

import javax.swing.JLabel;
import javax.swing.text.NumberFormatter;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.synch.Frequency;
import com.linkare.rec.impl.client.customizer.AbstractCustomizer;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

/**
 *
 * @author Andr√© Sancho Duarte - IPFN
 */
public class PlanoInclinadoCustomizer extends AbstractCustomizer {

    /**
     *
     */
    private static final long serialVersionUID = -775367629564418034L;
    private static DecimalFormat decimalFormat = new DecimalFormat("0.0");

    static {
        decimalFormat.setDecimalSeparatorAlwaysShown(true);
        decimalFormat.setGroupingUsed(false);
        decimalFormat.setMinimumFractionDigits(1);
    }

    /**
     * Creates new form RadioactividadeCustomizer
     */
    public PlanoInclinadoCustomizer() {
        initComponents();

        Hashtable<Integer, JLabel> slidersPosLabels = new Hashtable<Integer, JLabel>(4);
        slidersPosLabels.put(Integer.valueOf(3000), new JLabel("3.0"));
        slidersPosLabels.put(Integer.valueOf(5000), new JLabel("5.0"));
        slidersPosLabels.put(Integer.valueOf(6000), new JLabel("6.0"));
        slidersPosLabels.put(Integer.valueOf(7500), new JLabel("7.5"));

        NumberFormatter formatterUserPos1 = new NumberFormatter(decimalFormat);
        NumberFormatter formatterUserPos2 = new NumberFormatter(decimalFormat);

        // formatterUserPos1.setAllowsInvalid(false);
        // formatterUserPos2.setAllowsInvalid(false);
        formatterUserPos1.setCommitsOnValidEdit(true);
        formatterUserPos2.setCommitsOnValidEdit(true);

        formatterUserPos1.setOverwriteMode(true);
        formatterUserPos2.setOverwriteMode(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonPanel = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnDefaults = new javax.swing.JButton();
        slidersPanel = new javax.swing.JPanel();
        samplesPanel = new javax.swing.JPanel();
        sldNumSamples = new javax.swing.JSlider();
        tfNumSamples = new javax.swing.JTextField();
        lblErrorTooManySamples = new javax.swing.JLabel();
        heightPanel = new javax.swing.JPanel();
        sldHeight = new javax.swing.JSlider();
        tfHeight = new javax.swing.JTextField();
        tbsPanel = new javax.swing.JPanel();
        sldTbs = new javax.swing.JSlider();
        tfTbs = new javax.swing.JTextField();

        setMinimumSize(new java.awt.Dimension(350, 460));
        setPreferredSize(new java.awt.Dimension(350, 460));
        setLayout(null);

        buttonPanel.setMinimumSize(new java.awt.Dimension(350, 42));
        buttonPanel.setPreferredSize(new java.awt.Dimension(350, 42));
        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 5));

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });
        buttonPanel.add(btnOK);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        buttonPanel.add(btnCancel);

        jLabel1.setText("   ");
        buttonPanel.add(jLabel1);

        btnDefaults.setText(ReCResourceBundle.findStringOrDefault("planoinclinado$rec.exp.planoinclinado.lbl.dftcfg","planoinclinado$rec.exp.planoinclinado.lbl.dftcfg")); // NOI18N
        btnDefaults.setLabel(ReCResourceBundle.findStringOrDefault("planoinclinado$rec.exp.dftcfg.planoinclinado.title.1","planoinclinado$rec.exp.dftcfg.planoinclinado.title.1")); // NOI18N
        btnDefaults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefaultsActionPerformed(evt);
            }
        });
        buttonPanel.add(btnDefaults);

        add(buttonPanel);
        buttonPanel.setBounds(0, 412, 460, 42);

        slidersPanel.setMinimumSize(new java.awt.Dimension(700, 320));
        slidersPanel.setLayout(new java.awt.GridLayout(2, 2));

        samplesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(ReCResourceBundle.findStringOrDefault("planoinclinado$rec.exp.planoinclinado.lbl.nsamples","planoinclinado$rec.exp.planoinclinado.lbl.nsamples"))); // NOI18N
        samplesPanel.setMinimumSize(new java.awt.Dimension(350, 80));
        samplesPanel.setPreferredSize(new java.awt.Dimension(350, 180));
        samplesPanel.setLayout(new java.awt.GridBagLayout());

        sldNumSamples.setMajorTickSpacing(2000);
        sldNumSamples.setMaximum(10000);
        sldNumSamples.setMinorTickSpacing(500);
        sldNumSamples.setPaintLabels(true);
        sldNumSamples.setPaintTicks(true);
        sldNumSamples.setPaintTrack(false);
        sldNumSamples.setToolTipText("");
        sldNumSamples.setValue(1000);
        sldNumSamples.setMaximumSize(new java.awt.Dimension(1000, 32767));
        sldNumSamples.setMinimumSize(new java.awt.Dimension(255, 80));
        sldNumSamples.setPreferredSize(new java.awt.Dimension(255, 80));
        sldNumSamples.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldNumSamplesStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 10.0;
        samplesPanel.add(sldNumSamples, gridBagConstraints);

        tfNumSamples.setColumns(4);
        tfNumSamples.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfNumSamples.setText("1000");
        tfNumSamples.setToolTipText("");
        tfNumSamples.setMaximumSize(new java.awt.Dimension(30, 16));
        tfNumSamples.setMinimumSize(new java.awt.Dimension(30, 16));
        tfNumSamples.setPreferredSize(new java.awt.Dimension(48, 16));
        tfNumSamples.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNumSamplesActionPerformed(evt);
            }
        });
        tfNumSamples.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfNumSamplesFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        samplesPanel.add(tfNumSamples, gridBagConstraints);

        lblErrorTooManySamples.setForeground(new java.awt.Color(255, 0, 0));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/planoinclinado/resources/messages"); // NOI18N
        lblErrorTooManySamples.setText(bundle.getString("rec.exp.planoinclinado.lbl.maxsamples")); // NOI18N
        lblErrorTooManySamples.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        samplesPanel.add(lblErrorTooManySamples, gridBagConstraints);

        slidersPanel.add(samplesPanel);
        samplesPanel.getAccessibleContext().setAccessibleName(ReCResourceBundle.findStringOrDefault("fotovoltaico$rec.exp.planoinclinado.lbl.nsamples","fotovoltaico$rec.exp.planoinclinado.lbl.nsamples")); // NOI18N

        heightPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(ReCResourceBundle.findStringOrDefault("planoinclinado$rec.exp.planoinclinado.lbl.height","planoinclinado$rec.exp.planoinclinado.lbl.height"))); // NOI18N
        heightPanel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        heightPanel.setMinimumSize(new java.awt.Dimension(350, 180));
        heightPanel.setPreferredSize(new java.awt.Dimension(350, 180));
        heightPanel.setLayout(new java.awt.GridBagLayout());

        sldHeight.setMajorTickSpacing(40);
        sldHeight.setMaximum(235);
        sldHeight.setMinorTickSpacing(5);
        sldHeight.setPaintLabels(true);
        sldHeight.setPaintTicks(true);
        sldHeight.setPaintTrack(false);
        sldHeight.setToolTipText("");
        sldHeight.setValue(100);
        sldHeight.setMaximumSize(new java.awt.Dimension(1000, 32767));
        sldHeight.setMinimumSize(new java.awt.Dimension(250, 42));
        sldHeight.setPreferredSize(new java.awt.Dimension(250, 42));
        sldHeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldHeightStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weighty = 10.0;
        heightPanel.add(sldHeight, gridBagConstraints);

        tfHeight.setColumns(3);
        tfHeight.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfHeight.setText("100");
        tfHeight.setToolTipText("");
        tfHeight.setMaximumSize(new java.awt.Dimension(30, 16));
        tfHeight.setMinimumSize(new java.awt.Dimension(30, 16));
        tfHeight.setPreferredSize(new java.awt.Dimension(37, 16));
        tfHeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfHeightFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        heightPanel.add(tfHeight, gridBagConstraints);

        slidersPanel.add(heightPanel);

        tbsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(ReCResourceBundle.findStringOrDefault("planoinclinado$rec.exp.planoinclinado.lbl.tbs","planoinclinado$rec.exp.planoinclinado.lbl.tbs"))); // NOI18N
        tbsPanel.setMinimumSize(new java.awt.Dimension(350, 80));
        tbsPanel.setPreferredSize(new java.awt.Dimension(350, 180));
        tbsPanel.setLayout(new java.awt.GridBagLayout());

        sldTbs.setMajorTickSpacing(20);
        sldTbs.setMinorTickSpacing(5);
        sldTbs.setPaintLabels(true);
        sldTbs.setPaintTicks(true);
        sldTbs.setPaintTrack(false);
        sldTbs.setToolTipText("");
        sldTbs.setMaximumSize(new java.awt.Dimension(1000, 32767));
        sldTbs.setMinimumSize(new java.awt.Dimension(255, 80));
        sldTbs.setPreferredSize(new java.awt.Dimension(255, 80));
        sldTbs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldTbsStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 10.0;
        tbsPanel.add(sldTbs, gridBagConstraints);

        tfTbs.setColumns(4);
        tfTbs.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfTbs.setText("50");
        tfTbs.setMaximumSize(new java.awt.Dimension(30, 16));
        tfTbs.setMinimumSize(new java.awt.Dimension(30, 16));
        tfTbs.setPreferredSize(new java.awt.Dimension(48, 16));
        tfTbs.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfTbsFocusLost(evt);
            }
        });
        tfTbs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfTbsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        tbsPanel.add(tfTbs, gridBagConstraints);

        slidersPanel.add(tbsPanel);

        add(slidersPanel);
        slidersPanel.setBounds(0, 0, 790, 360);
    }// </editor-fold>//GEN-END:initComponents

    private void tfTbsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfTbsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfTbsActionPerformed

    private void sldNumSamplesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldNumSamplesStateChanged
        if (sldNumSamples.getValue() == 0) { // checks if the number of samples is 0
            sldNumSamples.setValue(1);
        }
        tfNumSamples.setText("" + sldNumSamples.getValue());
        checkNsamples();
    }//GEN-LAST:event_sldNumSamplesStateChanged

    private void tfNumSamplesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfNumSamplesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfNumSamplesActionPerformed

    private void tfNumSamplesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfNumSamplesFocusLost
        String strNsamples = tfNumSamples.getText();
        if (strNsamples.trim().equals("")) {
            return;
        }
        try {
            int nsamples = Integer.parseInt(strNsamples);
            if (nsamples <= sldNumSamples.getMaximum() && nsamples > 0) {
                sldNumSamples.setValue(nsamples);
            } else {
                tfNumSamples.setText("" + sldNumSamples.getValue());
            }
        } catch (Exception e) {
            tfNumSamples.setText("" + sldNumSamples.getValue());
        }
        checkNsamples();
    }//GEN-LAST:event_tfNumSamplesFocusLost

    private void tfTbsFocusLost(java.awt.event.FocusEvent evt)// GEN-FIRST:event_tfAngleFocusLost
    {// GEN-HEADEREND:event_tfAngleFocusLost
        String strTbs = tfTbs.getText();
        if (strTbs.trim().equals("")) {
            return;
        }
        try {
            int tbs = Integer.parseInt(strTbs);
            if (tbs > sldTbs.getMaximum()) {
                sldTbs.setValue(sldTbs.getMaximum());
                tfTbs.setText("" + sldTbs.getMaximum());
            } else if(tbs < 2) {
                sldTbs.setValue(2);
                tfTbs.setText("2");
            } else {
                tfTbs.setText("" + sldTbs.getValue());
            }
        } catch (Exception e) {
            tfTbs.setText("" + sldTbs.getValue());
        }
        checkNsamples();
    }// GEN-LAST:event_tfAngleFocusLost

    private void tfHeightFocusLost(java.awt.event.FocusEvent evt)// GEN-FIRST:event_tfCoilCurrentFocusLost
    {// GEN-HEADEREND:event_tfCoilCurrentFocusLost
        String strHeight = tfHeight.getText();
        if (strHeight.trim().equals("")) {
            return;
        }
        try {
            int height = Integer.parseInt(strHeight);
            if (height <= sldHeight.getMaximum() && height > sldHeight.getMinimum()) {
                sldHeight.setValue(height);
            } else {
                tfHeight.setText("" + sldHeight.getValue());
            }
        } catch (Exception e) {
            tfHeight.setText("" + sldHeight.getValue());
        }
    }// GEN-LAST:event_tfCoilCurrentFocusLost

    private void sldTbsStateChanged(javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_sldAngleStateChanged
    {// GEN-HEADEREND:event_sldAngleStateChanged
        if (sldTbs.getValue() < 2) { // the minimum time between samples is actually 2 ms
            sldTbs.setValue(2);
        }
        tfTbs.setText("" + sldTbs.getValue());

    }// GEN-LAST:event_sldAngleStateChanged

    private void sldHeightStateChanged(javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_sldCoilCurrentStateChanged
    {// GEN-HEADEREND:event_sldCoilCurrentStateChanged
        tfHeight.setText("" + sldHeight.getValue());

    }// GEN-LAST:event_sldCoilCurrentStateChanged

    private void checkNsamples() {
        lblErrorTooManySamples.setEnabled((sldNumSamples.getValue() * sldTbs.getValue()) > 10000); // checks if the number of samples is too big 
        btnOK.setEnabled(!lblErrorTooManySamples.isEnabled());
    }

    private void btnDefaultsActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnDefaultsActionPerformed
    {// GEN-HEADEREND:event_btnDefaultsActionPerformed
        sldHeight.setValue(100);
        tfHeight.setText("100");
        sldTbs.setValue(50);
        tfTbs.setText("50");
        sldNumSamples.setValue(1000);
        tfNumSamples.setText("1000");
    }// GEN-LAST:event_btnDefaultsActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnCancelActionPerformed
    {// GEN-HEADEREND:event_btnCancelActionPerformed
        fireICustomizerListenerCanceled();
    }// GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnOKActionPerformed
    {// GEN-HEADEREND:event_btnOKActionPerformed
        //int nsamples = sldNumSamples.getValue();
        double tbs = (double) (sldTbs.getValue());

        getAcquisitionConfig().getSelectedHardwareParameter("protocol").setParameterValue("1"); // experiment expects protocol identifier, but there is only one for now
        getAcquisitionConfig().getSelectedHardwareParameter("n_samples").setParameterValue("" + sldNumSamples.getValue());
        getAcquisitionConfig().getSelectedHardwareParameter("tb_samples").setParameterValue("" + sldTbs.getValue());
        getAcquisitionConfig().getSelectedHardwareParameter("height").setParameterValue("" + sldHeight.getValue());
        getAcquisitionConfig().setTotalSamples(sldNumSamples.getValue());

        getAcquisitionConfig().setSelectedFrequency(
                new Frequency(tbs, getHardwareInfo().getHardwareFrequencies(0).getMinimumFrequency().getMultiplier(), getHardwareInfo().getHardwareFrequencies(0).getMinimumFrequency().getFrequencyDefType()));
        fireICustomizerListenerDone();
    }// GEN-LAST:event_btnOKActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDefaults;
    private javax.swing.JButton btnOK;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel heightPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblErrorTooManySamples;
    private javax.swing.JPanel samplesPanel;
    private javax.swing.JSlider sldHeight;
    private javax.swing.JSlider sldNumSamples;
    private javax.swing.JSlider sldTbs;
    private javax.swing.JPanel slidersPanel;
    private javax.swing.JPanel tbsPanel;
    private javax.swing.JTextField tfHeight;
    private javax.swing.JTextField tfNumSamples;
    private javax.swing.JTextField tfTbs;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setHardwareAcquisitionConfig(HardwareAcquisitionConfig acqConfig) {
        super.setHardwareAcquisitionConfig(acqConfig);
        if (acqConfig != null) {
            int nsamples = acqConfig.getTotalSamples();
            sldNumSamples.setValue(nsamples);
            tfNumSamples.setText("" + nsamples);
//
//            int freq = (int) acqConfig.getSelectedFrequency().getFrequency();

            int height = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("height"));
            sldHeight.setValue(height);
            tfHeight.setText("" + height);

            int freq = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("freq"));
            sldTbs.setValue(freq);
            tfTbs.setText("" + freq);

        }
    }

    public javax.swing.ImageIcon getCustomizerIcon() {
        return new javax.swing.ImageIcon(getClass().getResource(
                "/pt/utl/ist/elab/client/planoinclinado/resources/planoinclinado_iconified.gif"));
    }

    public String getCustomizerTitle() {
        return ReCResourceBundle.findStringOrDefault("planoinclinado$rec.exp.planoinclinado.customizer.title",
                "planoinclinado$rec.exp.planoinclinado.customizer.title");
    }
}
