/*
 * MovProjCustomizer.java
 *
 * Created on October 27, 2004, 03:35 AM
 */

package pt.utl.ist.elab.client.vmovproj;

/*
 * @author  nomead
 *
 */
import pt.utl.ist.elab.client.virtual.guipack.*;

import com.linkare.rec.impl.i18n.*;
import com.linkare.rec.data.metadata.HardwareInfo;
import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.impl.client.customizer.ICustomizer;
import com.linkare.rec.impl.client.customizer.ICustomizerListener;
import com.linkare.rec.data.synch.Frequency;

public class MovProjCustomizer extends javax.swing.JPanel implements com.linkare.rec.impl.client.customizer.ICustomizer, InteractiveMenu
{
    
    private InteractiveMovProj movproj;
    
    /** Creates new form MovProjCustomizer */
    public MovProjCustomizer()
    {
        initComponents();
        
        java.awt.GridBagConstraints gridBagConstraints;
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight= 1;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1;
        gridBagConstraints.weighty = 1;
        mainPanel.add(movproj = new InteractiveMovProj(this), gridBagConstraints);
        update();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        odeButtonGroup = new javax.swing.ButtonGroup();
        btnPanel = new javax.swing.JPanel();
        controlBtnPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        defConfBtnPanel = new javax.swing.JPanel();
        defaultButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        mainTabbedPane = new javax.swing.JTabbedPane();
        mainEditPanel = new javax.swing.JPanel();
        editPanel = new javax.swing.JPanel();
        editSlider = new javax.swing.JSlider();
        editTextField = new javax.swing.JTextField();
        editLabel = new javax.swing.JLabel();
        posPanel = new javax.swing.JPanel();
        yPosPanel = new javax.swing.JPanel();
        yPosSlider = new javax.swing.JSlider();
        yPosTextField = new javax.swing.JTextField();
        zPosPanel = new javax.swing.JPanel();
        zPosSlider = new javax.swing.JSlider();
        zPosTextField = new javax.swing.JTextField();
        xPosPanel = new javax.swing.JPanel();
        xPosSlider = new javax.swing.JSlider();
        xPosTextField = new javax.swing.JTextField();
        velPanel = new javax.swing.JPanel();
        velModPanel = new javax.swing.JPanel();
        velModSlider = new javax.swing.JSlider();
        velModTextField = new javax.swing.JTextField();
        velThetaPanel = new javax.swing.JPanel();
        velThetaSlider = new javax.swing.JSlider();
        velThetaTextField = new javax.swing.JTextField();
        velPhiPanel = new javax.swing.JPanel();
        velPhiSlider = new javax.swing.JSlider();
        velPhiTextField = new javax.swing.JTextField();
        spinPanel = new javax.swing.JPanel();
        spinModPanel = new javax.swing.JPanel();
        spinModSlider = new javax.swing.JSlider();
        spinModTextField = new javax.swing.JTextField();
        spinThetaPanel = new javax.swing.JPanel();
        spinThetaSlider = new javax.swing.JSlider();
        spinThetaTextField = new javax.swing.JTextField();
        spinPhiPanel = new javax.swing.JPanel();
        spinPhiSlider = new javax.swing.JSlider();
        spinPhiTextField = new javax.swing.JTextField();
        dragPanel = new javax.swing.JPanel();
        dragCoef1Panel = new javax.swing.JPanel();
        dragCoef1Slider = new javax.swing.JSlider();
        dragCoef1TextField = new javax.swing.JTextField();
        densPanel = new javax.swing.JPanel();
        densSlider = new javax.swing.JSlider();
        densTextField = new javax.swing.JTextField();
        dragCoef2Panel = new javax.swing.JPanel();
        dragCoef2Slider = new javax.swing.JSlider();
        dragCoef2TextField = new javax.swing.JTextField();
        dragTypePanel = new javax.swing.JPanel();
        dragTypeCheckBox = new javax.swing.JCheckBox();
        realPanel = new javax.swing.JPanel();
        gPanel = new javax.swing.JPanel();
        gSlider = new javax.swing.JSlider();
        gTextField = new javax.swing.JTextField();
        s0Panel = new javax.swing.JPanel();
        s0Slider = new javax.swing.JSlider();
        s0TextField = new javax.swing.JTextField();
        dtPanel = new javax.swing.JPanel();
        dtSlider = new javax.swing.JSlider();
        dtTextField = new javax.swing.JTextField();
        realTypePanel = new javax.swing.JPanel();
        rkRadioButton = new javax.swing.JRadioButton();
        eulerRadioButton = new javax.swing.JRadioButton();
        gTypeCheckBox = new javax.swing.JCheckBox();
        simulSettingsPanel = new javax.swing.JPanel();
        tbsPanel = new javax.swing.JPanel();
        tbsSlider = new javax.swing.JSlider();
        tbsTextField = new javax.swing.JTextField();
        samplesPanel = new javax.swing.JPanel();
        samplesSlider = new javax.swing.JSlider();
        samplesTextField = new javax.swing.JTextField();
        graphicsPanel = new javax.swing.JPanel();
        graph2Panel = new javax.swing.JPanel();
        graph2XComboBox = new javax.swing.JComboBox();
        graph2YComboBox = new javax.swing.JComboBox();
        graph3Panel = new javax.swing.JPanel();
        graph3XComboBox = new javax.swing.JComboBox();
        graph3YComboBox = new javax.swing.JComboBox();
        graph4Panel = new javax.swing.JPanel();
        graph4XComboBox = new javax.swing.JComboBox();
        graph4YComboBox = new javax.swing.JComboBox();
        graph1Panel = new javax.swing.JPanel();
        graph1XComboBox = new javax.swing.JComboBox();
        graph1YComboBox = new javax.swing.JComboBox();
        genGraphsPanel = new javax.swing.JPanel();
        genPosPanel = new javax.swing.JPanel();
        posModCheckBox = new javax.swing.JCheckBox();
        posAbsCheckBox = new javax.swing.JCheckBox();
        genVelPanel = new javax.swing.JPanel();
        velModCheckBox = new javax.swing.JCheckBox();
        velAbsCheckBox = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(600, 600));
        setPreferredSize(new java.awt.Dimension(600, 600));
        btnPanel.setLayout(new java.awt.GridBagLayout());

        okButton.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.ok"));
        okButton.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.ok"));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        controlBtnPanel.add(okButton);

        cancelButton.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.cancel"));
        cancelButton.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.cancel"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        controlBtnPanel.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        btnPanel.add(controlBtnPanel, gridBagConstraints);

        defaultButton.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.dfc"));
        defaultButton.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.dfc"));
        defaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultButtonActionPerformed(evt);
            }
        });

        defConfBtnPanel.add(defaultButton);

        btnPanel.add(defConfBtnPanel, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(btnPanel, gridBagConstraints);

        mainPanel.setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(mainPanel, gridBagConstraints);

        mainEditPanel.setLayout(new java.awt.GridBagLayout());

        mainEditPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 153, 153), new java.awt.Color(255, 153, 153), new java.awt.Color(255, 153, 153), new java.awt.Color(255, 153, 153)));
        mainEditPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.22"));
        mainEditPanel.setMinimumSize(new java.awt.Dimension(300, 100));
        mainEditPanel.setPreferredSize(new java.awt.Dimension(300, 200));
        editPanel.setLayout(new java.awt.GridBagLayout());

        editPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.23")));
        editPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.23"));
        editPanel.setMinimumSize(new java.awt.Dimension(250, 80));
        editPanel.setPreferredSize(new java.awt.Dimension(250, 80));
        editPanel.setVisible(false);
        editSlider.setMajorTickSpacing(60);
        editSlider.setMaximum(360);
        editSlider.setMinorTickSpacing(12);
        editSlider.setPaintLabels(true);
        editSlider.setPaintTicks(true);
        editSlider.setValue(0);
        editSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        editSlider.setEnabled(false);
        editSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                editSliderStateChanged(evt);
            }
        });
        editSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                editSliderMouseDragged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        editPanel.add(editSlider, gridBagConstraints);

        editTextField.setColumns(4);
        editTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        editTextField.setText("0");
        editTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                editTextFieldFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        editPanel.add(editTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainEditPanel.add(editPanel, gridBagConstraints);

        editLabel.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
        editLabel.setForeground(new java.awt.Color(255, 102, 102));
        editLabel.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.23"));
        editLabel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.23"));
        editLabel.setMaximumSize(null);
        editLabel.setMinimumSize(null);
        editLabel.setPreferredSize(null);
        editLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mainEditPanel.add(editLabel, gridBagConstraints);

        mainTabbedPane.addTab(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.22"), null, mainEditPanel, java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.22"));

        posPanel.setLayout(new java.awt.GridBagLayout());

        posPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 153, 153), new java.awt.Color(255, 153, 153), new java.awt.Color(255, 153, 153), new java.awt.Color(255, 153, 153)));
        yPosPanel.setLayout(new java.awt.GridBagLayout());

        yPosPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.3")));
        yPosPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.3"));
        yPosPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        yPosSlider.setMajorTickSpacing(50);
        yPosSlider.setMaximum(500);
        yPosSlider.setMinorTickSpacing(10);
        yPosSlider.setPaintLabels(true);
        yPosSlider.setPaintTicks(true);
        yPosSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.3"));
        yPosSlider.setValue(0);
        yPosSlider.setMinimumSize(new java.awt.Dimension(200, 47));
        yPosSlider.setRequestFocusEnabled(false);
        yPosSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                yPosSliderStateChanged(evt);
            }
        });
        yPosSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                yPosSliderMouseDragged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        yPosPanel.add(yPosSlider, gridBagConstraints);

        yPosTextField.setColumns(4);
        yPosTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        yPosTextField.setText("0");
        yPosTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.3"));
        yPosTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        yPosTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                yPosTextFieldFocusLost(evt);
            }
        });

        yPosPanel.add(yPosTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        posPanel.add(yPosPanel, gridBagConstraints);

        zPosPanel.setLayout(new java.awt.GridBagLayout());

        zPosPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.4")));
        zPosPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.4"));
        zPosPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        zPosSlider.setMajorTickSpacing(50);
        zPosSlider.setMaximum(250);
        zPosSlider.setMinimum(-250);
        zPosSlider.setMinorTickSpacing(10);
        zPosSlider.setPaintLabels(true);
        zPosSlider.setPaintTicks(true);
        zPosSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.4"));
        zPosSlider.setValue(0);
        zPosSlider.setMinimumSize(new java.awt.Dimension(200, 47));
        zPosSlider.setRequestFocusEnabled(false);
        zPosSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zPosSliderStateChanged(evt);
            }
        });
        zPosSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                zPosSliderMouseDragged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        zPosPanel.add(zPosSlider, gridBagConstraints);

        zPosTextField.setColumns(4);
        zPosTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        zPosTextField.setText("0");
        zPosTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.4"));
        zPosTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        zPosTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                zPosTextFieldFocusLost(evt);
            }
        });

        zPosPanel.add(zPosTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        posPanel.add(zPosPanel, gridBagConstraints);

        xPosPanel.setLayout(new java.awt.GridBagLayout());

        xPosPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.2")));
        xPosPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.2"));
        xPosPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        xPosSlider.setMajorTickSpacing(50);
        xPosSlider.setMaximum(250);
        xPosSlider.setMinimum(-250);
        xPosSlider.setMinorTickSpacing(10);
        xPosSlider.setPaintLabels(true);
        xPosSlider.setPaintTicks(true);
        xPosSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.2"));
        xPosSlider.setValue(0);
        xPosSlider.setMinimumSize(new java.awt.Dimension(200, 47));
        xPosSlider.setRequestFocusEnabled(false);
        xPosSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                xPosSliderStateChanged(evt);
            }
        });
        xPosSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                xPosSliderMouseDragged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        xPosPanel.add(xPosSlider, gridBagConstraints);

        xPosTextField.setColumns(4);
        xPosTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        xPosTextField.setText("0");
        xPosTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.2"));
        xPosTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        xPosTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                xPosTextFieldFocusLost(evt);
            }
        });

        xPosPanel.add(xPosTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        posPanel.add(xPosPanel, gridBagConstraints);

        mainTabbedPane.addTab(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.1"), null, posPanel, java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.1"));

        velPanel.setLayout(new java.awt.GridBagLayout());

        velPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 204, 0), new java.awt.Color(0, 204, 0), new java.awt.Color(0, 204, 0), new java.awt.Color(0, 204, 0)));
        velModPanel.setLayout(new java.awt.GridBagLayout());

        velModPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.6")));
        velModPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.6"));
        velModPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        velModSlider.setMajorTickSpacing(400);
        velModSlider.setMaximum(4000);
        velModSlider.setMinorTickSpacing(40);
        velModSlider.setPaintLabels(true);
        velModSlider.setPaintTicks(true);
        velModSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.6"));
        velModSlider.setValue(98);
        velModSlider.setMinimumSize(new java.awt.Dimension(200, 47));
        velModSlider.setRequestFocusEnabled(false);
        velModSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                velModSliderStateChanged(evt);
            }
        });
        velModSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                velModSliderMouseDragged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        velModPanel.add(velModSlider, gridBagConstraints);

        velModTextField.setColumns(4);
        velModTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        velModTextField.setText("98");
        velModTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.6"));
        velModTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        velModTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                velModTextFieldFocusLost(evt);
            }
        });

        velModPanel.add(velModTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        velPanel.add(velModPanel, gridBagConstraints);

        velThetaPanel.setLayout(new java.awt.GridBagLayout());

        velThetaPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.7")));
        velThetaPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.7"));
        velThetaPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        velThetaSlider.setMajorTickSpacing(60);
        velThetaSlider.setMaximum(360);
        velThetaSlider.setMinorTickSpacing(10);
        velThetaSlider.setPaintLabels(true);
        velThetaSlider.setPaintTicks(true);
        velThetaSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.7"));
        velThetaSlider.setValue(98);
        velThetaSlider.setMinimumSize(new java.awt.Dimension(200, 47));
        velThetaSlider.setRequestFocusEnabled(false);
        velThetaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                velThetaSliderStateChanged(evt);
            }
        });
        velThetaSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                velThetaSliderMouseDragged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        velThetaPanel.add(velThetaSlider, gridBagConstraints);

        velThetaTextField.setColumns(4);
        velThetaTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        velThetaTextField.setText("98");
        velThetaTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.7"));
        velThetaTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        velThetaTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                velThetaTextFieldFocusLost(evt);
            }
        });

        velThetaPanel.add(velThetaTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        velPanel.add(velThetaPanel, gridBagConstraints);

        velPhiPanel.setLayout(new java.awt.GridBagLayout());

        velPhiPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.8")));
        velPhiPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.8"));
        velPhiPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        velPhiSlider.setMajorTickSpacing(30);
        velPhiSlider.setMaximum(180);
        velPhiSlider.setMinorTickSpacing(5);
        velPhiSlider.setPaintLabels(true);
        velPhiSlider.setPaintTicks(true);
        velPhiSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.8"));
        velPhiSlider.setValue(98);
        velPhiSlider.setMinimumSize(new java.awt.Dimension(200, 47));
        velPhiSlider.setRequestFocusEnabled(false);
        velPhiSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                velPhiSliderStateChanged(evt);
            }
        });
        velPhiSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                velPhiSliderMouseDragged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        velPhiPanel.add(velPhiSlider, gridBagConstraints);

        velPhiTextField.setColumns(4);
        velPhiTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        velPhiTextField.setText("98");
        velPhiTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.8"));
        velPhiTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        velPhiTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                velPhiTextFieldFocusLost(evt);
            }
        });

        velPhiPanel.add(velPhiTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        velPanel.add(velPhiPanel, gridBagConstraints);

        mainTabbedPane.addTab(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.5"), null, velPanel, java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.5"));

        spinPanel.setLayout(new java.awt.GridBagLayout());

        spinPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 0, 255), new java.awt.Color(51, 0, 255), new java.awt.Color(51, 0, 255), new java.awt.Color(51, 0, 255)));
        spinModPanel.setLayout(new java.awt.GridBagLayout());

        spinModPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.10")));
        spinModPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.10"));
        spinModPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        spinModSlider.setMajorTickSpacing(400);
        spinModSlider.setMaximum(4000);
        spinModSlider.setMinorTickSpacing(40);
        spinModSlider.setPaintLabels(true);
        spinModSlider.setPaintTicks(true);
        spinModSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.10"));
        spinModSlider.setValue(98);
        spinModSlider.setMinimumSize(new java.awt.Dimension(200, 47));
        spinModSlider.setRequestFocusEnabled(false);
        spinModSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinModSliderStateChanged(evt);
            }
        });
        spinModSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                spinModSliderMouseDragged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        spinModPanel.add(spinModSlider, gridBagConstraints);

        spinModTextField.setColumns(4);
        spinModTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        spinModTextField.setText("98");
        spinModTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.10"));
        spinModTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        spinModTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                spinModTextFieldFocusLost(evt);
            }
        });

        spinModPanel.add(spinModTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        spinPanel.add(spinModPanel, gridBagConstraints);

        spinThetaPanel.setLayout(new java.awt.GridBagLayout());

        spinThetaPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.11")));
        spinThetaPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.11"));
        spinThetaPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        spinThetaSlider.setMajorTickSpacing(60);
        spinThetaSlider.setMaximum(360);
        spinThetaSlider.setMinorTickSpacing(10);
        spinThetaSlider.setPaintLabels(true);
        spinThetaSlider.setPaintTicks(true);
        spinThetaSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.11"));
        spinThetaSlider.setValue(98);
        spinThetaSlider.setMinimumSize(new java.awt.Dimension(200, 47));
        spinThetaSlider.setRequestFocusEnabled(false);
        spinThetaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinThetaSliderStateChanged(evt);
            }
        });
        spinThetaSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                spinThetaSliderMouseDragged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        spinThetaPanel.add(spinThetaSlider, gridBagConstraints);

        spinThetaTextField.setColumns(4);
        spinThetaTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        spinThetaTextField.setText("98");
        spinThetaTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.11"));
        spinThetaTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        spinThetaTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                spinThetaTextFieldFocusLost(evt);
            }
        });

        spinThetaPanel.add(spinThetaTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        spinPanel.add(spinThetaPanel, gridBagConstraints);

        spinPhiPanel.setLayout(new java.awt.GridBagLayout());

        spinPhiPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.12")));
        spinPhiPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.12"));
        spinPhiPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        spinPhiSlider.setMajorTickSpacing(30);
        spinPhiSlider.setMaximum(180);
        spinPhiSlider.setMinorTickSpacing(5);
        spinPhiSlider.setPaintLabels(true);
        spinPhiSlider.setPaintTicks(true);
        spinPhiSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.12"));
        spinPhiSlider.setValue(98);
        spinPhiSlider.setMinimumSize(new java.awt.Dimension(200, 47));
        spinPhiSlider.setRequestFocusEnabled(false);
        spinPhiSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinPhiSliderStateChanged(evt);
            }
        });
        spinPhiSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                spinPhiSliderMouseDragged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        spinPhiPanel.add(spinPhiSlider, gridBagConstraints);

        spinPhiTextField.setColumns(4);
        spinPhiTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        spinPhiTextField.setText("98");
        spinPhiTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.12"));
        spinPhiTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        spinPhiTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                spinPhiTextFieldFocusLost(evt);
            }
        });

        spinPhiPanel.add(spinPhiTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        spinPanel.add(spinPhiPanel, gridBagConstraints);

        mainTabbedPane.addTab(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.9"), null, spinPanel, java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.9"));

        dragPanel.setLayout(new java.awt.GridBagLayout());

        dragPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 102, 0), new java.awt.Color(153, 102, 0), new java.awt.Color(153, 102, 0), new java.awt.Color(153, 102, 0)));
        dragCoef1Panel.setLayout(new java.awt.GridBagLayout());

        dragCoef1Panel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.14")));
        dragCoef1Panel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.14"));
        dragCoef1Panel.setPreferredSize(new java.awt.Dimension(82, 224));
        dragCoef1Slider.setMajorTickSpacing(10);
        dragCoef1Slider.setMinorTickSpacing(2);
        dragCoef1Slider.setPaintLabels(true);
        dragCoef1Slider.setPaintTicks(true);
        dragCoef1Slider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.14"));
        dragCoef1Slider.setValue(5);
        dragCoef1Slider.setMinimumSize(new java.awt.Dimension(200, 47));
        dragCoef1Slider.setRequestFocusEnabled(false);
        dragCoef1Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dragCoef1SliderStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dragCoef1Panel.add(dragCoef1Slider, gridBagConstraints);

        dragCoef1TextField.setColumns(4);
        dragCoef1TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dragCoef1TextField.setText("5");
        dragCoef1TextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.14"));
        dragCoef1TextField.setMinimumSize(new java.awt.Dimension(43, 20));
        dragCoef1TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dragCoef1TextFieldFocusLost(evt);
            }
        });

        dragCoef1Panel.add(dragCoef1TextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dragPanel.add(dragCoef1Panel, gridBagConstraints);

        densPanel.setLayout(new java.awt.GridBagLayout());

        densPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.16")));
        densPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.16"));
        densPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        densSlider.setMajorTickSpacing(10);
        densSlider.setMinorTickSpacing(2);
        densSlider.setPaintLabels(true);
        densSlider.setPaintTicks(true);
        densSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.16"));
        densSlider.setValue(12);
        densSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                densSliderStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        densPanel.add(densSlider, gridBagConstraints);

        densTextField.setColumns(4);
        densTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        densTextField.setText("12");
        densTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.16"));
        densTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        densTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                densTextFieldFocusLost(evt);
            }
        });

        densPanel.add(densTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dragPanel.add(densPanel, gridBagConstraints);

        dragCoef2Panel.setLayout(new java.awt.GridBagLayout());

        dragCoef2Panel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.15")));
        dragCoef2Panel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.15"));
        dragCoef2Panel.setPreferredSize(new java.awt.Dimension(82, 224));
        dragCoef2Slider.setMajorTickSpacing(10);
        dragCoef2Slider.setMinorTickSpacing(2);
        dragCoef2Slider.setPaintLabels(true);
        dragCoef2Slider.setPaintTicks(true);
        dragCoef2Slider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.15"));
        dragCoef2Slider.setValue(7);
        dragCoef2Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dragCoef2SliderStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dragCoef2Panel.add(dragCoef2Slider, gridBagConstraints);

        dragCoef2TextField.setColumns(4);
        dragCoef2TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dragCoef2TextField.setText("7");
        dragCoef2TextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.15"));
        dragCoef2TextField.setMinimumSize(new java.awt.Dimension(43, 20));
        dragCoef2TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dragCoef2TextFieldFocusLost(evt);
            }
        });

        dragCoef2Panel.add(dragCoef2TextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dragPanel.add(dragCoef2Panel, gridBagConstraints);

        dragTypeCheckBox.setSelected(true);
        dragTypeCheckBox.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.17"));
        dragTypeCheckBox.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.17"));
        dragTypeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dragTypeCheckBoxActionPerformed(evt);
            }
        });

        dragTypePanel.add(dragTypeCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dragPanel.add(dragTypePanel, gridBagConstraints);

        mainTabbedPane.addTab(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.13"), null, dragPanel, java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.13"));

        realPanel.setLayout(new java.awt.GridBagLayout());

        realPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 0, 0), new java.awt.Color(204, 0, 0), new java.awt.Color(204, 0, 0), new java.awt.Color(204, 0, 0)));
        gPanel.setLayout(new java.awt.GridBagLayout());

        gPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.20")));
        gPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.20"));
        gPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        gSlider.setMajorTickSpacing(50);
        gSlider.setMaximum(500);
        gSlider.setMinorTickSpacing(10);
        gSlider.setPaintLabels(true);
        gSlider.setPaintTicks(true);
        gSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.20"));
        gSlider.setValue(98);
        gSlider.setMinimumSize(new java.awt.Dimension(200, 47));
        gSlider.setRequestFocusEnabled(false);
        gSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gSliderStateChanged(evt);
            }
        });
        gSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                gSliderMouseDragged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gPanel.add(gSlider, gridBagConstraints);

        gTextField.setColumns(4);
        gTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gTextField.setText("98");
        gTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.20"));
        gTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        gTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                gTextFieldFocusLost(evt);
            }
        });

        gPanel.add(gTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        realPanel.add(gPanel, gridBagConstraints);

        s0Panel.setLayout(new java.awt.GridBagLayout());

        s0Panel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.19")));
        s0Panel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.19"));
        s0Panel.setPreferredSize(new java.awt.Dimension(82, 224));
        s0Slider.setMajorTickSpacing(200);
        s0Slider.setMaximum(1000);
        s0Slider.setMinorTickSpacing(20);
        s0Slider.setPaintLabels(true);
        s0Slider.setPaintTicks(true);
        s0Slider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.19"));
        s0Slider.setValue(41);
        s0Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                s0SliderStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        s0Panel.add(s0Slider, gridBagConstraints);

        s0TextField.setColumns(4);
        s0TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        s0TextField.setText("41");
        s0TextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.19"));
        s0TextField.setMinimumSize(new java.awt.Dimension(43, 20));
        s0TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                s0TextFieldFocusLost(evt);
            }
        });

        s0Panel.add(s0TextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        realPanel.add(s0Panel, gridBagConstraints);

        dtPanel.setLayout(new java.awt.GridBagLayout());

        dtPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.21")));
        dtPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.21"));
        dtPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        dtSlider.setMajorTickSpacing(50);
        dtSlider.setMaximum(501);
        dtSlider.setMinimum(1);
        dtSlider.setMinorTickSpacing(10);
        dtSlider.setPaintLabels(true);
        dtSlider.setPaintTicks(true);
        dtSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.21"));
        dtSlider.setValue(10);
        dtSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dtSliderStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dtPanel.add(dtSlider, gridBagConstraints);

        dtTextField.setColumns(4);
        dtTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dtTextField.setText("10");
        dtTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.21"));
        dtTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        dtTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dtTextFieldFocusLost(evt);
            }
        });

        dtPanel.add(dtTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        realPanel.add(dtPanel, gridBagConstraints);

        rkRadioButton.setSelected(true);
        rkRadioButton.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.24"));
        rkRadioButton.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.24"));
        odeButtonGroup.add(rkRadioButton);
        realTypePanel.add(rkRadioButton);

        eulerRadioButton.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.25"));
        eulerRadioButton.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.25"));
        odeButtonGroup.add(eulerRadioButton);
        realTypePanel.add(eulerRadioButton);

        gTypeCheckBox.setSelected(true);
        gTypeCheckBox.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.26"));
        gTypeCheckBox.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.26"));
        realTypePanel.add(gTypeCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        realPanel.add(realTypePanel, gridBagConstraints);

        mainTabbedPane.addTab(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.18"), null, realPanel, java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.18"));

        simulSettingsPanel.setLayout(new java.awt.GridBagLayout());

        simulSettingsPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 153, 153), new java.awt.Color(255, 153, 153), new java.awt.Color(255, 153, 153), new java.awt.Color(255, 153, 153)));
        tbsPanel.setLayout(new java.awt.GridBagLayout());

        tbsPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.tbs")));
        tbsPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.tbs"));
        tbsPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        tbsSlider.setMajorTickSpacing(50);
        tbsSlider.setMaximum(500);
        tbsSlider.setMinimum(50);
        tbsSlider.setMinorTickSpacing(10);
        tbsSlider.setPaintLabels(true);
        tbsSlider.setPaintTicks(true);
        tbsSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.tbs"));
        tbsSlider.setValue(100);
        tbsSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tbsSliderStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        tbsPanel.add(tbsSlider, gridBagConstraints);

        tbsTextField.setColumns(4);
        tbsTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tbsTextField.setText("100");
        tbsTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.tbs"));
        tbsTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        tbsTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tbsTextFieldFocusLost(evt);
            }
        });

        tbsPanel.add(tbsTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        simulSettingsPanel.add(tbsPanel, gridBagConstraints);

        samplesPanel.setLayout(new java.awt.GridBagLayout());

        samplesPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.samples")));
        samplesPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.samples"));
        samplesPanel.setMinimumSize(new java.awt.Dimension(82, 83));
        samplesPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        samplesSlider.setMajorTickSpacing(200);
        samplesSlider.setMaximum(1001);
        samplesSlider.setMinimum(1);
        samplesSlider.setMinorTickSpacing(50);
        samplesSlider.setPaintLabels(true);
        samplesSlider.setPaintTicks(true);
        samplesSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.samples"));
        samplesSlider.setValue(500);
        samplesSlider.setMinimumSize(new java.awt.Dimension(200, 47));
        samplesSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                samplesSliderStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        samplesPanel.add(samplesSlider, gridBagConstraints);

        samplesTextField.setColumns(4);
        samplesTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        samplesTextField.setText("500");
        samplesTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.samples"));
        samplesTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        samplesTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                samplesTextFieldFocusLost(evt);
            }
        });

        samplesPanel.add(samplesTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        simulSettingsPanel.add(samplesPanel, gridBagConstraints);

        mainTabbedPane.addTab(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.27"), null, simulSettingsPanel, java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.27"));

        graphicsPanel.setLayout(new java.awt.GridBagLayout());

        graphicsPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 153, 153), new java.awt.Color(255, 153, 153), new java.awt.Color(255, 153, 153), new java.awt.Color(255, 153, 153)));
        graph2Panel.setLayout(new java.awt.GridBagLayout());

        graph2Panel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.32")));
        graph2XComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
        graph2XComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "Y", "Z", "| r |", "Vx", "Vy", "Vz", "| v |", "t" }));
        graph2XComboBox.setSelectedIndex(8);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        graph2Panel.add(graph2XComboBox, gridBagConstraints);

        graph2YComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
        graph2YComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "Y", "Z", "| r |", "Vx", "Vy", "Vz", "| v |", "t" }));
        graph2YComboBox.setSelectedIndex(3);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        graph2Panel.add(graph2YComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        graphicsPanel.add(graph2Panel, gridBagConstraints);

        graph3Panel.setLayout(new java.awt.GridBagLayout());

        graph3Panel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.33")));
        graph3XComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
        graph3XComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "Y", "Z", "| r |", "Vx", "Vy", "Vz", "| v |", "t" }));
        graph3XComboBox.setSelectedIndex(8);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        graph3Panel.add(graph3XComboBox, gridBagConstraints);

        graph3YComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
        graph3YComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "Y", "Z", "| r |", "Vx", "Vy", "Vz", "| v |", "t" }));
        graph3YComboBox.setSelectedIndex(7);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        graph3Panel.add(graph3YComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        graphicsPanel.add(graph3Panel, gridBagConstraints);

        graph4Panel.setLayout(new java.awt.GridBagLayout());

        graph4Panel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.34")));
        graph4XComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
        graph4XComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "Y", "Z", "| r |", "Vx", "Vy", "Vz", "| v |", "t" }));
        graph4XComboBox.setSelectedIndex(3);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        graph4Panel.add(graph4XComboBox, gridBagConstraints);

        graph4YComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
        graph4YComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "Y", "Z", "| r |", "Vx", "Vy", "Vz", "| v |", "t" }));
        graph4YComboBox.setSelectedIndex(7);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        graph4Panel.add(graph4YComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        graphicsPanel.add(graph4Panel, gridBagConstraints);

        graph1Panel.setLayout(new java.awt.GridBagLayout());

        graph1Panel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.31")));
        graph1XComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
        graph1XComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "Y", "Z", "| r |", "Vx", "Vy", "Vz", "| v |", "t" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        graph1Panel.add(graph1XComboBox, gridBagConstraints);

        graph1YComboBox.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
        graph1YComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X", "Y", "Z", "| r |", "Vx", "Vy", "Vz", "| v |", "t" }));
        graph1YComboBox.setSelectedIndex(1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        graph1Panel.add(graph1YComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        graphicsPanel.add(graph1Panel, gridBagConstraints);

        genGraphsPanel.setLayout(new java.awt.GridBagLayout());

        genPosPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.39")));
        genPosPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.39"));
        posModCheckBox.setSelected(true);
        posModCheckBox.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.35"));
        posModCheckBox.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.35"));
        genPosPanel.add(posModCheckBox);

        posAbsCheckBox.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.37"));
        posAbsCheckBox.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.37"));
        genPosPanel.add(posAbsCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        genGraphsPanel.add(genPosPanel, gridBagConstraints);

        genVelPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.40")));
        genVelPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.40"));
        velModCheckBox.setSelected(true);
        velModCheckBox.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.36"));
        velModCheckBox.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.36"));
        genVelPanel.add(velModCheckBox);

        velAbsCheckBox.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.38"));
        velAbsCheckBox.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.38"));
        genVelPanel.add(velAbsCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        genGraphsPanel.add(genVelPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        graphicsPanel.add(genGraphsPanel, gridBagConstraints);

        mainTabbedPane.addTab(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.title.30"), null, graphicsPanel, java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.tip.30"));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(mainTabbedPane, gridBagConstraints);

    }//GEN-END:initComponents

    private void dragTypeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dragTypeCheckBoxActionPerformed
        dragCoef2Slider.setEnabled(dragTypeCheckBox.isSelected());
        dragCoef2TextField.setEnabled(dragTypeCheckBox.isSelected());
    }//GEN-LAST:event_dragTypeCheckBoxActionPerformed
    
    private void xPosSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_xPosSliderMouseDragged
        movproj.setX((double)xPosSlider.getValue()/10);
    }//GEN-LAST:event_xPosSliderMouseDragged
    
    private void yPosSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yPosSliderMouseDragged
        movproj.setY((double)yPosSlider.getValue()/10);
    }//GEN-LAST:event_yPosSliderMouseDragged
    
    private void zPosSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zPosSliderMouseDragged
        movproj.setZ((double)zPosSlider.getValue()/10);
    }//GEN-LAST:event_zPosSliderMouseDragged
    
    private void velModSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_velModSliderMouseDragged
        movproj.setVel((double)velModSlider.getValue()/100);
    }//GEN-LAST:event_velModSliderMouseDragged
    
    private void velThetaSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_velThetaSliderMouseDragged
        movproj.setAngsVel(Math.toRadians(velThetaSlider.getValue()),Math.toRadians(velPhiSlider.getValue()));
    }//GEN-LAST:event_velThetaSliderMouseDragged
    
    private void velPhiSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_velPhiSliderMouseDragged
        movproj.setAngsVel(Math.toRadians(velThetaSlider.getValue()),Math.toRadians(velPhiSlider.getValue()));
    }//GEN-LAST:event_velPhiSliderMouseDragged
    
    private void spinModSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_spinModSliderMouseDragged
        movproj.setSpin((double)spinModSlider.getValue()/100);
    }//GEN-LAST:event_spinModSliderMouseDragged
    
    private void spinThetaSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_spinThetaSliderMouseDragged
        movproj.setAngsSpin(Math.toRadians(spinThetaSlider.getValue()),Math.toRadians(spinPhiSlider.getValue()));
    }//GEN-LAST:event_spinThetaSliderMouseDragged
    
    private void spinPhiSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_spinPhiSliderMouseDragged
        movproj.setAngsSpin(Math.toRadians(spinThetaSlider.getValue()),Math.toRadians(spinPhiSlider.getValue()));
    }//GEN-LAST:event_spinPhiSliderMouseDragged
    
    private void gSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gSliderMouseDragged
        movproj.setAcel(((double)gSlider.getValue()/10));
    }//GEN-LAST:event_gSliderMouseDragged
    
    private void gSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gSliderStateChanged
        gTextField.setText("" + gSlider.getValue());
    }//GEN-LAST:event_gSliderStateChanged
    
    private void dtTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dtTextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(dtTextField, dtSlider, 1);
        } catch (NumberFormatException e)
        {
            dtTextField.setText(Integer.toString(dtSlider.getValue()));
        }
    }//GEN-LAST:event_dtTextFieldFocusLost
    
    private void s0TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_s0TextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(s0TextField, s0Slider, 1);
        } catch (NumberFormatException e)
        {
            s0TextField.setText(Integer.toString(s0Slider.getValue()));
        }
    }//GEN-LAST:event_s0TextFieldFocusLost
    
    private void dtSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dtSliderStateChanged
        dtTextField.setText("" + dtSlider.getValue());
    }//GEN-LAST:event_dtSliderStateChanged
    
    private void s0SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_s0SliderStateChanged
        s0TextField.setText("" + s0Slider.getValue());
    }//GEN-LAST:event_s0SliderStateChanged
    
    private void densTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_densTextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(densTextField, densSlider, 1);
        } catch (NumberFormatException e)
        {
            densTextField.setText(Integer.toString(densSlider.getValue()));
        }
    }//GEN-LAST:event_densTextFieldFocusLost
    
    private void dragCoef2TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dragCoef2TextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(dragCoef2TextField, dragCoef2Slider, 1);
        } catch (NumberFormatException e)
        {
            dragCoef2TextField.setText(Integer.toString(dragCoef2Slider.getValue()));
        }
    }//GEN-LAST:event_dragCoef2TextFieldFocusLost
    
    private void dragCoef1TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dragCoef1TextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(dragCoef1TextField, dragCoef1Slider, 1);
        } catch (NumberFormatException e)
        {
            dragCoef1TextField.setText(Integer.toString(dragCoef1Slider.getValue()));
        }
    }//GEN-LAST:event_dragCoef1TextFieldFocusLost
    
    private void densSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_densSliderStateChanged
        densTextField.setText("" + densSlider.getValue());
    }//GEN-LAST:event_densSliderStateChanged
    
    private void dragCoef2SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dragCoef2SliderStateChanged
        dragCoef2TextField.setText("" + dragCoef2Slider.getValue());
    }//GEN-LAST:event_dragCoef2SliderStateChanged
    
    private void dragCoef1SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dragCoef1SliderStateChanged
        dragCoef1TextField.setText("" + dragCoef1Slider.getValue());
    }//GEN-LAST:event_dragCoef1SliderStateChanged
    
    private void gTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_gTextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(gTextField, gSlider, 1);
            movproj.setAcel(((double)gSlider.getValue()/10));
        } catch (NumberFormatException e)
        {
            gTextField.setText(Integer.toString(gSlider.getValue()));
        }
    }//GEN-LAST:event_gTextFieldFocusLost
    
    private void spinPhiTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_spinPhiTextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(spinPhiTextField, spinPhiSlider, 1);
            movproj.setAngsSpin(Math.toRadians(spinThetaSlider.getValue()),Math.toRadians(spinPhiSlider.getValue()));
        } catch (NumberFormatException e)
        {
            spinPhiTextField.setText(Integer.toString(spinPhiSlider.getValue()));
        }
    }//GEN-LAST:event_spinPhiTextFieldFocusLost
    
    private void spinPhiSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinPhiSliderStateChanged
        spinPhiTextField.setText("" + spinPhiSlider.getValue());
    }//GEN-LAST:event_spinPhiSliderStateChanged
    
    private void spinThetaTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_spinThetaTextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(spinThetaTextField, spinThetaSlider, 1);
            movproj.setAngsSpin(Math.toRadians(spinThetaSlider.getValue()),Math.toRadians(spinPhiSlider.getValue()));
        } catch (NumberFormatException e)
        {
            spinThetaTextField.setText(Integer.toString(spinThetaSlider.getValue()));
        }
    }//GEN-LAST:event_spinThetaTextFieldFocusLost
    
    private void spinThetaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinThetaSliderStateChanged
        spinThetaTextField.setText("" + spinThetaSlider.getValue());
    }//GEN-LAST:event_spinThetaSliderStateChanged
    
    private void spinModTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_spinModTextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(spinModTextField, spinModSlider, 1);
            movproj.setSpin((double)spinModSlider.getValue()/100);
        } catch (NumberFormatException e)
        {
            spinModTextField.setText(Integer.toString(spinModSlider.getValue()));
        }
    }//GEN-LAST:event_spinModTextFieldFocusLost
    
    private void spinModSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinModSliderStateChanged
        spinModTextField.setText("" + spinModSlider.getValue());
    }//GEN-LAST:event_spinModSliderStateChanged
    
    private void velPhiTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_velPhiTextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(velPhiTextField, velPhiSlider, 1);
            movproj.setAngsVel(Math.toRadians(velThetaSlider.getValue()),Math.toRadians(velPhiSlider.getValue()));
        } catch (NumberFormatException e)
        {
            velPhiTextField.setText(Integer.toString(velPhiSlider.getValue()));
        }
    }//GEN-LAST:event_velPhiTextFieldFocusLost
    
    private void velPhiSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_velPhiSliderStateChanged
        velPhiTextField.setText("" + velPhiSlider.getValue());
    }//GEN-LAST:event_velPhiSliderStateChanged
    
    private void velThetaTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_velThetaTextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(velThetaTextField, velThetaSlider, 1);
            movproj.setAngsVel(Math.toRadians(velThetaSlider.getValue()),Math.toRadians(velPhiSlider.getValue()));} catch (NumberFormatException e)
            {
                velThetaTextField.setText(Integer.toString(velThetaSlider.getValue()));
            }
    }//GEN-LAST:event_velThetaTextFieldFocusLost
    
    private void velThetaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_velThetaSliderStateChanged
        velThetaTextField.setText("" + velThetaSlider.getValue());
    }//GEN-LAST:event_velThetaSliderStateChanged
    
    private void velModTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_velModTextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(velModTextField, velModSlider, 1);
            movproj.setVel((double)velModSlider.getValue()/100);
        } catch (NumberFormatException e)
        {
            velModTextField.setText(Integer.toString(velModSlider.getValue()));
        }
    }//GEN-LAST:event_velModTextFieldFocusLost
    
    private void velModSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_velModSliderStateChanged
        velModTextField.setText("" + velModSlider.getValue());
    }//GEN-LAST:event_velModSliderStateChanged
    
    private void zPosTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_zPosTextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(zPosTextField, zPosSlider, 1);
            movproj.setZ((double)zPosSlider.getValue()/10);
        } catch (NumberFormatException e)
        {
            zPosTextField.setText(Integer.toString(zPosSlider.getValue()));
        }
    }//GEN-LAST:event_zPosTextFieldFocusLost
    
    private void zPosSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zPosSliderStateChanged
        zPosTextField.setText("" + zPosSlider.getValue());
    }//GEN-LAST:event_zPosSliderStateChanged
    
    private void yPosTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yPosTextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(yPosTextField, yPosSlider, 1);
            movproj.setY((double)yPosSlider.getValue()/10);
        } catch (NumberFormatException e)
        {
            yPosTextField.setText(Integer.toString(yPosSlider.getValue()));
        }
    }//GEN-LAST:event_yPosTextFieldFocusLost
    
    private void yPosSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_yPosSliderStateChanged
        yPosTextField.setText("" + yPosSlider.getValue());
    }//GEN-LAST:event_yPosSliderStateChanged
    
    private void xPosTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_xPosTextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(xPosTextField, xPosSlider, 1);
            movproj.setX((double)xPosSlider.getValue()/10);
        } catch (NumberFormatException e)
        {
            xPosTextField.setText(Integer.toString(xPosSlider.getValue()));
        }
    }//GEN-LAST:event_xPosTextFieldFocusLost
    
    private void xPosSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_xPosSliderStateChanged
        xPosTextField.setText("" + xPosSlider.getValue());
    }//GEN-LAST:event_xPosSliderStateChanged
    
    private void editTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editTextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(editTextField, editSlider, 1);
            editSet(((javax.swing.border.TitledBorder) editPanel.getBorder()).getTitle(), val);
        } catch (NumberFormatException e)
        {
            editTextField.setText(Integer.toString(editSlider.getValue()));
        }
    }//GEN-LAST:event_editTextFieldFocusLost
    
    private void editSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editSliderMouseDragged
        editSet(((javax.swing.border.TitledBorder) editPanel.getBorder()).getTitle(), editSlider.getValue());
    }//GEN-LAST:event_editSliderMouseDragged
    
    private void editSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_editSliderStateChanged
        editTextField.setText("" + editSlider.getValue());
    }//GEN-LAST:event_editSliderStateChanged
    
    private void samplesTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_samplesTextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(samplesTextField, samplesSlider, 1);
        } catch (NumberFormatException e)
        {
            samplesTextField.setText(Integer.toString(samplesSlider.getValue()));
        }
    }//GEN-LAST:event_samplesTextFieldFocusLost
    
    private void tbsTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tbsTextFieldFocusLost
        try
        {
            double val = GUtils.validateInput(tbsTextField, tbsSlider, 1);
        } catch (NumberFormatException e)
        {
            tbsTextField.setText(Integer.toString(tbsSlider.getValue()));
        }
    }//GEN-LAST:event_tbsTextFieldFocusLost
    
    private void samplesSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_samplesSliderStateChanged
        samplesTextField.setText("" + samplesSlider.getValue());
    }//GEN-LAST:event_samplesSliderStateChanged
    
    private void tbsSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tbsSliderStateChanged
        tbsTextField.setText("" + tbsSlider.getValue());
    }//GEN-LAST:event_tbsSliderStateChanged
    
    public void actionPerformed(java.awt.event.ActionEvent e)
    {
        if (e.getActionCommand().equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.editMenu.title.1")))
            updateEditPanel(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.editPanel.title.1"), java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.editPanel.tip.1"), (int) Math.round(movproj.getMass()), new int[]
            {100,1001,1,20});
        else if (e.getActionCommand().equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.editMenu.title.2")))
            updateEditPanel(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.editPanel.title.2"), java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.editPanel.tip.2"), (int) Math.round(movproj.getRadius()*21), new int[]
            {100,1001,1,20});
        else if (e.getActionCommand().equalsIgnoreCase("Ok"))
        {
            mainPanel.remove(mainPanel.getComponentCount()-1);
            movproj.setVisible(true);
            //if (stateCheckBoxMenuItem.isSelected() || xCheckBoxMenuItem.isSelected() || thetaCheckBoxMenuItem.isSelected())
            //  mainTabbedPane.setVisible(true);
            //viewMenu.setEnabled(true);
            //helpMenu.setEnabled(true);
            //fileMenu.setEnabled(true);
        }
    }
    
    
    private void updateEditPanel(String strTitle, String strTip, int val, int [] sliderConfig)
    {
        editPanel.remove(editSlider);
        editSlider = new javax.swing.JSlider();
        editSlider.setMaximum(sliderConfig[1]);
        editSlider.setMinimum(sliderConfig[2]);
        editSlider.setMinorTickSpacing(sliderConfig[3]);
        editSlider.setMajorTickSpacing(sliderConfig[0]);
        editSlider.setPaintLabels(true);
        editSlider.setPaintTicks(true);
        editSlider.setToolTipText(strTip);
        editSlider.setValue(val);
        editSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        editSlider.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                editSliderStateChanged(evt);
            }
        });
        editSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                editSliderMouseDragged(evt);
            }
        });
        
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        editPanel.add(editSlider, gridBagConstraints);
        
        editTextField.setToolTipText(strTip);
        editTextField.setText(String.valueOf(val));
        
        //editTextField.setEnabled(animaRadioButton.isSelected());
        //editSlider.setEnabled(animaRadioButton.isSelected());
        
        editLabel.setVisible(false);
        ((javax.swing.border.TitledBorder) editPanel.getBorder()).setTitle(strTitle);
        editPanel.setToolTipText(strTip);
        editPanel.setVisible(true);
        editPanel.updateUI();
    }
    
    public void update()
    {
        
        String str = ((javax.swing.border.TitledBorder) editPanel.getBorder()).getTitle();
        
        if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.editPanel.title.1")))
            editSlider.setValue((int) Math.round(movproj.getMass()));
        else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.editPanel.title.2")))
            editSlider.setValue((int) Math.round(movproj.getRadius()*21));
        
        xPosSlider.setValue((int)Math.round(movproj.getPosX()*10));
        yPosSlider.setValue((int)Math.round(movproj.getPosY()*10));
        zPosSlider.setValue((int)Math.round(movproj.getPosZ()*10));
        
        velThetaSlider.setValue((int)Math.round(Math.toDegrees(movproj.getThetaVel())));
        velPhiSlider.setValue((int)Math.round(Math.toDegrees(movproj.getPhiVel())));
        velModSlider.setValue((int)Math.round(movproj.getVel()*100));
        
        spinThetaSlider.setValue((int)Math.round(Math.toDegrees(movproj.getThetaSpin())));
        spinPhiSlider.setValue((int)Math.round(Math.toDegrees(movproj.getPhiSpin())));
        spinModSlider.setValue((int)Math.round(movproj.getSpin()*100));
        
        gSlider.setValue((int)Math.round(movproj.getAcel()*10));
    }
    
    private void editSet(String str, double val)
    {
        if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.editPanel.title.1")))
            movproj.setMass(val);
        else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/movproj/resources/ReCExpMovProj").getString("rec.exp.customizer.editPanel.title.2")))
        {
            movproj.setRadius(val/21d);
            yPosSlider.setValue((int)Math.round(movproj.getPosY()*10));
        }
    }
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        fireICustomizerListenerCanceled();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        acqConfig.setSelectedFrequency(new Frequency((double) tbsSlider.getValue(),hardwareInfo.getHardwareFrequencies(0).getMinimumFrequency().getMultiplier(),hardwareInfo.getHardwareFrequencies(0).getMinimumFrequency().getFrequencyDefType()));
        acqConfig.setTotalSamples(samplesSlider.getValue());
        
        acqConfig.getSelectedHardwareParameter("odeType").setParameterValue("" + (rkRadioButton.isSelected()?1:0));
        acqConfig.getSelectedHardwareParameter("gType").setParameterValue("" + (gTypeCheckBox.isSelected()?1:0));
        acqConfig.getSelectedHardwareParameter("dragType").setParameterValue("" + (dragTypeCheckBox.isSelected()?1:0));
        
        acqConfig.getSelectedHardwareParameter("velModulus").setParameterValue("" + (velModCheckBox.isSelected()?1:0));
        acqConfig.getSelectedHardwareParameter("velAbs").setParameterValue("" + (velAbsCheckBox.isSelected()?1:0));
        acqConfig.getSelectedHardwareParameter("posModulus").setParameterValue("" + (posModCheckBox.isSelected()?1:0));
        acqConfig.getSelectedHardwareParameter("posAbs").setParameterValue("" + (posAbsCheckBox.isSelected()?1:0));
        
        double x = movproj.getPosX();
        double y = movproj.getPosY();
        double z = movproj.getPosZ();
        
        double velMod = movproj.getVel()*10;
        double velTheta = movproj.getThetaVel();
        double velPhi = movproj.getPhiVel();
        
        double spinMod = movproj.getSpin()*10;
        double spinTheta = movproj.getThetaSpin();
        double spinPhi = movproj.getPhiSpin();
        
        double mass = movproj.getMass()/1000d;
        double radius = 21*movproj.getRadius()/1000d;
        
        double dragCoef1 = (double)dragCoef1Slider.getValue()/10d;
        double dragCoef2 = (double)dragCoef2Slider.getValue()/10d;
        double densL = (double)densSlider.getValue()/10d;
        
        double s0 = (double)s0Slider.getValue()*1e-5;
        double g = movproj.getAcel();
        int dt = dtSlider.getValue();
        
        String graph1 = ((String) graph1XComboBox.getSelectedItem()).toString().concat("."+((String) graph1YComboBox.getSelectedItem()).toString());
        String graph2 = ((String) graph2XComboBox.getSelectedItem()).toString().concat("."+((String) graph2YComboBox.getSelectedItem()).toString());
        String graph3 = ((String) graph3XComboBox.getSelectedItem()).toString().concat("."+((String) graph3YComboBox.getSelectedItem()).toString());
        String graph4 = ((String) graph4XComboBox.getSelectedItem()).toString().concat("."+((String) graph4YComboBox.getSelectedItem()).toString());
        
        
        acqConfig.getSelectedHardwareParameter("x").setParameterValue("" + (float) x);
        acqConfig.getSelectedHardwareParameter("y").setParameterValue("" + (float) y);
        acqConfig.getSelectedHardwareParameter("z").setParameterValue("" + (float) z);
        
        acqConfig.getSelectedHardwareParameter("velMod").setParameterValue("" + (float) velMod);
        acqConfig.getSelectedHardwareParameter("velTheta").setParameterValue("" + (float) velTheta);
        acqConfig.getSelectedHardwareParameter("velPhi").setParameterValue("" + (float) velPhi);
        
        acqConfig.getSelectedHardwareParameter("spinMod").setParameterValue("" + (float) spinMod);
        acqConfig.getSelectedHardwareParameter("spinTheta").setParameterValue("" + (float) spinTheta);
        acqConfig.getSelectedHardwareParameter("spinPhi").setParameterValue("" + (float) spinPhi);
        
        acqConfig.getSelectedHardwareParameter("mass").setParameterValue("" + (float) mass);
        acqConfig.getSelectedHardwareParameter("radius").setParameterValue("" + (float) radius);
        
        acqConfig.getSelectedHardwareParameter("dragCoef1").setParameterValue("" + (float) dragCoef1);
        acqConfig.getSelectedHardwareParameter("dragCoef2").setParameterValue("" + (float) dragCoef2);
        acqConfig.getSelectedHardwareParameter("densL").setParameterValue("" + (float) densL);
        
        acqConfig.getSelectedHardwareParameter("s0").setParameterValue("" + (float) s0);
        acqConfig.getSelectedHardwareParameter("g").setParameterValue("" + (float) g);
        acqConfig.getSelectedHardwareParameter("dt").setParameterValue("" + dt);
        
        acqConfig.getSelectedHardwareParameter("graph1").setParameterValue("" + graph1);
        acqConfig.getSelectedHardwareParameter("graph2").setParameterValue("" + graph2);
        acqConfig.getSelectedHardwareParameter("graph3").setParameterValue("" + graph3);
        acqConfig.getSelectedHardwareParameter("graph4").setParameterValue("" + graph4);
        
        for(int i=0; i<acqConfig.getSelectedHardwareParameters().length; i++)
            System.out.println(acqConfig.getSelectedHardwareParameters(i).getParameterName() + " = " + acqConfig.getSelectedHardwareParameters(i).getParameterValue());
        
        fireICustomizerListenerDone();
    }//GEN-LAST:event_okButtonActionPerformed
    
    private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultButtonActionPerformed
        tbsSlider.setValue(100);
        samplesSlider.setValue(500);
        
        graph1XComboBox.setSelectedItem("X");
        graph1YComboBox.setSelectedItem("Y");
        graph2XComboBox.setSelectedItem("t");
        graph2YComboBox.setSelectedItem("| r |");
        graph3XComboBox.setSelectedItem("t");
        graph3YComboBox.setSelectedItem("| v |");
        graph4XComboBox.setSelectedItem("| r |");
        graph4YComboBox.setSelectedItem("| v |");
        
        rkRadioButton.setSelected(true);
        gTypeCheckBox.setSelected(true);
        dragTypeCheckBox.setSelected(true);
        
        velModCheckBox.setSelected(true);
        posModCheckBox.setSelected(true);
        velAbsCheckBox.setSelected(false);
        posAbsCheckBox.setSelected(false);
        
        dragCoef1Slider.setValue(5);
        dragCoef2Slider.setValue(7);
        densSlider.setValue(12);
        
        s0Slider.setValue(41);
        dtSlider.setValue(10);
        
        movproj.setMass(46);
        movproj.config(0,0,0,14.1,Math.PI/4,Math.PI/2,10,Math.PI/2,Math.PI/2,9.8,1);
        
        update();
    }//GEN-LAST:event_defaultButtonActionPerformed
    
    public static void main(String args[])
    {
        javax.swing.JFrame test = new javax.swing.JFrame();
        test.addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent e)
            {
                System.exit(0);
            };
        });
        test.getContentPane().add(new MovProjCustomizer());
        test.pack();
        test.show();
    }
    
    
    //****************************REC********************************************/
    
    
    /** Utility field used by event firing mechanism. */
    private javax.swing.event.EventListenerList listenerList =  null;
    
    
    /** Registers ICustomizerListener to receive events.
     * @param listener The listener to register.
     */
    public synchronized void addICustomizerListener(ICustomizerListener listener)
    {
        if (listenerList == null )
        {
            listenerList = new javax.swing.event.EventListenerList();
        }
        listenerList.add(ICustomizerListener.class, listener);
    }
    
    /** Removes ICustomizerListener from the list of listeners.
     * @param listener The listener to remove.
     */
    public synchronized void removeICustomizerListener(ICustomizerListener listener)
    {
        listenerList.remove(ICustomizerListener.class, listener);
    }
    
    /** Notifies all registered listeners about the event.
     *
     * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
     */
    private void fireICustomizerListenerCanceled()
    {
        if (listenerList == null) return;
        Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length-2; i>=0; i-=2)
        {
            if (listeners[i]==ICustomizerListener.class)
            {
                ((ICustomizerListener)listeners[i+1]).canceled();
            }
        }
    }
    
    /** Notifies all registered listeners about the event.
     *
     * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
     */
    private void fireICustomizerListenerDone()
    {
        if (listenerList == null) return;
        Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length-2; i>=0; i-=2)
        {
            if (listeners[i]==ICustomizerListener.class)
            {
                
                ((ICustomizerListener)listeners[i+1]).done();
            }
        }
    }
    
    
    private HardwareInfo hardwareInfo=null;
    private HardwareAcquisitionConfig acqConfig=null;
    
    public HardwareAcquisitionConfig getAcquisitionConfig()
    {
        return acqConfig;
    }
    
    public void setHardwareAcquisitionConfig(HardwareAcquisitionConfig acqConfig)
    {
        this.acqConfig=acqConfig;
        if(acqConfig!=null)
        {
            //samplesSlider.setValue(acqConfig.getTotalSamples());
            //tbsSlider.setValue((int) acqConfig.getSelectedFrequency().getFrequency());
            
            if (acqConfig.getSelectedHardwareParameterValue("odeType").trim().equals("1")?true:false)
                rkRadioButton.setSelected(true);
            else
                eulerRadioButton.setSelected(true);
            gTypeCheckBox.setSelected(acqConfig.getSelectedHardwareParameterValue("gType").trim().equals("1")?true:false);
            dragTypeCheckBox.setSelected(acqConfig.getSelectedHardwareParameterValue("dragType").trim().equals("1")?true:false);
            
            velModCheckBox.setSelected(acqConfig.getSelectedHardwareParameterValue("velModulus").trim().equals("1")?true:false);
            velAbsCheckBox.setSelected(acqConfig.getSelectedHardwareParameterValue("velAbs").trim().equals("1")?true:false);
            posModCheckBox.setSelected(acqConfig.getSelectedHardwareParameterValue("posModulus").trim().equals("1")?true:false);
            posAbsCheckBox.setSelected(acqConfig.getSelectedHardwareParameterValue("posAbs").trim().equals("1")?true:false);
            
            float x = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("x"));
            float y = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("y"));
            float z = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("z"));
            
            float velMod = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("velMod"));
            float velTheta = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("velTheta"));
            float velPhi = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("velPhi"));
            
            float spinMod = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("spinMod"));
            float spinTheta = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("spinTheta"));
            float spinPhi = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("spinPhi"));
            
            movproj.setMass(Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("mass"))*1000);
            float radius = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("radius"));
            
            dragCoef1Slider.setValue((int)Math.round(Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("dragCoef1"))*10));
            dragCoef1Slider.setValue((int)Math.round(Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("dragCoef2"))*10));
            densSlider.setValue((int)Math.round(Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("densL"))*10));
            
            s0Slider.setValue((int)Math.round(Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("s0"))*1e5));
            float g = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("g"));
            int dt = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("dt"));
            
            String [] graph1 = StringUtils.splitArroundPoint(acqConfig.getSelectedHardwareParameterValue("graph1"));
            String [] graph2 = StringUtils.splitArroundPoint(acqConfig.getSelectedHardwareParameterValue("graph2"));
            String [] graph3 = StringUtils.splitArroundPoint(acqConfig.getSelectedHardwareParameterValue("graph3"));
            String [] graph4 = StringUtils.splitArroundPoint(acqConfig.getSelectedHardwareParameterValue("graph4"));
            
            if(graph1 != null && graph1.length > 1)
            {
                graph1XComboBox.setSelectedItem(graph1[0]);
                graph1YComboBox.setSelectedItem(graph1[1]);
            }
            
            if(graph2 != null && graph2.length > 1)
            {
                graph2XComboBox.setSelectedItem(graph2[0]);
                graph2YComboBox.setSelectedItem(graph2[1]);
            }
            
            if(graph3 != null && graph3.length > 1)
            {
                graph3XComboBox.setSelectedItem(graph3[0]);
                graph3YComboBox.setSelectedItem(graph3[1]);
            }
            
            if(graph4 != null && graph4.length > 1)
            {
                graph4XComboBox.setSelectedItem(graph4[0]);
                graph4YComboBox.setSelectedItem(graph4[1]);
            }
            
            movproj.config(x,y,z,velMod/10d,velTheta,velPhi,spinMod/10d,spinTheta,spinPhi,g,1000*radius/21d);
            
            update();
        }
    }
    
    public void setHardwareInfo(HardwareInfo hardwareInfo)
    {
        this.hardwareInfo=hardwareInfo;
    }
    
    protected HardwareInfo getHardwareInfo()
    {
        return this.hardwareInfo;
    }
    
    public javax.swing.JComponent getCustomizerComponent()
    {
        return this;
    }
    
    public javax.swing.ImageIcon getCustomizerIcon()
    {
        return new javax.swing.ImageIcon(getClass().getResource("/pt/utl/ist/elab/virtual/client/movproj/resources/movproj_iconified.PNG"));
    }
    
    
    public String getCustomizerTitle()
    {
        return "Motion of Projectiles Configuration Utility";
    }
    
    public javax.swing.JMenuBar getMenuBar()
    {
        return null;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel btnPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel controlBtnPanel;
    private javax.swing.JPanel defConfBtnPanel;
    private javax.swing.JButton defaultButton;
    private javax.swing.JPanel densPanel;
    private javax.swing.JSlider densSlider;
    private javax.swing.JTextField densTextField;
    private javax.swing.JPanel dragCoef1Panel;
    private javax.swing.JSlider dragCoef1Slider;
    private javax.swing.JTextField dragCoef1TextField;
    private javax.swing.JPanel dragCoef2Panel;
    private javax.swing.JSlider dragCoef2Slider;
    private javax.swing.JTextField dragCoef2TextField;
    private javax.swing.JPanel dragPanel;
    private javax.swing.JCheckBox dragTypeCheckBox;
    private javax.swing.JPanel dragTypePanel;
    private javax.swing.JPanel dtPanel;
    private javax.swing.JSlider dtSlider;
    private javax.swing.JTextField dtTextField;
    private javax.swing.JLabel editLabel;
    private javax.swing.JPanel editPanel;
    private javax.swing.JSlider editSlider;
    private javax.swing.JTextField editTextField;
    private javax.swing.JRadioButton eulerRadioButton;
    private javax.swing.JPanel gPanel;
    private javax.swing.JSlider gSlider;
    private javax.swing.JTextField gTextField;
    private javax.swing.JCheckBox gTypeCheckBox;
    private javax.swing.JPanel genGraphsPanel;
    private javax.swing.JPanel genPosPanel;
    private javax.swing.JPanel genVelPanel;
    private javax.swing.JPanel graph1Panel;
    private javax.swing.JComboBox graph1XComboBox;
    private javax.swing.JComboBox graph1YComboBox;
    private javax.swing.JPanel graph2Panel;
    private javax.swing.JComboBox graph2XComboBox;
    private javax.swing.JComboBox graph2YComboBox;
    private javax.swing.JPanel graph3Panel;
    private javax.swing.JComboBox graph3XComboBox;
    private javax.swing.JComboBox graph3YComboBox;
    private javax.swing.JPanel graph4Panel;
    private javax.swing.JComboBox graph4XComboBox;
    private javax.swing.JComboBox graph4YComboBox;
    private javax.swing.JPanel graphicsPanel;
    private javax.swing.JPanel mainEditPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.ButtonGroup odeButtonGroup;
    private javax.swing.JButton okButton;
    private javax.swing.JCheckBox posAbsCheckBox;
    private javax.swing.JCheckBox posModCheckBox;
    private javax.swing.JPanel posPanel;
    private javax.swing.JPanel realPanel;
    private javax.swing.JPanel realTypePanel;
    private javax.swing.JRadioButton rkRadioButton;
    private javax.swing.JPanel s0Panel;
    private javax.swing.JSlider s0Slider;
    private javax.swing.JTextField s0TextField;
    private javax.swing.JPanel samplesPanel;
    private javax.swing.JSlider samplesSlider;
    private javax.swing.JTextField samplesTextField;
    private javax.swing.JPanel simulSettingsPanel;
    private javax.swing.JPanel spinModPanel;
    private javax.swing.JSlider spinModSlider;
    private javax.swing.JTextField spinModTextField;
    private javax.swing.JPanel spinPanel;
    private javax.swing.JPanel spinPhiPanel;
    private javax.swing.JSlider spinPhiSlider;
    private javax.swing.JTextField spinPhiTextField;
    private javax.swing.JPanel spinThetaPanel;
    private javax.swing.JSlider spinThetaSlider;
    private javax.swing.JTextField spinThetaTextField;
    private javax.swing.JPanel tbsPanel;
    private javax.swing.JSlider tbsSlider;
    private javax.swing.JTextField tbsTextField;
    private javax.swing.JCheckBox velAbsCheckBox;
    private javax.swing.JCheckBox velModCheckBox;
    private javax.swing.JPanel velModPanel;
    private javax.swing.JSlider velModSlider;
    private javax.swing.JTextField velModTextField;
    private javax.swing.JPanel velPanel;
    private javax.swing.JPanel velPhiPanel;
    private javax.swing.JSlider velPhiSlider;
    private javax.swing.JTextField velPhiTextField;
    private javax.swing.JPanel velThetaPanel;
    private javax.swing.JSlider velThetaSlider;
    private javax.swing.JTextField velThetaTextField;
    private javax.swing.JPanel xPosPanel;
    private javax.swing.JSlider xPosSlider;
    private javax.swing.JTextField xPosTextField;
    private javax.swing.JPanel yPosPanel;
    private javax.swing.JSlider yPosSlider;
    private javax.swing.JTextField yPosTextField;
    private javax.swing.JPanel zPosPanel;
    private javax.swing.JSlider zPosSlider;
    private javax.swing.JTextField zPosTextField;
    // End of variables declaration//GEN-END:variables
    
}
