package pt.utl.ist.elab.client.meteo;

/*
 * MeteoConfig.java
 *
 * Created on 18 de Dezembro de 2003, 16:09
 */

/**
 *
 * @author Jos√© Pedro Pereira - Linkare TI
 */

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.metadata.HardwareInfo;
import com.linkare.rec.impl.client.customizer.ICustomizerListener;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

public class MeteoCustomizer extends javax.swing.JPanel implements com.linkare.rec.impl.client.customizer.ICustomizer {

	/**
	 * 
	 */
	private static final long serialVersionUID = 3910991417859398077L;
	/** REC */
	private HardwareInfo hardwareInfo = null;
	private HardwareAcquisitionConfig acqConfig = null;
	private final javax.swing.ImageIcon ICON = new javax.swing.ImageIcon(getClass().getResource(
			"/pt/utl/ist/elab/client/meteo/resources/cloudy.gif"));
	private final String TITLE = "Meteorologia";

	/** Creates new form MeteoConfig */
	public MeteoCustomizer() {
		initComponents();
		jComboBoxMonthIni.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.jan"));
		jComboBoxMonthIni.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.feb"));
		jComboBoxMonthIni.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.mar"));
		jComboBoxMonthIni.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.april"));
		jComboBoxMonthIni.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.may"));
		jComboBoxMonthIni.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.june"));
		jComboBoxMonthIni.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.july"));
		jComboBoxMonthIni.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.aug"));
		jComboBoxMonthIni.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.sep"));
		jComboBoxMonthIni.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.oct"));
		jComboBoxMonthIni.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.nov"));
		jComboBoxMonthIni.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.dec"));

		jComboBoxMonthFinal.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.jan"));
		jComboBoxMonthFinal.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.feb"));
		jComboBoxMonthFinal.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.mar"));
		jComboBoxMonthFinal.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.april"));
		jComboBoxMonthFinal.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.may"));
		jComboBoxMonthFinal.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.june"));
		jComboBoxMonthFinal.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.july"));
		jComboBoxMonthFinal.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.aug"));
		jComboBoxMonthFinal.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.sep"));
		jComboBoxMonthFinal.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.oct"));
		jComboBoxMonthFinal.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.nov"));
		jComboBoxMonthFinal.addItem(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.dec"));
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		java.awt.GridBagConstraints gridBagConstraints;

		buttonGroup1 = new javax.swing.ButtonGroup();
		jPanel2 = new javax.swing.JPanel();
		jRadioButtonYear = new javax.swing.JRadioButton();
		jRadioButtonMonth = new javax.swing.JRadioButton();
		jRadioButtonDay = new javax.swing.JRadioButton();
		jRadioButtonHour = new javax.swing.JRadioButton();
		jPanel3 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jComboBoxDayIni = new javax.swing.JComboBox();
		jComboBoxHourIni = new javax.swing.JComboBox();
		jComboBoxMonthIni = new javax.swing.JComboBox();
		jComboBoxYearIni = new javax.swing.JComboBox();
		jComboBoxMonthFinal = new javax.swing.JComboBox();
		jComboBoxYearFinal = new javax.swing.JComboBox();
		jComboBoxHourFinal = new javax.swing.JComboBox();
		jComboBoxDayFinal = new javax.swing.JComboBox();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		jLabel7 = new javax.swing.JLabel();
		jLabel8 = new javax.swing.JLabel();
		jLabel9 = new javax.swing.JLabel();
		jLabel10 = new javax.swing.JLabel();
		jButtonHour = new javax.swing.JButton();
		jPanel4 = new javax.swing.JPanel();
		jPanel5 = new javax.swing.JPanel();
		jButtonOK = new javax.swing.JButton();
		jButtonCancel = new javax.swing.JButton();
		jPanel6 = new javax.swing.JPanel();
		jButtonDefault1 = new javax.swing.JButton();

		setLayout(new java.awt.GridBagLayout());

		jPanel2.setLayout(new java.awt.GridBagLayout());

		jPanel2.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findString("meteo$rec.exp.meteo.lbl.res")));
		jPanel2.setMinimumSize(new java.awt.Dimension(85, 60));
		jPanel2.setPreferredSize(new java.awt.Dimension(85, 60));
		jRadioButtonYear.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.yearly"));
		buttonGroup1.add(jRadioButtonYear);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel2.add(jRadioButtonYear, gridBagConstraints);

		jRadioButtonMonth.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.monthly"));
		buttonGroup1.add(jRadioButtonMonth);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel2.add(jRadioButtonMonth, gridBagConstraints);

		jRadioButtonDay.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.daily"));
		buttonGroup1.add(jRadioButtonDay);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel2.add(jRadioButtonDay, gridBagConstraints);

		jRadioButtonHour.setSelected(true);
		jRadioButtonHour.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.hourly"));
		buttonGroup1.add(jRadioButtonHour);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		jPanel2.add(jRadioButtonHour, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		add(jPanel2, gridBagConstraints);

		jPanel3.setLayout(new java.awt.GridBagLayout());

		jPanel3.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findString("meteo$rec.exp.meteo.lbl.period")));
		jPanel3.setMinimumSize(new java.awt.Dimension(350, 300));
		jPanel3.setPreferredSize(new java.awt.Dimension(350, 150));
		jLabel1.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.startdate"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
		jPanel3.add(jLabel1, gridBagConstraints);

		jLabel2.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.enddate"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
		jPanel3.add(jLabel2, gridBagConstraints);

		jComboBoxDayIni.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7",
				"8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "22", "23",
				"24", "25", "26", "27", "28", "29", "30", "31" }));
		jComboBoxDayIni.setMinimumSize(new java.awt.Dimension(45, 25));
		jComboBoxDayIni.setPreferredSize(new java.awt.Dimension(45, 20));
		jComboBoxDayIni.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jComboBoxDayIniActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 2;
		jPanel3.add(jComboBoxDayIni, gridBagConstraints);

		jComboBoxHourIni.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15",
						"16", "17", "18", "19", "20", "21", "22", "23" }));
		jComboBoxHourIni.setMinimumSize(new java.awt.Dimension(45, 25));
		jComboBoxHourIni.setPreferredSize(new java.awt.Dimension(45, 20));
		jComboBoxHourIni.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jComboBoxHourIniActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanel3.add(jComboBoxHourIni, gridBagConstraints);

		jComboBoxMonthIni.setMinimumSize(new java.awt.Dimension(90, 25));
		jComboBoxMonthIni.setPreferredSize(new java.awt.Dimension(90, 20));
		jComboBoxMonthIni.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jComboBoxMonthIniActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 2;
		jPanel3.add(jComboBoxMonthIni, gridBagConstraints);

		jComboBoxYearIni.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2004", "2005" }));
		jComboBoxYearIni.setMinimumSize(new java.awt.Dimension(60, 25));
		jComboBoxYearIni.setPreferredSize(new java.awt.Dimension(80, 20));
		jComboBoxYearIni.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jComboBoxYearIniActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 2;
		jPanel3.add(jComboBoxYearIni, gridBagConstraints);

		jComboBoxMonthFinal.setMinimumSize(new java.awt.Dimension(90, 25));
		jComboBoxMonthFinal.setPreferredSize(new java.awt.Dimension(20, 15));
		jComboBoxMonthFinal.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jComboBoxMonthFinalActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 5;
		jPanel3.add(jComboBoxMonthFinal, gridBagConstraints);

		jComboBoxYearFinal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2004", "2005" }));
		jComboBoxYearFinal.setMinimumSize(new java.awt.Dimension(60, 25));
		jComboBoxYearFinal.setPreferredSize(new java.awt.Dimension(20, 15));
		jComboBoxYearFinal.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jComboBoxYearFinalActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 5;
		jPanel3.add(jComboBoxYearFinal, gridBagConstraints);

		jComboBoxHourFinal.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15",
						"16", "17", "18", "19", "20", "21", "22", "23" }));
		jComboBoxHourFinal.setMinimumSize(new java.awt.Dimension(45, 25));
		jComboBoxHourFinal.setPreferredSize(new java.awt.Dimension(45, 20));
		jComboBoxHourFinal.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jComboBoxHourFinalActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 5;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanel3.add(jComboBoxHourFinal, gridBagConstraints);

		jComboBoxDayFinal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6",
				"7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "22",
				"23", "24", "25", "26", "27", "28", "29", "30", "31" }));
		jComboBoxDayFinal.setMinimumSize(new java.awt.Dimension(45, 25));
		jComboBoxDayFinal.setPreferredSize(new java.awt.Dimension(45, 20));
		jComboBoxDayFinal.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jComboBoxDayFinalActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 5;
		jPanel3.add(jComboBoxDayFinal, gridBagConstraints);

		jLabel3.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.hour"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		jPanel3.add(jLabel3, gridBagConstraints);

		jLabel4.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.day"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		jPanel3.add(jLabel4, gridBagConstraints);

		jLabel5.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.month"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 1;
		jPanel3.add(jLabel5, gridBagConstraints);

		jLabel6.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.year"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 1;
		jPanel3.add(jLabel6, gridBagConstraints);

		jLabel7.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.hour"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 4;
		jPanel3.add(jLabel7, gridBagConstraints);

		jLabel8.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.day"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 4;
		jPanel3.add(jLabel8, gridBagConstraints);

		jLabel9.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.month"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 4;
		jPanel3.add(jLabel9, gridBagConstraints);

		jLabel10.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.year"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 4;
		jPanel3.add(jLabel10, gridBagConstraints);

		jButtonHour.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.nowtime"));
		jButtonHour.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonHourActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 5;
		jPanel3.add(jButtonHour, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		add(jPanel3, gridBagConstraints);

		jPanel4.setLayout(new java.awt.BorderLayout());

		jButtonOK.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.ok"));
		jButtonOK.setEnabled(false);
		jButtonOK.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonOKActionPerformed(evt);
			}
		});

		jPanel5.add(jButtonOK);

		jButtonCancel.setText(ReCResourceBundle.findString("meteo$rec.exp.meteo.lbl.cancel"));
		jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonCancelActionPerformed(evt);
			}
		});

		jPanel5.add(jButtonCancel);

		jPanel4.add(jPanel5, java.awt.BorderLayout.WEST);

		jButtonDefault1.setText(ReCResourceBundle.findString("meteo$rec.exp.dftcfg.meteo.title.1"));
		jButtonDefault1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonDefault1ActionPerformed(evt);
			}
		});

		jPanel6.add(jButtonDefault1);

		jPanel4.add(jPanel6, java.awt.BorderLayout.EAST);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		add(jPanel4, gridBagConstraints);

	}// GEN-END:initComponents

	private void jButtonDefault1ActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonDefault1ActionPerformed
		jComboBoxMonthIni.setSelectedIndex(0);
		jComboBoxDayIni.setSelectedIndex(0);
		jComboBoxHourIni.setSelectedIndex(0);
		jComboBoxYearIni.setSelectedIndex(0);

		jComboBoxMonthFinal.setSelectedIndex(2);
		jComboBoxDayFinal.setSelectedIndex(30);
		jComboBoxHourFinal.setSelectedIndex(23);
		jComboBoxYearFinal.setSelectedIndex(0);

		/*
		 * jCheckBoxTemperature.setSelected(true);
		 * jCheckBoxWindSpeed.setSelected(true);
		 * jCheckBoxLight.setSelected(true);
		 */
	}// GEN-LAST:event_jButtonDefault1ActionPerformed

	private void jComboBoxDayFinalActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jComboBoxDayFinalActionPerformed
		if (!isVisible()) {
			return;
		}

		final int monthFinal = jComboBoxMonthFinal.getSelectedIndex();
		int yearFinal = 2004;
		if (jComboBoxYearFinal.getSelectedItem() != null) {
			yearFinal = Integer.parseInt(jComboBoxYearFinal.getSelectedItem().toString());
		}
		final int dayFinal = jComboBoxDayFinal.getSelectedIndex();
		final int hourFinal = jComboBoxHourFinal.getSelectedIndex();
		final int monthIni = jComboBoxMonthIni.getSelectedIndex();
		int yearIni = 2004;
		if (jComboBoxYearIni.getSelectedItem() != null) {
			yearIni = Integer.parseInt(jComboBoxYearIni.getSelectedItem().toString());
		}
		final int dayIni = jComboBoxDayIni.getSelectedIndex();
		final int hourIni = jComboBoxHourIni.getSelectedIndex();

		if (yearFinal < yearIni) {
			jButtonOK.setEnabled(false);
		} else {
			if (yearFinal > yearIni) {
				jButtonOK.setEnabled(true);
			} else {
				if (monthFinal < monthIni) {
					jButtonOK.setEnabled(false);
				} else {
					if (monthFinal > monthIni) {
						jButtonOK.setEnabled(true);
					} else {
						if (dayFinal < dayIni) {
							jButtonOK.setEnabled(false);
						} else {
							if (dayFinal > dayIni) {
								jButtonOK.setEnabled(true);
							} else {

								if (hourFinal > hourIni) {
									jButtonOK.setEnabled(true);
								} else {
									jButtonOK.setEnabled(false);
								}
							}
						}
					}
				}
			}

		}
	}// GEN-LAST:event_jComboBoxDayFinalActionPerformed

	private void jComboBoxYearFinalActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jComboBoxYearFinalActionPerformed
		if (!isVisible()) {
			return;
		}

		final int monthFinal = jComboBoxMonthFinal.getSelectedIndex();
		int yearFinal = 2004;
		if (jComboBoxYearFinal.getSelectedItem() != null) {
			yearFinal = Integer.parseInt(jComboBoxYearFinal.getSelectedItem().toString());
		}
		final int dayFinal = jComboBoxDayFinal.getSelectedIndex();
		final int hourFinal = jComboBoxHourFinal.getSelectedIndex();
		final int monthIni = jComboBoxMonthIni.getSelectedIndex();
		int yearIni = 2004;
		if (jComboBoxYearIni.getSelectedItem() != null) {
			yearIni = Integer.parseInt(jComboBoxYearIni.getSelectedItem().toString());
		}
		final int dayIni = jComboBoxDayIni.getSelectedIndex();
		final int hourIni = jComboBoxHourIni.getSelectedIndex();

		if (yearFinal < yearIni) {
			jButtonOK.setEnabled(false);
		} else {
			if (yearFinal > yearIni) {
				jButtonOK.setEnabled(true);
			} else {
				if (monthFinal < monthIni) {
					jButtonOK.setEnabled(false);
				} else {
					if (monthFinal > monthIni) {
						jButtonOK.setEnabled(true);
					} else {
						if (dayFinal < dayIni) {
							jButtonOK.setEnabled(false);
						} else {
							if (dayFinal > dayIni) {
								jButtonOK.setEnabled(true);
							} else {

								if (hourFinal > hourIni) {
									jButtonOK.setEnabled(true);
								} else {
									jButtonOK.setEnabled(false);
								}
							}
						}
					}
				}
			}

		}
	}// GEN-LAST:event_jComboBoxYearFinalActionPerformed

	private void jComboBoxYearIniActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jComboBoxYearIniActionPerformed
		if (!isVisible()) {
			return;
		}

		final int monthFinal = jComboBoxMonthFinal.getSelectedIndex();
		int yearFinal = 2004;
		if (jComboBoxYearFinal.getSelectedItem() != null) {
			yearFinal = Integer.parseInt(jComboBoxYearFinal.getSelectedItem().toString());
		}
		final int dayFinal = jComboBoxDayFinal.getSelectedIndex();
		final int hourFinal = jComboBoxHourFinal.getSelectedIndex();
		final int monthIni = jComboBoxMonthIni.getSelectedIndex();
		int yearIni = 2004;
		if (jComboBoxYearIni.getSelectedItem() != null) {
			yearIni = Integer.parseInt(jComboBoxYearIni.getSelectedItem().toString());
		}
		final int dayIni = jComboBoxDayIni.getSelectedIndex();
		final int hourIni = jComboBoxHourIni.getSelectedIndex();

		if (yearFinal < yearIni) {
			jButtonOK.setEnabled(false);
		} else {
			if (yearFinal > yearIni) {
				jButtonOK.setEnabled(true);
			} else {
				if (monthFinal < monthIni) {
					jButtonOK.setEnabled(false);
				} else {
					if (monthFinal > monthIni) {
						jButtonOK.setEnabled(true);
					} else {
						if (dayFinal < dayIni) {
							jButtonOK.setEnabled(false);
						} else {
							if (dayFinal > dayIni) {
								jButtonOK.setEnabled(true);
							} else {

								if (hourFinal > hourIni) {
									jButtonOK.setEnabled(true);
								} else {
									jButtonOK.setEnabled(false);
								}
							}
						}
					}
				}
			}

		}
	}// GEN-LAST:event_jComboBoxYearIniActionPerformed

	private void jComboBoxDayIniActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jComboBoxDayIniActionPerformed
		if (!isVisible()) {
			return;
		}

		final int monthFinal = jComboBoxMonthFinal.getSelectedIndex();
		int yearFinal = 2004;
		if (jComboBoxYearFinal.getSelectedItem() != null) {
			yearFinal = Integer.parseInt(jComboBoxYearFinal.getSelectedItem().toString());
		}
		final int dayFinal = jComboBoxDayFinal.getSelectedIndex();
		final int hourFinal = jComboBoxHourFinal.getSelectedIndex();
		final int monthIni = jComboBoxMonthIni.getSelectedIndex();
		int yearIni = 2004;
		if (jComboBoxYearIni.getSelectedItem() != null) {
			yearIni = Integer.parseInt(jComboBoxYearIni.getSelectedItem().toString());
		}
		final int dayIni = jComboBoxDayIni.getSelectedIndex();
		final int hourIni = jComboBoxHourIni.getSelectedIndex();

		if (yearFinal < yearIni) {
			jButtonOK.setEnabled(false);
		} else {
			if (yearFinal > yearIni) {
				jButtonOK.setEnabled(true);
			} else {
				if (monthFinal < monthIni) {
					jButtonOK.setEnabled(false);
				} else {
					if (monthFinal > monthIni) {
						jButtonOK.setEnabled(true);
					} else {
						if (dayFinal < dayIni) {
							jButtonOK.setEnabled(false);
						} else {
							if (dayFinal > dayIni) {
								jButtonOK.setEnabled(true);
							} else {

								if (hourFinal > hourIni) {
									jButtonOK.setEnabled(true);
								} else {
									jButtonOK.setEnabled(false);
								}
							}
						}
					}
				}
			}

		}
	}// GEN-LAST:event_jComboBoxDayIniActionPerformed

	private void jComboBoxHourIniActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jComboBoxHourIniActionPerformed
		if (!isVisible()) {
			return;
		}

		final int monthFinal = jComboBoxMonthFinal.getSelectedIndex();
		int yearFinal = 2004;
		if (jComboBoxYearFinal.getSelectedItem() != null) {
			yearFinal = Integer.parseInt(jComboBoxYearFinal.getSelectedItem().toString());
		}
		final int dayFinal = jComboBoxDayFinal.getSelectedIndex();
		final int hourFinal = jComboBoxHourFinal.getSelectedIndex();
		final int monthIni = jComboBoxMonthIni.getSelectedIndex();
		int yearIni = 2004;
		if (jComboBoxYearIni.getSelectedItem() != null) {
			yearIni = Integer.parseInt(jComboBoxYearIni.getSelectedItem().toString());
		}
		final int dayIni = jComboBoxDayIni.getSelectedIndex();
		final int hourIni = jComboBoxHourIni.getSelectedIndex();

		if (yearFinal < yearIni) {
			jButtonOK.setEnabled(false);
		} else {
			if (yearFinal > yearIni) {
				jButtonOK.setEnabled(true);
			} else {
				if (monthFinal < monthIni) {
					jButtonOK.setEnabled(false);
				} else {
					if (monthFinal > monthIni) {
						jButtonOK.setEnabled(true);
					} else {
						if (dayFinal < dayIni) {
							jButtonOK.setEnabled(false);
						} else {
							if (dayFinal > dayIni) {
								jButtonOK.setEnabled(true);
							} else {

								if (hourFinal > hourIni) {
									jButtonOK.setEnabled(true);
								} else {
									jButtonOK.setEnabled(false);
								}
							}
						}
					}
				}
			}

		}

	}// GEN-LAST:event_jComboBoxHourIniActionPerformed

	private void jComboBoxHourFinalActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jComboBoxHourFinalActionPerformed
		if (!isVisible()) {
			return;
		}

		final int monthFinal = jComboBoxMonthFinal.getSelectedIndex();
		int yearFinal = 2004;
		if (jComboBoxYearFinal.getSelectedItem() != null) {
			yearFinal = Integer.parseInt(jComboBoxYearFinal.getSelectedItem().toString());
		}
		final int dayFinal = jComboBoxDayFinal.getSelectedIndex();
		final int hourFinal = jComboBoxHourFinal.getSelectedIndex();
		final int monthIni = jComboBoxMonthIni.getSelectedIndex();
		int yearIni = 2004;
		if (jComboBoxYearIni.getSelectedItem() != null) {
			yearIni = Integer.parseInt(jComboBoxYearIni.getSelectedItem().toString());
		}
		final int dayIni = jComboBoxDayIni.getSelectedIndex();
		final int hourIni = jComboBoxHourIni.getSelectedIndex();

		if (yearFinal < yearIni) {
			jButtonOK.setEnabled(false);
		} else {
			if (yearFinal > yearIni) {
				jButtonOK.setEnabled(true);
			} else {
				if (monthFinal < monthIni) {
					jButtonOK.setEnabled(false);
				} else {
					if (monthFinal > monthIni) {
						jButtonOK.setEnabled(true);
					} else {
						if (dayFinal < dayIni) {
							jButtonOK.setEnabled(false);
						} else {
							if (dayFinal > dayIni) {
								jButtonOK.setEnabled(true);
							} else {

								if (hourFinal > hourIni) {
									jButtonOK.setEnabled(true);
								} else {
									jButtonOK.setEnabled(false);
								}
							}
						}
					}
				}
			}

		}

	}// GEN-LAST:event_jComboBoxHourFinalActionPerformed

	private void jButtonHourActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonHourActionPerformed
		final java.util.GregorianCalendar gc = new java.util.GregorianCalendar();

		jComboBoxMonthFinal.setSelectedIndex(gc.get(gc.MONTH));
		jComboBoxDayFinal.setSelectedIndex(gc.get(gc.DAY_OF_MONTH) - 1);
		jComboBoxHourFinal.setSelectedIndex(gc.get(gc.HOUR_OF_DAY));
		jComboBoxYearFinal.setSelectedItem(new String("" + gc.get(gc.YEAR)));

	}// GEN-LAST:event_jButtonHourActionPerformed

	private void jButtonOKActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonOKActionPerformed
		int sensors = 0;

		/*
		 * if(jCheckBoxTemperature.isSelected()) { sensors += 1; }
		 * if(jCheckBoxRain.isSelected()) { sensors += 2; }
		 * if(jCheckBoxWindDir.isSelected()) { sensors += 4; }
		 * if(jCheckBoxWindSpeed.isSelected()) { sensors += 8; }
		 * if(jCheckBoxHumidity.isSelected()) { sensors += 16; }
		 * if(jCheckBoxCond.isSelected()) { sensors += 32; }
		 * if(jCheckBoxLight.isSelected()) { sensors += 64; }
		 * if(jCheckBoxAtmPressure.isSelected()) { sensors += 128; }
		 */

		sensors = 255;
		acqConfig.getSelectedHardwareParameter("Sensor").setParameterValue("" + sensors);

		String res = "";
		if (jRadioButtonDay.isSelected()) {
			res = "Daily";
		} else if (jRadioButtonHour.isSelected()) {
			res = "Hourly";
		} else if (jRadioButtonMonth.isSelected()) {
			res = "Monthly";
		} else if (jRadioButtonYear.isSelected()) {
			res = "Yearly";
		}
		acqConfig.getSelectedHardwareParameter("Resolution").setParameterValue(res);

		acqConfig.getSelectedHardwareParameter("StartDay").setParameterValue(
				jComboBoxDayIni.getSelectedItem().toString());
		acqConfig.getSelectedHardwareParameter("StartHour").setParameterValue(
				jComboBoxHourIni.getSelectedItem().toString());
		acqConfig.getSelectedHardwareParameter("StartMonth").setParameterValue(
				"" + (jComboBoxMonthIni.getSelectedIndex() + 1));
		acqConfig.getSelectedHardwareParameter("StartYear").setParameterValue(
				jComboBoxYearIni.getSelectedItem().toString());
		acqConfig.getSelectedHardwareParameter("EndDay").setParameterValue(
				jComboBoxDayFinal.getSelectedItem().toString());
		acqConfig.getSelectedHardwareParameter("EndHour").setParameterValue(
				jComboBoxHourFinal.getSelectedItem().toString());
		acqConfig.getSelectedHardwareParameter("EndMonth").setParameterValue(
				"" + (jComboBoxMonthFinal.getSelectedIndex() + 1));
		acqConfig.getSelectedHardwareParameter("EndYear").setParameterValue(
				jComboBoxYearFinal.getSelectedItem().toString());

		for (int i = 0; i < acqConfig.getSelectedHardwareParameters().length; i++) {
			System.out.println(acqConfig.getSelectedHardwareParameters(i).getParameterName() + " = "
					+ acqConfig.getSelectedHardwareParameters(i).getParameterValue());
		}
		fireICustomizerListenerDone();
	}// GEN-LAST:event_jButtonOKActionPerformed

	private void jButtonCancelActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonCancelActionPerformed
		fireICustomizerListenerCanceled();
	}// GEN-LAST:event_jButtonCancelActionPerformed

	private void jComboBoxMonthFinalActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jComboBoxMonthFinalActionPerformed
		if (!isVisible()) {
			return;
		}

		final int month = jComboBoxMonthFinal.getSelectedIndex();
		final int year = Integer.parseInt(jComboBoxYearFinal.getSelectedItem().toString());
		fillComboBox(getNumberOfDays(month, year), jComboBoxDayFinal);

		final int monthFinal = jComboBoxMonthFinal.getSelectedIndex();
		final int yearFinal = Integer.parseInt(jComboBoxYearFinal.getSelectedItem().toString());
		final int dayFinal = jComboBoxDayFinal.getSelectedIndex();
		final int hourFinal = jComboBoxHourFinal.getSelectedIndex();
		final int monthIni = jComboBoxMonthIni.getSelectedIndex();
		final int yearIni = Integer.parseInt(jComboBoxYearIni.getSelectedItem().toString());
		final int dayIni = jComboBoxDayIni.getSelectedIndex();
		final int hourIni = jComboBoxHourIni.getSelectedIndex();

		if (yearFinal < yearIni) {
			jButtonOK.setEnabled(false);
		} else {
			if (yearFinal > yearIni) {
				jButtonOK.setEnabled(true);
			} else {
				if (monthFinal < monthIni) {
					jButtonOK.setEnabled(false);
				} else {
					if (monthFinal > monthIni) {
						jButtonOK.setEnabled(true);
					} else {
						if (dayFinal < dayIni) {
							jButtonOK.setEnabled(false);
						} else {
							if (dayFinal > dayIni) {
								jButtonOK.setEnabled(true);
							} else {

								if (hourFinal > hourIni) {
									jButtonOK.setEnabled(true);
								} else {
									jButtonOK.setEnabled(false);
								}
							}
						}
					}
				}
			}

		}

	}// GEN-LAST:event_jComboBoxMonthFinalActionPerformed

	private void jComboBoxMonthIniActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jComboBoxMonthIniActionPerformed
		if (!isVisible()) {
			return;
		}

		final int month = jComboBoxMonthIni.getSelectedIndex();
		final int year = Integer.parseInt(jComboBoxYearIni.getSelectedItem().toString());
		fillComboBox(getNumberOfDays(month, year), jComboBoxDayIni);

		final int monthFinal = jComboBoxMonthFinal.getSelectedIndex();
		final int yearFinal = Integer.parseInt(jComboBoxYearFinal.getSelectedItem().toString());
		final int dayFinal = jComboBoxDayFinal.getSelectedIndex();
		final int hourFinal = jComboBoxHourFinal.getSelectedIndex();
		final int monthIni = jComboBoxMonthIni.getSelectedIndex();
		final int yearIni = Integer.parseInt(jComboBoxYearIni.getSelectedItem().toString());
		final int dayIni = jComboBoxDayIni.getSelectedIndex();
		final int hourIni = jComboBoxHourIni.getSelectedIndex();

		if (yearFinal < yearIni) {
			jButtonOK.setEnabled(false);
		} else {
			if (yearFinal > yearIni) {
				jButtonOK.setEnabled(true);
			} else {
				if (monthFinal < monthIni) {
					jButtonOK.setEnabled(false);
				} else {
					if (monthFinal > monthIni) {
						jButtonOK.setEnabled(true);
					} else {
						if (dayFinal < dayIni) {
							jButtonOK.setEnabled(false);
						} else {
							if (dayFinal > dayIni) {
								jButtonOK.setEnabled(true);
							} else {

								if (hourFinal > hourIni) {
									jButtonOK.setEnabled(true);
								} else {
									jButtonOK.setEnabled(false);
								}
							}
						}
					}
				}
			}

		}
	}// GEN-LAST:event_jComboBoxMonthIniActionPerformed

	public static void main(final String args[]) {
		final javax.swing.JFrame jf = new javax.swing.JFrame();
		jf.getContentPane().add(new MeteoCustomizer());
		jf.pack();
		jf.show();
	}

	private int getNumberOfDays(final int month, final int year) {
		/** January is 0 */
		final int[] m = new int[] { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

		if (month == 1) {
			/** Fazer para as excepÔøΩÔøΩes... */
			if (year % 4 != 0) {
				return m[month];
			} else {
				return (m[month] + 1);
			}
		} else {
			return m[month];
		}
	}

	private void fillComboBox(final int nDays, final javax.swing.JComboBox box) {
		box.removeAllItems();
		box.removeAllItems();
		for (int i = 1; i <= nDays; i++) {
			box.addItem(new Integer(i));
		}
	}

	/** REC impl */
	/** Utility field used by event firing mechanism. */
	private javax.swing.event.EventListenerList listenerList = null;

	/**
	 * Registers ICustomizerListener to receive events.
	 * 
	 * @param listener The listener to register.
	 */
	public synchronized void addICustomizerListener(final ICustomizerListener listener) {
		if (listenerList == null) {
			listenerList = new javax.swing.event.EventListenerList();
		}
		listenerList.add(ICustomizerListener.class, listener);
	}

	/**
	 * Removes ICustomizerListener from the list of listeners.
	 * 
	 * @param listener The listener to remove.
	 */

	public synchronized void removeICustomizerListener(final ICustomizerListener listener) {
		listenerList.remove(ICustomizerListener.class, listener);
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */

	private void fireICustomizerListenerCanceled() {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {
				((ICustomizerListener) listeners[i + 1]).canceled();
			}
		}
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerDone() {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {
				((ICustomizerListener) listeners[i + 1]).done();
			}
		}
	}

	public HardwareAcquisitionConfig getAcquisitionConfig() {
		return acqConfig;
	}

	public javax.swing.JComponent getCustomizerComponent() {
		return this;
	}

	public javax.swing.ImageIcon getCustomizerIcon() {
		return ICON;
	}

	public String getCustomizerTitle() {
		return TITLE;
	}

	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	public void setHardwareAcquisitionConfig(final HardwareAcquisitionConfig acqConfig) {
		System.out.println("Setting hardware acquisition config");
		this.acqConfig = acqConfig;
		if (acqConfig != null) {
			/*
			 * if(acqConfig.getSelectedHardwareParameterValue("Sensor") != null)
			 * { String bin = MathUtils.integerToBinary( new
			 * Integer(acqConfig.getSelectedHardwareParameterValue
			 * ("Sensor")).intValue(), 8);
			 * 
			 * System.out.println(bin);
			 * 
			 * if(bin.charAt(7) == '1') {
			 * jCheckBoxTemperature.setSelected(true); } else {
			 * jCheckBoxTemperature.setSelected(false); }
			 * 
			 * if(bin.charAt(6) == '1') { jCheckBoxRain.setSelected(true); }
			 * else { jCheckBoxRain.setSelected(false); }
			 * 
			 * if(bin.charAt(5) == '1') { jCheckBoxWindDir.setSelected(true); }
			 * else { jCheckBoxWindDir.setSelected(false); }
			 * 
			 * if(bin.charAt(4) == '1') { jCheckBoxWindSpeed.setSelected(true);
			 * } else { jCheckBoxWindSpeed.setSelected(false); }
			 * 
			 * if(bin.charAt(3) == '1') { jCheckBoxHumidity.setSelected(true); }
			 * else { jCheckBoxHumidity.setSelected(false); }
			 * 
			 * if(bin.charAt(2) == '1') { jCheckBoxCond.setSelected(true); }
			 * else { jCheckBoxCond.setSelected(false); }
			 * 
			 * if(bin.charAt(1) == '1') { jCheckBoxLight.setSelected(true); }
			 * else { jCheckBoxLight.setSelected(false); }
			 * 
			 * if(bin.charAt(0) == '1') {
			 * jCheckBoxAtmPressure.setSelected(true); } else {
			 * jCheckBoxAtmPressure.setSelected(false); } }
			 */

			if (acqConfig.getSelectedHardwareParameter("Resolution") != null) {
				final String res = acqConfig.getSelectedHardwareParameter("Resolution").getParameterValue();

				if (res.equalsIgnoreCase("Daily")) {
					jRadioButtonDay.setSelected(true);
				} else if (res.equalsIgnoreCase("Hourly")) {
					jRadioButtonHour.setSelected(true);
				} else if (res.equalsIgnoreCase("Monthly")) {
					jRadioButtonMonth.setSelected(true);
				} else {
					jRadioButtonYear.setSelected(true);
				}
			}

			if (acqConfig.getSelectedHardwareParameter("StartDay") != null) {
				jComboBoxDayIni.setSelectedItem(acqConfig.getSelectedHardwareParameter("StartDay").getParameterValue()
						.trim());
				jComboBoxDayFinal.setSelectedItem(acqConfig.getSelectedHardwareParameter("EndDay").getParameterValue()
						.trim());
				jComboBoxMonthIni.setSelectedItem(acqConfig.getSelectedHardwareParameter("StartMonth")
						.getParameterValue().trim());
				jComboBoxMonthFinal.setSelectedItem(acqConfig.getSelectedHardwareParameter("EndMonth")
						.getParameterValue().trim());
				jComboBoxHourIni.setSelectedItem(acqConfig.getSelectedHardwareParameter("StartHour")
						.getParameterValue().trim());
				jComboBoxHourFinal.setSelectedItem(acqConfig.getSelectedHardwareParameter("EndHour")
						.getParameterValue().trim());
				jComboBoxYearIni.setSelectedItem(acqConfig.getSelectedHardwareParameter("StartYear")
						.getParameterValue().trim());
				jComboBoxYearFinal.setSelectedItem(acqConfig.getSelectedHardwareParameter("EndYear")
						.getParameterValue().trim());
			}
		}
	}

	public void setHardwareInfo(final HardwareInfo hardwareInfo) {
		System.out.println("Setting hardware info");
		this.hardwareInfo = hardwareInfo;

		jComboBoxYearIni.removeAllItems();
		jComboBoxYearFinal.removeAllItems();

		int firstYear = 2004;
		int lastYear = 2100;

		try {
			firstYear = Integer.parseInt(hardwareInfo.getHardwareParameter("StartYear").getParameterSelectionList()[0]);
			lastYear = Integer.parseInt(hardwareInfo.getHardwareParameter("StartYear").getParameterSelectionList()[1]);
		} catch (final NumberFormatException nfe) {
			nfe.printStackTrace();
			return;
		}

		for (int i = firstYear; i <= lastYear; i++) {
			jComboBoxYearIni.addItem(new String("" + i));
			jComboBoxYearFinal.addItem(new String("" + i));
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.JButton jButtonCancel;
	private javax.swing.JButton jButtonDefault1;
	private javax.swing.JButton jButtonHour;
	private javax.swing.JButton jButtonOK;
	private javax.swing.JComboBox jComboBoxDayFinal;
	private javax.swing.JComboBox jComboBoxDayIni;
	private javax.swing.JComboBox jComboBoxHourFinal;
	private javax.swing.JComboBox jComboBoxHourIni;
	private javax.swing.JComboBox jComboBoxMonthFinal;
	private javax.swing.JComboBox jComboBoxMonthIni;
	private javax.swing.JComboBox jComboBoxYearFinal;
	private javax.swing.JComboBox jComboBoxYearIni;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel10;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JRadioButton jRadioButtonDay;
	private javax.swing.JRadioButton jRadioButtonHour;
	private javax.swing.JRadioButton jRadioButtonMonth;
	private javax.swing.JRadioButton jRadioButtonYear;
	// End of variables declaration//GEN-END:variables
}
