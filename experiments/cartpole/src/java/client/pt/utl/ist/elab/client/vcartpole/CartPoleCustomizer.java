/*
 * CartPoleCustomizer.java
 *
 * Created on 17 de Fevereiro de 2005, 5:07
 */

package pt.utl.ist.elab.client.vcartpole;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import pt.utl.ist.elab.client.virtual.guipack.GUtils;
import pt.utl.ist.elab.client.virtual.guipack.InteractiveMenu;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.metadata.HardwareInfo;
import com.linkare.rec.data.synch.Frequency;
import com.linkare.rec.impl.client.customizer.ICustomizerListener;

/**
 *
 * @author  nomead
 */
public class CartPoleCustomizer extends javax.swing.JPanel implements com.linkare.rec.impl.client.customizer.ICustomizer, InteractiveMenu, KeyListener {
    
    private InteractiveCartPole cartPole;
    
    /** Creates new form CartPoleCustomizer */
    public CartPoleCustomizer() {
        initComponents();
        
        java.awt.GridBagConstraints gridBagConstraints;
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight= 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = .7;
        gridBagConstraints.weighty = .7;
        mainPanel.add(cartPole = new InteractiveCartPole(this), gridBagConstraints);
        
        cartPole.addKeyListener(this);
        editSlider.addKeyListener(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        mainEditPanel = new javax.swing.JPanel();
        editPanel = new javax.swing.JPanel();
        editTextField = new javax.swing.JTextField();
        editSlider = new javax.swing.JSlider();
        editLabel = new javax.swing.JLabel();
        commandsPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        defaultButton = new javax.swing.JButton();
        setTabbedPane = new javax.swing.JTabbedPane();
        gPanel = new javax.swing.JPanel();
        gSlider = new javax.swing.JSlider();
        gTextField = new javax.swing.JTextField();
        xMaxPanel = new javax.swing.JPanel();
        xMaxSlider = new javax.swing.JSlider();
        xMaxTextField = new javax.swing.JTextField();
        dragPanel = new javax.swing.JPanel();
        dragCartPanel = new javax.swing.JPanel();
        dragCartSlider = new javax.swing.JSlider();
        dragCartTextField = new javax.swing.JTextField();
        dragPolePanel = new javax.swing.JPanel();
        dragPoleSlider = new javax.swing.JSlider();
        dragPoleTextField = new javax.swing.JTextField();
        tbsNsPanel = new javax.swing.JPanel();
        tbsPanel = new javax.swing.JPanel();
        tbsSlider = new javax.swing.JSlider();
        tbsTextField = new javax.swing.JTextField();
        samplesPanel = new javax.swing.JPanel();
        samplesSlider = new javax.swing.JSlider();
        samplesTextField = new javax.swing.JTextField();
        failurePanel = new javax.swing.JPanel();
        failTimePanel = new javax.swing.JPanel();
        failTimeSlider = new javax.swing.JSlider();
        failNLapsPanel = new javax.swing.JPanel();
        failNLapsSlider = new javax.swing.JSlider();
        failNPanel = new javax.swing.JPanel();
        failNSlider = new javax.swing.JSlider();
        failureActivateCheckBox = new javax.swing.JCheckBox();
        successPanel = new javax.swing.JPanel();
        sucAnglePanel = new javax.swing.JPanel();
        sucAngleSlider = new javax.swing.JSlider();
        sucAngleTextField = new javax.swing.JTextField();
        sucTimePanel = new javax.swing.JPanel();
        sucTimeSlider = new javax.swing.JSlider();
        successActivateCheckBox = new javax.swing.JCheckBox();
        controlTxtPanel = new javax.swing.JPanel();
        kpPanel = new javax.swing.JPanel();
        kpSlider = new javax.swing.JSlider();
        kpTextField = new javax.swing.JTextField();
        kiPanel = new javax.swing.JPanel();
        kiSlider = new javax.swing.JSlider();
        kiTextField = new javax.swing.JTextField();
        kdPanel = new javax.swing.JPanel();
        kdSlider = new javax.swing.JSlider();
        kdTextField = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        mainPanel.setLayout(new java.awt.GridBagLayout());

        mainPanel.setMinimumSize(new java.awt.Dimension(600, 600));
        mainPanel.setPreferredSize(new java.awt.Dimension(600, 600));
        mainEditPanel.setLayout(new java.awt.GridBagLayout());

        mainEditPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.22")));
        mainEditPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.22"));
        mainEditPanel.setMinimumSize(new java.awt.Dimension(350, 100));
        mainEditPanel.setPreferredSize(new java.awt.Dimension(350, 200));
        editPanel.setLayout(new java.awt.GridBagLayout());

        editPanel.setBorder(new javax.swing.border.TitledBorder("Initial Angle (degrees)"));
        editPanel.setToolTipText("Initial Angle (degrees)");
        editPanel.setMinimumSize(new java.awt.Dimension(250, 80));
        editPanel.setPreferredSize(new java.awt.Dimension(250, 80));
        editPanel.setVisible(false);
        editTextField.setColumns(4);
        editTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        editTextField.setText("0");
        editTextField.setToolTipText("Initial Angle (degrees)");
        editTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                editTextFieldFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        editPanel.add(editTextField, gridBagConstraints);

        editSlider.setMaximum(1001);
        editSlider.setMinimum(1);
        editSlider.setMinorTickSpacing(100);
        editSlider.setPaintLabels(true);
        editSlider.setPaintTicks(true);
        editSlider.setToolTipText("");
        editSlider.setDoubleBuffered(true);
        editSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        editSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                editSliderStateChanged(evt);
            }
        });
        editSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                editSliderMouseDragged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        editPanel.add(editSlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainEditPanel.add(editPanel, gridBagConstraints);

        editLabel.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
        editLabel.setForeground(new java.awt.Color(255, 102, 102));
        editLabel.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.23"));
        editLabel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.23"));
        editLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mainEditPanel.add(editLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mainPanel.add(mainEditPanel, gridBagConstraints);

        commandsPanel.setLayout(new java.awt.GridBagLayout());

        commandsPanel.setMinimumSize(new java.awt.Dimension(100, 100));
        commandsPanel.setPreferredSize(new java.awt.Dimension(100, 100));
        okButton.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.ok"));
        okButton.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.ok"));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        commandsPanel.add(okButton, gridBagConstraints);

        cancelButton.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.cancel"));
        cancelButton.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.cancel"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        commandsPanel.add(cancelButton, gridBagConstraints);

        defaultButton.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.dfc"));
        defaultButton.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.dfc"));
        defaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        commandsPanel.add(defaultButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mainPanel.add(commandsPanel, gridBagConstraints);

        setTabbedPane.setMinimumSize(new java.awt.Dimension(100, 100));
        setTabbedPane.setPreferredSize(new java.awt.Dimension(100, 200));
        gPanel.setLayout(new java.awt.GridBagLayout());

        gPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.2")));
        gPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.2"));
        gPanel.setMinimumSize(new java.awt.Dimension(250, 80));
        gPanel.setPreferredSize(new java.awt.Dimension(250, 80));
        gSlider.setMajorTickSpacing(50);
        gSlider.setMaximum(501);
        gSlider.setMinimum(1);
        gSlider.setMinorTickSpacing(25);
        gSlider.setPaintLabels(true);
        gSlider.setPaintTicks(true);
        gSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.2"));
        gSlider.setValue(98);
        gSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        gSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gSliderStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gPanel.add(gSlider, gridBagConstraints);

        gTextField.setColumns(4);
        gTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gTextField.setText("98");
        gTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.2"));
        gTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                gTextFieldFocusLost(evt);
            }
        });

        gPanel.add(gTextField, new java.awt.GridBagConstraints());

        setTabbedPane.addTab("g", null, gPanel, java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.2"));
        gPanel.getAccessibleContext().setAccessibleName("");

        xMaxPanel.setLayout(new java.awt.GridBagLayout());

        xMaxPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.4")));
        xMaxPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.4"));
        xMaxPanel.setMinimumSize(new java.awt.Dimension(250, 80));
        xMaxPanel.setPreferredSize(new java.awt.Dimension(250, 80));
        xMaxSlider.setMajorTickSpacing(50);
        xMaxSlider.setMaximum(601);
        xMaxSlider.setMinimum(1);
        xMaxSlider.setMinorTickSpacing(25);
        xMaxSlider.setPaintLabels(true);
        xMaxSlider.setPaintTicks(true);
        xMaxSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.4"));
        xMaxSlider.setValue(300);
        xMaxSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        xMaxSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                xMaxSliderStateChanged(evt);
            }
        });
        xMaxSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                xMaxSliderMouseDragged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        xMaxPanel.add(xMaxSlider, gridBagConstraints);

        xMaxTextField.setColumns(4);
        xMaxTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        xMaxTextField.setText("300");
        xMaxTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.4"));
        xMaxTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                xMaxTextFieldFocusLost(evt);
            }
        });

        xMaxPanel.add(xMaxTextField, new java.awt.GridBagConstraints());

        setTabbedPane.addTab("xMax", null, xMaxPanel, java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.4"));

        dragPanel.setLayout(new java.awt.GridBagLayout());

        dragCartPanel.setLayout(new java.awt.GridBagLayout());

        dragCartPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.5")));
        dragCartPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.5"));
        dragCartPanel.setMinimumSize(new java.awt.Dimension(250, 80));
        dragCartPanel.setPreferredSize(new java.awt.Dimension(250, 80));
        dragCartSlider.setMajorTickSpacing(5000000);
        dragCartSlider.setMaximum(10000000);
        dragCartSlider.setMinorTickSpacing(500000);
        dragCartSlider.setPaintLabels(true);
        dragCartSlider.setPaintTicks(true);
        dragCartSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.5"));
        dragCartSlider.setValue(5000);
        dragCartSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        dragCartSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dragCartSliderStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dragCartPanel.add(dragCartSlider, gridBagConstraints);

        dragCartTextField.setColumns(4);
        dragCartTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dragCartTextField.setText("5000");
        dragCartTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.5"));
        dragCartTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dragCartTextFieldFocusLost(evt);
            }
        });

        dragCartPanel.add(dragCartTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dragPanel.add(dragCartPanel, gridBagConstraints);

        dragPolePanel.setLayout(new java.awt.GridBagLayout());

        dragPolePanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.6")));
        dragPolePanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.6"));
        dragPolePanel.setMinimumSize(new java.awt.Dimension(250, 80));
        dragPolePanel.setPreferredSize(new java.awt.Dimension(250, 80));
        dragPoleSlider.setMajorTickSpacing(5000000);
        dragPoleSlider.setMaximum(10000000);
        dragPoleSlider.setMinorTickSpacing(500000);
        dragPoleSlider.setPaintLabels(true);
        dragPoleSlider.setPaintTicks(true);
        dragPoleSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.6"));
        dragPoleSlider.setValue(20);
        dragPoleSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        dragPoleSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dragPoleSliderStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dragPolePanel.add(dragPoleSlider, gridBagConstraints);

        dragPoleTextField.setColumns(4);
        dragPoleTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dragPoleTextField.setText("20");
        dragPoleTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.6"));
        dragPoleTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dragPoleTextFieldFocusLost(evt);
            }
        });

        dragPolePanel.add(dragPoleTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dragPanel.add(dragPolePanel, gridBagConstraints);

        setTabbedPane.addTab(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.3"), null, dragPanel, java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.3"));

        tbsNsPanel.setLayout(new java.awt.GridBagLayout());

        tbsPanel.setLayout(new java.awt.GridBagLayout());

        tbsPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.tbs")));
        tbsPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.tbs"));
        tbsPanel.setMinimumSize(new java.awt.Dimension(55, 71));
        tbsPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        tbsSlider.setMajorTickSpacing(100);
        tbsSlider.setMaximum(501);
        tbsSlider.setMinimum(1);
        tbsSlider.setMinorTickSpacing(50);
        tbsSlider.setPaintLabels(true);
        tbsSlider.setPaintTicks(true);
        tbsSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.tbs"));
        tbsSlider.setValue(100);
        tbsSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        tbsSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tbsSliderStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        tbsPanel.add(tbsSlider, gridBagConstraints);

        tbsTextField.setColumns(4);
        tbsTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tbsTextField.setText("100");
        tbsTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.tbs"));
        tbsTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        tbsTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tbsTextFieldFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        tbsPanel.add(tbsTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        tbsNsPanel.add(tbsPanel, gridBagConstraints);

        samplesPanel.setLayout(new java.awt.GridBagLayout());

        samplesPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.samples")));
        samplesPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.samples"));
        samplesPanel.setMinimumSize(new java.awt.Dimension(55, 71));
        samplesPanel.setPreferredSize(new java.awt.Dimension(82, 224));
        samplesSlider.setMajorTickSpacing(200);
        samplesSlider.setMaximum(1001);
        samplesSlider.setMinimum(1);
        samplesSlider.setMinorTickSpacing(50);
        samplesSlider.setPaintLabels(true);
        samplesSlider.setPaintTicks(true);
        samplesSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.samples"));
        samplesSlider.setValue(500);
        samplesSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        samplesSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                samplesSliderStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        samplesPanel.add(samplesSlider, gridBagConstraints);

        samplesTextField.setColumns(4);
        samplesTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        samplesTextField.setText("500");
        samplesTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.samples"));
        samplesTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        samplesTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                samplesTextFieldFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        samplesPanel.add(samplesTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        tbsNsPanel.add(samplesPanel, gridBagConstraints);

        setTabbedPane.addTab(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.24"), null, tbsNsPanel, java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.24"));

        failurePanel.setLayout(new java.awt.GridBagLayout());

        failTimePanel.setLayout(new java.awt.GridBagLayout());

        failTimePanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.28")));
        failTimePanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.28"));
        failTimePanel.setMinimumSize(new java.awt.Dimension(250, 80));
        failTimePanel.setPreferredSize(new java.awt.Dimension(250, 80));
        failTimeSlider.setMajorTickSpacing(20);
        failTimeSlider.setMaximum(101);
        failTimeSlider.setMinimum(1);
        failTimeSlider.setMinorTickSpacing(5);
        failTimeSlider.setPaintLabels(true);
        failTimeSlider.setPaintTicks(true);
        failTimeSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.28"));
        failTimeSlider.setValue(20);
        failTimeSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        failTimePanel.add(failTimeSlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        failurePanel.add(failTimePanel, gridBagConstraints);

        failNLapsPanel.setLayout(new java.awt.GridBagLayout());

        failNLapsPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.29")));
        failNLapsPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.29"));
        failNLapsPanel.setMinimumSize(new java.awt.Dimension(250, 80));
        failNLapsPanel.setPreferredSize(new java.awt.Dimension(250, 80));
        failNLapsSlider.setMajorTickSpacing(1);
        failNLapsSlider.setMaximum(10);
        failNLapsSlider.setMinimum(1);
        failNLapsSlider.setMinorTickSpacing(1);
        failNLapsSlider.setPaintLabels(true);
        failNLapsSlider.setPaintTicks(true);
        failNLapsSlider.setSnapToTicks(true);
        failNLapsSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.29"));
        failNLapsSlider.setValue(5);
        failNLapsSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        failNLapsPanel.add(failNLapsSlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        failurePanel.add(failNLapsPanel, gridBagConstraints);

        failNPanel.setLayout(new java.awt.GridBagLayout());

        failNPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.30")));
        failNPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.30"));
        failNPanel.setMinimumSize(new java.awt.Dimension(250, 80));
        failNPanel.setPreferredSize(new java.awt.Dimension(250, 80));
        failNSlider.setMajorTickSpacing(1);
        failNSlider.setMaximum(10);
        failNSlider.setMinimum(1);
        failNSlider.setMinorTickSpacing(1);
        failNSlider.setPaintLabels(true);
        failNSlider.setPaintTicks(true);
        failNSlider.setSnapToTicks(true);
        failNSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.30"));
        failNSlider.setValue(1);
        failNSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        failNPanel.add(failNSlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        failurePanel.add(failNPanel, gridBagConstraints);

        failureActivateCheckBox.setSelected(true);
        failureActivateCheckBox.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.26"));
        failureActivateCheckBox.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.26"));
        failureActivateCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                failureActivateCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        failurePanel.add(failureActivateCheckBox, gridBagConstraints);

        setTabbedPane.addTab(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.25"), null, failurePanel, java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.25"));

        successPanel.setLayout(new java.awt.GridBagLayout());

        sucAnglePanel.setLayout(new java.awt.GridBagLayout());

        sucAnglePanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.31")));
        sucAnglePanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.31"));
        sucAnglePanel.setMinimumSize(new java.awt.Dimension(250, 80));
        sucAnglePanel.setPreferredSize(new java.awt.Dimension(250, 80));
        editPanel.setVisible(false);
        sucAngleSlider.setMajorTickSpacing(10);
        sucAngleSlider.setMaximum(90);
        sucAngleSlider.setMinorTickSpacing(5);
        sucAngleSlider.setPaintLabels(true);
        sucAngleSlider.setPaintTicks(true);
        sucAngleSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.31"));
        sucAngleSlider.setValue(12);
        sucAngleSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        sucAngleSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sucAngleSliderStateChanged(evt);
            }
        });
        sucAngleSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sucAngleSliderMouseDragged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        sucAnglePanel.add(sucAngleSlider, gridBagConstraints);

        sucAngleTextField.setColumns(4);
        sucAngleTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sucAngleTextField.setText("12");
        sucAngleTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.31"));
        sucAngleTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                sucAngleTextFieldFocusLost(evt);
            }
        });

        sucAnglePanel.add(sucAngleTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        successPanel.add(sucAnglePanel, gridBagConstraints);

        sucTimePanel.setLayout(new java.awt.GridBagLayout());

        sucTimePanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.32")));
        sucTimePanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.32"));
        sucTimePanel.setMinimumSize(new java.awt.Dimension(250, 80));
        sucTimePanel.setPreferredSize(new java.awt.Dimension(250, 80));
        sucTimeSlider.setMajorTickSpacing(10);
        sucTimeSlider.setMaximum(101);
        sucTimeSlider.setMinimum(1);
        sucTimeSlider.setMinorTickSpacing(5);
        sucTimeSlider.setPaintLabels(true);
        sucTimeSlider.setPaintTicks(true);
        sucTimeSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.32"));
        sucTimeSlider.setValue(5);
        sucTimeSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        sucTimePanel.add(sucTimeSlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        successPanel.add(sucTimePanel, gridBagConstraints);

        successActivateCheckBox.setSelected(true);
        successActivateCheckBox.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.26"));
        successActivateCheckBox.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.26"));
        successActivateCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                successActivateCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        successPanel.add(successActivateCheckBox, gridBagConstraints);

        setTabbedPane.addTab(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.27"), null, successPanel, java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.27"));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mainPanel.add(setTabbedPane, gridBagConstraints);

        controlTxtPanel.setLayout(new java.awt.GridBagLayout());

        controlTxtPanel.setMinimumSize(new java.awt.Dimension(400, 50));
        controlTxtPanel.setPreferredSize(new java.awt.Dimension(400, 50));
        kpPanel.setLayout(new java.awt.BorderLayout());

        kpPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.34")));
        kpPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.34"));
        kpSlider.setMajorTickSpacing(5);
        kpSlider.setMaximum(30);
        kpSlider.setMinorTickSpacing(1);
        kpSlider.setPaintLabels(true);
        kpSlider.setPaintTicks(true);
        kpSlider.setSnapToTicks(true);
        kpSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.34"));
        kpSlider.setValue(12);
        kpSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        kpSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                kpSliderStateChanged(evt);
            }
        });

        kpPanel.add(kpSlider, java.awt.BorderLayout.CENTER);

        kpTextField.setColumns(4);
        kpTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        kpTextField.setText("12");
        kpTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.34"));
        kpTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        kpTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                kpTextFieldFocusLost(evt);
            }
        });

        kpPanel.add(kpTextField, java.awt.BorderLayout.NORTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        controlTxtPanel.add(kpPanel, gridBagConstraints);

        kiPanel.setLayout(new java.awt.BorderLayout());

        kiPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.7")));
        kiPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.7"));
        kiSlider.setMajorTickSpacing(5);
        kiSlider.setMaximum(30);
        kiSlider.setMinorTickSpacing(1);
        kiSlider.setPaintLabels(true);
        kiSlider.setPaintTicks(true);
        kiSlider.setSnapToTicks(true);
        kiSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.7"));
        kiSlider.setValue(9);
        kiSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        kiSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                kiSliderStateChanged(evt);
            }
        });

        kiPanel.add(kiSlider, java.awt.BorderLayout.CENTER);

        kiTextField.setColumns(4);
        kiTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        kiTextField.setText("9");
        kiTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.7"));
        kiTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        kiTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                kiTextFieldFocusLost(evt);
            }
        });

        kiPanel.add(kiTextField, java.awt.BorderLayout.NORTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        controlTxtPanel.add(kiPanel, gridBagConstraints);

        kdPanel.setLayout(new java.awt.BorderLayout());

        kdPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.title.8")));
        kdPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.8"));
        kdSlider.setMajorTickSpacing(5);
        kdSlider.setMaximum(30);
        kdSlider.setMinorTickSpacing(1);
        kdSlider.setPaintLabels(true);
        kdSlider.setPaintTicks(true);
        kdSlider.setSnapToTicks(true);
        kdSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.8"));
        kdSlider.setValue(3);
        kdSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        kdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                kdSliderStateChanged(evt);
            }
        });

        kdPanel.add(kdSlider, java.awt.BorderLayout.CENTER);

        kdTextField.setColumns(4);
        kdTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        kdTextField.setText("3");
        kdTextField.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.tip.8"));
        kdTextField.setMinimumSize(new java.awt.Dimension(43, 20));
        kdTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                kdTextFieldFocusLost(evt);
            }
        });

        kdPanel.add(kdTextField, java.awt.BorderLayout.NORTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        controlTxtPanel.add(kdPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mainPanel.add(controlTxtPanel, gridBagConstraints);

        add(mainPanel, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    private void kdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_kdSliderStateChanged
        kdTextField.setText("" + kdSlider.getValue());
    }//GEN-LAST:event_kdSliderStateChanged
    
    private void kiSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_kiSliderStateChanged
        kiTextField.setText("" + kiSlider.getValue());
    }//GEN-LAST:event_kiSliderStateChanged
    
    private void kpSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_kpSliderStateChanged
        kpTextField.setText("" + kpSlider.getValue());
    }//GEN-LAST:event_kpSliderStateChanged
    
    private void kdTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kdTextFieldFocusLost
        try {
            double val = GUtils.validateInput(kdTextField, kdSlider, 1);
        } catch (NumberFormatException e){
            kdTextField.setText(Integer.toString(kdSlider.getValue()));
        }
    }//GEN-LAST:event_kdTextFieldFocusLost
    
    private void kiTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kiTextFieldFocusLost
        try {
            double val = GUtils.validateInput(kiTextField, kiSlider, 1);
        } catch (NumberFormatException e){
            kiTextField.setText(Integer.toString(kiSlider.getValue()));
        }
    }//GEN-LAST:event_kiTextFieldFocusLost
    
    private void kpTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kpTextFieldFocusLost
        try {
            double val = GUtils.validateInput(kpTextField, kpSlider, 1);
        } catch (NumberFormatException e){
            kpTextField.setText(Integer.toString(kpSlider.getValue()));
        }
    }//GEN-LAST:event_kpTextFieldFocusLost
    
    private void failureActivateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_failureActivateCheckBoxActionPerformed
        failNSlider.setEnabled(failureActivateCheckBox.isSelected());
        failNLapsSlider.setEnabled(failureActivateCheckBox.isSelected());
        failTimeSlider.setEnabled(failureActivateCheckBox.isSelected());
    }//GEN-LAST:event_failureActivateCheckBoxActionPerformed
    
    private void successActivateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_successActivateCheckBoxActionPerformed
        sucAngleSlider.setEnabled(successActivateCheckBox.isSelected());
        sucAngleTextField.setEnabled(successActivateCheckBox.isSelected());
        sucTimeSlider.setEnabled(successActivateCheckBox.isSelected());
    }//GEN-LAST:event_successActivateCheckBoxActionPerformed
    
    private void editSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_editSliderStateChanged
        editTextField.setText("" + editSlider.getValue());
    }//GEN-LAST:event_editSliderStateChanged
    
    private void editSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editSliderMouseDragged
        editSet(((javax.swing.border.TitledBorder) editPanel.getBorder()).getTitle(), editSlider.getValue());
    }//GEN-LAST:event_editSliderMouseDragged
    
    private void editTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editTextFieldFocusLost
        try {
            double val = GUtils.validateInput(editTextField, editSlider, 1);
            editSet(((javax.swing.border.TitledBorder) editPanel.getBorder()).getTitle(), val);
        } catch (NumberFormatException e){
            editTextField.setText(Integer.toString(editSlider.getValue()));
        }
    }//GEN-LAST:event_editTextFieldFocusLost
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.exit(0);//A FORM PASSOU-SE
    }//GEN-LAST:event_formWindowClosing
    
    private void sucAngleSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sucAngleSliderMouseDragged
        cartPole.setSuccessAngle(Math.toRadians(sucAngleSlider.getValue()));
    }//GEN-LAST:event_sucAngleSliderMouseDragged
    
    private void xMaxSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_xMaxSliderMouseDragged
        cartPole.setXLimit((double) xMaxSlider.getValue()/10);
    }//GEN-LAST:event_xMaxSliderMouseDragged
    
    private void sucAngleSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sucAngleSliderStateChanged
        sucAngleTextField.setText("" + sucAngleSlider.getValue());
    }//GEN-LAST:event_sucAngleSliderStateChanged
    
    private void sucAngleTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sucAngleTextFieldFocusLost
        try {
            double val = GUtils.validateInput(sucAngleTextField, sucAngleSlider, 1);
            cartPole.setSuccessAngle(Math.toRadians(val));
        } catch (NumberFormatException e){
            sucAngleTextField.setText(Integer.toString(sucAngleSlider.getValue()));
        }
    }//GEN-LAST:event_sucAngleTextFieldFocusLost
    
    private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultButtonActionPerformed
        failureActivateCheckBox.setSelected(true);
        failNLapsSlider.setValue(5);
        failTimeSlider.setValue(20);
        failNSlider.setValue(1);
        
        successActivateCheckBox.setSelected(true);
        sucAngleSlider.setValue(12);
        sucTimeSlider.setValue(5);
        
        cartPole.setXLimit(30);
        cartPole.config(0,Math.toRadians(2),0,0,10,1,.1,0,Math.toRadians(12));
        gSlider.setValue(98);
        dragCartSlider.setValue(5000);
        dragPoleSlider.setValue(20);
        tbsSlider.setValue(100);
        samplesSlider.setValue(500);
        
        kpSlider.setValue(12);
        kiSlider.setValue(9);
        kdSlider.setValue(3);
        
        update();
    }//GEN-LAST:event_defaultButtonActionPerformed
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        fireICustomizerListenerCanceled();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        
        double x = cartPole.getCartX()/10d;
        double xdot = cartPole.getXVecVel()/10d;
        double theta = cartPole.getTheta();
        double thetadot = cartPole.getThetaVecVel()/10d;
        
        double uCart = (double) dragCartSlider.getValue()/1e7d;
        double uPole = (double) dragPoleSlider.getValue()/1e7d;
        
        double mCart = cartPole.getCartMass();
        double mPole = cartPole.getPoleMass();
        
        double g = (double) gSlider.getValue()/10d;
        double poleLength = cartPole.getPoleLength()/10d;
        double xMax = (double)xMaxSlider.getValue()/100d;
        
        double action = cartPole.getAction()/10d;
        int tbs = tbsSlider.getValue();
        int nSamples = samplesSlider.getValue();
        
        int kp = kpSlider.getValue();
        int ki = kiSlider.getValue();
        int kd = kdSlider.getValue();
        
        int failNLaps = failNLapsSlider.getValue();
        int failN = failNSlider.getValue();
        int failTime = failTimeSlider.getValue();
        
        int sucAngle = sucAngleSlider.getValue();
        int sucTime = sucTimeSlider.getValue();
        
        acqConfig.setSelectedFrequency(new Frequency((double) tbsSlider.getValue(),hardwareInfo.getHardwareFrequencies(0).getMinimumFrequency().getMultiplier(),hardwareInfo.getHardwareFrequencies(0).getMinimumFrequency().getFrequencyDefType()));
        acqConfig.setTotalSamples(samplesSlider.getValue()+1);
        
        acqConfig.getSelectedHardwareParameter("xMax").setParameterValue("" + (float) xMax);
        
        acqConfig.getSelectedHardwareParameter("x").setParameterValue("" + (float) x);
        acqConfig.getSelectedHardwareParameter("xdot").setParameterValue("" + (float) xdot);
        acqConfig.getSelectedHardwareParameter("theta").setParameterValue("" + (float) theta);
        acqConfig.getSelectedHardwareParameter("thetadot").setParameterValue("" + (float) thetadot);
        
        acqConfig.getSelectedHardwareParameter("uCart").setParameterValue("" + (float) uCart);
        acqConfig.getSelectedHardwareParameter("uPole").setParameterValue("" + (float) uPole);
        
        acqConfig.getSelectedHardwareParameter("mCart").setParameterValue("" + (float) mCart);
        acqConfig.getSelectedHardwareParameter("mPole").setParameterValue("" + (float) mPole);
        
        acqConfig.getSelectedHardwareParameter("g").setParameterValue("" + (float) g);
        acqConfig.getSelectedHardwareParameter("poleLength").setParameterValue("" + (float) poleLength);
        acqConfig.getSelectedHardwareParameter("action").setParameterValue("" + (float) action);
        
        acqConfig.getSelectedHardwareParameter("kp").setParameterValue("" + kp);
        acqConfig.getSelectedHardwareParameter("ki").setParameterValue("" + ki);
        acqConfig.getSelectedHardwareParameter("kd").setParameterValue("" + kd);
        
        acqConfig.getSelectedHardwareParameter("failActive").setParameterValue("" + (failureActivateCheckBox.isSelected()?1:0));
        acqConfig.getSelectedHardwareParameter("failNLaps").setParameterValue("" + failNLaps);
        acqConfig.getSelectedHardwareParameter("failN").setParameterValue("" + failN);
        acqConfig.getSelectedHardwareParameter("failTime").setParameterValue("" + failTime);
        
        acqConfig.getSelectedHardwareParameter("sucActive").setParameterValue("" + (successActivateCheckBox.isSelected()?1:0));
        acqConfig.getSelectedHardwareParameter("sucAngle").setParameterValue("" + sucAngle);
        acqConfig.getSelectedHardwareParameter("sucTime").setParameterValue("" + sucTime);
        
        for(int i=0; i<acqConfig.getSelectedHardwareParameters().length; i++)
            System.out.println(acqConfig.getSelectedHardwareParameters(i).getParameterName() + " = " + acqConfig.getSelectedHardwareParameters(i).getParameterValue());
        
        fireICustomizerListenerDone();
    }//GEN-LAST:event_okButtonActionPerformed
    
    private void dragPoleTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dragPoleTextFieldFocusLost
        try {
            double val = GUtils.validateInput(dragPoleTextField, dragPoleSlider, 1);
        } catch (NumberFormatException e){
            dragPoleTextField.setText(Integer.toString(dragPoleSlider.getValue()));
        }
    }//GEN-LAST:event_dragPoleTextFieldFocusLost
    
    private void dragPoleSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dragPoleSliderStateChanged
        dragPoleTextField.setText("" + dragPoleSlider.getValue());
    }//GEN-LAST:event_dragPoleSliderStateChanged
    
    private void dragCartTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dragCartTextFieldFocusLost
        try {
            double val = GUtils.validateInput(dragCartTextField, dragCartSlider, 1);
        } catch (NumberFormatException e){
            dragCartTextField.setText(Integer.toString(dragCartSlider.getValue()));
        }
    }//GEN-LAST:event_dragCartTextFieldFocusLost
    
    private void dragCartSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dragCartSliderStateChanged
        dragCartTextField.setText("" + dragCartSlider.getValue());
    }//GEN-LAST:event_dragCartSliderStateChanged
    
    private void samplesTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_samplesTextFieldFocusLost
        try {
            double val = GUtils.validateInput(samplesTextField, samplesSlider, 1);
        } catch (NumberFormatException e){
            samplesTextField.setText(Integer.toString(samplesSlider.getValue()));
        }
    }//GEN-LAST:event_samplesTextFieldFocusLost
    
    private void samplesSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_samplesSliderStateChanged
        samplesTextField.setText("" + samplesSlider.getValue());
    }//GEN-LAST:event_samplesSliderStateChanged
    
    private void tbsTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tbsTextFieldFocusLost
        try {
            double val = GUtils.validateInput(tbsTextField, tbsSlider, 1);
        } catch (NumberFormatException e){
            tbsTextField.setText(Integer.toString(tbsSlider.getValue()));
        }
    }//GEN-LAST:event_tbsTextFieldFocusLost
    
    private void tbsSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tbsSliderStateChanged
        tbsTextField.setText("" + tbsSlider.getValue());
    }//GEN-LAST:event_tbsSliderStateChanged
    
    private void gTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_gTextFieldFocusLost
        try {
            double val = GUtils.validateInput(gTextField, gSlider, 1);
        } catch (NumberFormatException e){
            gTextField.setText(Integer.toString(gSlider.getValue()));
        }
    }//GEN-LAST:event_gTextFieldFocusLost
    
    private void gSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gSliderStateChanged
        gTextField.setText("" + gSlider.getValue());
    }//GEN-LAST:event_gSliderStateChanged
    
    private void xMaxTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_xMaxTextFieldFocusLost
        try {
            double val = GUtils.validateInput(xMaxTextField, xMaxSlider, 1);
            cartPole.setXLimit(val/10);
        } catch (NumberFormatException e){
            xMaxTextField.setText(Integer.toString(xMaxSlider.getValue()));
        }
    }//GEN-LAST:event_xMaxTextFieldFocusLost
    
    private void xMaxSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_xMaxSliderStateChanged
        xMaxTextField.setText("" + xMaxSlider.getValue());
        
        if (((javax.swing.border.TitledBorder) editPanel.getBorder()).getTitle().equalsIgnoreCase("X [dm]")){
            editSlider.setMaximum((int) Math.round(cartPole.getXLimit()));
            editSlider.setMinimum((int) Math.round(-cartPole.getXLimit()));
            editSlider.updateUI();
        }
    }//GEN-LAST:event_xMaxSliderStateChanged
    
    private void editSet(String str, double val){
        if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.1")))
            cartPole.setCartMass(val/100d);
        else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.2")))
            cartPole.setCartX(val);
        else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.3")))
            cartPole.setXVecVel(val);
        else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.4")))
            cartPole.setAction(val);
        else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.5")))
            cartPole.setPoleMass(val/100d);
        else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.6")))
            cartPole.setTheta(Math.toRadians(val));
        else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.7")))
            cartPole.setThetaVecVel(val);
        else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.8")))
            cartPole.setPoleLength(val/10d);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        javax.swing.JFrame test = new javax.swing.JFrame();
        test.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent e) {
                System.exit(0);
            };
        });
        test.getContentPane().add(new CartPoleCustomizer());
        test.pack();
        test.show();
    }
    
    public void update() {
        String str = ((javax.swing.border.TitledBorder) editPanel.getBorder()).getTitle();
        
        if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.2")))
            editSlider.setValue((int) Math.round(cartPole.getCartX()));
        else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.6")))
            editSlider.setValue((int) Math.round(Math.toDegrees(cartPole.getTheta())));
        else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.4")))
            editSlider.setValue((int) Math.round(cartPole.getAction()));
        else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.7")))
            editSlider.setValue((int) Math.round(cartPole.getThetaVecVel()));
        else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.3")))
            editSlider.setValue((int) Math.round(cartPole.getXVecVel()));
        
        xMaxSlider.setValue((int) Math.round(cartPole.getXLimit()*10));
    }
    
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editMenu.title.1")))
            updateEditPanel(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.1"), (int) Math.round(cartPole.getCartMass()*100), new int[]{200,1001,1,100});
        else if (e.getActionCommand().equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editMenu.title.2")))
            updateEditPanel(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.2"), (int) Math.round(cartPole.getCartX()), new int[]{12,(int) Math.round(cartPole.getXLimit()),(int) Math.round(-cartPole.getXLimit()),6});
        else if (e.getActionCommand().equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editMenu.title.3")))
            updateEditPanel(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.3"), (int) Math.round(cartPole.getXVecVel()), new int[]{20,100,-100,10});
        else if (e.getActionCommand().equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editMenu.title.4")))
            updateEditPanel(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.4"), (int) Math.round(cartPole.getAction()), new int[]{20,100,-100,10});
        else if (e.getActionCommand().equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editMenu.title.5")))
            updateEditPanel(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.5"), (int) Math.round(cartPole.getPoleMass()*100), new int[]{200,1001,1,100});
        else if (e.getActionCommand().equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editMenu.title.6")))
            updateEditPanel(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.6"), (int) Math.round(Math.toDegrees(cartPole.getTheta())), new int[]{60,180,-180,30});
        else if (e.getActionCommand().equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editMenu.title.7")))
            updateEditPanel(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.7"), (int) Math.round(cartPole.getThetaVecVel()), new int[]{20,100,-100,10});
        else if (e.getActionCommand().equalsIgnoreCase(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editMenu.title.8")))
            updateEditPanel(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/virtual/client/cartpole/resources/ReCExpCartPole").getString("rec.exp.customizer.editPanel.title.8"), (int) Math.round(cartPole.getPoleLength()*10), new int[]{200,1001,1,100});
        /*
        else if (e.getActionCommand().equalsIgnoreCase("Ok")){
            mainPanel.remove(mainPanel.getComponentCount()-1);
            cartPole.setVisible(true);
            if (stateCheckBoxMenuItem.isSelected() || xCheckBoxMenuItem.isSelected() || thetaCheckBoxMenuItem.isSelected())
                mainTabbedPane.setVisible(true);
            viewMenu.setEnabled(true);
            helpMenu.setEnabled(true);
            fileMenu.setEnabled(true);
        }*/
    }
    
    private void updateEditPanel(String str, int val, int [] sliderConfig){
        editPanel.remove(editSlider);
        editSlider = new javax.swing.JSlider();
        editSlider.setMaximum(sliderConfig[1]);
        editSlider.setMinimum(sliderConfig[2]);
        editSlider.setMinorTickSpacing(sliderConfig[3]);
        editSlider.setMajorTickSpacing(sliderConfig[0]);
        editSlider.setPaintLabels(true);
        editSlider.setPaintTicks(true);
        editSlider.setToolTipText(str);
        editSlider.setValue(val);
        editSlider.setPreferredSize(new java.awt.Dimension(36, 24));
        editSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                editSliderStateChanged(evt);
            }
        });
        editSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                editSliderMouseDragged(evt);
            }
        });
        
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        editPanel.add(editSlider, gridBagConstraints);
        
        editTextField.setText(String.valueOf(val));
        
        //editSlider.setEnabled(true);
        //editTextField.setEnabled(true);
        
        editLabel.setVisible(false);
        ((javax.swing.border.TitledBorder) editPanel.getBorder()).setTitle(str);
        editPanel.setVisible(true);
        editPanel.updateUI();
    }
    
    /*
    private void mainMessage(String str){
        javax.swing.JPanel aboutPanel = new javax.swing.JPanel();
        javax.swing.JButton okButton = new javax.swing.JButton();
        java.awt.TextArea txtArea = new java.awt.TextArea();
     
        okButton.setText("Ok");
        okButton.setToolTipText("Close");
        okButton.addActionListener(this);
     
        txtArea.setEditable(false);
        txtArea.setText(str);
     
        aboutPanel.setLayout(new javax.swing.BoxLayout(aboutPanel, javax.swing.BoxLayout.Y_AXIS));
        aboutPanel.add(txtArea);
        aboutPanel.add(okButton);
     
        mainPanel.add(aboutPanel, new java.awt.GridBagConstraints(0, 0, 2, 1, 0.7, 0.7, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.BOTH, new java.awt.Insets(0,0,0,0), 0, 0));
        cartPole.setVisible(false);
        mainTabbedPane.setVisible(false);
     
        fileMenu.setEnabled(false);
        viewMenu.setEnabled(false);
        helpMenu.setEnabled(false);
    }
     */
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()){
            case KeyEvent.VK_DOWN :
                cartPole.setAction(cartPole.getAction()-2);
                break;
            case KeyEvent.VK_LEFT :
                cartPole.setAction(cartPole.getAction()-1);
                break;
            case KeyEvent.VK_UP :
                cartPole.setAction(cartPole.getAction()+2);
                break;
            case KeyEvent.VK_RIGHT :
                cartPole.setAction(cartPole.getAction()+1);
        }
        update();
    }
    
    public void keyReleased(KeyEvent e) {
    }
    
    public void keyTyped(KeyEvent e) {
    }
    
    
    
    //****************************REC********************************************/
    
    
    /** Utility field used by event firing mechanism. */
    private javax.swing.event.EventListenerList listenerList =  null;
    
    
    /** Registers ICustomizerListener to receive events.
     * @param listener The listener to register.
     */
    public synchronized void addICustomizerListener(ICustomizerListener listener) {
        if (listenerList == null ) {
            listenerList = new javax.swing.event.EventListenerList();
        }
        listenerList.add(ICustomizerListener.class, listener);
    }
    
    /** Removes ICustomizerListener from the list of listeners.
     * @param listener The listener to remove.
     */
    public synchronized void removeICustomizerListener(ICustomizerListener listener) {
        listenerList.remove(ICustomizerListener.class, listener);
    }
    
    /** Notifies all registered listeners about the event.
     *
     * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
     */
    private void fireICustomizerListenerCanceled() {
        if (listenerList == null) return;
        Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==ICustomizerListener.class) {
                ((ICustomizerListener)listeners[i+1]).canceled();
            }
        }
    }
    
    /** Notifies all registered listeners about the event.
     *
     * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
     */
    private void fireICustomizerListenerDone() {
        if (listenerList == null) return;
        Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==ICustomizerListener.class) {
                
                ((ICustomizerListener)listeners[i+1]).done();
            }
        }
    }
    
    
    private HardwareInfo hardwareInfo=null;
    private HardwareAcquisitionConfig acqConfig=null;
    
    public HardwareAcquisitionConfig getAcquisitionConfig() {
        return acqConfig;
    }
    
    public void setHardwareAcquisitionConfig(HardwareAcquisitionConfig acqConfig) {
        this.acqConfig=acqConfig;
        if(acqConfig!=null) {
            dragCartSlider.setValue((int)Math.round(Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("uCart"))*1e7d));
            dragPoleSlider.setValue((int)Math.round(Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("uPole"))*1e7d));

            gSlider.setValue((int) Math.round(Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("g"))*10));
            
            tbsSlider.setValue((int) acqConfig.getSelectedFrequency().getFrequency());
            
            kpSlider.setValue(Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("kp")));
            kiSlider.setValue(Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("ki")));
            kdSlider.setValue(Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("kd")));
            
            failureActivateCheckBox.setSelected((acqConfig.getSelectedHardwareParameterValue("failActive").trim().equals("1")?true:false));
            failNLapsSlider.setValue(Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("failNLaps")));
            failNSlider.setValue(Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("failN")));
            failTimeSlider.setValue(Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("failTime")));
            
            successActivateCheckBox.setSelected((acqConfig.getSelectedHardwareParameterValue("sucActive").trim().equals("1")?true:false));
            sucAngleSlider.setValue(Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("sucAngle")));
            sucTimeSlider.setValue(Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("sucTime")));
            
            
            double mCart = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("mCart"));
            double mPole = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("mPole"));
            
            double x = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("x"))*10;
            double xdot = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("xdot"))*10;
            double theta = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("theta"));
            double thetadot = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("thetadot"))*10;
            double poleLength = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("poleLength"))*10d;
            double action = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("action"))*10d;
            double xMax = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("xMax"))*10d;
            
            cartPole.setXLimit(xMax);
            cartPole.config(x,theta,xdot,thetadot,poleLength,mCart,mPole,action,Math.toRadians(sucAngleSlider.getValue()));
            update();
        }
    }
    
    public void setHardwareInfo(HardwareInfo hardwareInfo) {
        this.hardwareInfo=hardwareInfo;
    }
    
    protected HardwareInfo getHardwareInfo() {
        return this.hardwareInfo;
    }
    
    public javax.swing.JComponent getCustomizerComponent() {
        return this;
    }
    
    public javax.swing.ImageIcon getCustomizerIcon() {
        return new javax.swing.ImageIcon(getClass().getResource("/pt/utl/ist/elab/virtual/client/cartpole/resources/cartpole_iconified.PNG"));
    }
    
    
    public String getCustomizerTitle() {
        return "Cart-Pole Configuration Utility";
    }
    
    public javax.swing.JMenuBar getMenuBar() {
        return null;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel commandsPanel;
    private javax.swing.JPanel controlTxtPanel;
    private javax.swing.JButton defaultButton;
    private javax.swing.JPanel dragCartPanel;
    private javax.swing.JSlider dragCartSlider;
    private javax.swing.JTextField dragCartTextField;
    private javax.swing.JPanel dragPanel;
    private javax.swing.JPanel dragPolePanel;
    private javax.swing.JSlider dragPoleSlider;
    private javax.swing.JTextField dragPoleTextField;
    private javax.swing.JLabel editLabel;
    private javax.swing.JPanel editPanel;
    private javax.swing.JSlider editSlider;
    private javax.swing.JTextField editTextField;
    private javax.swing.JPanel failNLapsPanel;
    private javax.swing.JSlider failNLapsSlider;
    private javax.swing.JPanel failNPanel;
    private javax.swing.JSlider failNSlider;
    private javax.swing.JPanel failTimePanel;
    private javax.swing.JSlider failTimeSlider;
    private javax.swing.JCheckBox failureActivateCheckBox;
    private javax.swing.JPanel failurePanel;
    private javax.swing.JPanel gPanel;
    private javax.swing.JSlider gSlider;
    private javax.swing.JTextField gTextField;
    private javax.swing.JPanel kdPanel;
    private javax.swing.JSlider kdSlider;
    private javax.swing.JTextField kdTextField;
    private javax.swing.JPanel kiPanel;
    private javax.swing.JSlider kiSlider;
    private javax.swing.JTextField kiTextField;
    private javax.swing.JPanel kpPanel;
    private javax.swing.JSlider kpSlider;
    private javax.swing.JTextField kpTextField;
    private javax.swing.JPanel mainEditPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel samplesPanel;
    private javax.swing.JSlider samplesSlider;
    private javax.swing.JTextField samplesTextField;
    private javax.swing.JTabbedPane setTabbedPane;
    private javax.swing.JPanel sucAnglePanel;
    private javax.swing.JSlider sucAngleSlider;
    private javax.swing.JTextField sucAngleTextField;
    private javax.swing.JPanel sucTimePanel;
    private javax.swing.JSlider sucTimeSlider;
    private javax.swing.JCheckBox successActivateCheckBox;
    private javax.swing.JPanel successPanel;
    private javax.swing.JPanel tbsNsPanel;
    private javax.swing.JPanel tbsPanel;
    private javax.swing.JSlider tbsSlider;
    private javax.swing.JTextField tbsTextField;
    private javax.swing.JPanel xMaxPanel;
    private javax.swing.JSlider xMaxSlider;
    private javax.swing.JTextField xMaxTextField;
    // End of variables declaration//GEN-END:variables
    
}
