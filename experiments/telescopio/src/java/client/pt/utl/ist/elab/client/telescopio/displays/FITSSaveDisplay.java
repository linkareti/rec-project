/*
 * FITSDisplay.java
 *
 * Created on February 2, 2005, 4:57 PM
 */

package pt.utl.ist.elab.client.telescopio.displays;

/**
 *
 * @author Andr√© Neto - LEFT - IST
 */

import com.linkare.rec.impl.i18n.ReCResourceBundle;


public class FITSSaveDisplay extends javax.swing.JPanel implements com.linkare.rec.impl.client.experiment.ExpDataDisplay, com.linkare.rec.impl.client.experiment.ExpDataModelListener
{
    
    /** Creates new form FITSDisplay */
    public FITSSaveDisplay()
    {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jButtonDark = new javax.swing.JButton();
        jButtonFlat = new javax.swing.JButton();
        jButtonTelescope = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jButtonDark.setText("Save dark");
        jButtonDark.setEnabled(false);
        jButtonDark.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonDarkActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        jPanel1.add(jButtonDark, gridBagConstraints);

        jButtonFlat.setText("Save flat");
        jButtonFlat.setEnabled(false);
        jButtonFlat.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonFlatActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jButtonFlat, gridBagConstraints);

        jButtonTelescope.setText("Save telescope");
        jButtonTelescope.setEnabled(false);
        jButtonTelescope.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonTelescopeActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jButtonTelescope, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.NORTH);

    }//GEN-END:initComponents
    
    private void jButtonTelescopeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonTelescopeActionPerformed
    {//GEN-HEADEREND:event_jButtonTelescopeActionPerformed
        if(image == -1 || model.getValueAt(image, model.getChannelIndex("Imagem_Telescopio")) == null)
            return;
        
        if(model.getValueAt(image, model.getChannelIndex("Imagem_Telescopio")) != null)
        {
            java.io.File saveFile = showSaveDialog();
            
            if(saveFile != null)
            {
                byte[] imageb = model.getValueAt(image, model.getChannelIndex("Imagem_Telescopio")).getValue().getByteArrayValue().getData();
                saveToFile(saveFile, imageb);
            }
        }
    }//GEN-LAST:event_jButtonTelescopeActionPerformed
    
    private void jButtonFlatActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonFlatActionPerformed
    {//GEN-HEADEREND:event_jButtonFlatActionPerformed
        if(flat == -1 || model.getValueAt(image, model.getChannelIndex("Imagem_Flat")) == null)
            return;
        
        if(model.getValueAt(flat, model.getChannelIndex("Imagem_Flat")) != null)
        {
            java.io.File saveFile = showSaveDialog();
            
            if(saveFile != null)
            {
                byte[] imageb = model.getValueAt(flat, model.getChannelIndex("Imagem_Flat")).getValue().getByteArrayValue().getData();
                saveToFile(saveFile, imageb);
            }
        }
    }//GEN-LAST:event_jButtonFlatActionPerformed
    
    private void jButtonDarkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonDarkActionPerformed
    {//GEN-HEADEREND:event_jButtonDarkActionPerformed
        if(dark == -1 || model.getValueAt(image, model.getChannelIndex("Imagem_DarkFrame")) == null)
            return;
        
        if(model.getValueAt(dark, model.getChannelIndex("Imagem_DarkFrame")) != null)
        {
            java.io.File saveFile = showSaveDialog();
            
            if(saveFile != null)
            {
                byte[] imageb = model.getValueAt(dark, model.getChannelIndex("Imagem_DarkFrame")).getValue().getByteArrayValue().getData();
                saveToFile(saveFile, imageb);
            }
        }
    }//GEN-LAST:event_jButtonDarkActionPerformed
    
    private void saveToFile(java.io.File fName, byte[] data)
    {
        try
        {
            java.io.FileOutputStream fos = new java.io.FileOutputStream(fName);
            fos.write(data);
            fos.close();
        }
        catch(java.io.IOException ioe)
        {
            ioe.printStackTrace();
        }
    }
    
    private java.io.File showSaveDialog()
    {
        javax.swing.JFileChooser saveDialog = new javax.swing.JFileChooser();
        int option = saveDialog.showSaveDialog(null);
        if(option == saveDialog.APPROVE_OPTION)
            return saveDialog.getSelectedFile();
        
        return null;
    }
    
    public void dataModelEnded()
    {
    }
    
    public void dataModelError()
    {
    }
    
    public void dataModelStarted()
    {
    }
    
    public void dataModelStartedNoData()
    {
    }
    
    public void dataModelStoped()
    {
    }
    
    public void dataModelWaiting()
    {
    }
    
    public javax.swing.JComponent getDisplay()
    {
        return this;
    }
    
    public javax.swing.Icon getIcon()
    {
        return new javax.swing.ImageIcon(getClass().getResource("/pt/utl/ist/elab/client/telescopio/resources/telescopio_iconified.png"));
    }
    
    public javax.swing.JMenuBar getMenuBar()
    {
        return null;
    }
    
    public javax.swing.JToolBar getToolBar()
    {
        return null;
    }
    
    private int dark = -1;
    private int image = -1;
    private int flat = -1;
    
    public void newSamples(com.linkare.rec.impl.client.experiment.NewExpDataEvent evt)
    {
        if(model == null)
            return;
        for(int i=evt.getSamplesStartIndex(); i<=evt.getSamplesEndIndex(); i++)
        {
            if(model.getValueAt(i, model.getChannelIndex("Imagem_Telescopio")) != null)
            {
                jButtonTelescope.setEnabled(true);
                image = i;
            }
            if(model.getValueAt(i, model.getChannelIndex("Imagem_DarkFrame")) != null)
            {
                jButtonDark.setEnabled(true);
                dark = i;
            }
            if(model.getValueAt(i, model.getChannelIndex("Imagem_Flat")) != null)
            {
                jButtonFlat.setEnabled(true);
                flat = i;
            }
        }
    }
    
    private com.linkare.rec.impl.client.experiment.ExpDataModel model = null;
    public void setExpDataModel(com.linkare.rec.impl.client.experiment.ExpDataModel model)
    {
        if(this.model!=null)
            model.removeExpDataModelListener(this);
        
        this.model=model;
        
        if(this.model!=null)
            this.model.addExpDataModelListener(this);
    }
    
    public String getName()
    {
        return ReCResourceBundle.findStringOrDefault("ReCExpTelescopio$rec.exp.display.telescopio.title.2", "FITS Save");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDark;
    private javax.swing.JButton jButtonFlat;
    private javax.swing.JButton jButtonTelescope;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    
}
