/*
 * AleatorioCustomizer.java
 *
 * Created on 26 de Junho de 2003, 11:56
 */

package pt.utl.ist.elab.client.aleatorio;

/**
 *
 * @author Pedro Carvalho - LEFT - IST
 */

import java.util.Dictionary;
import java.util.Hashtable;

import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.linkare.rec.impl.client.customizer.AbstractCustomizer;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

public class AleatorioCustomizerComponent extends AbstractCustomizer {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1578264648612435627L;
	// private static int MAX_FREQ = 150;
	// private static int MIN_FREQ = 20;
	private static int MAX_SAMPLES = 20;
	private static int MIN_SAMPLES = 1;
	private static int MAX_SOUND_DURATION = 10000;
	private static int MIN_SOUND_DURATION = 1500;

	/** Creates new form AleatorioCustomizer */
	public AleatorioCustomizerComponent() {
		initComponents();

		initWatchMovieCheckBox();

		initComponentsManual();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		java.awt.GridBagConstraints gridBagConstraints;

		numberOfSamplesPanel = new javax.swing.JPanel();
		numberOfSamplesSlider = new javax.swing.JSlider();
		numberOfSamplesText = new javax.swing.JTextField();
		soundDuration = new javax.swing.JPanel();
		soundDurationSlider = new javax.swing.JSlider();
		soundDurationText = new javax.swing.JTextField();
		watchMovieCheckBox = new javax.swing.JCheckBox();
		buttonsPanel = new javax.swing.JPanel();
		okButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		frequenciesPanel = new javax.swing.JPanel();
		frequency1Slider = new javax.swing.JSlider();
		frequency2Slider = new javax.swing.JSlider();
		frequency1Text = new javax.swing.JTextField();
		frequency2Text = new javax.swing.JTextField();

		setLayout(new java.awt.GridBagLayout());

		setToolTipText("");
		setName("AleatorioCustomizerComponent");
		numberOfSamplesPanel.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"aleatorio$rec.exp.aleatorio.lbl.nsamples", "aleatorio$rec.exp.aleatorio.lbl.nsamples")));
		numberOfSamplesPanel.setName("numberOfSamplesPanel");
		numberOfSamplesSlider.setMajorTickSpacing(4);
		numberOfSamplesSlider.setMaximum(20);
		numberOfSamplesSlider.setMinimum(1);
		numberOfSamplesSlider.setMinorTickSpacing(1);
		numberOfSamplesSlider.setPaintLabels(true);
		numberOfSamplesSlider.setPaintTicks(true);
		numberOfSamplesSlider.setSnapToTicks(true);
		numberOfSamplesSlider.setValue(5);
		numberOfSamplesSlider.setName("numberOfSamplesSlider");
		// Cria a tabela com as labels para a barra do numberOfSamples
		final java.util.Hashtable<Integer, JLabel> hSamples = new java.util.Hashtable<Integer, JLabel>();
		hSamples.put(new Integer(1), new javax.swing.JLabel("1"));
		hSamples.put(new Integer(5), new javax.swing.JLabel("5"));
		hSamples.put(new Integer(10), new javax.swing.JLabel("10"));
		hSamples.put(new Integer(15), new javax.swing.JLabel("15"));
		hSamples.put(new Integer(20), new javax.swing.JLabel("20"));
		// associa a tabela de labels com a barra do numberOfSamples
		numberOfSamplesSlider.setLabelTable(hSamples);
		numberOfSamplesSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			@Override
			public void mouseDragged(final java.awt.event.MouseEvent evt) {
				numberOfSamplesSliderMouseDraggedHandler(evt);
			}
		});

		numberOfSamplesPanel.add(numberOfSamplesSlider);

		numberOfSamplesText.setColumns(2);
		numberOfSamplesText.setText(String.valueOf(numberOfSamplesSlider.getValue()));
		numberOfSamplesText.setMinimumSize(new java.awt.Dimension(60, 20));
		numberOfSamplesText.setName("numberOfSamplesText");
		numberOfSamplesText.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				numberOfSamplesTextActionPerformedHandler(evt);
			}
		});
		numberOfSamplesText.addKeyListener(new java.awt.event.KeyAdapter() {
			@Override
			public void keyTyped(final java.awt.event.KeyEvent evt) {
				numberOfSamplesTextKeyTypedHandler(evt);
			}
		});

		numberOfSamplesPanel.add(numberOfSamplesText);

		add(numberOfSamplesPanel, new java.awt.GridBagConstraints());

		soundDuration.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findStringOrDefault("aleatorio$rec.exp.aleatorio.lbl.sounddur","aleatorio$rec.exp.aleatorio.lbl.sounddur")));
		soundDuration.setName("soundDuration");
		soundDurationSlider.setMajorTickSpacing(1700);
		soundDurationSlider.setMaximum(10000);
		soundDurationSlider.setMinimum(1500);
		soundDurationSlider.setPaintLabels(true);
		soundDurationSlider.setPaintTicks(true);
		soundDurationSlider.setValue(2500);
		soundDurationSlider.setName("soundDurationSlider");
		soundDurationSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			@Override
			public void mouseDragged(final java.awt.event.MouseEvent evt) {
				soundDurationSliderMouseDraggedHandler(evt);
			}
		});

		soundDuration.add(soundDurationSlider);

		soundDurationText.setColumns(3);
		soundDurationText.setText(String.valueOf(soundDurationSlider.getValue()));
		soundDurationText.setName("soundDurationText");
		soundDurationText.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				soundDurationTextActionPerformedHandler(evt);
			}
		});
		soundDurationText.addKeyListener(new java.awt.event.KeyAdapter() {
			@Override
			public void keyTyped(final java.awt.event.KeyEvent evt) {
				soundDurationTextKeyTypedHandler(evt);
			}
		});

		soundDuration.add(soundDurationText);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		add(soundDuration, gridBagConstraints);

		watchMovieCheckBox.setText(ReCResourceBundle.findStringOrDefault("aleatorio$rec.exp.aleatorio.lbl.wmovie",
				"aleatorio$rec.exp.aleatorio.lbl.wmovie"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		add(watchMovieCheckBox, gridBagConstraints);

		okButton.setMnemonic('o');
		okButton.setText(ReCResourceBundle.findStringOrDefault("aleatorio$rec.exp.aleatorio.lbl.ok",
				"aleatorio$rec.exp.aleatorio.lbl.ok"));
		okButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				okButtonActionPerformedHandler(evt);
			}
		});

		buttonsPanel.add(okButton);

		cancelButton.setMnemonic('c');
		cancelButton.setText(ReCResourceBundle.findStringOrDefault("aleatorio$rec.exp.aleatorio.lbl.cancel",
				"aleatorio$rec.exp.aleatorio.lbl.cancel"));
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformedHandler(evt);
			}
		});

		buttonsPanel.add(cancelButton);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.gridwidth = 2;
		add(buttonsPanel, gridBagConstraints);

		frequenciesPanel.setLayout(new java.awt.GridBagLayout());

		frequency1Slider.setMajorTickSpacing(65);
		frequency1Slider.setMaximum(150);
		frequency1Slider.setMinimum(20);
		frequency1Slider.setMinorTickSpacing(10);
		frequency1Slider.setOrientation(SwingConstants.VERTICAL);
		frequency1Slider.setPaintLabels(true);
		frequency1Slider.setPaintTicks(true);
		frequency1Slider.setToolTipText("Select the Initial frequency of the sound wave.");
		frequency1Slider.setValue(48);
		frequency1Slider.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findStringOrDefault("aleatorio$rec.exp.aleatorio.lbl.1freq","aleatorio$rec.exp.aleatorio.lbl.1freq")));
		frequency1Slider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			@Override
			public void mouseDragged(final java.awt.event.MouseEvent evt) {
				frequency1SliderMouseDraggedHandler(evt);
			}
		});

		frequenciesPanel.add(frequency1Slider, new java.awt.GridBagConstraints());

		frequency2Slider.setMajorTickSpacing(65);
		frequency2Slider.setMaximum(150);
		frequency2Slider.setMinimum(20);
		frequency2Slider.setMinorTickSpacing(10);
		frequency2Slider.setOrientation(SwingConstants.VERTICAL);
		frequency2Slider.setPaintLabels(true);
		frequency2Slider.setPaintTicks(true);
		frequency2Slider.setToolTipText("Select the final frequency of the sound wave.");
		frequency2Slider.setValue(32);
		frequency2Slider.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findStringOrDefault("aleatorio$rec.exp.aleatorio.lbl.ffreq","aleatorio$rec.exp.aleatorio.lbl.ffreq")));
		frequency2Slider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			@Override
			public void mouseDragged(final java.awt.event.MouseEvent evt) {
				frequency2SliderMouseDraggedHandler(evt);
			}
		});

		frequenciesPanel.add(frequency2Slider, new java.awt.GridBagConstraints());

		frequency1Text.setColumns(3);
		frequency1Text.setText(String.valueOf(frequency1Slider.getValue()));
		frequency1Text.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				frequency1TextActionPerformedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		frequenciesPanel.add(frequency1Text, gridBagConstraints);

		frequency2Text.setColumns(3);
		frequency2Text.setText(String.valueOf(frequency2Slider.getValue()));
		frequency2Text.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				frequency2TextActionPerformedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		frequenciesPanel.add(frequency2Text, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridheight = 3;
		add(frequenciesPanel, gridBagConstraints);

	}// GEN-END:initComponents

	private void frequency2SliderMouseDraggedHandler(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_frequency2SliderMouseDraggedHandler
		// Add your handling code here:
		frequency2Text.setText(String.valueOf(frequency2Slider.getValue()));
	}// GEN-LAST:event_frequency2SliderMouseDraggedHandler

	private void frequency1SliderMouseDraggedHandler(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_frequency1SliderMouseDraggedHandler
		// Add your handling code here:
		frequency1Text.setText(String.valueOf(frequency1Slider.getValue()));
	}// GEN-LAST:event_frequency1SliderMouseDraggedHandler

	private void soundDurationTextKeyTypedHandler(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_soundDurationTextKeyTypedHandler
		// Add your handling code here:
		if (isNumber(evt) || evt.getKeyCode() == (java.awt.event.KeyEvent.VK_BACK_SPACE)
				|| evt.getKeyCode() == (java.awt.event.KeyEvent.VK_DELETE)) {
			if (soundDurationText.getText() == "") {
				// do nothing
			} else if (Integer.getInteger(soundDurationText.getText()).intValue() < AleatorioCustomizerComponent.MIN_SOUND_DURATION) {
				soundDurationSlider.setValue(AleatorioCustomizerComponent.MIN_SOUND_DURATION);
				soundDurationText.setText(String.valueOf(AleatorioCustomizerComponent.MIN_SOUND_DURATION));
			} else if (Integer.getInteger(soundDurationText.getText()).intValue() > AleatorioCustomizerComponent.MAX_SOUND_DURATION) {
				soundDurationSlider.setValue(AleatorioCustomizerComponent.MAX_SOUND_DURATION);
				soundDurationText.setText(String.valueOf(AleatorioCustomizerComponent.MAX_SOUND_DURATION));
			} else {
				soundDurationSlider.setValue(Integer.getInteger(soundDurationText.getText()).intValue());
			}
		}
	}// GEN-LAST:event_soundDurationTextKeyTypedHandler

	private void soundDurationTextActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_soundDurationTextActionPerformedHandler
		// Add your handling code here:
		if (soundDurationText.getText() == "") {
			// do nothing
		} else {
			try {
				soundDurationSlider.setValue(Integer.parseInt(soundDurationText.getText()));
			} catch (final NumberFormatException nfe) {
			}
		}
	}// GEN-LAST:event_soundDurationTextActionPerformedHandler

	private void soundDurationSliderMouseDraggedHandler(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_soundDurationSliderMouseDraggedHandler
		// Add your handling code here:
		soundDurationText.setText(String.valueOf(soundDurationSlider.getValue()));
	}// GEN-LAST:event_soundDurationSliderMouseDraggedHandler

	private void frequency2TextActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_frequency2TextActionPerformedHandler
		// Add your handling code here:
		final String sValue = frequency2Text.getText();
		try {
			final int nValue = Integer.parseInt(sValue);
			if (nValue > frequency2Slider.getMinimum() && nValue < frequency2Slider.getMaximum()) {
				frequency2Slider.setValue(nValue);
			}
		} catch (final NumberFormatException e) {
		}
	}// GEN-LAST:event_frequency2TextActionPerformedHandler

	private void frequency1TextActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_frequency1TextActionPerformedHandler
		// Add your handling code here:
		final String sValue = frequency1Text.getText();
		try {
			final int nValue = Integer.parseInt(sValue);
			if (nValue > frequency1Slider.getMinimum() && nValue < frequency1Slider.getMaximum()) {
				frequency1Slider.setValue(nValue);
			}
		} catch (final NumberFormatException e) {
		}
	}// GEN-LAST:event_frequency1TextActionPerformedHandler

	private void cancelButtonActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformedHandler
		// Add your handling code here:
		fireICustomizerListenerCanceled();
	}// GEN-LAST:event_cancelButtonActionPerformedHandler

	private void okButtonActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okButtonActionPerformedHandler
		// Add your handling code here:
		getAcquisitionConfig().getSelectedHardwareParameter("NumberOfSamples").setParameterValue(
				"" + numberOfSamplesSlider.getValue());
		// setTotalSamples(numberOfSamplesSlider.getValue()==0?1:numberOfSamplesSlider.getValue());
		getAcquisitionConfig().getSelectedHardwareParameter("SoundWaveDuration").setParameterValue(
				"" + soundDurationSlider.getValue());
		getAcquisitionConfig().getSelectedHardwareParameter("MovieOnOff").setParameterValue(
				"" + (watchMovieCheckBox.isSelected() ? "1" : "0"));
		getAcquisitionConfig().getSelectedHardwareParameter("InitialFrequency").setParameterValue("" + frequency1Slider.getValue());
		getAcquisitionConfig().getSelectedHardwareParameter("FinalFrequency").setParameterValue("" + frequency2Slider.getValue());
		fireICustomizerListenerDone();
	}// GEN-LAST:event_okButtonActionPerformedHandler

	private void numberOfSamplesSliderMouseDraggedHandler(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_numberOfSamplesSliderMouseDraggedHandler
		// Add your handling code here:
		numberOfSamplesText.setText(String.valueOf(numberOfSamplesSlider.getValue()));
	}// GEN-LAST:event_numberOfSamplesSliderMouseDraggedHandler

	private void numberOfSamplesTextKeyTypedHandler(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_numberOfSamplesTextKeyTypedHandler
		// Add your handling code here:
		if (isNumber(evt) || evt.getKeyCode() == (java.awt.event.KeyEvent.VK_BACK_SPACE)
				|| evt.getKeyCode() == (java.awt.event.KeyEvent.VK_DELETE)) {
			if (numberOfSamplesText.getText() == "") {
				// do nothing
			} else if (Integer.getInteger(numberOfSamplesText.getText()).intValue() < AleatorioCustomizerComponent.MIN_SAMPLES) {
				numberOfSamplesSlider.setValue(AleatorioCustomizerComponent.MIN_SAMPLES);
				numberOfSamplesText.setText(String.valueOf(AleatorioCustomizerComponent.MIN_SAMPLES));
			} else if (Integer.getInteger(numberOfSamplesText.getText()).intValue() > AleatorioCustomizerComponent.MAX_SAMPLES) {
				numberOfSamplesSlider.setValue(AleatorioCustomizerComponent.MAX_SAMPLES);
				numberOfSamplesText.setText(String.valueOf(AleatorioCustomizerComponent.MAX_SAMPLES));
			} else {
				numberOfSamplesSlider.setValue(Integer.getInteger(numberOfSamplesText.getText()).intValue());
			}
		}

	}// GEN-LAST:event_numberOfSamplesTextKeyTypedHandler

	private void numberOfSamplesTextActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_numberOfSamplesTextActionPerformedHandler
		// Add your handling code here:
		if (numberOfSamplesText.getText() == "") {
			// do nothing
		} else if (Integer.getInteger(numberOfSamplesText.getText()).intValue() < AleatorioCustomizerComponent.MIN_SAMPLES) {
			numberOfSamplesSlider.setValue(AleatorioCustomizerComponent.MIN_SAMPLES);
			numberOfSamplesText.setText(String.valueOf(AleatorioCustomizerComponent.MIN_SAMPLES));
		} else if (Integer.getInteger(numberOfSamplesText.getText()).intValue() > AleatorioCustomizerComponent.MAX_SAMPLES) {
			numberOfSamplesSlider.setValue(AleatorioCustomizerComponent.MAX_SAMPLES);
			numberOfSamplesText.setText(String.valueOf(AleatorioCustomizerComponent.MAX_SAMPLES));
		} else {
			try {
				numberOfSamplesSlider.setValue(Integer.parseInt(numberOfSamplesText.getText()));
			} catch (final NumberFormatException nfe) {
			}
		}

	}// GEN-LAST:event_numberOfSamplesTextActionPerformedHandler

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel buttonsPanel;
	private javax.swing.JButton cancelButton;
	private javax.swing.JPanel frequenciesPanel;
	private javax.swing.JSlider frequency1Slider;
	private javax.swing.JTextField frequency1Text;
	private javax.swing.JSlider frequency2Slider;
	private javax.swing.JTextField frequency2Text;
	private javax.swing.JPanel numberOfSamplesPanel;
	private javax.swing.JSlider numberOfSamplesSlider;
	private javax.swing.JTextField numberOfSamplesText;
	private javax.swing.JButton okButton;
	private javax.swing.JPanel soundDuration;
	private javax.swing.JSlider soundDurationSlider;
	private javax.swing.JTextField soundDurationText;
	private javax.swing.JCheckBox watchMovieCheckBox;
	// End of variables declaration//GEN-END:variables

	// My Vars
	

	private void initWatchMovieCheckBox() {
		final ChangeListener changeListener = new ChangeListener() {
			@Override
			public void stateChanged(final ChangeEvent changeEvent) {
				final boolean isSelected = watchMovieCheckBox.isSelected();
				if (isSelected) {
					numberOfSamplesText.setText("1");
					numberOfSamplesSlider.setValue(1);
				}
				numberOfSamplesText.setEnabled(!isSelected);
				numberOfSamplesSlider.setEnabled(!isSelected);
			}
		};
		watchMovieCheckBox.addChangeListener(changeListener);
	}

		@Override
	public void setHardwareAcquisitionConfig(final com.linkare.rec.data.config.HardwareAcquisitionConfig acqConfig) {
		super.setHardwareAcquisitionConfig(acqConfig);
		if (acqConfig != null) {
			numberOfSamplesSlider.setValue(acqConfig.getTotalSamples());
			numberOfSamplesText.setText("" + acqConfig.getTotalSamples());

			Integer soundDurationI = new Integer(-1);
			try {
				soundDurationI = Integer.valueOf(acqConfig.getSelectedHardwareParameterValue("SoundWaveDuration"));
			} catch (final Exception e) {
				e.printStackTrace();
			}
			final int soundDuration = soundDurationI.intValue();

			soundDurationSlider.setValue(soundDuration);
			soundDurationText.setText(acqConfig.getSelectedHardwareParameterValue("SoundWaveDuration"));

			final String movieOn = acqConfig.getSelectedHardwareParameter("MovieOnOff").getParameterValue();

			watchMovieCheckBox.setSelected(movieOn == "1");

			Integer frequencyI = new Integer(-1);
			try {
				frequencyI = Integer.valueOf(acqConfig.getSelectedHardwareParameterValue("InitialFrequency"));
				System.out.println("frequencyI: " + frequencyI);
			} catch (final NumberFormatException e) {
				e.printStackTrace();
			}

			frequency1Slider.setValue(frequencyI.intValue());
			frequency1Text.setText(String.valueOf(frequency1Slider.getValue()));

			try {
				frequencyI = Integer.valueOf(acqConfig.getSelectedHardwareParameterValue("FinalFrequency"));
			} catch (final NumberFormatException e) {
				e.printStackTrace();
			}

			frequency2Slider.setValue(frequencyI.intValue());
			frequency2Text.setText(String.valueOf(frequency2Slider.getValue()));
		}

	}

	
	@Override
	public javax.swing.ImageIcon getCustomizerIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/aleatorio/resources/AleatorioIcon.gif"));
	}

	@Override
	public String getCustomizerTitle() {
		return ReCResourceBundle.findStringOrDefault("aleatorio$rec.exp.aleatorio.customizer.title",
				"aleatorio$rec.exp.aleatorio.customizer.title");
	}

	/**
	 * Utilities
	 */

	private boolean isNumber(final java.awt.event.KeyEvent evt) {
		if (evt.getKeyCode() == (java.awt.event.KeyEvent.VK_0)) {
			return true;
		} else if (evt.getKeyCode() == (java.awt.event.KeyEvent.VK_1)) {
			return true;
		} else if (evt.getKeyCode() == (java.awt.event.KeyEvent.VK_2)) {
			return true;
		} else if (evt.getKeyCode() == (java.awt.event.KeyEvent.VK_3)) {
			return true;
		} else if (evt.getKeyCode() == (java.awt.event.KeyEvent.VK_4)) {
			return true;
		} else if (evt.getKeyCode() == (java.awt.event.KeyEvent.VK_5)) {
			return true;
		} else if (evt.getKeyCode() == (java.awt.event.KeyEvent.VK_6)) {
			return true;
		} else if (evt.getKeyCode() == (java.awt.event.KeyEvent.VK_7)) {
			return true;
		} else if (evt.getKeyCode() == (java.awt.event.KeyEvent.VK_8)) {
			return true;
		} else if (evt.getKeyCode() == (java.awt.event.KeyEvent.VK_9)) {
			return true;
		} else {
			return false;
		}
	}

	private void initComponentsManual() {
		final Dictionary<Integer, JLabel> sliderLabels = new Hashtable<Integer, JLabel>();
		sliderLabels.put(new Integer(1500), new JLabel("1500"));
		sliderLabels.put(new Integer(5000), new JLabel("5000"));
		sliderLabels.put(new Integer(10000), new JLabel("10000"));
		soundDurationSlider.setLabelTable(sliderLabels);
	}
}
