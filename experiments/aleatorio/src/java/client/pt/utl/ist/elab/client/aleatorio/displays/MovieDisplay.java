/*
 * MovieDisplay.java
 *
 * Created on 8 de Julho de 2003, 16:23
 */

package pt.utl.ist.elab.client.aleatorio.displays;

import com.linkare.rec.data.acquisition.PhysicsValue;

/**
 * 
 * @author Pedro Carvalho - LEFT - IST
 */
public class MovieDisplay extends javax.swing.JPanel implements com.linkare.rec.impl.client.experiment.ExpDataDisplay,
		com.linkare.rec.impl.client.experiment.ExpDataModelListener {

	private java.awt.Image image = null;
	private static final int FRAME_RATE = 5;

	/** Creates new form MovieDisplay */
	public MovieDisplay() {
		initComponents();
		initMyComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;

		viewingPanel = new javax.swing.JPanel();
		controlsPanel = new javax.swing.JPanel();
		playButton = new javax.swing.JButton();
		repeatButton = new javax.swing.JButton();
		movieSlider = new javax.swing.JSlider();
		pauseButton = new javax.swing.JButton();

		setLayout(new java.awt.BorderLayout());

		viewingPanel.setLayout(new java.awt.BorderLayout());

		viewingPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
		viewingPanel.setPreferredSize(new java.awt.Dimension(640, 480));
		add(viewingPanel, java.awt.BorderLayout.CENTER);

		controlsPanel.setLayout(new java.awt.GridBagLayout());

		controlsPanel.setBorder(new javax.swing.border.TitledBorder("Controls"));
		playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/aleatorio/resources/Play.gif")));
		playButton.setEnabled(false);
		playButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				playButtonActionPerformedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		controlsPanel.add(playButton, gridBagConstraints);

		repeatButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/aleatorio/resources/Undo.gif")));
		repeatButton.setToolTipText("Rewind");
		repeatButton.setEnabled(false);
		repeatButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				repeatActionPerformedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		controlsPanel.add(repeatButton, gridBagConstraints);

		movieSlider.setMaximum(1);
		movieSlider.setPaintLabels(true);
		movieSlider.setPaintTicks(true);
		movieSlider.setValue(0);
		movieSlider.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyReleased(java.awt.event.KeyEvent evt) {
				movieSliderKeyReleasedHandler(evt);
			}
		});

		movieSlider.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseReleased(java.awt.event.MouseEvent evt) {
				movieSliderMouseReleasedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 3;
		controlsPanel.add(movieSlider, gridBagConstraints);

		pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/aleatorio/resources/Pause.gif")));
		pauseButton.setEnabled(false);
		pauseButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				pauseButtonActionPerformedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		controlsPanel.add(pauseButton, gridBagConstraints);

		add(controlsPanel, java.awt.BorderLayout.SOUTH);

	}// GEN-END:initComponents

	private void initMyComponents() {
		viewingPanel.add(imageStore, java.awt.BorderLayout.CENTER);
	}

	private void movieSliderKeyReleasedHandler(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_movieSliderKeyReleasedHandler
		// Add your handling code here:
		movieIndex = movieSlider.getValue();
		if (!play) {
			(new Thread(new PlayLoop())).start();
		}// if
		else
			play = false;
	}// GEN-LAST:event_movieSliderKeyReleasedHandler

	private void movieSliderMouseReleasedHandler(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_movieSliderMouseReleasedHandler
		// Add your handling code here:
		movieIndex = movieSlider.getValue();
		if (!play) {
			(new Thread(new PlayLoop())).start();
		}// if
		else
			play = false;
	}// GEN-LAST:event_movieSliderMouseReleasedHandler

	private void pauseButtonActionPerformedHandler(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_pauseButtonActionPerformedHandler
		// Add your handling code here:
		play = false;
	}// GEN-LAST:event_pauseButtonActionPerformedHandler

	private void repeatActionPerformedHandler(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_repeatActionPerformedHandler
		// Add your handling code here:
		if (play)
			movieIndex = -1;
		else {
			movieIndex = 0;
			movieSlider.setValue(0);
			(new Thread(new PlayLoop())).start();
		}
	}// GEN-LAST:event_repeatActionPerformedHandler

	private void playButtonActionPerformedHandler(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_playButtonActionPerformedHandler
		// Add your handling code here:
		play = true;

		if (movieIndex >= movieCounter)
			movieIndex = 0;
		playButton.setEnabled(false);
		pauseButton.setEnabled(true);
		// playPauseButton.setIcon(pauseIcon);
		(new Thread(new PlayLoop())).start();
	}// GEN-LAST:event_playButtonActionPerformedHandler

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel controlsPanel;
	private javax.swing.JButton playButton;
	private javax.swing.JButton pauseButton;
	private javax.swing.JPanel viewingPanel;
	private javax.swing.JSlider movieSlider;
	private javax.swing.JButton repeatButton;
	// End of variables declaration//GEN-END:variables

	// My Vars
	boolean play = false;
	boolean repeat = false;
	private javax.swing.Icon playIcon = new javax.swing.ImageIcon(getClass().getResource(
			"/pt/utl/ist/elab/client/aleatorio/resources/Play.gif"));
	private javax.swing.Icon pauseIcon = new javax.swing.ImageIcon(getClass().getResource(
			"/pt/utl/ist/elab/client/aleatorio/resources/Pause.gif"));
	private javax.swing.Icon repeatIcon = new javax.swing.ImageIcon(getClass().getResource(
			"/pt/utl/ist/elab/client/aleatorio/resources/Undo.gif"));
	private javax.swing.Icon icon = new javax.swing.ImageIcon(getClass().getResource(
			"/pt/utl/ist/elab/client/aleatorio/resources/Movie_sm.gif"));
	// java.util.Vector movieVector = new java.util.Vector();
	// java.awt.Image[] movieArray = null;
	// java.util.Vector movieBytesArray = null;

	private com.linkare.rec.impl.client.experiment.ExpDataModel model;
	private String name = "Movie";

	private int movieIndex = 0;
	private int movieCounter = 0;
	private int imageWidth = 640;
	private int imageHeight = 480;

	/** Holds value of property moviesIndex. */
	private int moviesIndex;

	private ImageStorePanel imageStore = new ImageStorePanel();

	/**
	 *ExpDataDisplay Implementation
	 */
	public void setExpDataModel(com.linkare.rec.impl.client.experiment.ExpDataModel model) {
		if (this.model != null)
			model.removeExpDataModelListener(this);

		this.model = model;

		if (this.model != null)
			this.model.addExpDataModelListener(this);

	}// setExpDataModel(ExpDataModel model)

	private int moviesNum = 0;

	public javax.swing.JComponent getDisplay() {
		return this;
	}// getDisplay()

	public String getName() {
		return name;
	}// getName()

	public javax.swing.Icon getIcon() {
		return icon;
	}// getIcon()

	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}// getMenuBar()

	public javax.swing.JToolBar getToolBar() {
		return null;
	}// getToolBar()

	/**
	 *ExpDataModelListener implementation
	 */

	private boolean passedNull = true;

	public void newSamples(com.linkare.rec.impl.client.experiment.NewExpDataEvent evt) {
		for (int i = evt.getSamplesStartIndex(); i <= evt.getSamplesEndIndex(); i++) {
			byte[] imageByteArray = null;
			if (model.getValueAt(i, model.getChannelIndex("Movie")) != null) {
				if (moviesFrameCounter == null) {
					moviesFrameCounter = new int[0];
					startFrameCounter = new int[0];
				}

				if (passedNull) {
					int[] tempMoviesFrameCounter = new int[moviesFrameCounter.length + 1];
					System.arraycopy(moviesFrameCounter, 0, tempMoviesFrameCounter, 0, moviesFrameCounter.length);
					tempMoviesFrameCounter[moviesFrameCounter.length] = 1;
					moviesFrameCounter = tempMoviesFrameCounter;

					int[] tempStartFrameCounter = new int[startFrameCounter.length + 1];
					System.arraycopy(startFrameCounter, 0, tempStartFrameCounter, 0, startFrameCounter.length);
					tempStartFrameCounter[startFrameCounter.length] = i;
					startFrameCounter = tempStartFrameCounter;

					passedNull = false;

					moviesNum++;
				} else
					moviesFrameCounter[moviesFrameCounter.length - 1]++;
				// if (movieBytesArray == null)
				// movieBytesArray = new
				// java.util.Vector(model.getTotalSamples());
				// else
				// movieArray = addArrayEntry(movieArray);

				// imageByteArray = model.getValueAt(lastSample,
				// model.getChannelIndex("Movie")).getValue().getByteArrayValue().getData();

				// movieVector[movieCounter]=new
				// (byteArray2Image(model.getValueAt(i,
				// model.getChannelIndex("Movie")).getValue().getByteArrayValue().getData()));
				// movieBytesArray.addElement( model.getValueAt(i,
				// model.getChannelIndex("Movie")).getValue().getByteArrayValue().getData());
				// movieCounter++;
				playButton.setEnabled(true);
				repeatButton.setEnabled(true);
				movieSlider.setMaximum(moviesFrameCounter[moviesFrameCounter.length - 1] - 1);

			}// if
			else {
				passedNull = true;
			}
		}// for

	}// newSamples(NewExpDataEvent evt)

	public void dataModelStoped() {
	}// dataModelStoped()

	public void dataModelRunning() {
	}// dataModelRunning()

	public void headerAvailable(com.linkare.rec.data.config.HardwareAcquisitionConfig header) {
	}// headerAvailable(HardwareAcquisitionConfig header)

	/**
	 *Utilities
	 */

	private java.awt.Image byteArray2Image(byte[] byteArray) {
		java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
		try {
			baos.write(byteArray);
		} catch (java.io.IOException e) {
		}

		java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(baos.toByteArray());

		javax.imageio.stream.MemoryCacheImageInputStream mciis = new javax.imageio.stream.MemoryCacheImageInputStream(
				bais);

		java.awt.image.BufferedImage bImage = null;

		// converting the jpg byteArray into an image
		try {
			bImage = javax.imageio.ImageIO.read(mciis);
		} catch (java.io.IOException e) {
		}

		return (java.awt.Image) bImage;
	}// byteArray2Image(byte[] byteArray)

	class PlayLoop extends Thread {
		public void run() {
			int sleepTime = 1000 / FRAME_RATE;
			// imageStore.setDisplaySize(new
			// java.awt.Dimension((int)viewingPanel.getSize().getWidth(),
			// (int)viewingPanel.getSize().getHeight()));
			viewingPanel.repaint();
			if (play) {
				// System.out.println("number of frames:"+movieArray.length);
				// imageStore.setPreferredSize(new
				// java.awt.Dimension(imageStore.imageSize()[0],
				// imageStore.imageSize()[1]));

				// imageStore.setImage(movieArray[movieIndex]);
				// imageStore.setDisplaySize(imageStore.imageSize());

				for (; movieIndex < getMovieFrameCount() && play; movieIndex++) {
					if (getMovieFrame(movieIndex) != null) {
						movieSlider.setValue(movieIndex);
						// System.out.println("frame "+ movieIndex+": "
						// +movieArray[movieIndex]);
						imageStore.setImage(byteArray2Image(getMovieFrame(movieIndex)));
						// imageStore.repaint();

						synchronized (this) {
							try {
								this.wait(sleepTime);
							} catch (InterruptedException e) {
							}
						}
					}// if
				}// for_movieIndex
				play = false;
			}// if
			else {
				imageStore.setImage(byteArray2Image(getMovieFrame(movieIndex)));
				// viewingPanel.repaint();
			}// else
			playButton.setEnabled(true);
			pauseButton.setEnabled(false);
		}// run
	}

	/*
	 * private java.awt.Image[] addArrayEntry(java.awt.Image[] array) {
	 * java.awt.Image[] returnArray = new java.awt.Image[array.length+1]; for
	 * (int i=0; i < array.length; i++) { returnArray[i] = array[i]; }//for_i
	 * return returnArray; }
	 */

	/**
	 * Getter for property moviesIndex.
	 * 
	 * @return Value of property moviesIndex.
	 */
	public int getMoviesIndex() {
		return this.moviesIndex;
	}

	/**
	 * Setter for property moviesIndex.
	 * 
	 * @param moviesIndex New value of property moviesIndex.
	 */
	public void setMoviesIndex(int moviesIndex) {
		this.moviesIndex = moviesIndex;
	}

	public int getMovieFrameCount() {
		if (getMoviesNum() > 0 && moviesIndex < getMoviesNum()) {
			return moviesFrameCounter[moviesIndex];
		}
		return 0;
	}

	private int[] moviesFrameCounter = null;
	private int[] startFrameCounter = null;

	public int getMoviesNum() {
		return moviesNum;
	}

	public byte[] getMovieFrame(int index) {
		if (moviesIndex > moviesNum)
			return null;
		if (index >= moviesFrameCounter[moviesIndex])
			return null;

		// System.out.println("moviesIndex="+moviesIndex);
		// System.out.println("index="+index);
		// System.out.println("moviesFrameCounter[moviesIndex]="+moviesFrameCounter[moviesIndex]);
		// System.out.println("startFrameCounter[moviesIndex]="+startFrameCounter[moviesIndex]);
		// System.out.println("model.getValueAt(model.getChannelIndex(\"Movie\"),startFrameCounter[moviesIndex]+index)="+model.getValueAt(startFrameCounter[moviesIndex]+index,model.getChannelIndex("Movie")));

		PhysicsValue value = model.getValueAt(startFrameCounter[moviesIndex] + index, model.getChannelIndex("Movie"));
		if (value != null && value.getValue() != null && value.getValue().getByteArrayValue() != null) {
			return value.getValue().getByteArrayValue().getData();
		}
		return null;
		
//		return model.getValueAt(startFrameCounter[moviesIndex] + index, model.getChannelIndex("Movie")).getValue().getByteArrayValue().getData();
	}

	public void dataModelWaiting() {
	}

	public void dataModelStarted() {
	}

	public void dataModelStartedNoData() {
	}

	public void dataModelEnded() {
	}

	public void dataModelError() {
	}

	// addArrayEntry
}
