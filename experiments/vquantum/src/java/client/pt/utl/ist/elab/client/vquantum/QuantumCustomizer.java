/*
 * QuantumCustomizer.java
 *
 * Created on October 27, 2004, 03:35 AM
 */

package pt.utl.ist.elab.client.vquantum;

/*
 * @author  nomead
 *
 */
import java.awt.event.KeyEvent;

import pt.utl.ist.elab.client.virtual.guipack.GUtils;
import pt.utl.ist.elab.client.virtual.guipack.InteractiveMenu;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.synch.Frequency;
import com.linkare.rec.impl.client.customizer.AbstractCustomizer;

public class QuantumCustomizer  extends AbstractCustomizer implements InteractiveMenu {

	/**
	 * 
	 */
	private static final long serialVersionUID = 373877650432564602L;
	private InteractiveQuantum quantum;
	private Potential editPot;

	/** Creates new form QuantumCustomizer */
	public QuantumCustomizer() {
		initComponents();

		java.awt.GridBagConstraints gridBagConstraints;

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridheight = 1;
		gridBagConstraints.gridwidth = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1;
		gridBagConstraints.weighty = 1;
		mainPanel.add(quantum = new InteractiveQuantum(this), gridBagConstraints);
		updateTicks();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;

		btnPanel = new javax.swing.JPanel();
		controlBtnPanel = new javax.swing.JPanel();
		okButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		defConfBtnPanel = new javax.swing.JPanel();
		defaultButton = new javax.swing.JButton();
		jPanel1 = new javax.swing.JPanel();
		mainPanel = new javax.swing.JPanel();
		mainTabbedPane = new javax.swing.JTabbedPane();
		mainEditPanel = new javax.swing.JPanel();
		editLabel = new javax.swing.JLabel();
		vWidthPanel = new javax.swing.JPanel();
		vWidthSlider = new javax.swing.JSlider();
		vWidthTextField = new javax.swing.JTextField();
		vFuncPanel = new javax.swing.JPanel();
		vFuncTextField = new javax.swing.JTextField();
		avgVPanel = new javax.swing.JPanel();
		avgVCheckBox = new javax.swing.JCheckBox();
		addEditVButton = new javax.swing.JButton();
		electronPanel = new javax.swing.JPanel();
		dX0Panel = new javax.swing.JPanel();
		dX0Slider = new javax.swing.JSlider();
		dX0TextField = new javax.swing.JTextField();
		nPanel = new javax.swing.JPanel();
		nSlider = new javax.swing.JSlider();
		nTextField = new javax.swing.JTextField();
		deltaXPanel = new javax.swing.JPanel();
		deltaXSlider = new javax.swing.JSlider();
		deltaXTextField = new javax.swing.JTextField();
		electronPanel2 = new javax.swing.JPanel();
		ePanel = new javax.swing.JPanel();
		eLabelPanel = new javax.swing.JPanel();
		eLabel = new javax.swing.JLabel();
		xEPanel = new javax.swing.JPanel();
		xESlider = new javax.swing.JSlider();
		nEPanel = new javax.swing.JPanel();
		nESlider = new javax.swing.JSlider();
		tolPanel = new javax.swing.JPanel();
		tolSlider = new javax.swing.JSlider();
		tolTextField = new javax.swing.JTextField();
		dtPanel = new javax.swing.JPanel();
		xDtPanel = new javax.swing.JPanel();
		xDtSlider = new javax.swing.JSlider();
		nDtPanel = new javax.swing.JPanel();
		nDtSlider = new javax.swing.JSlider();
		dtLabelPanel = new javax.swing.JPanel();
		dtLabel = new javax.swing.JLabel();
		simulSettingsPanel = new javax.swing.JPanel();
		tbsPanel = new javax.swing.JPanel();
		tbsLabelPanel = new javax.swing.JPanel();
		tbsLabel = new javax.swing.JLabel();
		xTbsPanel = new javax.swing.JPanel();
		xTbsSlider = new javax.swing.JSlider();
		nTbsPanel = new javax.swing.JPanel();
		nTbsSlider = new javax.swing.JSlider();
		samplesPanel = new javax.swing.JPanel();
		samplesSlider = new javax.swing.JSlider();
		samplesTextField = new javax.swing.JTextField();
		compSettingsPanel = new javax.swing.JPanel();
		tunnelingCheckBox = new javax.swing.JCheckBox();
		wraparoundKSCheckBox = new javax.swing.JCheckBox();
		wraparoundXSCheckBox = new javax.swing.JCheckBox();

		setLayout(new java.awt.GridBagLayout());

		setMinimumSize(new java.awt.Dimension(600, 600));
		setPreferredSize(new java.awt.Dimension(600, 600));
		btnPanel.setLayout(new java.awt.GridBagLayout());

		okButton.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages")
				.getString("rec.exp.customizer.title.ok"));
		okButton.setToolTipText(java.util.ResourceBundle
				.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.ok"));
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		controlBtnPanel.add(okButton);

		cancelButton.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages")
				.getString("rec.exp.customizer.title.cancel"));
		cancelButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.cancel"));
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		controlBtnPanel.add(cancelButton);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		btnPanel.add(controlBtnPanel, gridBagConstraints);

		defaultButton.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages")
				.getString("rec.exp.customizer.title.dfc"));
		defaultButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.dfc"));
		defaultButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				defaultButtonActionPerformed(evt);
			}
		});

		defConfBtnPanel.add(defaultButton);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		btnPanel.add(defConfBtnPanel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		btnPanel.add(jPanel1, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		add(btnPanel, gridBagConstraints);

		mainPanel.setLayout(new java.awt.GridBagLayout());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		add(mainPanel, gridBagConstraints);

		mainEditPanel.setLayout(new java.awt.GridBagLayout());

		mainEditPanel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(102, 102, 102), new java.awt.Color(102, 102, 102),
				new java.awt.Color(102, 102, 102), new java.awt.Color(102, 102, 102)));
		mainEditPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.22"));
		mainEditPanel.setMinimumSize(new java.awt.Dimension(300, 100));
		mainEditPanel.setPreferredSize(new java.awt.Dimension(300, 200));
		mainEditPanel.setEnabled(false);
		editLabel.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
		editLabel.setForeground(new java.awt.Color(255, 102, 102));
		editLabel.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages")
				.getString("rec.exp.customizer.title.23"));
		editLabel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.23"));
		editLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.gridheight = 3;
		mainEditPanel.add(editLabel, gridBagConstraints);

		vWidthPanel.setLayout(new java.awt.GridBagLayout());

		vWidthPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.title.29")));
		vWidthPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.29"));
		vWidthPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		vWidthPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		vWidthPanel.setEnabled(false);
		vWidthPanel.setVisible(false);
		vWidthSlider.setMajorTickSpacing(5);
		vWidthSlider.setMaximum(30);
		vWidthSlider.setMinorTickSpacing(1);
		vWidthSlider.setPaintLabels(true);
		vWidthSlider.setPaintTicks(true);
		vWidthSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.29"));
		vWidthSlider.setValue(0);
		vWidthSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		vWidthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				vWidthSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		vWidthPanel.add(vWidthSlider, gridBagConstraints);

		vWidthTextField.setColumns(4);
		vWidthTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		vWidthTextField.setText("0");
		vWidthTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.29"));
		vWidthTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(final java.awt.event.FocusEvent evt) {
				vWidthTextFieldFocusLost(evt);
			}
		});
		vWidthTextField.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(final java.awt.event.KeyEvent evt) {
				vWidthTextFieldKeyPressed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		vWidthPanel.add(vWidthTextField, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		mainEditPanel.add(vWidthPanel, gridBagConstraints);

		vFuncPanel.setLayout(new java.awt.GridBagLayout());

		vFuncPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.title.30")));
		vFuncPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.30"));
		vFuncPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		vFuncPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		vFuncPanel.setVisible(false);
		vFuncTextField.setColumns(4);
		vFuncTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		vFuncTextField.setText("0");
		vFuncTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.30"));
		vFuncTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(final java.awt.event.FocusEvent evt) {
				vFuncTextFieldFocusLost(evt);
			}
		});
		vFuncTextField.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(final java.awt.event.KeyEvent evt) {
				vFuncTextFieldKeyPressed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		vFuncPanel.add(vFuncTextField, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		mainEditPanel.add(vFuncPanel, gridBagConstraints);

		avgVPanel.setLayout(new java.awt.GridBagLayout());

		avgVPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.title.31")));
		avgVPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.31"));
		avgVPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		avgVPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		avgVPanel.setVisible(false);
		avgVCheckBox.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages")
				.getString("rec.exp.customizer.title.31"));
		avgVCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.31"));
		avgVCheckBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				avgVCheckBoxActionPerformed(evt);
			}
		});

		avgVPanel.add(avgVCheckBox, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		mainEditPanel.add(avgVPanel, gridBagConstraints);

		addEditVButton.setText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages")
				.getString("rec.exp.customizer.title.32"));
		addEditVButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.32"));
		addEditVButton.setVisible(false);
		addEditVButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				addEditVButtonActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 2;
		mainEditPanel.add(addEditVButton, gridBagConstraints);

		mainTabbedPane.addTab(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages")
				.getString("rec.exp.customizer.title.34"), mainEditPanel);

		electronPanel.setLayout(new java.awt.GridBagLayout());

		electronPanel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(255, 204, 0), new java.awt.Color(255, 204, 0), new java.awt.Color(255, 204, 0),
				new java.awt.Color(255, 204, 0)));
		dX0Panel.setLayout(new java.awt.GridBagLayout());

		dX0Panel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.title.1")));
		dX0Panel.setToolTipText(java.util.ResourceBundle
				.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.1"));
		dX0Panel.setPreferredSize(new java.awt.Dimension(82, 224));
		dX0Slider.setMajorTickSpacing(250);
		dX0Slider.setMaximum(1010);
		dX0Slider.setMinimum(10);
		dX0Slider.setMinorTickSpacing(50);
		dX0Slider.setPaintLabels(true);
		dX0Slider.setPaintTicks(true);
		dX0Slider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.1"));
		dX0Slider.setValue(200);
		dX0Slider.setMinimumSize(new java.awt.Dimension(200, 47));
		dX0Slider.setRequestFocusEnabled(false);
		dX0Slider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				dX0SliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		dX0Panel.add(dX0Slider, gridBagConstraints);

		dX0TextField.setColumns(4);
		dX0TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		dX0TextField.setText("200");
		dX0TextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.1"));
		dX0TextField.setMinimumSize(new java.awt.Dimension(43, 20));
		dX0TextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(final java.awt.event.FocusEvent evt) {
				dX0TextFieldFocusLost(evt);
			}
		});
		dX0TextField.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(final java.awt.event.KeyEvent evt) {
				dX0TextFieldKeyPressed(evt);
			}
		});

		dX0Panel.add(dX0TextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		electronPanel.add(dX0Panel, gridBagConstraints);

		nPanel.setLayout(new java.awt.GridBagLayout());

		nPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.title.3")));
		nPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages")
				.getString("rec.exp.customizer.tip.3"));
		nPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		nSlider.setMajorTickSpacing(1);
		nSlider.setMaximum(15);
		nSlider.setMinimum(7);
		nSlider.setMinorTickSpacing(1);
		nSlider.setPaintLabels(true);
		nSlider.setPaintTicks(true);
		nSlider.setSnapToTicks(true);
		nSlider.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages")
				.getString("rec.exp.customizer.tip.3"));
		nSlider.setValue(11);
		nSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				nSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		nPanel.add(nSlider, gridBagConstraints);

		nTextField.setColumns(4);
		nTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		nTextField.setText("11");
		nTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.3"));
		nTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		nTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(final java.awt.event.FocusEvent evt) {
				nTextFieldFocusLost(evt);
			}
		});
		nTextField.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(final java.awt.event.KeyEvent evt) {
				nTextFieldKeyPressed(evt);
			}
		});

		nPanel.add(nTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		electronPanel.add(nPanel, gridBagConstraints);

		deltaXPanel.setLayout(new java.awt.GridBagLayout());

		deltaXPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.title.2")));
		deltaXPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.2"));
		deltaXPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		deltaXSlider.setMajorTickSpacing(1);
		deltaXSlider.setMaximum(6);
		deltaXSlider.setMinimum(1);
		deltaXSlider.setMinorTickSpacing(1);
		deltaXSlider.setPaintLabels(true);
		deltaXSlider.setPaintTicks(true);
		deltaXSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.2"));
		deltaXSlider.setValue(2);
		deltaXSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				deltaXSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		deltaXPanel.add(deltaXSlider, gridBagConstraints);

		deltaXTextField.setColumns(4);
		deltaXTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		deltaXTextField.setText("2");
		deltaXTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.2"));
		deltaXTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		deltaXTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(final java.awt.event.FocusEvent evt) {
				deltaXTextFieldFocusLost(evt);
			}
		});
		deltaXTextField.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(final java.awt.event.KeyEvent evt) {
				deltaXTextFieldKeyPressed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		deltaXPanel.add(deltaXTextField, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		electronPanel.add(deltaXPanel, gridBagConstraints);

		mainTabbedPane.addTab(
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages").getString(
						"rec.exp.customizer.title.4"),
				null,
				electronPanel,
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages").getString(
						"rec.exp.customizer.tip.4"));

		electronPanel2.setLayout(new java.awt.GridBagLayout());

		electronPanel2.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(255, 0, 0), new java.awt.Color(255, 0, 0), new java.awt.Color(255, 0, 0),
				new java.awt.Color(255, 0, 0)));
		ePanel.setLayout(new java.awt.GridBagLayout());

		ePanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.title.24")));
		ePanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages")
				.getString("rec.exp.customizer.tip.24"));
		ePanel.setPreferredSize(new java.awt.Dimension(82, 224));
		eLabelPanel.setLayout(new java.awt.BorderLayout());

		eLabel.setText("2e2");
		eLabelPanel.add(eLabel, java.awt.BorderLayout.CENTER);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		ePanel.add(eLabelPanel, gridBagConstraints);

		xEPanel.setBorder(new javax.swing.border.TitledBorder("x"));
		xESlider.setMajorTickSpacing(1);
		xESlider.setMaximum(9);
		xESlider.setMinimum(1);
		xESlider.setMinorTickSpacing(1);
		xESlider.setPaintLabels(true);
		xESlider.setPaintTicks(true);
		xESlider.setSnapToTicks(true);
		xESlider.setToolTipText(java.util.ResourceBundle
				.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.25"));
		xESlider.setValue(2);
		xESlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				xESliderStateChanged(evt);
			}
		});

		xEPanel.add(xESlider);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		ePanel.add(xEPanel, gridBagConstraints);

		nEPanel.setBorder(new javax.swing.border.TitledBorder("n"));
		nESlider.setMajorTickSpacing(1);
		nESlider.setMaximum(7);
		nESlider.setMinorTickSpacing(1);
		nESlider.setPaintLabels(true);
		nESlider.setPaintTicks(true);
		nESlider.setSnapToTicks(true);
		nESlider.setToolTipText(java.util.ResourceBundle
				.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.25"));
		nESlider.setValue(2);
		nESlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				nESliderStateChanged(evt);
			}
		});

		nEPanel.add(nESlider);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		ePanel.add(nEPanel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		electronPanel2.add(ePanel, gridBagConstraints);

		tolPanel.setLayout(new java.awt.GridBagLayout());

		tolPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.title.27")));
		tolPanel.setToolTipText(java.util.ResourceBundle
				.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.27"));
		tolPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		tolSlider.setMajorTickSpacing(1);
		tolSlider.setMaximum(6);
		tolSlider.setMinimum(1);
		tolSlider.setMinorTickSpacing(1);
		tolSlider.setPaintLabels(true);
		tolSlider.setPaintTicks(true);
		tolSlider.setSnapToTicks(true);
		tolSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.27"));
		tolSlider.setValue(5);
		tolSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				tolSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		tolPanel.add(tolSlider, gridBagConstraints);

		tolTextField.setColumns(4);
		tolTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		tolTextField.setText("5");
		tolTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.27"));
		tolTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		tolTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(final java.awt.event.FocusEvent evt) {
				tolTextFieldFocusLost(evt);
			}
		});
		tolTextField.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(final java.awt.event.KeyEvent evt) {
				tolTextFieldKeyPressed(evt);
			}
		});

		tolPanel.add(tolTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		electronPanel2.add(tolPanel, gridBagConstraints);

		dtPanel.setLayout(new java.awt.GridBagLayout());

		dtPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.title.25")));
		dtPanel.setToolTipText(java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages")
				.getString("rec.exp.customizer.tip.25"));
		dtPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		xDtPanel.setBorder(new javax.swing.border.TitledBorder("x"));
		xDtSlider.setMajorTickSpacing(1);
		xDtSlider.setMaximum(9);
		xDtSlider.setMinimum(1);
		xDtSlider.setMinorTickSpacing(1);
		xDtSlider.setPaintLabels(true);
		xDtSlider.setPaintTicks(true);
		xDtSlider.setSnapToTicks(true);
		xDtSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.25"));
		xDtSlider.setValue(5);
		xDtSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				xDtSliderStateChanged(evt);
			}
		});

		xDtPanel.add(xDtSlider);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		dtPanel.add(xDtPanel, gridBagConstraints);

		nDtPanel.setBorder(new javax.swing.border.TitledBorder("n"));
		nDtSlider.setMajorTickSpacing(1);
		nDtSlider.setMaximum(21);
		nDtSlider.setMinimum(17);
		nDtSlider.setMinorTickSpacing(1);
		nDtSlider.setPaintLabels(true);
		nDtSlider.setPaintTicks(true);
		nDtSlider.setSnapToTicks(true);
		nDtSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.25"));
		nDtSlider.setValue(20);
		nDtSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				nDtSliderStateChanged(evt);
			}
		});

		nDtPanel.add(nDtSlider);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		dtPanel.add(nDtPanel, gridBagConstraints);

		dtLabelPanel.setLayout(new java.awt.BorderLayout());

		dtLabel.setText("5e-20");
		dtLabelPanel.add(dtLabel, java.awt.BorderLayout.CENTER);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		dtPanel.add(dtLabelPanel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		electronPanel2.add(dtPanel, gridBagConstraints);

		mainTabbedPane.addTab(
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages").getString(
						"rec.exp.customizer.title.26"),
				null,
				electronPanel2,
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages").getString(
						"rec.exp.customizer.tip.26"));

		simulSettingsPanel.setLayout(new java.awt.GridBagLayout());

		simulSettingsPanel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255), new java.awt.Color(0, 102, 255),
				new java.awt.Color(0, 102, 255)));
		tbsPanel.setLayout(new java.awt.GridBagLayout());

		tbsPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.title.tbs")));
		tbsPanel.setToolTipText(java.util.ResourceBundle
				.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages")
				.getString("rec.exp.customizer.tip.tbs"));
		tbsPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		tbsLabelPanel.setLayout(new java.awt.BorderLayout());

		tbsLabel.setText("5e-18");
		tbsLabelPanel.add(tbsLabel, java.awt.BorderLayout.CENTER);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		tbsPanel.add(tbsLabelPanel, gridBagConstraints);

		xTbsPanel.setBorder(new javax.swing.border.TitledBorder("x"));
		xTbsSlider.setMajorTickSpacing(1);
		xTbsSlider.setMaximum(9);
		xTbsSlider.setMinimum(1);
		xTbsSlider.setMinorTickSpacing(1);
		xTbsSlider.setPaintLabels(true);
		xTbsSlider.setPaintTicks(true);
		xTbsSlider.setSnapToTicks(true);
		xTbsSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.25"));
		xTbsSlider.setValue(5);
		xTbsSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				xTbsSliderStateChanged(evt);
			}
		});

		xTbsPanel.add(xTbsSlider);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		tbsPanel.add(xTbsPanel, gridBagConstraints);

		nTbsPanel.setBorder(new javax.swing.border.TitledBorder("n"));
		nTbsSlider.setMajorTickSpacing(1);
		nTbsSlider.setMaximum(20);
		nTbsSlider.setMinimum(16);
		nTbsSlider.setMinorTickSpacing(1);
		nTbsSlider.setPaintLabels(true);
		nTbsSlider.setPaintTicks(true);
		nTbsSlider.setSnapToTicks(true);
		nTbsSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.25"));
		nTbsSlider.setValue(18);
		nTbsSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				nTbsSliderStateChanged(evt);
			}
		});

		nTbsPanel.add(nTbsSlider);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		tbsPanel.add(nTbsPanel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
		simulSettingsPanel.add(tbsPanel, gridBagConstraints);

		samplesPanel.setLayout(new java.awt.GridBagLayout());

		samplesPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.title.samples")));
		samplesPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.samples"));
		samplesPanel.setMinimumSize(new java.awt.Dimension(82, 83));
		samplesPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		samplesSlider.setMajorTickSpacing(90);
		samplesSlider.setMaximum(950);
		samplesSlider.setMinimum(50);
		samplesSlider.setMinorTickSpacing(15);
		samplesSlider.setPaintLabels(true);
		samplesSlider.setPaintTicks(true);
		samplesSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.samples"));
		samplesSlider.setValue(100);
		samplesSlider.setMinimumSize(new java.awt.Dimension(200, 47));
		samplesSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				samplesSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		samplesPanel.add(samplesSlider, gridBagConstraints);

		samplesTextField.setColumns(4);
		samplesTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		samplesTextField.setText("100");
		samplesTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.samples"));
		samplesTextField.setMinimumSize(new java.awt.Dimension(43, 20));
		samplesTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(final java.awt.event.FocusEvent evt) {
				samplesTextFieldFocusLost(evt);
			}
		});
		samplesTextField.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(final java.awt.event.KeyEvent evt) {
				samplesTextFieldKeyPressed(evt);
			}
		});

		samplesPanel.add(samplesTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		simulSettingsPanel.add(samplesPanel, gridBagConstraints);

		tunnelingCheckBox.setSelected(true);
		tunnelingCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.title.37"));
		tunnelingCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.37"));
		compSettingsPanel.add(tunnelingCheckBox);

		wraparoundKSCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.title.35"));
		wraparoundKSCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.35"));
		compSettingsPanel.add(wraparoundKSCheckBox);

		wraparoundXSCheckBox.setSelected(true);
		wraparoundXSCheckBox.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.title.36"));
		wraparoundXSCheckBox.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vquantum/resources/messages").getString("rec.exp.customizer.tip.36"));
		compSettingsPanel.add(wraparoundXSCheckBox);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		simulSettingsPanel.add(compSettingsPanel, gridBagConstraints);

		mainTabbedPane.addTab(
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages").getString(
						"rec.exp.customizer.title.5"),
				null,
				simulSettingsPanel,
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages").getString(
						"rec.exp.customizer.tip.5"));

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		add(mainTabbedPane, gridBagConstraints);

	}// GEN-END:initComponents

	private void tolTextFieldKeyPressed(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_tolTextFieldKeyPressed
		if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
			tolTextFieldFocusLost(null);
		}
	}// GEN-LAST:event_tolTextFieldKeyPressed

	private void samplesTextFieldKeyPressed(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_samplesTextFieldKeyPressed
		if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
			samplesTextFieldFocusLost(null);
		}
	}// GEN-LAST:event_samplesTextFieldKeyPressed

	private void nTextFieldKeyPressed(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_nTextFieldKeyPressed
		if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
			nTextFieldFocusLost(null);
		}
	}// GEN-LAST:event_nTextFieldKeyPressed

	private void deltaXTextFieldKeyPressed(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_deltaXTextFieldKeyPressed
		if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
			deltaXTextFieldFocusLost(null);
		}
	}// GEN-LAST:event_deltaXTextFieldKeyPressed

	private void dX0TextFieldKeyPressed(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_dX0TextFieldKeyPressed
		if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
			dX0TextFieldFocusLost(null);
		}
	}// GEN-LAST:event_dX0TextFieldKeyPressed

	private void vWidthTextFieldKeyPressed(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_vWidthTextFieldKeyPressed
		if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
			vWidthTextFieldFocusLost(null);
		}
	}// GEN-LAST:event_vWidthTextFieldKeyPressed

	private void avgVCheckBoxActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_avgVCheckBoxActionPerformed
		if (editPot != null) {
			editPot.setMedio(avgVCheckBox.isSelected());
		}
	}// GEN-LAST:event_avgVCheckBoxActionPerformed

	private void nTbsSliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_nTbsSliderStateChanged
		tbsLabel.setText(xTbsSlider.getValue() + "e-" + nTbsSlider.getValue());
	}// GEN-LAST:event_nTbsSliderStateChanged

	private void xTbsSliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_xTbsSliderStateChanged
		tbsLabel.setText(xTbsSlider.getValue() + "e-" + nTbsSlider.getValue());
	}// GEN-LAST:event_xTbsSliderStateChanged

	private void nDtSliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_nDtSliderStateChanged
		dtLabel.setText(xDtSlider.getValue() + "e-" + nDtSlider.getValue());
	}// GEN-LAST:event_nDtSliderStateChanged

	private void xDtSliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_xDtSliderStateChanged
		dtLabel.setText(xDtSlider.getValue() + "e-" + nDtSlider.getValue());
	}// GEN-LAST:event_xDtSliderStateChanged

	private void nESliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_nESliderStateChanged
		eLabel.setText(xESlider.getValue() + "e" + nESlider.getValue());
		quantum.setEnergy(Double.parseDouble(eLabel.getText()));
	}// GEN-LAST:event_nESliderStateChanged

	private void xESliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_xESliderStateChanged
		eLabel.setText(xESlider.getValue() + "e" + nESlider.getValue());
		quantum.setEnergy(Double.parseDouble(eLabel.getText()));
	}// GEN-LAST:event_xESliderStateChanged

	private void vFuncTextFieldFocusLost(final java.awt.event.FocusEvent evt) {// GEN-FIRST:event_vFuncTextFieldFocusLost
		try {
			final String sf = vFuncTextField.getText();

			if (sf.indexOf("=") == -1) {
				editPot.setFunction(sf);
			} else {
				editPot.setFunction(sf.substring(sf.indexOf("=") + 1, sf.length()));
			}

			repaint();
		} catch (final org.opensourcephysics.numerics.ParserException e) {
			vFuncTextField.setText("f(x) = 100");
		}
	}// GEN-LAST:event_vFuncTextFieldFocusLost

	private void vFuncTextFieldKeyPressed(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_vFuncTextFieldKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			try {
				final String sf = vFuncTextField.getText();

				if (sf.indexOf("=") == -1) {
					editPot.setFunction(sf);
				} else {
					editPot.setFunction(sf.substring(sf.indexOf("=") + 1, sf.length()));
				}
				repaint();
			} catch (final org.opensourcephysics.numerics.ParserException e) {
				vFuncTextField.setText("f(x) = 100");
			}
		}
	}// GEN-LAST:event_vFuncTextFieldKeyPressed

	private void removeEdition() {
		quantum.removeFocusOwner();
		editLabel.setVisible(true);
		vWidthPanel.setVisible(false);
		vFuncPanel.setVisible(false);
		avgVPanel.setVisible(false);
		addEditVButton.setVisible(false);
		editPot = null;
	}

	private void addEditVButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addEditVButtonActionPerformed
		quantum.addPotential(editPot.getX(), editPot.getWidth(),
				editPot.getFunction().substring(6, editPot.getFunction().length()), editPot.isEnabled(),
				editPot.isMedio());
		quantum.removePotential(editPot);
		removeEdition();
	}// GEN-LAST:event_addEditVButtonActionPerformed

	private void tolTextFieldFocusLost(final java.awt.event.FocusEvent evt) {// GEN-FIRST:event_tolTextFieldFocusLost
		try {
			final double val = GUtils.validateInput(tolTextField, tolSlider, 1);
		} catch (final NumberFormatException e) {
			tolTextField.setText(Integer.toString(tolSlider.getValue()));
		}
	}// GEN-LAST:event_tolTextFieldFocusLost

	private void tolSliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_tolSliderStateChanged
		tolTextField.setText("" + tolSlider.getValue());
	}// GEN-LAST:event_tolSliderStateChanged

	private void vWidthTextFieldFocusLost(final java.awt.event.FocusEvent evt) {// GEN-FIRST:event_vWidthTextFieldFocusLost
		try {
			final double val = GUtils.validateInput(vWidthTextField, vWidthSlider, 1);
			if (editPot != null) {
				if (!addEditVButton.isVisible()) {
					if (editPot.getWidth() > (double) vWidthSlider.getValue() / 10d) {
						editPot.setWidth((double) vWidthSlider.getValue() / 10d);
					} else if (!quantum.checkBoundsWidth(editPot, (double) vWidthSlider.getValue() / 10d)) {
						editPot.setWidth((double) vWidthSlider.getValue() / 10d);
					}
				} else {
					editPot.setWidth((double) vWidthSlider.getValue() / 10d);
				}
				repaint();
				vWidthSlider.setValue((int) Math.round(editPot.getWidth() * 10));
				vWidthTextField.setText("" + vWidthSlider.getValue());
			}
		} catch (final NumberFormatException e) {
			vWidthTextField.setText(Integer.toString(vWidthSlider.getValue()));
		}
	}// GEN-LAST:event_vWidthTextFieldFocusLost

	private void vWidthSliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_vWidthSliderStateChanged
		if (editPot != null) {
			if (!addEditVButton.isVisible()) {
				if (editPot.getWidth() > (double) vWidthSlider.getValue() / 10d) {
					editPot.setWidth((double) vWidthSlider.getValue() / 10d);
				} else if (!quantum.checkBoundsWidth(editPot, (double) vWidthSlider.getValue() / 10d)) {
					editPot.setWidth((double) vWidthSlider.getValue() / 10d);
				}
			} else {
				editPot.setWidth((double) vWidthSlider.getValue() / 10d);
			}
			repaint();
			vWidthSlider.setValue((int) Math.round(editPot.getWidth() * 10));
			vWidthTextField.setText("" + vWidthSlider.getValue());
		}
	}// GEN-LAST:event_vWidthSliderStateChanged

	private void nTextFieldFocusLost(final java.awt.event.FocusEvent evt) {// GEN-FIRST:event_nTextFieldFocusLost
		try {
			final double val = GUtils.validateInput(nTextField, nSlider, 1);
			quantum.setLog2N((int) Math.round(val));
		} catch (final NumberFormatException e) {
			nTextField.setText(Integer.toString(nSlider.getValue()));
		}
	}// GEN-LAST:event_nTextFieldFocusLost

	private void deltaXTextFieldFocusLost(final java.awt.event.FocusEvent evt) {// GEN-FIRST:event_deltaXTextFieldFocusLost
		try {
			final double val = GUtils.validateInput(deltaXTextField, deltaXSlider, 1);
			quantum.setDeltaX(val);
		} catch (final NumberFormatException e) {
			deltaXTextField.setText(Integer.toString(deltaXSlider.getValue()));
		}
	}// GEN-LAST:event_deltaXTextFieldFocusLost

	private void dX0TextFieldFocusLost(final java.awt.event.FocusEvent evt) {// GEN-FIRST:event_dX0TextFieldFocusLost
		try {
			final double val = GUtils.validateInput(dX0TextField, dX0Slider, 1);
			quantum.setDX0(val);
		} catch (final NumberFormatException e) {
			dX0TextField.setText(Integer.toString(dX0Slider.getValue()));
		}
	}// GEN-LAST:event_dX0TextFieldFocusLost

	private void samplesTextFieldFocusLost(final java.awt.event.FocusEvent evt) {// GEN-FIRST:event_samplesTextFieldFocusLost
		try {
			final double val = GUtils.validateInput(samplesTextField, samplesSlider, 1);
		} catch (final NumberFormatException e) {
			samplesTextField.setText(Integer.toString(samplesSlider.getValue()));
		}
	}// GEN-LAST:event_samplesTextFieldFocusLost

	private void samplesSliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_samplesSliderStateChanged
		samplesTextField.setText("" + samplesSlider.getValue());
	}// GEN-LAST:event_samplesSliderStateChanged

	private void nSliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_nSliderStateChanged
		nTextField.setText("" + nSlider.getValue());
		quantum.setLog2N(nSlider.getValue());
	}// GEN-LAST:event_nSliderStateChanged

	private void deltaXSliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_deltaXSliderStateChanged
		deltaXTextField.setText("" + deltaXSlider.getValue());
		quantum.setDeltaX(deltaXSlider.getValue());
	}// GEN-LAST:event_deltaXSliderStateChanged

	private void dX0SliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_dX0SliderStateChanged
		dX0TextField.setText("" + dX0Slider.getValue());
		quantum.setDX0(dX0Slider.getValue());
		updateTicks();
	}// GEN-LAST:event_dX0SliderStateChanged

	public void actionPerformed(final java.awt.event.ActionEvent e) {
		if (e.getActionCommand().equalsIgnoreCase(
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages").getString(
						"rec.exp.customizer.potentialMenu.title.3"))) {
			if (editPot != null && editPot != quantum.getFocusOwner()
					&& editPot.getHighLightColor() == java.awt.Color.BLUE) {
				quantum.removePotential(editPot);
			}
			if (quantum.getFocusOwner() instanceof Potential) {
				editPot = (Potential) quantum.getFocusOwner();
				updateEditPanel();
			}
		} else if (e.getActionCommand().equalsIgnoreCase(
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages").getString(
						"rec.exp.customizer.potentialMenu.title.2"))) {
			if (editPot != null && editPot != quantum.getFocusOwner()) {
				quantum.removePotential((Potential) quantum.getFocusOwner());
				quantum.setFocusOwner(null);
				repaint();
			} else {
				removeEdition();
			}
		} else if (e.getActionCommand().equalsIgnoreCase(
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vquantum/resources/messages").getString(
						"rec.exp.customizer.potentialMenu.title.1"))) {
			if (editPot == null || editPot.getHighLightColor() != java.awt.Color.BLUE) {
				editPot = new Potential(quantum.getMouseX(), 5, "100", true, false, new java.awt.Color(0, 0, .8f),
						java.awt.Color.BLUE);
				quantum.preAddPotential(editPot);
				updateEditPanel();
			}
		}
	}

	private void updateEditPanel() {
		mainTabbedPane.setSelectedComponent(mainEditPanel);
		editLabel.setVisible(false);
		vWidthPanel.setVisible(true);
		vFuncPanel.setVisible(true);
		avgVPanel.setVisible(true);
		if (editPot.getHighLightColor() == java.awt.Color.BLUE) {
			addEditVButton.setVisible(true);
		}

		vFuncTextField.setText(editPot.getFunction());
		avgVCheckBox.setSelected(editPot.isMedio());

		vWidthPanel.remove(vWidthSlider);
		vWidthSlider = new javax.swing.JSlider();
		vWidthSlider.setMaximum((int) Math.round((double) dX0Slider.getValue() * 5));
		vWidthSlider.setMinimum(1);
		vWidthSlider.setMinorTickSpacing((int) Math.round((double) dX0Slider.getValue() / 20));
		vWidthSlider.setMajorTickSpacing((int) Math.round((double) dX0Slider.getValue() / 2));
		vWidthSlider.setPaintLabels(true);
		vWidthSlider.setPaintTicks(true);
		vWidthSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		vWidthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				vWidthSliderStateChanged(evt);
			}
		});
		final java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		vWidthPanel.add(vWidthSlider, gridBagConstraints);
		vWidthTextField.setText(String.valueOf((int) Math.round(editPot.getWidth() * 10)));
		vWidthSlider.setValue((int) Math.round(editPot.getWidth() * 10));

		editLabel.setVisible(false);
		vWidthPanel.setVisible(true);
		vWidthPanel.updateUI();
	}

	private void updateTicks() {
		if (vWidthPanel.isVisible()) {
			vWidthPanel.remove(vWidthSlider);
			vWidthSlider = new javax.swing.JSlider();
			vWidthSlider.setMaximum((int) Math.round((double) dX0Slider.getValue() * 5));
			vWidthSlider.setMinimum(1);
			vWidthSlider.setMinorTickSpacing((int) Math.round((double) dX0Slider.getValue() / 20));
			vWidthSlider.setMajorTickSpacing((int) Math.round((double) dX0Slider.getValue() / 2));
			vWidthSlider.setPaintLabels(true);
			vWidthSlider.setPaintTicks(true);
			vWidthSlider.setPreferredSize(new java.awt.Dimension(36, 24));
			vWidthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
				public void stateChanged(final javax.swing.event.ChangeEvent evt) {
					vWidthSliderStateChanged(evt);
				}
			});
			final java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
			gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
			gridBagConstraints.gridx = 0;
			gridBagConstraints.gridy = 0;
			gridBagConstraints.weightx = 1.0;
			gridBagConstraints.weighty = 1.0;
			vWidthPanel.add(vWidthSlider, gridBagConstraints);
			vWidthTextField.setText(String.valueOf((int) Math.round(editPot.getWidth() * 10)));
			vWidthSlider.setValue((int) Math.round(editPot.getWidth() * 10));
			vWidthPanel.updateUI();
		}
		deltaXPanel.remove(deltaXSlider);
		deltaXSlider = new javax.swing.JSlider();
		deltaXSlider.setMaximum((int) Math.round((double) dX0Slider.getValue() / 8));
		deltaXSlider.setMinimum(1);
		deltaXSlider.setMinorTickSpacing((int) Math.round((double) dX0Slider.getValue() / 800));
		deltaXSlider.setMajorTickSpacing((int) Math.round((double) dX0Slider.getValue() / 80));
		deltaXSlider.setPaintLabels(true);
		deltaXSlider.setPaintTicks(true);
		deltaXSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		deltaXSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				deltaXSliderStateChanged(evt);
			}
		});
		final java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		deltaXSlider.setValue((int) Math.round(Double.parseDouble(deltaXTextField.getText())));
		deltaXPanel.add(deltaXSlider, gridBagConstraints);
		deltaXPanel.updateUI();
	}

	public void update() {
	}

	private void cancelButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformed
		fireICustomizerListenerCanceled();
	}// GEN-LAST:event_cancelButtonActionPerformed

	private void okButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okButtonActionPerformed

		final double x0 = quantum.getX0();
		final short deltaX = (short) deltaXSlider.getValue();
		final byte log2N = (byte) nSlider.getValue();
		final short dX0 = (short) dX0Slider.getValue();
		final byte logTol = (byte) tolSlider.getValue();

		getAcquisitionConfig().setSelectedFrequency(new Frequency((double) 1, getHardwareInfo().getHardwareFrequencies(0)
				.getMinimumFrequency().getMultiplier(), getHardwareInfo().getHardwareFrequencies(0).getMinimumFrequency()
				.getFrequencyDefType()));
		getAcquisitionConfig().setTotalSamples(samplesSlider.getValue() + quantum.getNumberOfPotentials() * 2 + 2);

		getAcquisitionConfig().getSelectedHardwareParameter("x0").setParameterValue("" + x0);
		getAcquisitionConfig().getSelectedHardwareParameter("deltaX").setParameterValue("" + deltaX);
		getAcquisitionConfig().getSelectedHardwareParameter("log2N").setParameterValue("" + log2N);
		getAcquisitionConfig().getSelectedHardwareParameter("dX0").setParameterValue("" + dX0);
		getAcquisitionConfig().getSelectedHardwareParameter("xDt").setParameterValue("" + (byte) xDtSlider.getValue());
		getAcquisitionConfig().getSelectedHardwareParameter("nDt").setParameterValue("" + (byte) nDtSlider.getValue());
		getAcquisitionConfig().getSelectedHardwareParameter("xEnergy").setParameterValue("" + (byte) xESlider.getValue());
		getAcquisitionConfig().getSelectedHardwareParameter("nEnergy").setParameterValue("" + (byte) nESlider.getValue());

		getAcquisitionConfig().getSelectedHardwareParameter("logTol").setParameterValue("" + logTol);
		getAcquisitionConfig().getSelectedHardwareParameter("xTbs").setParameterValue("" + (byte) xTbsSlider.getValue());
		getAcquisitionConfig().getSelectedHardwareParameter("nTbs").setParameterValue("" + (byte) nTbsSlider.getValue());

		getAcquisitionConfig().getSelectedHardwareParameter("wraparoundKS").setParameterValue(
				"" + (wraparoundKSCheckBox.isSelected() ? 1 : 0));
		getAcquisitionConfig().getSelectedHardwareParameter("wraparoundXS").setParameterValue(
				"" + (wraparoundXSCheckBox.isSelected() ? 1 : 0));
		getAcquisitionConfig().getSelectedHardwareParameter("tunneling").setParameterValue(
				"" + (tunnelingCheckBox.isSelected() ? 1 : 0));

		getAcquisitionConfig().getSelectedHardwareParameter("potentials").setParameterValue(quantum.getPotentials());

		for (int i = 0; i < getAcquisitionConfig().getSelectedHardwareParameters().length; i++) {
			System.out.println(getAcquisitionConfig().getSelectedHardwareParameters(i).getParameterName() + " = "
					+ getAcquisitionConfig().getSelectedHardwareParameters(i).getParameterValue());
		}

		fireICustomizerListenerDone();
	}// GEN-LAST:event_okButtonActionPerformed

	private void defaultButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_defaultButtonActionPerformed
		quantum.clearPotentials();
		final double x0 = -10;
		deltaXSlider.setValue(2);
		nSlider.setValue(11);
		dX0Slider.setValue(200);

		xDtSlider.setValue(5);
		nDtSlider.setValue(20);

		xESlider.setValue(2);
		nESlider.setValue(2);

		tolSlider.setValue(5);

		xTbsSlider.setValue(5);
		nTbsSlider.setValue(18);

		wraparoundKSCheckBox.setSelected(false);
		wraparoundXSCheckBox.setSelected(true);
		tunnelingCheckBox.setSelected(true);

		quantum.clearPotentials();
		quantum.configPotentials(
				"0.0:4.0:f(x) = -cos(x)*5:false#5.0:5.0:f(x) = sin(x)*5:false#10.5:2.0:f(x) = exp(-x*25)+3:false#-3.0:2.0:f(x) = 210:false#-5.0:1.5:f(x) = x^3+4*x^2+5+cos(3*x):false",
				true);
		quantum.configGaussian(dX0Slider.getValue(), x0, Double.parseDouble(eLabel.getText()), nSlider.getValue(),
				deltaXSlider.getValue(), ComplexGaussian.DISPLAY_PROBABILITY, true);
	}// GEN-LAST:event_defaultButtonActionPerformed

	public static void main(final String args[]) {
		final javax.swing.JFrame test = new javax.swing.JFrame();
		test.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(final java.awt.event.WindowEvent e) {
				System.exit(0);
			}
		});
		test.getContentPane().add(new QuantumCustomizer());
		test.pack();
		test.setVisible(true);
	}

	

	public void setHardwareAcquisitionConfig(final HardwareAcquisitionConfig acqConfig) {
		super.setHardwareAcquisitionConfig(acqConfig);
		if (acqConfig != null) {
			final double x0 = Double.parseDouble(acqConfig.getSelectedHardwareParameterValue("x0"));
			deltaXSlider.setValue(Short.parseShort(acqConfig.getSelectedHardwareParameterValue("deltaX")));
			nSlider.setValue(Byte.parseByte(acqConfig.getSelectedHardwareParameterValue("log2N")));
			dX0Slider.setValue(Short.parseShort(acqConfig.getSelectedHardwareParameterValue("dX0")));

			xDtSlider.setValue(Byte.parseByte(acqConfig.getSelectedHardwareParameterValue("xDt")));
			nDtSlider.setValue(Byte.parseByte(acqConfig.getSelectedHardwareParameterValue("nDt")));

			xESlider.setValue(Byte.parseByte(acqConfig.getSelectedHardwareParameterValue("xEnergy")));
			nESlider.setValue(Byte.parseByte(acqConfig.getSelectedHardwareParameterValue("nEnergy")));

			tolSlider.setValue(Byte.parseByte(acqConfig.getSelectedHardwareParameterValue("logTol")));

			xTbsSlider.setValue(Byte.parseByte(acqConfig.getSelectedHardwareParameterValue("xTbs")));
			nTbsSlider.setValue(Byte.parseByte(acqConfig.getSelectedHardwareParameterValue("nTbs")));

			wraparoundKSCheckBox.setSelected(acqConfig.getSelectedHardwareParameterValue("wraparoundKS").trim()
					.equals("1") ? true : false);
			wraparoundXSCheckBox.setSelected(acqConfig.getSelectedHardwareParameterValue("wraparoundXS").trim()
					.equals("1") ? true : false);
			tunnelingCheckBox
					.setSelected(acqConfig.getSelectedHardwareParameterValue("tunneling").trim().equals("1") ? true
							: false);

			quantum.clearPotentials();
			quantum.configPotentials(acqConfig.getSelectedHardwareParameterValue("potentials"), true);
			quantum.configGaussian(dX0Slider.getValue(), x0, Double.parseDouble(eLabel.getText()), nSlider.getValue(),
					deltaXSlider.getValue(), ComplexGaussian.DISPLAY_PROBABILITY, true);
		}
	}

	
	public javax.swing.ImageIcon getCustomizerIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/vquantum/resources/quantum_iconified.PNG"));
	}

	public String getCustomizerTitle() {
		return "Quantum Mechanics - Tunnel Effect Configuration Utility";
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton addEditVButton;
	private javax.swing.JCheckBox avgVCheckBox;
	private javax.swing.JPanel avgVPanel;
	private javax.swing.JPanel btnPanel;
	private javax.swing.JButton cancelButton;
	private javax.swing.JPanel compSettingsPanel;
	private javax.swing.JPanel controlBtnPanel;
	private javax.swing.JPanel dX0Panel;
	private javax.swing.JSlider dX0Slider;
	private javax.swing.JTextField dX0TextField;
	private javax.swing.JPanel defConfBtnPanel;
	private javax.swing.JButton defaultButton;
	private javax.swing.JPanel deltaXPanel;
	private javax.swing.JSlider deltaXSlider;
	private javax.swing.JTextField deltaXTextField;
	private javax.swing.JLabel dtLabel;
	private javax.swing.JPanel dtLabelPanel;
	private javax.swing.JPanel dtPanel;
	private javax.swing.JLabel eLabel;
	private javax.swing.JPanel eLabelPanel;
	private javax.swing.JPanel ePanel;
	private javax.swing.JLabel editLabel;
	private javax.swing.JPanel electronPanel;
	private javax.swing.JPanel electronPanel2;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel mainEditPanel;
	private javax.swing.JPanel mainPanel;
	private javax.swing.JTabbedPane mainTabbedPane;
	private javax.swing.JPanel nDtPanel;
	private javax.swing.JSlider nDtSlider;
	private javax.swing.JPanel nEPanel;
	private javax.swing.JSlider nESlider;
	private javax.swing.JPanel nPanel;
	private javax.swing.JSlider nSlider;
	private javax.swing.JPanel nTbsPanel;
	private javax.swing.JSlider nTbsSlider;
	private javax.swing.JTextField nTextField;
	private javax.swing.JButton okButton;
	private javax.swing.JPanel samplesPanel;
	private javax.swing.JSlider samplesSlider;
	private javax.swing.JTextField samplesTextField;
	private javax.swing.JPanel simulSettingsPanel;
	private javax.swing.JLabel tbsLabel;
	private javax.swing.JPanel tbsLabelPanel;
	private javax.swing.JPanel tbsPanel;
	private javax.swing.JPanel tolPanel;
	private javax.swing.JSlider tolSlider;
	private javax.swing.JTextField tolTextField;
	private javax.swing.JCheckBox tunnelingCheckBox;
	private javax.swing.JPanel vFuncPanel;
	private javax.swing.JTextField vFuncTextField;
	private javax.swing.JPanel vWidthPanel;
	private javax.swing.JSlider vWidthSlider;
	private javax.swing.JTextField vWidthTextField;
	private javax.swing.JCheckBox wraparoundKSCheckBox;
	private javax.swing.JCheckBox wraparoundXSCheckBox;
	private javax.swing.JPanel xDtPanel;
	private javax.swing.JSlider xDtSlider;
	private javax.swing.JPanel xEPanel;
	private javax.swing.JSlider xESlider;
	private javax.swing.JPanel xTbsPanel;
	private javax.swing.JSlider xTbsSlider;
	// End of variables declaration//GEN-END:variables

}
