/*
 * RadioactividadeCustomizer.java
 *
 * Created on 16 de Maio de 2003, 10:11
 */
package pt.utl.ist.elab.client.condensadorcilindrico;

import java.text.DecimalFormat;

import javax.swing.text.NumberFormatter;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.metadata.ChannelParameter;
import com.linkare.rec.data.metadata.HardwareInfo;
import com.linkare.rec.data.synch.Frequency;
import com.linkare.rec.impl.client.customizer.ICustomizerListener;
import com.linkare.rec.impl.i18n.ReCResourceBundle;
import java.util.Hashtable;
import javax.swing.JLabel;

/**
 * 
 * @author Jos√© Pedro Pereira - Linkare TI
 */
public class CCCustomizer extends javax.swing.JPanel implements com.linkare.rec.impl.client.customizer.ICustomizer {

    private static final long serialVersionUID = 1374781526147471266L;
    
    private static ChannelParameter startPositionChannelParam;
    
    /** Creates new form RadioactividadeCustomizer */
    public CCCustomizer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jChkCalibrate = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        sldInitPos = new javax.swing.JSlider();
        tfInitPos = new javax.swing.JFormattedTextField();
        jPanel6 = new javax.swing.JPanel();
        sldFinalPos = new javax.swing.JSlider();
        tfFinalPos = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        sldNumPoints = new javax.swing.JSlider();
        tfNumPoints = new javax.swing.JTextField();

        setMinimumSize(new java.awt.Dimension(350, 460));
        setPreferredSize(new java.awt.Dimension(350, 460));
        setLayout(new java.awt.BorderLayout());

        jPanel2.setMinimumSize(new java.awt.Dimension(350, 42));
        jPanel2.setPreferredSize(new java.awt.Dimension(350, 42));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(btnOK, gridBagConstraints);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel2.add(btnCancel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        jPanel2.add(jLabel1, gridBagConstraints);

        jLabel3.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel3, gridBagConstraints);

        jChkCalibrate.setText(ReCResourceBundle.findString("condensadorcilindrico$rec.exp.customizer.title4")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        jPanel2.add(jChkCalibrate, gridBagConstraints);

        add(jPanel2, java.awt.BorderLayout.SOUTH);

        jPanel3.setMinimumSize(new java.awt.Dimension(350, 160));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(ReCResourceBundle.findString("condensadorcilindrico$rec.exp.customizer.title1"))); // NOI18N
        jPanel5.setMinimumSize(new java.awt.Dimension(350, 106));
        jPanel5.setPreferredSize(new java.awt.Dimension(350, 106));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        sldInitPos.setMajorTickSpacing(100);
        sldInitPos.setMaximum(0);
        sldInitPos.setMinorTickSpacing(20);
        sldInitPos.setPaintLabels(true);
        sldInitPos.setPaintTicks(true);
        sldInitPos.setPaintTrack(false);
        sldInitPos.setValue(0);
        sldInitPos.setMinimumSize(new java.awt.Dimension(250, 42));
        sldInitPos.setPreferredSize(new java.awt.Dimension(250, 42));
        sldInitPos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldInitPosStateChanged(evt);
            }
        });
        jPanel5.add(sldInitPos, new java.awt.GridBagConstraints());

        tfInitPos.setColumns(3);
        tfInitPos.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfInitPos.setText("0");
        tfInitPos.setMinimumSize(new java.awt.Dimension(30, 16));
        tfInitPos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfInitPosActionPerformed(evt);
            }
        });
        tfInitPos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfInitPosFocusLost(evt);
            }
        });
        jPanel5.add(tfInitPos, new java.awt.GridBagConstraints());

        jPanel3.add(jPanel5);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(ReCResourceBundle.findString("condensadorcilindrico$rec.exp.customizer.title2"))); // NOI18N
        jPanel6.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jPanel6.setMinimumSize(new java.awt.Dimension(350, 106));
        jPanel6.setPreferredSize(new java.awt.Dimension(350, 106));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        sldFinalPos.setMajorTickSpacing(40);
        sldFinalPos.setMaximum(240);
        sldFinalPos.setMinorTickSpacing(23);
        sldFinalPos.setPaintLabels(true);
        sldFinalPos.setPaintTicks(true);
        sldFinalPos.setPaintTrack(false);
        sldFinalPos.setMaximumSize(new java.awt.Dimension(1000, 32767));
        sldFinalPos.setMinimumSize(new java.awt.Dimension(250, 42));
        sldFinalPos.setPreferredSize(new java.awt.Dimension(250, 42));
        sldFinalPos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldFinalPosStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel6.add(sldFinalPos, gridBagConstraints);

        tfFinalPos.setColumns(3);
        tfFinalPos.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfFinalPos.setText("50");
        tfFinalPos.setMaximumSize(new java.awt.Dimension(30, 16));
        tfFinalPos.setMinimumSize(new java.awt.Dimension(30, 16));
        tfFinalPos.setPreferredSize(new java.awt.Dimension(37, 16));
        tfFinalPos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfFinalPosFocusLost(evt);
            }
        });
        jPanel6.add(tfFinalPos, new java.awt.GridBagConstraints());

        jPanel3.add(jPanel6);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(ReCResourceBundle.findString("condensadorcilindrico$rec.exp.customizer.title3"))); // NOI18N
        jPanel1.setMinimumSize(new java.awt.Dimension(350, 106));
        jPanel1.setPreferredSize(new java.awt.Dimension(350, 106));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        sldNumPoints.setMajorTickSpacing(400);
        sldNumPoints.setMaximum(2000);
        sldNumPoints.setMinorTickSpacing(200);
        sldNumPoints.setPaintLabels(true);
        sldNumPoints.setPaintTicks(true);
        sldNumPoints.setPaintTrack(false);
        sldNumPoints.setMaximumSize(new java.awt.Dimension(1000, 32767));
        sldNumPoints.setMinimumSize(new java.awt.Dimension(255, 80));
        sldNumPoints.setPreferredSize(new java.awt.Dimension(250, 42));
        sldNumPoints.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldNumPointsStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(sldNumPoints, gridBagConstraints);

        tfNumPoints.setColumns(3);
        tfNumPoints.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfNumPoints.setText("50");
        tfNumPoints.setMaximumSize(new java.awt.Dimension(30, 16));
        tfNumPoints.setMinimumSize(new java.awt.Dimension(30, 16));
        tfNumPoints.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfNumPointsFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(tfNumPoints, gridBagConstraints);

        jPanel3.add(jPanel1);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void tfInitPosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfInitPosActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_tfInitPosActionPerformed

    private void sldFinalPosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldFinalPosStateChanged
        if (sldFinalPos.getValue() == 0) {
            sldFinalPos.setValue(1);

        }
        tfFinalPos.setText("" + sldFinalPos.getValue());
    }//GEN-LAST:event_sldFinalPosStateChanged

    private void sldInitPosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldInitPosStateChanged
        tfInitPos.setValue(sldInitPos.getValue());
    }//GEN-LAST:event_sldInitPosStateChanged

    private void tfNumPointsFocusLost(final java.awt.event.FocusEvent evt)// GEN-FIRST:event_tfFreqFocusLost
    {// GEN-HEADEREND:event_tfFreqFocusLost
        final String strFreq = tfNumPoints.getText();
        if (strFreq.trim().equals("")) {
            return;
        }
        try {
            final int Freq = Integer.parseInt(strFreq);
            if (Freq <= sldNumPoints.getMaximum() && Freq > sldNumPoints.getMinimum()) {
                sldNumPoints.setValue(Freq);
            } else {
                tfNumPoints.setText("" + sldNumPoints.getValue());
            }
        } catch (final Exception e) {
            tfNumPoints.setText("" + sldNumPoints.getValue());
        }
    }// GEN-LAST:event_tfFreqFocusLost

    private void tfFinalPosFocusLost(final java.awt.event.FocusEvent evt)// GEN-FIRST:event_tfNumSamplesFocusLost
    {// GEN-HEADEREND:event_tfNumSamplesFocusLost
        final String strNumSamples = tfFinalPos.getText();
        if (strNumSamples.trim().equals("")) {
            return;
        }
        try {
            final int numSamples = Integer.parseInt(strNumSamples);
            if (numSamples <= sldFinalPos.getMaximum() && numSamples > sldFinalPos.getMinimum()) {
                sldFinalPos.setValue(numSamples);
            } else {
                tfFinalPos.setText("" + sldFinalPos.getValue());
            }
        } catch (final Exception e) {
            tfFinalPos.setText("" + sldFinalPos.getValue());
        }
    }// GEN-LAST:event_tfNumSamplesFocusLost

    private void tfInitPosFocusLost(final java.awt.event.FocusEvent evt)// GEN-FIRST:event_tfPos1FocusLost
    {// GEN-HEADEREND:event_tfPos1FocusLost
        final String strPos1 = tfInitPos.getText();

        if (strPos1.trim().equals("")) {
            return;
        }
        try {
            final int Pos1 = (int) (Float.parseFloat(strPos1) * 1000.F);
            if (Pos1 <= sldInitPos.getMaximum() && Pos1 > sldInitPos.getMinimum()) {
                sldInitPos.setValue(Pos1);
            } else {
                tfInitPos.setValue(new Float((sldInitPos.getValue() / 1000.F)));
            }

        } catch (final Exception e) {
            tfInitPos.setValue(new Float((sldInitPos.getValue() / 1000.F)));
        }
    }// GEN-LAST:event_tfPos1FocusLost

    private void sldNumPointsStateChanged(final javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_sldFreqStateChanged
    {// GEN-HEADEREND:event_sldFreqStateChanged

        if (sldNumPoints.getValue() == 0) {
            sldNumPoints.setValue(1);
        }
        tfNumPoints.setText("" + sldNumPoints.getValue());

    }// GEN-LAST:event_sldFreqStateChanged

    private void btnCancelActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnCancelActionPerformed
    {// GEN-HEADEREND:event_btnCancelActionPerformed
        fireICustomizerListenerCanceled();
    }// GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnOKActionPerformed
    {// GEN-HEADEREND:event_btnOKActionPerformed
        final int nsamples = sldFinalPos.getValue() == 0 ? 1 : sldFinalPos.getValue();
        acqConfig.setTotalSamples(nsamples + 1);
        acqConfig.getSelectedHardwareParameter("StartPosition").setParameterValue("" + (sldInitPos.getValue() / 1000.F));
//        acqConfig.getSelectedHardwareParameter("EndPosition").setParameterValue("" + (sldPos2.getValue() / 1000.F));
        acqConfig.getSelectedHardwareParameter("Calibrate").setParameterValue(jChkCalibrate.isSelected() ? "1" : "0");
        acqConfig.setSelectedFrequency(new Frequency(sldNumPoints.getValue(), hardwareInfo.getHardwareFrequencies(0).getMinimumFrequency().getMultiplier(), hardwareInfo.getHardwareFrequencies(0).getMinimumFrequency().getFrequencyDefType()));
        fireICustomizerListenerDone();
    }// GEN-LAST:event_btnOKActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JCheckBox jChkCalibrate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JSlider sldFinalPos;
    private javax.swing.JSlider sldInitPos;
    private javax.swing.JSlider sldNumPoints;
    private javax.swing.JTextField tfFinalPos;
    private javax.swing.JFormattedTextField tfInitPos;
    private javax.swing.JTextField tfNumPoints;
    // End of variables declaration//GEN-END:variables
    /** Utility field used by event firing mechanism. */
    private javax.swing.event.EventListenerList listenerList = null;

    /**
     * Registers ICustomizerListener to receive events.
     * 
     * @param listener The listener to register.
     */
    @Override
    public synchronized void addICustomizerListener(final ICustomizerListener listener) {
        if (listenerList == null) {
            listenerList = new javax.swing.event.EventListenerList();
        }
        listenerList.add(ICustomizerListener.class, listener);
    }

    /**
     * Removes ICustomizerListener from the list of listeners.
     * 
     * @param listener The listener to remove.
     */
    @Override
    public synchronized void removeICustomizerListener(final ICustomizerListener listener) {
        listenerList.remove(ICustomizerListener.class, listener);
    }

    /**
     * Notifies all registered listeners about the event.
     * 
     * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
     */
    private void fireICustomizerListenerCanceled() {
        if (listenerList == null) {
            return;
        }
        final Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length - 2; i >= 0; i -= 2) {
            if (listeners[i] == ICustomizerListener.class) {
                ((ICustomizerListener) listeners[i + 1]).canceled();
            }
        }
    }

    /**
     * Notifies all registered listeners about the event.
     * 
     * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
     */
    private void fireICustomizerListenerDone() {
        if (listenerList == null) {
            return;
        }
        final Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length - 2; i >= 0; i -= 2) {
            if (listeners[i] == ICustomizerListener.class) {

                ((ICustomizerListener) listeners[i + 1]).done();
            }
        }
    }
    private HardwareInfo hardwareInfo = null;
    private HardwareAcquisitionConfig acqConfig = null;

    @Override
    public HardwareAcquisitionConfig getAcquisitionConfig() {
        return acqConfig;
    }

    @Override
    public void setHardwareAcquisitionConfig(final HardwareAcquisitionConfig acqConfig) {
        this.acqConfig = acqConfig;
        if (acqConfig != null) {
            final int nsamples = acqConfig.getTotalSamples() - 1;
            sldFinalPos.setValue(nsamples);
            tfFinalPos.setText("" + nsamples);

            final int freq = (int) acqConfig.getSelectedFrequency().getFrequency();
            sldNumPoints.setValue(freq);
            tfNumPoints.setText("" + freq);

            final float pos1f = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("StartPosition"));
            final int pos1 = (int) Math.floor(pos1f * 1000.F);
            sldInitPos.setValue(pos1);
            tfInitPos.setValue(new Float(pos1f));


            final int calibrate = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("Calibrate"));
            jChkCalibrate.setSelected(calibrate != 0);

        }
    }

    @Override
    public void setHardwareInfo(final HardwareInfo hardwareInfo) {
        this.hardwareInfo = hardwareInfo;
        startPositionChannelParam = hardwareInfo.getHardwareParameter("StartPosition");
        
        if (hardwareInfo != null) {
            setInitialValuesBasedOnHWInfo();
        }

    }

    protected HardwareInfo getHardwareInfo() {
        return hardwareInfo;
    }

    @Override
    public javax.swing.JComponent getCustomizerComponent() {
        return this;
    }

    @Override
    public javax.swing.ImageIcon getCustomizerIcon() {
        return new javax.swing.ImageIcon(getClass().getResource(
                "/pt/utl/ist/elab/client/condensadorcilindrico/resources/cc_iconified.gif"));
    }

    @Override
    public String getCustomizerTitle() {
        return ReCResourceBundle.findString("condensadorcilindrico$rec.exp.cc.customizer.title");
    }

    @Override
    public javax.swing.JMenuBar getMenuBar() {
        return null;
    }

    private void setInitialValuesBasedOnHWInfo() {

        // Setting the slider for the inital position and its label values
        final Integer maxInitPos = Integer.parseInt(startPositionChannelParam.getParameterSelectionList(1));
        final Integer minInitPos = Integer.parseInt(startPositionChannelParam.getParameterSelectionList(0));
        final Integer step = Integer.parseInt(startPositionChannelParam.getParameterSelectionList(2));
        
        final Hashtable initPosLabels = sldInitPos.createStandardLabels(step, minInitPos);
        initPosLabels.put(maxInitPos, new JLabel(maxInitPos.toString()));
        
        sldInitPos.setLabelTable(initPosLabels);
        sldInitPos.setPaintLabels(true);
        sldInitPos.setPaintTrack(true);

        final DecimalFormat format = new DecimalFormat("0.0");
        format.setDecimalSeparatorAlwaysShown(true);
        format.setGroupingUsed(false);
        format.setMinimumFractionDigits(1);
        final NumberFormatter formatterUserPos1 = new NumberFormatter(format);
        final NumberFormatter formatterUserPos2 = new NumberFormatter(format);

        formatterUserPos1.setCommitsOnValidEdit(true);
        formatterUserPos2.setCommitsOnValidEdit(true);

        formatterUserPos1.setOverwriteMode(true);
        formatterUserPos2.setOverwriteMode(true);

        formatterUserPos1.install(tfInitPos);
    }
}
