/*
 * SimpleLoginBox.java created on Apr 16, 2009
 *
 * Copyright 2009 HFernandes. All rights reserved.
 * HFernandes PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
package com.linkare.rec.impl.newface.component;

import java.awt.Color;

import javax.swing.Icon;


import com.linkare.rec.web.config.Lab;
import com.linkare.rec.impl.newface.ReCApplication;
import com.linkare.rec.impl.newface.component.ProgressCicle.State;
import com.linkare.rec.impl.newface.utils.LAFConnector;
import com.linkare.rec.impl.newface.utils.LAFConnector.SpecialELabProperties;
import java.util.ResourceBundle;
import java.util.prefs.Preferences;

/**
 * 
 * @author npadriano
 */
public class LabLoginBox extends GradientPane {

        /** Generated UID */
        private static final long serialVersionUID = -918799173616242126L;
        private final ReCApplication recApplication = ReCApplication.getApplication();

        /** Creates new form SimpleLoginBox */
        public LabLoginBox() {
                super();
                setContainer(container);
                initComponents();
                txtUsername.setText(System.getProperty("user.name"));
                checkBoxComputerType.setSelected(!Preferences.userRoot().getBoolean("ElabPrivateComputer", true));
                if (recApplication.isAutoConnectLab()) {
                        labCombo.setEnabled(false);
                }
                labelProgressCicle.setText("");
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed"
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                labelUsername = new javax.swing.JLabel();
                txtUsername = new javax.swing.JTextField();
                progressCicle = new com.linkare.rec.impl.newface.component.ProgressCicle();
                btnGo = new com.linkare.rec.impl.newface.component.FlatButton();
                labelPassword = new javax.swing.JLabel();
                labCombo = new javax.swing.JComboBox();
                labelPassword1 = new javax.swing.JLabel();
                txtPassword = new javax.swing.JPasswordField();
                btnQuit = new com.linkare.rec.impl.newface.component.FlatButton();
                checkBoxComputerType = new javax.swing.JCheckBox();
                labelLanguage = new javax.swing.JLabel();
                langCombo = new javax.swing.JComboBox();
                labelProgressCicle = new javax.swing.JLabel();

                setMaximumSize(new java.awt.Dimension(360, 340));
                setName("Form"); // NOI18N
                setPreferredSize(new java.awt.Dimension(360, 340));

                labelUsername.setFont(labelUsername.getFont().deriveFont(labelUsername.getFont().getStyle() | java.awt.Font.BOLD));
                labelUsername.setForeground(LAFConnector.getColor(SpecialELabProperties.SELECTION_FOREGROUND_ON_DARK));
                org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.linkare.rec.impl.newface.ReCApplication.class).getContext().getResourceMap(LabLoginBox.class);
                labelUsername.setText(resourceMap.getString("labelUsername.text")); // NOI18N
                labelUsername.setName("labelUsername"); // NOI18N

                txtUsername.setText(resourceMap.getString("txtUsername.text")); // NOI18N
                javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.linkare.rec.impl.newface.ReCApplication.class).getContext().getActionMap(LabLoginBox.class, this);
                txtUsername.setAction(actionMap.get("next")); // NOI18N
                txtUsername.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK), javax.swing.BorderFactory.createEmptyBorder(2, 3, 2, 3)));
                txtUsername.setName("txtUsername"); // NOI18N
                txtUsername.setPreferredSize(new java.awt.Dimension(215, 28));

                progressCicle.setText(resourceMap.getString("progressCicle.text")); // NOI18N
                progressCicle.setBusyIcons(null);
                progressCicle.setFocusable(false);
                progressCicle.setIdleIcon(resourceMap.getIcon("progressCicle.idleIcon")); // NOI18N
                progressCicle.setMaximumSize(null);
                progressCicle.setMinimumSize(new java.awt.Dimension(20, 20));
                progressCicle.setName("progressCicle"); // NOI18N
                progressCicle.setPreferredSize(null);
                progressCicle.setState(null);

                java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/linkare/rec/impl/newface/component/resources/LabLoginBox"); // NOI18N
                btnGo.setText(bundle.getString("next.Action.text")); // NOI18N
                btnGo.setToolTipText(bundle.getString("next.Action.shortDescription")); // NOI18N
                btnGo.setFont(btnGo.getFont().deriveFont(btnGo.getFont().getStyle() | java.awt.Font.BOLD));
                btnGo.setName("btnGo"); // NOI18N
                btnGo.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnGoActionPerformed(evt);
                        }
                });

                labelPassword.setFont(labelPassword.getFont().deriveFont(labelPassword.getFont().getStyle() | java.awt.Font.BOLD));
                labelPassword.setForeground(LAFConnector.getColor(SpecialELabProperties.SELECTION_FOREGROUND_ON_DARK));
                labelPassword.setText(resourceMap.getString("labelPassword.text")); // NOI18N
                labelPassword.setName("labelPassword"); // NOI18N

                labCombo.setModel(getRecApplication().getLabComboBoxModel());
                labCombo.setMinimumSize(new java.awt.Dimension(6, 20));
                labCombo.setName("labCombo"); // NOI18N
                labCombo.setPreferredSize(new java.awt.Dimension(215, 28));
                labCombo.setRenderer(new com.linkare.rec.impl.newface.component.LabRenderer());

                labelPassword1.setFont(labelPassword1.getFont().deriveFont(labelPassword1.getFont().getStyle() | java.awt.Font.BOLD));
                labelPassword1.setForeground(LAFConnector.getColor(SpecialELabProperties.SELECTION_FOREGROUND_ON_DARK));
                labelPassword1.setText(resourceMap.getString("labelPassword1.text")); // NOI18N
                labelPassword1.setName("labelPassword1"); // NOI18N

                txtPassword.setText(resourceMap.getString("txtPassword.text")); // NOI18N
                txtPassword.setAction(actionMap.get("next")); // NOI18N
                txtPassword.setName("txtPassword"); // NOI18N
                txtPassword.setPreferredSize(new java.awt.Dimension(215, 28));

                btnQuit.setAction(actionMap.get("quit")); // NOI18N
                btnQuit.setForeground(resourceMap.getColor("btnQuit.foreground")); // NOI18N
                btnQuit.setText(resourceMap.getString("btnQuit.text")); // NOI18N
                btnQuit.setToolTipText(resourceMap.getString("btnQuit.toolTipText")); // NOI18N
                btnQuit.setBorderColor(resourceMap.getColor("btnQuit.borderColor")); // NOI18N
                btnQuit.setFont(btnQuit.getFont().deriveFont(btnQuit.getFont().getStyle() | java.awt.Font.BOLD));
                btnQuit.setGradientBottom(resourceMap.getColor("btnQuit.gradientBottom")); // NOI18N
                btnQuit.setGradientTop(resourceMap.getColor("btnQuit.gradientTop")); // NOI18N
                btnQuit.setName("btnQuit"); // NOI18N

                checkBoxComputerType.setBackground(resourceMap.getColor("checkBoxComputerType.background")); // NOI18N
                checkBoxComputerType.setFont(checkBoxComputerType.getFont().deriveFont(checkBoxComputerType.getFont().getSize()-1f));
                checkBoxComputerType.setForeground(LAFConnector.getColor(SpecialELabProperties.SELECTION_FOREGROUND_ON_DARK));
                checkBoxComputerType.setSelected(true);
                checkBoxComputerType.setText(resourceMap.getString("checkBoxComputerType.text")); // NOI18N
                checkBoxComputerType.setBorder(null);
                checkBoxComputerType.setContentAreaFilled(false);
                checkBoxComputerType.setName("checkBoxComputerType"); // NOI18N

                labelLanguage.setFont(labelLanguage.getFont().deriveFont(labelLanguage.getFont().getStyle() | java.awt.Font.BOLD));
                labelLanguage.setForeground(LAFConnector.getColor(SpecialELabProperties.SELECTION_FOREGROUND_ON_DARK));
                labelLanguage.setText(resourceMap.getString("labelLanguage.text")); // NOI18N
                labelLanguage.setName("labelLanguage"); // NOI18N

                langCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PortuguÃªs", "English" }));
                langCombo.setMinimumSize(new java.awt.Dimension(6, 20));
                langCombo.setName("langCombo"); // NOI18N
                langCombo.setPreferredSize(new java.awt.Dimension(215, 28));

                labelProgressCicle.setFont(labelProgressCicle.getFont().deriveFont(labelProgressCicle.getFont().getStyle() | java.awt.Font.BOLD, labelProgressCicle.getFont().getSize()-2));
                labelProgressCicle.setForeground(LAFConnector.getColor(SpecialELabProperties.SELECTION_FOREGROUND_ON_DARK));
                labelProgressCicle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                labelProgressCicle.setIcon(resourceMap.getIcon("")); // NOI18N
                labelProgressCicle.setText(resourceMap.getString("labelProgressCicle.text")); // NOI18N
                labelProgressCicle.setMaximumSize(new java.awt.Dimension(146, 32));
                labelProgressCicle.setMinimumSize(new java.awt.Dimension(118, 16));
                labelProgressCicle.setName("labelProgressCicle"); // NOI18N
                labelProgressCicle.setPreferredSize(null);
                labelProgressCicle.setRequestFocusEnabled(false);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(labelUsername)
                                        .addComponent(txtUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                                        .addComponent(labelPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                                        .addComponent(txtPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                                        .addComponent(labelPassword1)
                                        .addComponent(labCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 340, Short.MAX_VALUE)
                                        .addComponent(labelLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(langCombo, 0, 340, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnGo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 193, Short.MAX_VALUE)
                                                .addComponent(btnQuit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(5, 5, 5)
                                                .addComponent(progressCicle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(labelProgressCicle, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(checkBoxComputerType))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(labelUsername)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelPassword)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelPassword1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelLanguage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(langCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnQuit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnGo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBoxComputerType)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(progressCicle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labelProgressCicle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(26, Short.MAX_VALUE))
                );
        }// </editor-fold>//GEN-END:initComponents

    private void btnGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoActionPerformed
            next();
    }//GEN-LAST:event_btnGoActionPerformed
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private com.linkare.rec.impl.newface.component.FlatButton btnGo;
        private com.linkare.rec.impl.newface.component.FlatButton btnQuit;
        private javax.swing.JCheckBox checkBoxComputerType;
        private javax.swing.JComboBox labCombo;
        private javax.swing.JLabel labelLanguage;
        private javax.swing.JLabel labelPassword;
        private javax.swing.JLabel labelPassword1;
        private javax.swing.JLabel labelProgressCicle;
        private javax.swing.JLabel labelUsername;
        private javax.swing.JComboBox langCombo;
        private com.linkare.rec.impl.newface.component.ProgressCicle progressCicle;
        private javax.swing.JPasswordField txtPassword;
        private javax.swing.JTextField txtUsername;
        // End of variables declaration//GEN-END:variables

        public void next() {
                setLoginProgressVisible(true);

                recApplication.setUserInfo(getUsername(), getPassword());

                updateStatus(ResourceBundle.getBundle("com.linkare.rec.impl.newface.component.resources.LabLoginBox").getString("lblTaskMessage.authentication.text"));
                // set lab with selected from lab combo if autoconnect is false
                if (!recApplication.isAutoConnectLab()) {
                        Lab lab = (Lab) labCombo.getSelectedItem();
                        recApplication.setCurrentLab(lab);
                }

                // Connect
                recApplication.connect();

                //set the user preference
                Preferences.userRoot().putBoolean("ElabPrivateComputer", !checkBoxComputerType.isSelected());

                String locale = "pt"; //Default

                if (langCombo.getSelectedIndex() == 1) {
                        locale = "en";
                }
                recApplication.refreshView(locale);
        }

        public void updateStatus(String message) {
                labelProgressCicle.setText(message);
        }

        public void reset() {
                if (labCombo.getModel().getSize() > 0) {
                        labCombo.setSelectedIndex(0);
                }
                txtPassword.setText("");
        }

        public void setLoginProgressVisible(final boolean visible) {
                progressCicle.setVisible(visible);
                progressCicle.setState(visible ? State.RUNNING : State.IDLE);
                progressCicle.repaint();
        }

        public void setIdleIcon(final Icon idleIcon) {
                progressCicle.setIdleIcon(idleIcon);
        }

        public void setBusyIcons(final Icon[] busyIcons) {
                progressCicle.setBusyIcons(busyIcons);
        }

        public void refreshView() {
                labelUsername.setText(ResourceBundle.getBundle("com.linkare.rec.impl.newface.component.resources.LabLoginBox").getString("labelUsername.text"));
                labelPassword.setText(ResourceBundle.getBundle("com.linkare.rec.impl.newface.component.resources.LabLoginBox").getString("labelPassword.text"));
                btnGo.setText(ResourceBundle.getBundle("com.linkare.rec.impl.newface.component.resources.LabLoginBox").getString("next.Action.text"));
                btnQuit.setText(ResourceBundle.getBundle("com.linkare.rec.impl.newface.component.resources.LabLoginBox").getString("btnQuit.text"));
                checkBoxComputerType.setText(ResourceBundle.getBundle("com.linkare.rec.impl.newface.component.resources.LabLoginBox").getString("checkBoxComputerType.text"));
                labelLanguage.setText(ResourceBundle.getBundle("com.linkare.rec.impl.newface.component.resources.LabLoginBox").getString("labelLanguage.text"));
        }

        public String getUsername() {
                return txtUsername.getText();
        }

        public String getPassword() {
                return new String(txtPassword.getPassword());
        }
}
