/*
 * DefaultExperimentHeaderInfo.java
 *
 * Created on 9 de Junho de 2003, 11:58
 */

package com.linkare.rec.impl.baseUI.display;

import java.awt.Graphics;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;

import javax.swing.Icon;
import javax.swing.JFileChooser;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.impl.baseUI.utils.ExtensionFilter;
import com.linkare.rec.impl.client.experiment.ExpDataDisplay;
import com.linkare.rec.impl.client.experiment.ExpDataModel;
import com.linkare.rec.impl.client.experiment.ExpDataModelListener;
import com.linkare.rec.impl.client.experiment.NewExpDataEvent;

/**
 * 
 * @author Jos√© Pedro Pereira - Linkare TI
 */
public class DefaultExperimentHeaderInfo extends javax.swing.JPanel implements ExpDataDisplay, ExpDataModelListener,
		Printable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -1914589166869502855L;

	/** Creates new form DefaultExperimentHeaderInfo */
	public DefaultExperimentHeaderInfo() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		toolBarHeaderInfo = new javax.swing.JToolBar();
		printBtn = new javax.swing.JButton();
		saveBtn = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		acquisitionHeaderDisplay = new com.linkare.rec.impl.baseUI.JAcquisitionHeaderDisplay();

		printBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/com/linkare/rec/impl/baseUI/resources/Print16.gif")));
		printBtn.setToolTipText("Print");
		printBtn.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				printBtnActionPerformed(evt);
			}
		});

		toolBarHeaderInfo.add(printBtn);

		saveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/com/linkare/rec/impl/baseUI/resources/Save16.gif")));
		saveBtn.setToolTipText("Save dat file");
		saveBtn.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				saveBtnActionPerformed(evt);
			}
		});

		toolBarHeaderInfo.add(saveBtn);

		setLayout(new java.awt.BorderLayout());

		jScrollPane1.setViewportView(acquisitionHeaderDisplay);

		add(jScrollPane1, java.awt.BorderLayout.CENTER);

	}// GEN-END:initComponents

	private void saveBtnActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_saveBtnActionPerformed
	{// GEN-HEADEREND:event_saveBtnActionPerformed

		final javax.swing.JFileChooser jFileChooserSave = new javax.swing.JFileChooser();

		final ExtensionFilter textExtension = new ExtensionFilter("dat", "ext");

		textExtension.setDescription("Acquisition Header File");
		jFileChooserSave.setAcceptAllFileFilterUsed(false);
		jFileChooserSave.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
		jFileChooserSave.setFileFilter(textExtension);

		final int returnValue = jFileChooserSave.showSaveDialog(this);
		String extension = null;
		if (returnValue == JFileChooser.APPROVE_OPTION) {
			extension = textExtension.getExtension();
		}
		String path = jFileChooserSave.getSelectedFile().getPath();
		if (path.endsWith(extension)) {
			path = path.substring(0, path.length() - 4);
		}
		final java.io.File saveFile = new java.io.File(path + "." + extension);

		try {
			final java.io.FileWriter fileWriter = new java.io.FileWriter(saveFile, true);
			fileWriter.write(acquisitionHeaderDisplay.getText());
			fileWriter.close();
		} catch (final java.io.IOException ioe) {
			// System.out.println("Error while trying to save data to file: "+ioe);
		}
	}// GEN-LAST:event_saveBtnActionPerformed

	private void printBtnActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_printBtnActionPerformed
	{// GEN-HEADEREND:event_printBtnActionPerformed
		final PrinterJob job = PrinterJob.getPrinterJob();
		final PageFormat pf = job.defaultPage();
		pf.setOrientation(PageFormat.PORTRAIT);
		final PageFormat pf2 = job.pageDialog(pf);
		if (pf2 != pf) {
			job.setPrintable(this, pf2);
			if (job.printDialog()) {
				try {
					job.print();
				} catch (final PrinterException e) {
					javax.swing.JOptionPane.showMessageDialog(this, e);
				}
			}
		}
	}// GEN-LAST:event_printBtnActionPerformed

	@Override
	public String getName() {
		return "Experiment info";
	}

	@Override
	public javax.swing.JComponent getDisplay() {
		return this;
	}

	@Override
	public Icon getIcon() {
		return new javax.swing.ImageIcon(getClass().getResource("/com/linkare/rec/impl/baseUI/resources/hwinfo16.gif"));
	}

	private ExpDataModel model;

	@Override
	public void setExpDataModel(final ExpDataModel model) {
		this.model = model;
		model.addExpDataModelListener(this);
	}

	private HardwareAcquisitionConfig header = null;

	private void headerAvailable(final HardwareAcquisitionConfig header) {
		if (header == null) {
			return;
		}

		this.header = header;
		acquisitionHeaderDisplay.setAcquisitionHeader(header);
	}

	@Override
	public void dataModelWaiting() {
	}

	@Override
	public void dataModelStoped() {
	}

	@Override
	public void dataModelEnded() {
	}

	@Override
	public void dataModelError() {
	}

	@Override
	public void dataModelStarted() {
		if (header == null) {
			headerAvailable(model.getAcquisitionConfig());
		}
	}

	@Override
	public void dataModelStartedNoData() {
		if (header == null) {
			headerAvailable(model.getAcquisitionConfig());
		}
	}

	@Override
	public void newSamples(final NewExpDataEvent evt) {
	}

	@Override
	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	@Override
	public javax.swing.JToolBar getToolBar() {
		return toolBarHeaderInfo;
	}

	@Override
	public int print(final Graphics g, final PageFormat pageFormat, final int pageIndex) throws PrinterException {

		if (pageIndex == 0) {
			g.translate((int) pageFormat.getImageableX(), (int) pageFormat.getImageableY());
			g.setClip(0, 0, (int) pageFormat.getImageableWidth(), (int) pageFormat.getImageableHeight());
			acquisitionHeaderDisplay.print(g);
			return java.awt.print.Printable.PAGE_EXISTS;
		} else {
			return java.awt.print.Printable.NO_SUCH_PAGE;
		}

	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JButton printBtn;
	private com.linkare.rec.impl.baseUI.JAcquisitionHeaderDisplay acquisitionHeaderDisplay;
	private javax.swing.JToolBar toolBarHeaderInfo;
	private javax.swing.JButton saveBtn;
	// End of variables declaration//GEN-END:variables

}
