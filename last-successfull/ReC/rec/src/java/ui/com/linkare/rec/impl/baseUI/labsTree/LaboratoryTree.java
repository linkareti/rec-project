/*
 * LaboratoryHardwareTree.java
 *
 * Created on 08 May 2003, 23:02
 */

package com.linkare.rec.impl.baseUI.labsTree;

import java.util.logging.LogManager;
import java.util.logging.Logger;

import javax.swing.ToolTipManager;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

import com.linkare.rec.impl.baseUI.config.Apparatus;
import com.linkare.rec.impl.baseUI.config.DefaultAcquisitionConfig;
import com.linkare.rec.impl.baseUI.config.Display;
import com.linkare.rec.impl.baseUI.config.DisplayNode;
import com.linkare.rec.impl.baseUI.config.Lab;
import com.linkare.rec.impl.baseUI.config.ReCBaseUIConfig;
import com.linkare.rec.impl.baseUI.config.WebResource;

/**
 * 
 * @author Jos√© Pedro Pereira - Linkare TI
 */
public class LaboratoryTree extends javax.swing.JPanel {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1587212298587572664L;
	private static String UI_CLIENT_LOGGER = "ReC.baseUI";

	static {
		final Logger l = LogManager.getLogManager().getLogger(LaboratoryTree.UI_CLIENT_LOGGER);
		if (l == null) {
			LogManager.getLogManager().addLogger(Logger.getLogger(LaboratoryTree.UI_CLIENT_LOGGER));
		}
	}
	private final DisplayNodeTreeCellRenderer renderer;
	private final LabsTreeModel model;
	private final LabsTreeCellEditor realEditor;

	/** Creates new form LaboratoryHardwareTree */
	public LaboratoryTree() {
		model = new LabsTreeModel("", true);

		// Use this to properly reload the tree when needed!
		model.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
			@Override
			public void propertyChange(final java.beans.PropertyChangeEvent evt) {
				updateTree();
			}
		});
		renderer = new DisplayNodeTreeCellRenderer();

		initComponents();

		realEditor = new LabsTreeCellEditor();

		labTree.setCellEditor(realEditor);

		labTree.setEditable(true);

		ToolTipManager.sharedInstance().registerComponent(labTree);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		jScrollPane1 = new javax.swing.JScrollPane();
		labTree = new javax.swing.JTree();

		setLayout(new java.awt.BorderLayout());

		labTree.setCellRenderer(renderer);
		labTree.setFocusCycleRoot(true);
		labTree.setModel(model);
		labTree.setScrollsOnExpand(false);
		labTree.setShowsRootHandles(true);
		labTree.addMouseListener(new java.awt.event.MouseAdapter() {
			@Override
			public void mousePressed(final java.awt.event.MouseEvent evt) {
				labTreeMousePressed(evt);
			}
		});
		labTree.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
			@Override
			public void propertyChange(final java.beans.PropertyChangeEvent evt) {
				labTreePropertyChange(evt);
			}
		});

		jScrollPane1.setViewportView(labTree);

		add(jScrollPane1, java.awt.BorderLayout.CENTER);

	}// GEN-END:initComponents

	private void labTreePropertyChange(final java.beans.PropertyChangeEvent evt)// GEN-FIRST:event_labTreePropertyChange
	{// GEN-HEADEREND:event_labTreePropertyChange
		// it came from the editor, it was the only way I found to detect two
		// clicks events in the editor...
		if (evt.getPropertyName().equals("ddc")) {
			final TreePath selPath = labTree.getPathForRow(((Integer) evt.getNewValue()).intValue());
			final DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode) selPath.getLastPathComponent();
			final Object o = currentNode.getUserObject();

			final Lab l = getParentLab(currentNode);
			final Apparatus app = getParentApparatus(currentNode);
			fireTreeSelectionChangeListenerDisplaySelectionChange(new DisplaySelectionEvent(this, (Display) o, app, l));
		}
	}// GEN-LAST:event_labTreePropertyChange

	private void labTreeMousePressed(final java.awt.event.MouseEvent evt)// GEN-FIRST:event_labTreeMousePressed
	{// GEN-HEADEREND:event_labTreeMousePressed
		if (evt.getClickCount() == 2) {
			final int selRow = labTree.getRowForLocation(evt.getX(), evt.getY());
			final TreePath selPath = labTree.getPathForLocation(evt.getX(), evt.getY());

			if (selRow < 0) {
				return;
			}

			final DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode) selPath.getLastPathComponent();
			final Object o = currentNode.getUserObject();

			final Lab l = getParentLab(currentNode);
			final Apparatus app = getParentApparatus(currentNode);

			if (o instanceof Lab) {
				fireTreeSelectionChangeListenerLabSelectionChange(new LabSelectionEvent(this, (Lab) o));
			} else if (o instanceof Apparatus) {
				fireTreeSelectionChangeListenerApparatusSelectionChange(new ApparatusSelectionEvent(this,
						(Apparatus) o, l));
			} else if (o instanceof WebResource) {
				fireTreeSelectionChangeListenerWebResourceSelectionChange(new WebResourceSelectionEvent(this,
						(WebResource) o, app, l));
			} else if (o instanceof DefaultAcquisitionConfig) {
				fireTreeSelectionChangeListenerDefaultConfigSelectionChange(new DefaultConfigSelectionEvent(this,
						(DefaultAcquisitionConfig) o, app, l));
			} else if (o instanceof Display) {
				fireTreeSelectionChangeListenerDisplaySelectionChange(new DisplaySelectionEvent(this, (Display) o, app,
						l));
			}
		}
	}// GEN-LAST:event_labTreeMousePressed

	private Apparatus getParentApparatus(DefaultMutableTreeNode node) {
		Object o = null;

		while (node.getParent() != null) {
			o = node.getUserObject();
			if (o instanceof Apparatus) {
				return (Apparatus) o;
			}
			if (node.getParent() != null) {
				node = (DefaultMutableTreeNode) node.getParent();
			} else {
				return null;
			}
		}

		return null;
	}

	private Lab getParentLab(DefaultMutableTreeNode node) {
		Object o = null;

		while (node.getParent() != null) {
			o = node.getUserObject();
			if (o instanceof Lab) {
				return (Lab) o;
			}
			if (node.getParent() != null) {
				node = (DefaultMutableTreeNode) node.getParent();
			} else {
				return null;
			}
		}
		return null;
	}

	/**
	 * Registers TreeSelectionChangeListener to receive events.
	 * 
	 * @param listener The listener to register.
	 */
	public synchronized void addTreeSelectionChangeListener(
			final com.linkare.rec.impl.baseUI.labsTree.TreeSelectionChangeListener listener) {
		if (listenerList == null) {
			listenerList = new javax.swing.event.EventListenerList();
		}
		listenerList.add(com.linkare.rec.impl.baseUI.labsTree.TreeSelectionChangeListener.class, listener);
	}

	/**
	 * Removes TreeSelectionChangeListener from the list of listeners.
	 * 
	 * @param listener The listener to remove.
	 */
	public synchronized void removeTreeSelectionChangeListener(
			final com.linkare.rec.impl.baseUI.labsTree.TreeSelectionChangeListener listener) {
		listenerList.remove(com.linkare.rec.impl.baseUI.labsTree.TreeSelectionChangeListener.class, listener);
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param event The event to be fired
	 */
	private void fireTreeSelectionChangeListenerApparatusSelectionChange(
			final com.linkare.rec.impl.baseUI.labsTree.ApparatusSelectionEvent event) {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == com.linkare.rec.impl.baseUI.labsTree.TreeSelectionChangeListener.class) {
				((com.linkare.rec.impl.baseUI.labsTree.TreeSelectionChangeListener) listeners[i + 1])
						.apparatusSelectionChange(event);
			}
		}
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param event The event to be fired
	 */
	private void fireTreeSelectionChangeListenerDefaultConfigSelectionChange(
			final com.linkare.rec.impl.baseUI.labsTree.DefaultConfigSelectionEvent event) {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == com.linkare.rec.impl.baseUI.labsTree.TreeSelectionChangeListener.class) {
				((com.linkare.rec.impl.baseUI.labsTree.TreeSelectionChangeListener) listeners[i + 1])
						.defaultConfigSelectionChange(event);
			}
		}
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param event The event to be fired
	 */
	private void fireTreeSelectionChangeListenerDisplaySelectionChange(
			final com.linkare.rec.impl.baseUI.labsTree.DisplaySelectionEvent event) {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == com.linkare.rec.impl.baseUI.labsTree.TreeSelectionChangeListener.class) {
				((com.linkare.rec.impl.baseUI.labsTree.TreeSelectionChangeListener) listeners[i + 1])
						.displaySelectionChange(event);
			}
		}
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param event The event to be fired
	 */
	private void fireTreeSelectionChangeListenerWebResourceSelectionChange(
			final com.linkare.rec.impl.baseUI.labsTree.WebResourceSelectionEvent event) {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == com.linkare.rec.impl.baseUI.labsTree.TreeSelectionChangeListener.class) {
				((com.linkare.rec.impl.baseUI.labsTree.TreeSelectionChangeListener) listeners[i + 1])
						.webResourceSelectionChange(event);
			}
		}
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param event The event to be fired
	 */
	private void fireTreeSelectionChangeListenerLabSelectionChange(
			final com.linkare.rec.impl.baseUI.labsTree.LabSelectionEvent event) {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == com.linkare.rec.impl.baseUI.labsTree.TreeSelectionChangeListener.class) {
				((com.linkare.rec.impl.baseUI.labsTree.TreeSelectionChangeListener) listeners[i + 1])
						.labSelectionChange(event);
			}
		}
	}

	public void populateTree(final ReCBaseUIConfig config) {
		model.populateTree(config);
	}

	public LabsTreeModel getModel() {
		return model;
	}

	public Apparatus getApparatus(final String uniqueID) {
		return model.getApparatus(uniqueID);
	}

	public DisplayNode getCurrentSelectedNode() {
		if (labTree.getSelectionPath() == null) {
			return null;
		}

		final Object selected = labTree.getSelectionPath().getLastPathComponent();
		if (selected instanceof DefaultMutableTreeNode) {
			if (((DefaultMutableTreeNode) selected).getUserObject() instanceof DisplayNode) {
				return (DisplayNode) ((DefaultMutableTreeNode) selected).getUserObject();
			}
		}

		return null;
	}

	public void updateTree() {
		if (!labTree.isVisible() || model == null) {
			return;
		}

		synchronized (this) {
			labTree.repaint();
		}
		/*
		 * java.util.ArrayList expandedPaths = getExpandedPaths();
		 * model.reload(); expandPaths(expandedPaths);
		 */
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTree labTree;
	// End of variables declaration//GEN-END:variables

	/**
	 * Utility field used by event firing mechanism.
	 */
	private javax.swing.event.EventListenerList listenerList = null;

}
