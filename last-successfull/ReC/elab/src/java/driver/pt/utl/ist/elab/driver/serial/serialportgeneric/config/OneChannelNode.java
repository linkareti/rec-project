//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0-b26-ea3 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.10.02 at 10:54:22 AM BST 
//

package pt.utl.ist.elab.driver.serial.serialportgeneric.config;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for OneChannelNode complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name="OneChannelNode">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="transfer_function" type="{}TransferFunctionNode" maxOccurs="2" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="format" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="order" use="required" type="{http://www.w3.org/2001/XMLSchema}integer" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "OneChannelNode", propOrder = { "transferFunction" })
public class OneChannelNode {

	@XmlElement(name = "transfer_function")
	protected List<TransferFunctionNode> transferFunction;
	@XmlAttribute(required = true)
	protected String format;
	@XmlAttribute(required = true)
	protected BigInteger order;

	/**
	 * Gets the value of the transferFunction property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list, not a
	 * snapshot. Therefore any modification you make to the returned list will
	 * be present inside the JAXB object. This is why there is not a
	 * <CODE>set</CODE> method for the transferFunction property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getTransferFunction().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list
	 * {@link TransferFunctionNode }
	 * 
	 * 
	 */
	public List<TransferFunctionNode> getTransferFunction() {
		if (transferFunction == null) {
			transferFunction = new ArrayList<TransferFunctionNode>();
		}
		return this.transferFunction;
	}

	/**
	 * Gets the value of the format property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getFormat() {
		return format;
	}

	/**
	 * Sets the value of the format property.
	 * 
	 * @param value allowed object is {@link String }
	 * 
	 */
	public void setFormat(String value) {
		this.format = value;
	}

	/**
	 * Gets the value of the order property.
	 * 
	 * @return possible object is {@link BigInteger }
	 * 
	 */
	public BigInteger getOrder() {
		return order;
	}

	/**
	 * Sets the value of the order property.
	 * 
	 * @param value allowed object is {@link BigInteger }
	 * 
	 */
	public void setOrder(BigInteger value) {
		this.order = value;
	}

	public Double calculate(Double value) {
		if (transferFunction == null || transferFunction.isEmpty()) {
			return value;
		}
		
		Double total = 0D;
		for (TransferFunctionNode node : transferFunction) {
			for (LinearFunctionNode linear : node.getLinear()) {
				total = total + pD(linear.getParam().getWeight()) * value - pD(linear.getParam().getCenter());
			}
			for (PowerFunctionNode power : node.getPower()) {
				total = total + pD(power.getParam().getWeight())
						* Math.pow((value - pD(power.getParam().getCenter())), pD(power.getParam().getPower()));
			}
			for (ExpFunctionNode expon : node.getExponential()) {
				total = total + pD(expon.getParam().getWeight())
						* Math.exp(pD(expon.getParam().getCoeficient()) * (value - pD(expon.getParam().getCenter())));
			}
			for (LogFunctionNode log : node.getLogarithm()) {
				total = total + pD(log.getParam().getWeight())
						* Math.log(pD(log.getParam().getCoeficient()) * (value - pD(log.getParam().getCenter())));
			}
			for (SinFunctionNode sin : node.getSin()) {
				total = total + pD(sin.getParam().getWeight())
						* Math.sin(pD(sin.getParam().getCoeficient()) * value - pD(sin.getParam().getDelta()));
			}
			for (TgFunctionNode tg : node.getTg()) {
				total = total + pD(tg.getParam().getWeight())
						* Math.tan(pD(tg.getParam().getCoeficient()) * value - pD(tg.getParam().getDelta()));
			}
		}
		
		return total;
	}
	
	private static Double pD(String s) {
		return Double.parseDouble(s);
	}

}
