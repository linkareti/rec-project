'{$STAMP BS2}

'Nota que existe um protocolo nas mensagens:
' PC -> STAMP - minúsculas
' STAMP -> PC - maiúsculas

'******* DEFAULT VARIABLES ********

speedCon   	con     16468			'16572/4800 16468/9600 16780/2400 17197/1200
spaceByte	var	byte			'Byte auxiliar (Space)
TX		con	16
RX		con	16
i		var 	word
nsamples	var	word			' nº de amostras a adquirir

'******* END DEFAULT VARIABLES *******


'******* SPECIFIC VARIABLES *******
'''' exemplo de outras variáveis necessárias ''''
'CS 		con	13 			' Selecciona o chip;	12->ADC1 ; 13->ADC2
'CLK 		con 	14 			' Clock Para os ADCs.
'DIO_n 		con 	15 			' Pino de I/O para os dados.
'config 	var 	nib 			' Configuração para o ADC.
'pressao 	var 	word 			' Pressão no interior da seringa.
'startB 	var 	config.bit0 		' Start bit para o ADC.
'sglDif 	var 	config.bit1 		' Modo monocanal or diferencial.
'chsel 		var 	config.bit2 		' Selecção do canal do ADC.
'msbf 		var 	config.bit3 		' Lowbit para terminar a transferência.
'posi		var	word			' Posição lida pelo ADC
'userposlow	var	word			' Posição inicial [0..25]
'userposhigh	var	word			' Posição final [0..25]
'npontos	var	word			' nº de pontos a adquirir no intervalo npontos<|userposlow-userposhigh|*23
'i		var 	word			' Contador auxiliar
'dt		var 	word			' Intervalo entre pontos [0..10000]
'dx		var 	word			' Espaço entre pontos
'posizero	con	450			'offset PWM para posicao inicial
'Convert	con	23			'factor de conversao decimasmililitro para unidades PWM (2us)
'CTS		con	3
'ConvPres	con	14			' Factor conversao ADC->kPa
'ConvVol	con	2			' Factor conversao ADC->Volume
'VolInit	con	5000			' Volume inicial em microlitros


'******* END SPECIFIC VARIABLES *******


'********************************************
'Configuração inicial

InitConfig:	'exemplo de uma rotina de inicializacao
	'low 	CTS
	'high 	CS 					' Deactivate ADC to begin.
	'high 	DIO_n					' Set data pin for first start bit. 


'********************************************
'Reset - retorna à base...
Reset:
	gosub FlashLight 'Pisca as luzinhas em cada reset... assim sabemos que lá está...

	'Exemplo instroções a realizar no reset
	'DIR8=1
	'low 8
	'PULSOUT 8, posizero-20
	'pause 200
	'PULSOUT 8, posizero-20
	'low8

	goto MainWait


'********************************************
'Não foi configurado
Not_Configured:
	SerOut TX,speedCon,["CONFIG_START_NOT_DONE",cr]


'********************************************
'Aguarda um ConfigStart pacientemente, enquanto vai informando quem é!
MainWait:
	SerOut TX,speedCon,["EXP_STAMP_V0.1",cr]				' Identifica-se
	Serin RX,speedCon,5000,Not_Configured,[wait("cfg")]	' Espera os dados da configuracao
	'Como exemplo
	'Serin RX,speedCon,5000,Not_Configured,[wait("cfg"),spaceByte,dec2 userposlow,sk,dec2 userposhigh,sk,dec4 npontos,sk,dec4 dt]

'********************************************
'Ok, configurado! Get Ready...
Configured:
	SerOut TX,speedCon,[cr,"CONFIG_START_ACCEPTED",cr]	'Aceitou a configuracao

	' Inicializa as variaveis... como exemplo
	'userposlow=userposlow*Convert
	'userposhigh=userposhigh*Convert
	'dx = (userposhigh/npontos)-(userposlow/npontos)
	'i=0
	SerOut TX,speedCon,["STARTED",cr]		' Avisa que vai arrancar a rotina de aquisicao
'********************************************
'Set... Go!
AcqLoop:'Neste Loop vao ser efectuadas as leituras e transmitidos os dados

	'exemplo: Transmite os dados adquiridos
	'SerOut TX, speedCon, ["Volume", Dec Volume, "Pressao", Dec Pressao,cr]
	'Verifica se nao e mandado parar - as duas mensagens seguintes formam um par...
	'se não fôr possível para o Hardware pede-se que não incluam a mensagem de output "STOP"
	SerOut TX, speedCon,["STOP",cr]
	SerIn RX, speedCon,1000, Continue, [Wait("stop")] 
goto StopIt

Continue:
	i=i+1
	if i>=nsamples then StopIt

goto AcqLoop


'********************************************
'Set... Go!
StopIt:
' escolhe um dos próximos gotos...
goto Reset
'goto MainWait




'********************************************
' Função faz piscar 4 vezes o led vermelho para debug
FlashLight:
	low 7
	for i=0 to 4
		out7 = 0
		pause 400
		out7 = 1
		pause 400
	next
	out7 = 0
return
'********************************************