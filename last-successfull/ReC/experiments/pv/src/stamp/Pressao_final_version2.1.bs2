'{$STAMP BS2}

'Nota que existe um protocolo nas mensagens:
' PC -> STAMP - minúsculas
' STAMP -> PC - maiúsculas

'******* DEFAULT VARIABLES ********

speedCon   	con     16468			'16572/4800 16468/9600 16780/2400 17197/1200
spaceByte	var	byte			'Byte auxiliar (Space)
TX		con	16
RX		con	16
i		var 	word
nsamples	var	word			' nº de amostras a adquirir

'******* END DEFAULT VARIABLES *******


'******* SPECIFIC VARIABLES *******

CS 		con	13 			' Selecciona o chip;	12->ADC1 ; 13->ADC2
CLK 		con 	14 			' Clock Para os ADCs.
DIO_n 		con 	15 			' Pino de I/O para os dados.
config 		var 	nib 			' Configuração para o ADC.
pressao 	var 	word 			' Pressão no interior da seringa.
startB 		var 	config.bit0 		' Start bit para o ADC.
sglDif 		var 	config.bit1 		' Modo monocanal or diferencial.
chsel 		var 	config.bit2 		' Selecção do canal do ADC.
msbf 		var 	config.bit3 		' Lowbit para terminar a transferência.
posi		var	word			' Posição lida pelo ADC
userposlow	var	word			' Posição inicial [20..50]
userposhigh	var	word			' Posição final [20..50]
npontos		var	word			' nº de pontos a adquirir no intervalo npontos<|userposlow-userposhigh|*23
dt		var 	word			' Intervalo entre pontos [0..10000] - dt=0?????
dx		var 	word			' Espaço entre pontos
invert		var	bit			'sinal do step =1 userposlow>userposhigh
noinvert	var	bit
PWMposi		var	word			'step motor position

posizero	con	540			'offset PWM para posicao inicial - define os 5 ml
Convert		con	17			'factor de conversao decimasmililitro para unidades PWM (2us) inicial:23
CTS		con	3
ConvPres	con	2			' Factor conversao ADC->kPa deve ser 2.1 alterado no codigo
ConvVol		con	2			' Factor conversao ADC->Volume
VolInit		con	5000			' Volume inicial em microlitros
b		con	1390			'offset na origem = pozizero+convert*50
'******* END SPECIFIC VARIABLES *******


'********************************************
'Configuração inicial

InitConfig:	'exemplo de uma rotina de inicializacao
	low 	CTS
	high 	CS 					' Deactivate ADC to begin.
	high 	DIO_n					' Set data pin for first start bit. 
	DIR8=1
	for i= 0 to 100
		low 8
		PULSOUT 8,posizero-20
	  	low 8
		pause 20
	next
	userposlow=50

'********************************************
'Reset - retorna à base...
Reset:
	gosub FlashLight 'Pisca as luzinhas em cada reset... assim sabemos que lá está...
	


	'goto MainWait


'********************************************
'Não foi configurado
Not_Configured:
	low 8
	PULSOUT 8,posizero-10
  	Pause 200
	PULSOUT 8,posizero-10
	low 8	
	SerOut TX,speedCon,["CONFIG_START_NOT_DONE",cr]


'********************************************
'Aguarda um ConfigStart pacientemente, enquanto vai informando quem é!
MainWait:
	high CTS
	SerOut TX,speedCon,["ELAB_PV_STAMP_V02",cr]				' Identifica-se
	Serin RX,speedCon,2000,Not_Configured,[wait("cfg "),dec2 userposlow,spaceByte,dec2 userposhigh,spaceByte,dec3 npontos,spaceByte,dec4 dt]

'	low CTS ' does not low CTS?
	if userposlow<20 OR userposlow>50 OR userposhigh<20 OR userposhigh>50 then Not_Configured

'********************************************
'Ok, configurado! Get Ready...
Configured:

	SerOut TX,speedCon,[cr,"CONFIG_START_ACCEPTED",cr]	'Aceitou a configuracao
	pause 1000 'Why Pause?
	userposlow=(userposlow*Convert)
	userposhigh=(userposhigh*Convert)
	invert=0
	noinvert=1
	dx = (userposhigh/npontos)-(userposlow/npontos)
	if userposlow < userposhigh then skipit:
	invert=1
	noinvert=0
	dx = (userposlow/npontos)-(userposhigh/npontos)
skipit:
	for i= 0 to 20
		low 8
		PULSOUT 8,b-userposlow+(noinvert*10)
		pause 50
	next
	i=0
	goto AcqLoopEnter

	

'********************************************
'Set... Go!

AcqLoopEnter:
	SerOut TX,speedCon,["STARTED",cr]		' Avisa que vai arrancar a rotina de aquisicao

AcqLoop:
	low 8
	PWMposi=b-userposlow+(invert*(i*dx))-(noinvert*(i*dx))
	PULSOUT 8,PWMposi
	low 8
	pause dt
	config = %1011 						' Set all bits except oddSign.
	low CS 							' Activate the ADC.
	shiftout DIO_n,CLK,lsbfirst,[config\4]			' Send config bits.
	shiftin DIO_n,CLK,msbpost,[posi\12] 			' Get data bits.						' Deactivate the ADC.
	high CS
	config = %1111						' Mede a pressão
	low CS 							' Activate the ADC.
	shiftout DIO_n,CLK,lsbfirst,[config\4]			' Send config bits.
	shiftin DIO_n,CLK,msbpost,[pressao\12] 			' Get data bits.
	high CS							' Deactivate the ADC.
'	'SerOut TX,speedCon,["PRESSAO ",dec5 (21*pressao)/10-550," VOLUME ",dec4 (VolInit-((7*posi)/9))," DX ",dec dx," DIR ",dec invert," POSI ",dec PWMposi," " ,dec posi,cr]
	SerOut TX,speedCon,["PRESSAO ",dec5 (21*pressao)/10-550," VOLUME ",dec4 (VolInit-((7*posi)/9)),cr]
	goto Continue
	'Será que não podemos mesmo parar?
	'SerOut TX, speedCon,["STOP", cr]
	'SerIn RX, speedCon,100, Continue, [Wait("stop")] 
	'SerOut TX, speedCon,[cr]
	'goto StopIt

Continue:
	i=i+1
	if i>npontos then StopIt
	goto AcqLoop

'********************************************
'Stop It!
StopIt:
	goto Reset

'********************************************
' Função faz piscar 4 vezes o led vermelho para debug
FlashLight:
	low 7
	for i=0 to 4
		out7 = 0
		pause 100
		out7 = 1
		pause 100
	next
	out7 = 0
return
'********************************************