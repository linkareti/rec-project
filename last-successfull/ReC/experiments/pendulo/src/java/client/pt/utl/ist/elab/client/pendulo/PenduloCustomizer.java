/*
 * RadioactividadeCustomizer.java
 *
 * Created on 16 de Maio de 2003, 10:11
 */

package pt.utl.ist.elab.client.pendulo;

import javax.swing.SwingConstants;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.synch.Frequency;
import com.linkare.rec.impl.client.customizer.AbstractCustomizer;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

/**
 * 
 * @author Jos√© Pedro Pereira - Linkare TI
 */
public class PenduloCustomizer extends AbstractCustomizer {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8039639352824793000L;

	/** Creates new form RadioactividadeCustomizer */
	public PenduloCustomizer() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		java.awt.GridBagConstraints gridBagConstraints;

		buttonGroupStatus = new javax.swing.ButtonGroup();
		jPanel2 = new javax.swing.JPanel();
		btnOK = new javax.swing.JButton();
		btnCancel = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		btnDefaults = new javax.swing.JButton();
		jLabel3 = new javax.swing.JLabel();
		jPanel3 = new javax.swing.JPanel();
		jPanel5 = new javax.swing.JPanel();
		sldAngle = new javax.swing.JSlider();
		tfAngle = new javax.swing.JTextField();
		jPanel6 = new javax.swing.JPanel();
		sldNumSamples = new javax.swing.JSlider();
		tfNumSamples = new javax.swing.JTextField();
		lblErrorSamplesTooHigh = new javax.swing.JLabel();
		jPanel1 = new javax.swing.JPanel();
		sldFreq = new javax.swing.JSlider();
		tfFreq = new javax.swing.JTextField();
		jPanel51 = new javax.swing.JPanel();
		sldHeight = new javax.swing.JSlider();
		tfHeight = new javax.swing.JTextField();
		jPanel511 = new javax.swing.JPanel();
		radioStatus00 = new javax.swing.JRadioButton();
		radioStatus01 = new javax.swing.JRadioButton();
		radioStatus10 = new javax.swing.JRadioButton();
		radioStatus11 = new javax.swing.JRadioButton();

		setLayout(new java.awt.BorderLayout());

		setMinimumSize(new java.awt.Dimension(420, 400));
		setPreferredSize(new java.awt.Dimension(420, 400));
		jPanel2.setLayout(new java.awt.GridBagLayout());

		jPanel2.setMinimumSize(new java.awt.Dimension(350, 42));
		jPanel2.setPreferredSize(new java.awt.Dimension(350, 42));
		btnOK.setText(ReCResourceBundle.findStringOrDefault("pendulo$rec.exp.pendulo.lbl.ok",
				"pendulo$rec.exp.pendulo.lbl.ok"));
		btnOK.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				btnOKActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		jPanel2.add(btnOK, gridBagConstraints);

		btnCancel.setText(ReCResourceBundle.findStringOrDefault("pendulo$rec.exp.pendulo.lbl.cancel",
				"pendulo$rec.exp.pendulo.lbl.cancel"));
		btnCancel.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				btnCancelActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		jPanel2.add(btnCancel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 10.0;
		jPanel2.add(jLabel1, gridBagConstraints);

		btnDefaults.setText(ReCResourceBundle.findStringOrDefault("pendulo$rec.exp.dftcfg.pendulo.title.1",
				"pendulo$rec.exp.dftcfg.pendulo.title.1"));
		btnDefaults.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				btnDefaultsActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 1;
		jPanel2.add(btnDefaults, gridBagConstraints);

		jLabel3.setText("    ");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weighty = 1.0;
		jPanel2.add(jLabel3, gridBagConstraints);

		add(jPanel2, java.awt.BorderLayout.SOUTH);

		jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));

		jPanel3.setMinimumSize(new java.awt.Dimension(350, 160));
		jPanel5.setLayout(new java.awt.GridBagLayout());

		jPanel5.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"pendulo$rec.exp.pendulo.lbl.angini", "pendulo$rec.exp.pendulo.lbl.angini")));
		jPanel5.setMinimumSize(new java.awt.Dimension(350, 80));
		jPanel5.setPreferredSize(new java.awt.Dimension(350, 80));
		sldAngle.setMajorTickSpacing(5);
		sldAngle.setMaximum(10);
		sldAngle.setMinorTickSpacing(1);
		sldAngle.setPaintLabels(true);
		sldAngle.setPaintTicks(true);
		sldAngle.setPaintTrack(false);
		sldAngle.setSnapToTicks(true);
		sldAngle.setMinimumSize(new java.awt.Dimension(250, 42));
		sldAngle.setPreferredSize(new java.awt.Dimension(250, 42));
		sldAngle.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				sldAngleStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
		gridBagConstraints.weighty = 10.0;
		jPanel5.add(sldAngle, gridBagConstraints);

		tfAngle.setColumns(2);
		tfAngle.setHorizontalAlignment(SwingConstants.RIGHT);
		tfAngle.setText("5");
		tfAngle.setMaximumSize(new java.awt.Dimension(30, 16));
		tfAngle.setMinimumSize(new java.awt.Dimension(30, 16));
		tfAngle.setPreferredSize(new java.awt.Dimension(26, 16));
		tfAngle.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusLost(final java.awt.event.FocusEvent evt) {
				tfAngleFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel5.add(tfAngle, gridBagConstraints);

		jPanel3.add(jPanel5);

		jPanel6.setLayout(new java.awt.GridBagLayout());

		jPanel6.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"pendulo$rec.exp.pendulo.lbl.nsamples", "pendulo$rec.exp.pendulo.lbl.nsamples")));
		jPanel6.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
		jPanel6.setMinimumSize(new java.awt.Dimension(350, 80));
		jPanel6.setPreferredSize(new java.awt.Dimension(350, 80));
		sldNumSamples.setMajorTickSpacing(100);
		sldNumSamples.setMaximum(500);
		sldNumSamples.setMinorTickSpacing(50);
		sldNumSamples.setPaintLabels(true);
		sldNumSamples.setPaintTicks(true);
		sldNumSamples.setPaintTrack(false);
		sldNumSamples.setMaximumSize(new java.awt.Dimension(1000, 32767));
		sldNumSamples.setMinimumSize(new java.awt.Dimension(250, 42));
		sldNumSamples.setPreferredSize(new java.awt.Dimension(250, 42));
		sldNumSamples.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				sldNumSamplesStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.weighty = 10.0;
		jPanel6.add(sldNumSamples, gridBagConstraints);

		tfNumSamples.setColumns(3);
		tfNumSamples.setHorizontalAlignment(SwingConstants.RIGHT);
		tfNumSamples.setText("50");
		tfNumSamples.setMaximumSize(new java.awt.Dimension(30, 16));
		tfNumSamples.setMinimumSize(new java.awt.Dimension(30, 16));
		tfNumSamples.setPreferredSize(new java.awt.Dimension(37, 16));
		tfNumSamples.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusLost(final java.awt.event.FocusEvent evt) {
				tfNumSamplesFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel6.add(tfNumSamples, gridBagConstraints);

		lblErrorSamplesTooHigh.setForeground(new java.awt.Color(255, 0, 0));
		lblErrorSamplesTooHigh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		lblErrorSamplesTooHigh.setText(ReCResourceBundle.findStringOrDefault(
				"pendulo$rec.exp.pendulo.lbl.maxsamples.1", "pendulo$rec.exp.pendulo.lbl.maxsamples.1"));
		lblErrorSamplesTooHigh.setEnabled(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		jPanel6.add(lblErrorSamplesTooHigh, gridBagConstraints);

		jPanel3.add(jPanel6);

		jPanel1.setLayout(new java.awt.GridBagLayout());

		jPanel1.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"pendulo$rec.exp.pendulo.lbl.freq", "pendulo$rec.exp.pendulo.lbl.freq")));
		jPanel1.setMinimumSize(new java.awt.Dimension(350, 80));
		jPanel1.setPreferredSize(new java.awt.Dimension(350, 80));
		sldFreq.setMajorTickSpacing(25);
		sldFreq.setMaximum(125);
		sldFreq.setMinimum(25);
		sldFreq.setMinorTickSpacing(5);
		sldFreq.setPaintLabels(true);
		sldFreq.setPaintTicks(true);
		sldFreq.setPaintTrack(false);
		sldFreq.setValue(20);
		sldFreq.setMaximumSize(new java.awt.Dimension(1000, 32767));
		sldFreq.setMinimumSize(new java.awt.Dimension(255, 80));
		sldFreq.setPreferredSize(new java.awt.Dimension(255, 80));
		sldFreq.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				sldFreqStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		gridBagConstraints.weighty = 10.0;
		jPanel1.add(sldFreq, gridBagConstraints);

		tfFreq.setColumns(3);
		tfFreq.setHorizontalAlignment(SwingConstants.RIGHT);
		tfFreq.setText("50");
		tfFreq.setMaximumSize(new java.awt.Dimension(30, 16));
		tfFreq.setMinimumSize(new java.awt.Dimension(30, 16));
		tfFreq.setPreferredSize(new java.awt.Dimension(37, 16));
		tfFreq.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusLost(final java.awt.event.FocusEvent evt) {
				tfFreqFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel1.add(tfFreq, gridBagConstraints);

		jPanel3.add(jPanel1);

		add(jPanel3, java.awt.BorderLayout.CENTER);

		jPanel51.setLayout(new java.awt.GridBagLayout());

		jPanel51.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"pendulo$rec.exp.pendulo.lbl.hini", "pendulo$rec.exp.pendulo.lbl.hini")));
		jPanel51.setMinimumSize(new java.awt.Dimension(100, 350));
		jPanel51.setPreferredSize(new java.awt.Dimension(100, 350));
		sldHeight.setMajorTickSpacing(10);
		sldHeight.setMaximum(90);
		sldHeight.setMinimum(50);
		sldHeight.setMinorTickSpacing(2);
		sldHeight.setOrientation(SwingConstants.VERTICAL);
		sldHeight.setPaintLabels(true);
		sldHeight.setPaintTicks(true);
		sldHeight.setPaintTrack(false);
		sldHeight.setValue(60);
		sldHeight.setMaximumSize(new java.awt.Dimension(1000, 32767));
		sldHeight.setMinimumSize(new java.awt.Dimension(50, 250));
		sldHeight.setPreferredSize(new java.awt.Dimension(50, 250));
		sldHeight.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				sldHeightStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
		gridBagConstraints.weighty = 10.0;
		jPanel51.add(sldHeight, gridBagConstraints);

		tfHeight.setColumns(3);
		tfHeight.setHorizontalAlignment(SwingConstants.RIGHT);
		tfHeight.setText("60");
		tfHeight.setMaximumSize(new java.awt.Dimension(30, 16));
		tfHeight.setMinimumSize(new java.awt.Dimension(30, 16));
		tfHeight.setPreferredSize(new java.awt.Dimension(37, 16));
		tfHeight.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusLost(final java.awt.event.FocusEvent evt) {
				tfHeightFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel51.add(tfHeight, gridBagConstraints);

		add(jPanel51, java.awt.BorderLayout.WEST);

		jPanel511.setLayout(new java.awt.GridBagLayout());

		jPanel511.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"pendulo$rec.exp.pendulo.lbl.friction.tittle", "pendulo$rec.exp.pendulo.lbl.friction.tittle")));
		jPanel511.setMinimumSize(new java.awt.Dimension(150, 50));
		jPanel511.setPreferredSize(new java.awt.Dimension(150, 50));
		radioStatus00.setSelected(true);
		radioStatus00.setText("no friction");
		buttonGroupStatus.add(radioStatus00);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		jPanel511.add(radioStatus00, gridBagConstraints);

		radioStatus01.setText(ReCResourceBundle.findStringOrDefault("pendulo$rec.exp.pendulo.lbl.friction.25",
				"pendulo$rec.exp.pendulo.lbl.friction.25"));
		buttonGroupStatus.add(radioStatus01);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		jPanel511.add(radioStatus01, gridBagConstraints);

		radioStatus10.setText(ReCResourceBundle.findStringOrDefault("pendulo$rec.exp.pendulo.lbl.friction.17",
				"pendulo$rec.exp.pendulo.lbl.friction.17"));
		buttonGroupStatus.add(radioStatus10);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		jPanel511.add(radioStatus10, gridBagConstraints);

		radioStatus11.setText(ReCResourceBundle.findStringOrDefault("pendulo$rec.exp.pendulo.lbl.friction.12",
				"pendulo$rec.exp.pendulo.lbl.friction.12"));
		buttonGroupStatus.add(radioStatus11);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		jPanel511.add(radioStatus11, gridBagConstraints);

		add(jPanel511, java.awt.BorderLayout.NORTH);

	}// GEN-END:initComponents

	private void tfAngleFocusLost(final java.awt.event.FocusEvent evt)// GEN-FIRST:event_tfAngleFocusLost
	{// GEN-HEADEREND:event_tfAngleFocusLost
		final String strAngle = tfAngle.getText();
		if (strAngle.trim().equals("")) {
			return;
		}
		try {
			final int angle = Integer.parseInt(strAngle);
			if (angle <= sldAngle.getMaximum() && angle > sldAngle.getMinimum()) {
				sldAngle.setValue(angle);
			} else {
				tfAngle.setText("" + sldAngle.getValue());
			}
		} catch (final Exception e) {
			tfAngle.setText("" + sldAngle.getValue());
		}
	}// GEN-LAST:event_tfAngleFocusLost

	private void tfNumSamplesFocusLost(final java.awt.event.FocusEvent evt)// GEN-FIRST:event_tfNumSamplesFocusLost
	{// GEN-HEADEREND:event_tfNumSamplesFocusLost
		final String strNumSamples = tfNumSamples.getText();
		if (strNumSamples.trim().equals("")) {
			return;
		}
		try {
			final int numSamples = Integer.parseInt(strNumSamples);
			if (numSamples <= sldNumSamples.getMaximum() && numSamples > sldNumSamples.getMinimum()) {
				sldNumSamples.setValue(numSamples);
			} else {
				tfNumSamples.setText("" + sldNumSamples.getValue());
			}
		} catch (final Exception e) {
			tfNumSamples.setText("" + sldNumSamples.getValue());
		}
		checkMaxNumSamples();

	}// GEN-LAST:event_tfNumSamplesFocusLost

	private void tfFreqFocusLost(final java.awt.event.FocusEvent evt)// GEN-FIRST:event_tfFreqFocusLost
	{// GEN-HEADEREND:event_tfFreqFocusLost
		final String strFreq = tfFreq.getText();
		if (strFreq.trim().equals("")) {
			return;
		}
		try {
			final int Freq = Integer.parseInt(strFreq);
			if (Freq <= sldFreq.getMaximum() && Freq > sldFreq.getMinimum()) {
				sldFreq.setValue(Freq);
			} else {
				tfFreq.setText("" + sldFreq.getValue());
			}
		} catch (final Exception e) {
			tfFreq.setText("" + sldFreq.getValue());
		}
		checkMaxNumSamples();
	}// GEN-LAST:event_tfFreqFocusLost

	private void tfHeightFocusLost(final java.awt.event.FocusEvent evt)// GEN-FIRST:event_tfHeightFocusLost
	{// GEN-HEADEREND:event_tfHeightFocusLost
		final String strHeight = tfHeight.getText();
		if (strHeight.trim().equals("")) {
			return;
		}
		try {
			final int height = Integer.parseInt(strHeight);
			if (height <= sldHeight.getMaximum() && height > sldHeight.getMinimum()) {
				sldHeight.setValue(height);
			} else {
				tfHeight.setText("" + sldHeight.getValue());
			}
		} catch (final Exception e) {
			tfHeight.setText("" + sldHeight.getValue());
		}
	}// GEN-LAST:event_tfHeightFocusLost

	private void sldHeightStateChanged(final javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_sldHeightStateChanged
	{// GEN-HEADEREND:event_sldHeightStateChanged
		tfHeight.setText("" + sldHeight.getValue());
	}// GEN-LAST:event_sldHeightStateChanged

	private void sldAngleStateChanged(final javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_sldAngleStateChanged
	{// GEN-HEADEREND:event_sldAngleStateChanged
		tfAngle.setText("" + sldAngle.getValue());
	}// GEN-LAST:event_sldAngleStateChanged

	private void sldFreqStateChanged(final javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_sldFreqStateChanged
	{// GEN-HEADEREND:event_sldFreqStateChanged
		if (sldFreq.getValue() == 0) {
			sldFreq.setValue(1);

		}
		tfFreq.setText("" + sldFreq.getValue());

		checkMaxNumSamples();
	}// GEN-LAST:event_sldFreqStateChanged

	private void checkMaxNumSamples() {
		lblErrorSamplesTooHigh.setEnabled(sldNumSamples.getValue() > 4 * sldFreq.getValue());
		btnOK.setEnabled(!lblErrorSamplesTooHigh.isEnabled());
		lblErrorSamplesTooHigh.setText(ReCResourceBundle.findStringOrDefault(
				"pendulo$rec.exp.pendulo.lbl.maxsamples.2", "pendulo$rec.exp.pendulo.lbl.maxsamples.2")
				+ 4
				* sldFreq.getValue());
	}

	private void sldNumSamplesStateChanged(final javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_sldNumSamplesStateChanged
	{// GEN-HEADEREND:event_sldNumSamplesStateChanged

		if (sldNumSamples.getValue() == 0) {
			sldNumSamples.setValue(1);

		}
		tfNumSamples.setText("" + sldNumSamples.getValue());
		checkMaxNumSamples();

	}// GEN-LAST:event_sldNumSamplesStateChanged

	private void btnDefaultsActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnDefaultsActionPerformed
	{// GEN-HEADEREND:event_btnDefaultsActionPerformed
		sldNumSamples.setValue(50);
		tfNumSamples.setText("50");
		sldAngle.setValue(5);
		tfAngle.setText("" + 5);
		sldFreq.setValue(50);
		tfFreq.setText("" + 50);
		radioStatus00.setSelected(true);
	}// GEN-LAST:event_btnDefaultsActionPerformed

	private void btnCancelActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnCancelActionPerformed
	{// GEN-HEADEREND:event_btnCancelActionPerformed
		fireICustomizerListenerCanceled();
	}// GEN-LAST:event_btnCancelActionPerformed

	private void btnOKActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnOKActionPerformed
	{// GEN-HEADEREND:event_btnOKActionPerformed

		getAcquisitionConfig().setTotalSamples(sldNumSamples.getValue() == 0 ? 1 : sldNumSamples.getValue());
		getAcquisitionConfig().getSelectedHardwareParameter("Altura").setParameterValue("" + sldHeight.getValue());
		getAcquisitionConfig().getSelectedHardwareParameter("Amplitude inicial").setParameterValue(
				"" + sldAngle.getValue());
		String atrito = "";
		if (radioStatus00.isSelected()) {
			atrito = "Sem atrito";
		} else if (radioStatus01.isSelected()) {
			atrito = "25 Ohm";
		} else if (radioStatus10.isSelected()) {
			atrito = "17 Ohm";
		} else if (radioStatus11.isSelected()) {
			atrito = "12 Ohm";
		}
		getAcquisitionConfig().getSelectedHardwareParameter("Atrito").setParameterValue("" + atrito);
		getAcquisitionConfig().setSelectedFrequency(
				new Frequency(sldFreq.getValue(), getHardwareInfo().getHardwareFrequencies(0).getMinimumFrequency()
						.getMultiplier()));
		fireICustomizerListenerDone();
	}// GEN-LAST:event_btnOKActionPerformed

	public static void main(final String args[]) {
		ReCResourceBundle.loadResourceBundle("pendulo",
				"recresource:///pt/utl/ist/elab/client/pendulo/resources/messages");
		final javax.swing.JFrame dummy = new javax.swing.JFrame();
		dummy.getContentPane().add(new PenduloCustomizer());
		dummy.pack();
		dummy.setVisible(true);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnCancel;
	private javax.swing.JButton btnDefaults;
	private javax.swing.JButton btnOK;
	private javax.swing.ButtonGroup buttonGroupStatus;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel51;
	private javax.swing.JPanel jPanel511;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JLabel lblErrorSamplesTooHigh;
	private javax.swing.JRadioButton radioStatus00;
	private javax.swing.JRadioButton radioStatus01;
	private javax.swing.JRadioButton radioStatus10;
	private javax.swing.JRadioButton radioStatus11;
	private javax.swing.JSlider sldAngle;
	private javax.swing.JSlider sldFreq;
	private javax.swing.JSlider sldHeight;
	private javax.swing.JSlider sldNumSamples;
	private javax.swing.JTextField tfAngle;
	private javax.swing.JTextField tfFreq;
	private javax.swing.JTextField tfHeight;
	private javax.swing.JTextField tfNumSamples;

	// End of variables declaration//GEN-END:variables

	@Override
	public void setHardwareAcquisitionConfig(final HardwareAcquisitionConfig acqConfig) {
		super.setHardwareAcquisitionConfig(acqConfig);
		if (acqConfig != null) {
			sldNumSamples.setValue(acqConfig.getTotalSamples());
			tfNumSamples.setText("" + acqConfig.getTotalSamples());
			final int height = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("Altura"));
			sldHeight.setValue(height);
			tfHeight.setText("" + height);
			final int teta = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("Amplitude inicial"));
			sldAngle.setValue(teta);
			tfAngle.setText("" + teta);

			final String atrito = acqConfig.getSelectedHardwareParameterValue("Atrito");
			if (atrito.equals("Sem atrito")) {
				radioStatus00.setSelected(true);
			} else if (atrito.equals("25 Ohm")) {
				radioStatus01.setSelected(true);
			} else if (atrito.equals("17 Ohm")) {
				radioStatus10.setSelected(true);
			}
			if (atrito.equals("12 Ohm")) {
				radioStatus11.setSelected(true);
			}

			final int freq = (int) acqConfig.getSelectedFrequency().getFrequency();
			sldFreq.setValue(freq);
			tfFreq.setText("" + freq);

		}
	}

	@Override
	public javax.swing.ImageIcon getCustomizerIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/pendulo/resources/pendulo_iconified.gif"));
	}

	@Override
	public String getCustomizerTitle() {
		return ReCResourceBundle.findStringOrDefault("pendulo$rec.exp.pendulo.customizer.title",
				"pendulo$rec.exp.pendulo.customizer.title");
	}

}
