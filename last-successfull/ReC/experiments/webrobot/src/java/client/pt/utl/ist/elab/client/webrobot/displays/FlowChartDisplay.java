/*
 * FlowChartDisplay.java
 *
 * Created on 13 de Junho de 2003, 13:06
 */

package pt.utl.ist.elab.client.webrobot.displays;

import pt.utl.ist.elab.client.webrobot.customizer.Utils.AbsoluteConstraints;
import pt.utl.ist.elab.client.webrobot.customizer.Utils.AbsoluteLayout;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.impl.client.experiment.DataDisplayEnum;
import com.linkare.rec.impl.client.experiment.ExpDataDisplay;
import com.linkare.rec.impl.client.experiment.ExpDataModel;
import com.linkare.rec.impl.client.experiment.ExpDataModelListener;
import com.linkare.rec.impl.client.experiment.NewExpDataEvent;
import com.linkare.rec.impl.config.ReCSystemProperty;

/**
 * 
 * @author Andrï¿½
 */
public class FlowChartDisplay extends javax.swing.JPanel implements ExpDataDisplay, ExpDataModelListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = 2543082818312358187L;

	/** Creates new form FlowChartDisplay */
	public FlowChartDisplay() {
		initComponents();
		// Adds the start button!
		jPanelContainer.setLayout(new AbsoluteLayout());
		jPanelIVPWM.setLayout(new AbsoluteLayout());
		jButtonProgStart = new javax.swing.JButton();
		jButtonProgStart.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/webrobot/customizer/Icons/ProgStart.gif")));
		jButtonProgStart.setBorderPainted(false);
		jButtonProgStart.setMaximumSize(new java.awt.Dimension(71, 45));
		jButtonProgStart.setMinimumSize(new java.awt.Dimension(71, 45));
		jButtonProgStart.setPreferredSize(new java.awt.Dimension(71, 45));
		jPanelContainer.add(jButtonProgStart, new AbsoluteConstraints(0, 0, -1, -1));
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		jScrollPaneIVPWM = new javax.swing.JScrollPane();
		jPanelIVPWM = new JPanelIVPWM();
		jScrollPaneContainer = new javax.swing.JScrollPane();
		jPanelContainer = new JPanelContainer();

		jScrollPaneIVPWM.setPreferredSize(new java.awt.Dimension(150, 100));
		jScrollPaneIVPWM.setViewportView(jPanelIVPWM);

		setLayout(new java.awt.BorderLayout());

		addComponentListener(new java.awt.event.ComponentAdapter() {
			@Override
			public void componentResized(final java.awt.event.ComponentEvent evt) {
				formComponentResized(evt);
			}
		});

		jScrollPaneContainer.setPreferredSize(new java.awt.Dimension(800, 600));
		jPanelContainer.setLayout(null);

		jPanelContainer.setBackground(new java.awt.Color(204, 204, 204));
		jPanelContainer.setPreferredSize(new java.awt.Dimension(5000, 5000));
		jScrollPaneContainer.setViewportView(jPanelContainer);

		add(jScrollPaneContainer, java.awt.BorderLayout.CENTER);

	}// GEN-END:initComponents

	private void formComponentResized(final java.awt.event.ComponentEvent evt) {// GEN-FIRST:event_formComponentResized
		jScrollPaneIVPWM.setPreferredSize(new java.awt.Dimension(getWidth() / 2, getHeight()));
	}// GEN-LAST:event_formComponentResized

	private boolean isViewIVPWM = false;

	private void jButtonIVPWMMousePressed(final java.awt.event.MouseEvent evt) {
		if (!isViewIVPWM) {
			jScrollPaneIVPWM.setPreferredSize(new java.awt.Dimension(getWidth() / 2, getHeight()));
			add(jScrollPaneIVPWM, java.awt.BorderLayout.EAST);
			isViewIVPWM = true;
			revalidate();
		} else {
			remove(jScrollPaneIVPWM);
			isViewIVPWM = false;
			revalidate();
		}
	}

	private void jButtonIVPWMMouseEntered(final java.awt.event.MouseEvent evt) {
	}

	private void jButtonIVPWMMouseExited(final java.awt.event.MouseEvent evt) {
	}

	@Override
	public String getName() {
		return name;
	}

	@Override
	public javax.swing.JComponent getDisplay() {
		return this;
	}

	@Override
	public javax.swing.Icon getIcon() {
		return icon;
	}

	@Override
	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	@Override
	public javax.swing.JToolBar getToolBar() {
		return null;
	}

	@Override
	public void setExpDataModel(final ExpDataModel expModel) {
		if (this.expModel != null) {
			expModel.removeExpDataModelListener(this);
		}

		this.expModel = expModel;

		if (this.expModel != null) {
			this.expModel.addExpDataModelListener(this);
		}
	}

	public void dataModelRunning() {
	}

	@Override
	public void dataModelStoped() {
	}

	public void headerAvailable(final HardwareAcquisitionConfig header) {
		flow = header.getSelectedHardwareParameters(0).getParameterValue();
		if (flow == null) {
			return;
		}
		isFlowValid = true;
		endedRowCol = false;// for treatData()!
		counter = 0;// for treatData()!
		final int lineSeparator = ReCSystemProperty.LINE_SEPARATOR.getValue().charAt(0);
		StringBuffer sb;
		sb = new StringBuffer(200);
		for (int i = 0; i < flow.length(); i++) {
			final char charToApp = flow.charAt(i);
			sb.append(charToApp);
			if (charToApp == lineSeparator) {
				treatData(sb.toString().trim());
				sb = new StringBuffer(200);
			}
			if (!isFlowValid) {
				System.out.println("Flow is not valid...cool...");
				return;
			}
		}
		updateHorLines();
		updateDisplay();
		createIVPWMatrix(iValues);
		updateIVPWMDisplay();
		jPanelIVPWM.setPreferredSize(new java.awt.Dimension(colMaxIVPWM * COL_WIDTH, (rowMaxIVPWM + 1) * COL_HEIGHT));
	}

	int lastIVPWMcol = 3;

	@Override
	public void newSamples(final NewExpDataEvent evt) {
		final int lastSample = evt.getSamplesEndIndex();
		final int IVPWMcol = expModel.getValueAt(lastSample, 20).getValue().getIntValue();
		final int row = expModel.getValueAt(lastSample, 21).getValue().getIntValue();
		final int col = expModel.getValueAt(lastSample, 22).getValue().getIntValue();
		if (finishedPaint) {
			highlightBlocks(row, col, IVPWMcol);
		}
	}

	int currentIVPWMcol = 0;
	boolean finishedPaint = true;

	private void highlightBlocks(final int row, final int col, final int iCol) {
		currentRow = row;
		currentCol = col;
		if (lastIVPWMcol != iCol) {
			currentIVPWMcol = iCol;
			javax.swing.SwingUtilities.invokeLater(new Runnable() {
				@Override
				public void run() {
					finishedPaint = false;
					jPanelIVPWM.repaint();
					final java.awt.Rectangle rect = new java.awt.Rectangle(currentIVPWMcol * COL_WIDTH, 0, jPanelIVPWM
							.getVisibleRect().width, jPanelIVPWM.getHeight());
					jPanelIVPWM.scrollRectToVisible(rect);
					jPanelIVPWM.revalidate();
					lastIVPWMcol = currentIVPWMcol;
				}
			});
		}
		jPanelContainer.repaint();
		jPanelContainer.revalidate();
	}

	/**
	 * Draw the matrix in the screen
	 */
	private void updateDisplay() {
		for (int col = 1; col < maxColumn + 1; col++) {
			for (int row = 1; row < maxRow + 1; row++) {
				if (matrix[row][col] == null) {
					/**
					 * Security cleaning Where there isn't a component, or a
					 * HorLine, can't be a connection
					 */
					if (matrixWiring[row][col] != null) {
						matrixWiring[row][col] = null;
					}
					continue;
				}
				/**
				 * Adds the component to the jPanel
				 */
				jPanelContainer.add(matrix[row][col], new AbsoluteConstraints((col - 1) * COL_WIDTH, (row - 1)
						* COL_HEIGHT, -1, -1));
				matrix[row][col].revalidate();
				/**
				 * If there is a component up, then this one must paint a
				 * connection with this one!
				 */
				if (matrix[row - 1][col] != null && matrix[row][col] != null) {
					matrix[row - 1][col].setPaintBottom(true);
					matrix[row - 1][col].revalidate();
				}
				/**
				 * Paint left connections
				 */
				if (matrixWiring[row][col] != null) {
					if (matrixWiring[row][col].startsWith("<-")) {
						if (matrix[row][col - 1] != null) {
							matrix[row][col - 1].setPaintLeft(true);
							matrix[row][col - 1].revalidate();
						}
					}
					/**
					 * Paint other ands connections
					 */
					if (matrixWiring[row - 1][col] != null && matrixWiring[row][col].length() > 2
							&& matrixWiring[row - 1][col].length() > 2) {
						if ((matrixWiring[row][col].charAt(2) == '1')
								&& (matrixWiring[row - 1][col].charAt(2) == '1' || matrixWiring[row - 1][col].charAt(2) == '2')) {
							matrix[row - 1][col].setPaintBottom(true);
							matrix[row - 1][col].setAnotherAnd(true);
							matrixWiring[row][col].replace('1', '2');
							matrix[row][col].getDataModel().setValor2(2);
						}
					}
				}

				/**
				 * This is for security...maybe it isn't very beautiful...the
				 * program should do exactly what it is told to do...but I don't
				 * want strange things to happen (like connection with nothing,
				 * etc.) ->Next version this must go...
				 */
				cleanFalseHorLines();
				if (matrix[row][col] != null) {
					/**
					 * If it has arrived here, then there where changes...don't
					 * let the user close the program without notifying him...
					 */
					if (matrixWiring[row][col] != null && matrixWiring[row][col].startsWith("<-")
							&& matrix[row][col - 1] == null) {
						matrixWiring[row][col] = null;
					}
					if ((matrix[row][col].isPaintLeft())
							& (matrix[row][col + 1] == null || matrixWiring[row][col + 1] == null)) {
						matrix[row][col].setPaintLeft(false);
						matrix[row][col].revalidate();
					}
					if (matrix[row][col].isPaintBottom() && matrix[row + 1][col] == null) {
						matrix[row][col].setPaintBottom(false);
						matrix[row][col].revalidate();
					}
					if ((matrix[row][col].isAnotherAnd() && matrix[row + 1][col] != null && (matrix[row + 1][col]
							.getTipo() != 12 && matrix[row + 1][col].getTipo() != 13))
							|| (matrix[row][col].isAnotherAnd() && matrix[row + 1][col] == null)) {
						matrix[row][col].setAnotherAnd(false);
						matrix[row][col].getDataModel().setValor2(1);
					}
				}
			}
		}
		jPanelContainer.revalidate();
	}

	/**
	 * This is a new method, implemented with the scope to work only with open
	 * file (creating horlines for the blocks created, after opening the file)
	 * ->In the next version, improve the method, and any method that want to
	 * update horlines will call this!
	 */
	public void updateHorLines() {
		for (int iRow = 2; iRow < maxRow; iRow++) {
			for (int iCol = maxColumn + 1; iCol > 1; iCol--) {
				if (matrixWiring[iRow][iCol] != null && matrixWiring[iRow][iCol].startsWith("<-")
						&& matrix[iRow][iCol - 1] == null) {
					horLine = new pt.utl.ist.elab.client.webrobot.customizer.Comps.HorLine();
					matrix[iRow][iCol - 1] = horLine;
					matrixWiring[iRow][iCol - 1] = "<-";
				}
			}
		}
	}

	private void cleanFalseHorLines() {
		for (int iCol = maxColumn + 1; iCol > 0; iCol--) {
			for (int iRow = 1; iRow < maxRow + 1; iRow++) {
				if (matrix[iRow][iCol] == null) {
					continue;
				} else if (isHorLine(iRow, iCol) && matrix[iRow][iCol + 1] == null) {
					jPanelContainer.remove(matrix[row][iCol]);
					matrix[iRow][iCol] = null;
					matrixWiring[iRow][iCol] = null;
				}
			}
		}
	}

	/**
	 * Checks if in the matrix at the position (rowXcol), there is a HorLine
	 */
	private boolean isHorLine(final int row, final int col) {
		if (matrix[row][col] == null) {
			return false;
		} else if (matrix[row][col].getClass().getName()
				.startsWith("pt.utl.ist.elab.client.webrobot.customizer.Comps.HorLine")) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Creates a new block based on the tpye and making a copy of the model of
	 * the component, that is to be copied
	 */
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.Block createNewBlock(final int tipo,
			final pt.utl.ist.elab.client.webrobot.customizer.Models.ModelBlock model) {
		if (tipo == 1) {
			compInt = new pt.utl.ist.elab.client.webrobot.customizer.Comps.CompInt(
					(pt.utl.ist.elab.client.webrobot.customizer.Models.ModelCompInt) model);
			return compInt;
		} else if (tipo == 2) {
			compBin = new pt.utl.ist.elab.client.webrobot.customizer.Comps.CompBin(
					(pt.utl.ist.elab.client.webrobot.customizer.Models.ModelCompBin) model);
			return compBin;
		} else if (tipo == 12) {
			compAndInt = new pt.utl.ist.elab.client.webrobot.customizer.Comps.CompAndInt(
					(pt.utl.ist.elab.client.webrobot.customizer.Models.ModelCompAndInt) model);
			return compAndInt;
		} else if (tipo == 13) {
			compAndBin = new pt.utl.ist.elab.client.webrobot.customizer.Comps.CompAndBin(
					(pt.utl.ist.elab.client.webrobot.customizer.Models.ModelCompAndBin) model);
			return compAndBin;
		} else if (tipo == 10) {
			atribui = new pt.utl.ist.elab.client.webrobot.customizer.Comps.Atribui(
					(pt.utl.ist.elab.client.webrobot.customizer.Models.ModelAtribui) model);
			return atribui;
		} else if (tipo == 11) {
			incDec = new pt.utl.ist.elab.client.webrobot.customizer.Comps.IncDec(
					(pt.utl.ist.elab.client.webrobot.customizer.Models.ModelIncDec) model);
			return incDec;
		} else if (tipo == 9) {
			setReset = new pt.utl.ist.elab.client.webrobot.customizer.Comps.SetReset(
					(pt.utl.ist.elab.client.webrobot.customizer.Models.ModelSetReset) model);
			return setReset;
		} else if (tipo == 8) {
			pwm = new pt.utl.ist.elab.client.webrobot.customizer.Comps.PWM(
					(pt.utl.ist.elab.client.webrobot.customizer.Models.ModelPWM) model);
			return pwm;
		} else if (tipo == 14) {
			ivpwm = new pt.utl.ist.elab.client.webrobot.customizer.Comps.IVPWM(FlowChartDisplay.modelIVPWM);
			return ivpwm;
		} else if (tipo == 3) {
			frente = new pt.utl.ist.elab.client.webrobot.customizer.Comps.Frente(
					(pt.utl.ist.elab.client.webrobot.customizer.Models.ModelFrente) model);
			return frente;
		} else if (tipo == 4) {
			marchAtras = new pt.utl.ist.elab.client.webrobot.customizer.Comps.MarchAtras(
					(pt.utl.ist.elab.client.webrobot.customizer.Models.ModelMarchAtras) model);
			return marchAtras;
		} else if (tipo == 5) {
			direita = new pt.utl.ist.elab.client.webrobot.customizer.Comps.Direita(
					(pt.utl.ist.elab.client.webrobot.customizer.Models.ModelDireita) model);
			return direita;
		} else if (tipo == 6) {
			esquerda = new pt.utl.ist.elab.client.webrobot.customizer.Comps.Esquerda(
					(pt.utl.ist.elab.client.webrobot.customizer.Models.ModelEsquerda) model);
			return esquerda;
		}
		return null;
	}

	/**
	 * Treats the data: creates new components, and new models with the data
	 * from the file! The method is very obvious but long...
	 */
	private void treatData(final String data) {
		int coluna = 0;
		int nivel = 0;
		int tipo = 0;
		String d1 = " ";
		String d2 = " ";
		String d3 = " ";
		int valor = 0;
		int valor2 = 0;
		int flag = 0;
		String baixo = "b";
		String temp;
		String esquerda = "b";
		int numLeft = 0;
		String temp2;
		pt.utl.ist.elab.client.webrobot.customizer.Models.ModelBlock model;
		pt.utl.ist.elab.client.webrobot.customizer.Comps.Block comp;

		if (data.startsWith("--->")) {
			return;
		}
		if (data.startsWith("k")) {
			endedRowCol = true;
			return;
		}
		if (!endedRowCol) {
			final java.util.StringTokenizer st = new java.util.StringTokenizer(data, ",");
			while (st.hasMoreTokens()) {
				try {
					coluna = Integer.parseInt(st.nextToken().trim().substring("coluna=".length()));
					nivel = Integer.parseInt(st.nextToken().trim().substring("nivel=".length()));
					tipo = Integer.parseInt(st.nextToken().trim().substring("tipo=".length()));
					d1 = st.nextToken().trim().substring("d1=".length());
					if (d1.length() == 0) {
						d1 = " ";
					}
					d2 = st.nextToken().trim().substring("d2=".length());
					if (d2.length() == 0) {
						d2 = " ";
					}
					d3 = st.nextToken().trim().substring("d3=".length());
					if (d3.length() == 0) {
						d3 = " ";
					}
					valor = Integer.parseInt(st.nextToken().trim().substring("valor=".length()));
					valor2 = Integer.parseInt(st.nextToken().trim().substring("valor2=".length()));
					temp = st.nextToken().trim();
					final java.util.StringTokenizer st2 = new java.util.StringTokenizer(temp);
					while (st2.hasMoreTokens()) {
						flag = Integer.parseInt(st2.nextToken().trim().substring("flag=".length()));
						baixo = st2.nextToken().trim().substring("baixo=".length());
					}
					temp2 = st.nextToken().trim();
					final java.util.StringTokenizer st3 = new java.util.StringTokenizer(temp2);
					if (st3.countTokens() == 1) {
						esquerda = st3.nextToken().trim().substring("esquerda=".length());
					} else {
						esquerda = st3.nextToken().trim().substring("esquerda=".length());
						numLeft = Integer.parseInt(st3.nextToken().trim());
					}
					model = getModel(tipo);
					model.setBaixo(baixo.charAt(0));
					model.setColuna(coluna);
					model.setD1(d1);
					model.setD2(d2);
					model.setD3(d3);
					model.setEsquerda(esquerda.charAt(0));
					model.setFlag(flag);
					model.setNivel(nivel);
					model.setValor(valor);
					model.setValor2(valor2);
					comp = createNewBlock(tipo, model);
					if (baixo.charAt(0) == 'a') {
						comp.setPaintBottom(true);
					}
					if (esquerda.charAt(0) == 'a') {
						matrixWiring[nivel][coluna] = "<-";
					}
					if (valor2 == 1 || valor2 == 2) {
						if (matrixWiring[nivel][coluna] != null) {
							if (matrixWiring[nivel][coluna].startsWith("<-")) {
								matrixWiring[nivel][coluna] = "<-1";
							}
						} else {
							matrixWiring[nivel][coluna] = "  1";
						}
					}
					matrix[nivel][coluna] = comp;
					matrix[nivel][coluna].revalidate();
					if (tipo == 14) {
						comp.addMouseListener(new java.awt.event.MouseAdapter() {
							@Override
							public void mouseExited(final java.awt.event.MouseEvent evt) {
								jButtonIVPWMMouseExited(evt);
							}

							@Override
							public void mouseEntered(final java.awt.event.MouseEvent evt) {
								jButtonIVPWMMouseEntered(evt);
							}

							@Override
							public void mousePressed(final java.awt.event.MouseEvent evt) {
								jButtonIVPWMMousePressed(evt);
							}
						});
						comp.setToolTipText("Clicar para visualizar diagrama de estados interno...");
					}
					if (coluna > maxColumn) {
						maxColumn = coluna;
					}
					if (nivel > maxRow) {
						maxRow = nivel;
					}
					return;
				} catch (final java.lang.NumberFormatException nfe) {
					javax.swing.JOptionPane.showMessageDialog(this, "Atenï¿½ï¿½o!\nO diagrama enviado nï¿½o ï¿½ vï¿½lido!",
							"Erro!", javax.swing.JOptionPane.ERROR_MESSAGE);
					isFlowValid = false;
					return;
				}
			}
		}

		counter++;

		if (counter == 1) {
			return;
		} else if (counter == 2) {
			return;
		} else if (counter == 3) {
			return;
		} else if (counter == 4) {
			try {
				final java.util.StringTokenizer st4 = new java.util.StringTokenizer(data);
				FlowChartDisplay.modelConfInOut.setB0(Integer.parseInt(st4.nextToken()));
				FlowChartDisplay.modelConfInOut.setB1(Integer.parseInt(st4.nextToken()));
				FlowChartDisplay.modelConfInOut.setB2(Integer.parseInt(st4.nextToken()));
				FlowChartDisplay.modelConfInOut.setB3(Integer.parseInt(st4.nextToken()));
				FlowChartDisplay.modelConfInOut.setB4(Integer.parseInt(st4.nextToken()));
				FlowChartDisplay.modelConfInOut.setB5(Integer.parseInt(st4.nextToken()));
				FlowChartDisplay.modelConfInOut.setB6(Integer.parseInt(st4.nextToken()));
				FlowChartDisplay.modelConfInOut.setB7(Integer.parseInt(st4.nextToken()));
				FlowChartDisplay.modelConfInOut.setC0(Integer.parseInt(st4.nextToken()));
				FlowChartDisplay.modelConfInOut.setC3(Integer.parseInt(st4.nextToken()));
				return;
			} catch (final java.lang.NumberFormatException nfe) {
				javax.swing.JOptionPane.showMessageDialog(this, "Atenï¿½ï¿½o!\nEste ficheiro nï¿½o ï¿½ vï¿½lido!", "Erro!",
						javax.swing.JOptionPane.ERROR_MESSAGE);
				isFlowValid = false;
				return;
			}
		} else if (counter == 5) {
			try {
				final java.util.StringTokenizer st5 = new java.util.StringTokenizer(data);
				FlowChartDisplay.modelConfInOut.setA1(Integer.parseInt(st5.nextToken()));
				FlowChartDisplay.modelConfInOut.setA2(Integer.parseInt(st5.nextToken()));
				FlowChartDisplay.modelConfInOut.setA3(Integer.parseInt(st5.nextToken()));
				FlowChartDisplay.modelConfInOut.setA4(Integer.parseInt(st5.nextToken()));
				final String dummyVar = st5.nextToken();
				return;
			} catch (final java.lang.NumberFormatException nfe) {
				javax.swing.JOptionPane.showMessageDialog(this, "Atenï¿½ï¿½o!\nEste ficheiro nï¿½o ï¿½ vï¿½lido!", "Erro!",
						javax.swing.JOptionPane.ERROR_MESSAGE);
				isFlowValid = false;
				return;
			}
		} else if (counter == 6) {
			try {
				final java.util.StringTokenizer st6 = new java.util.StringTokenizer(data);
				FlowChartDisplay.modelConfInOut.setV1(Integer.parseInt(st6.nextToken()));
				FlowChartDisplay.modelConfInOut.setV2(Integer.parseInt(st6.nextToken()));
				FlowChartDisplay.modelConfInOut.setV3(Integer.parseInt(st6.nextToken()));
				FlowChartDisplay.modelConfInOut.setV4(Integer.parseInt(st6.nextToken()));
				FlowChartDisplay.modelConfInOut.setV5(Integer.parseInt(st6.nextToken()));
			} catch (final java.lang.NumberFormatException nfe) {
				javax.swing.JOptionPane.showMessageDialog(this, "Atenï¿½ï¿½o!\nEste ficheiro nï¿½o ï¿½ vï¿½lido!", "Erro!",
						javax.swing.JOptionPane.ERROR_MESSAGE);
				isFlowValid = false;
				return;
			}
			return;
		}
		if (counter == 7) {
			iValuesSize = Integer.parseInt(data.substring(1));
			iValues = new Object[iValuesSize][3];
			counter2 = 0;
			return;
		}
		if (counter2 < iValuesSize) {
			final java.util.StringTokenizer st = new java.util.StringTokenizer(data, "\t");
			iValues[counter2][0] = st.nextToken();
			iValues[counter2][1] = new Integer(st.nextToken().trim());
			iValues[counter2][2] = new Integer(st.nextToken().trim());
			counter2++;
			counter = 7;
			return;
		}
		FlowChartDisplay.modelIVPWM.setIValues(iValues);
		if (counter == 8) {
			final java.util.StringTokenizer st2 = new java.util.StringTokenizer(data);
			FlowChartDisplay.modelIVPWM.setI0Value(Integer.parseInt(st2.nextToken().trim()));
			FlowChartDisplay.modelIVPWM.setI1Value(Integer.parseInt(st2.nextToken().trim()));
			FlowChartDisplay.modelIVPWM.setI2Value(Integer.parseInt(st2.nextToken().trim()));
			FlowChartDisplay.modelIVPWM.setI3Value(Integer.parseInt(st2.nextToken().trim()));
			FlowChartDisplay.modelIVPWM.setI4Value(Integer.parseInt(st2.nextToken().trim()));
			FlowChartDisplay.modelIVPWM.setI5Value(Integer.parseInt(st2.nextToken().trim()));
			FlowChartDisplay.modelIVPWM.setI6Value(Integer.parseInt(st2.nextToken().trim()));
			FlowChartDisplay.modelIVPWM.setI7Value(Integer.parseInt(st2.nextToken().trim()));
			return;
		}
		if (counter == 9) {
			final java.util.StringTokenizer st3 = new java.util.StringTokenizer(data);
			FlowChartDisplay.modelIVPWM.setI0State(Integer.parseInt(st3.nextToken().trim()));
			FlowChartDisplay.modelIVPWM.setI1State(Integer.parseInt(st3.nextToken().trim()));
			FlowChartDisplay.modelIVPWM.setI2State(Integer.parseInt(st3.nextToken().trim()));
			FlowChartDisplay.modelIVPWM.setI3State(Integer.parseInt(st3.nextToken().trim()));
			FlowChartDisplay.modelIVPWM.setI4State(Integer.parseInt(st3.nextToken().trim()));
			FlowChartDisplay.modelIVPWM.setI5State(Integer.parseInt(st3.nextToken().trim()));
			FlowChartDisplay.modelIVPWM.setI6State(Integer.parseInt(st3.nextToken().trim()));
			FlowChartDisplay.modelIVPWM.setI7State(Integer.parseInt(st3.nextToken().trim()));
		}
		/**
		 * The ivpwm share all the same model...update the model, so it can read
		 * the right values....if the user selects to edit or to create a new
		 * one
		 */
		ivpwm = new pt.utl.ist.elab.client.webrobot.customizer.Comps.IVPWM(FlowChartDisplay.modelIVPWM);
	}

	private pt.utl.ist.elab.client.webrobot.customizer.Models.ModelBlock getModel(final int tipo) {
		if (tipo == 1) {
			modelCompInt = new pt.utl.ist.elab.client.webrobot.customizer.Models.ModelCompInt();
			return modelCompInt;
		} else if (tipo == 2) {
			modelCompBin = new pt.utl.ist.elab.client.webrobot.customizer.Models.ModelCompBin();
			return modelCompBin;
		} else if (tipo == 3) {
			modelFrente = new pt.utl.ist.elab.client.webrobot.customizer.Models.ModelFrente();
			return modelFrente;
		} else if (tipo == 4) {
			modelMarchAtras = new pt.utl.ist.elab.client.webrobot.customizer.Models.ModelMarchAtras();
			return modelMarchAtras;
		} else if (tipo == 5) {
			modelDireita = new pt.utl.ist.elab.client.webrobot.customizer.Models.ModelDireita();
			return modelDireita;
		} else if (tipo == 6) {
			modelEsquerda = new pt.utl.ist.elab.client.webrobot.customizer.Models.ModelEsquerda();
			return modelEsquerda;
		} else if (tipo == 8) {
			modelPWM = new pt.utl.ist.elab.client.webrobot.customizer.Models.ModelPWM();
			return modelPWM;
		} else if (tipo == 9) {
			modelSetReset = new pt.utl.ist.elab.client.webrobot.customizer.Models.ModelSetReset();
			return modelSetReset;
		} else if (tipo == 10) {
			modelAtribui = new pt.utl.ist.elab.client.webrobot.customizer.Models.ModelAtribui();
			return modelAtribui;
		} else if (tipo == 11) {
			modelIncDec = new pt.utl.ist.elab.client.webrobot.customizer.Models.ModelIncDec();
			return modelIncDec;
		} else if (tipo == 12) {
			modelCompAndInt = new pt.utl.ist.elab.client.webrobot.customizer.Models.ModelCompAndInt();
			return modelCompAndInt;
		} else if (tipo == 13) {
			modelCompAndBin = new pt.utl.ist.elab.client.webrobot.customizer.Models.ModelCompAndBin();
			return modelCompAndBin;
		} else if (tipo == 14) {
			return FlowChartDisplay.modelIVPWM;
		}
		return null;
	}

	/************/
	/*** IVPWM ***/
	/***********/

	/**
	 * This method creates the ivpwm matrix! It is zero index based!
	 */
	private void createIVPWMatrix(final Object[][] iValues) {
		if (iValues == null) {
			return;
		}
		/**
		 * How big will be this matrix?
		 */
		final int numRowsIValue = iValues.length;
		int iRowIVPWM = 0;
		final int numCols = countRealColumns();
		rowMaxIVPWM = numCols + 1;
		colMaxIVPWM = numRowsIValue;
		String d2;
		matrixIVPWM = new pt.utl.ist.elab.client.webrobot.customizer.Comps.Block[numCols + 1][numRowsIValue];

		/**
		 * If the sensor X is to be read that one creates a row for this sensor
		 * if we have 5 sensors to be read, we have 5 rows, and then columns
		 * with combinations from this sensors!
		 */
		for (int iRow = 0; iRow < numRowsIValue; iRow++) {
			iRowIVPWM = 0;
			if (FlowChartDisplay.modelIVPWM.getI0State() == 0) {
				if (Integer.parseInt(iValues[iRow][0].toString().substring(7, 8)) == 0) {
					d2 = ">";
				} else {
					d2 = "<";
				}
				matrixIVPWM[iRowIVPWM][iRow] = createIVPWMBlock(12, "I0", d2, FlowChartDisplay.modelIVPWM.getI0Value(),
						0);
				iRowIVPWM++;
			}
			if (FlowChartDisplay.modelIVPWM.getI1State() == 0) {
				if (Integer.parseInt(iValues[iRow][0].toString().substring(6, 7)) == 0) {
					d2 = ">";
				} else {
					d2 = "<";
				}
				matrixIVPWM[iRowIVPWM][iRow] = createIVPWMBlock(12, "I1", d2, FlowChartDisplay.modelIVPWM.getI1Value(),
						0);
				iRowIVPWM++;
			}
			if (FlowChartDisplay.modelIVPWM.getI2State() == 0) {
				if (Integer.parseInt(iValues[iRow][0].toString().substring(5, 6)) == 0) {
					d2 = ">";
				} else {
					d2 = "<";
				}
				matrixIVPWM[iRowIVPWM][iRow] = createIVPWMBlock(12, "I2", d2, FlowChartDisplay.modelIVPWM.getI2Value(),
						0);
				iRowIVPWM++;
			}
			if (FlowChartDisplay.modelIVPWM.getI3State() == 0) {
				if (Integer.parseInt(iValues[iRow][0].toString().substring(4, 5)) == 0) {
					d2 = ">";
				} else {
					d2 = "<";
				}
				matrixIVPWM[iRowIVPWM][iRow] = createIVPWMBlock(12, "I3", d2, FlowChartDisplay.modelIVPWM.getI3Value(),
						0);
				iRowIVPWM++;
			}
			if (FlowChartDisplay.modelIVPWM.getI4State() == 0) {
				if (Integer.parseInt(iValues[iRow][0].toString().substring(3, 4)) == 0) {
					d2 = ">";
				} else {
					d2 = "<";
				}
				matrixIVPWM[iRowIVPWM][iRow] = createIVPWMBlock(12, "I4", d2, FlowChartDisplay.modelIVPWM.getI4Value(),
						0);
				iRowIVPWM++;
			}
			if (FlowChartDisplay.modelIVPWM.getI5State() == 0) {
				if (Integer.parseInt(iValues[iRow][0].toString().substring(2, 3)) == 0) {
					d2 = ">";
				} else {
					d2 = "<";
				}
				matrixIVPWM[iRowIVPWM][iRow] = createIVPWMBlock(12, "I5", d2, FlowChartDisplay.modelIVPWM.getI5Value(),
						0);
				iRowIVPWM++;
			}
			if (FlowChartDisplay.modelIVPWM.getI6State() == 0) {
				if (Integer.parseInt(iValues[iRow][0].toString().substring(1, 2)) == 0) {
					d2 = ">";
				} else {
					d2 = "<";
				}
				matrixIVPWM[iRowIVPWM][iRow] = createIVPWMBlock(12, "I6", d2, FlowChartDisplay.modelIVPWM.getI6Value(),
						0);
				iRowIVPWM++;
			}
			if (FlowChartDisplay.modelIVPWM.getI7State() == 0) {
				if (Integer.parseInt(iValues[iRow][0].toString().substring(0, 1)) == 0) {
					d2 = ">";
				} else {
					d2 = "<";
				}
				matrixIVPWM[iRowIVPWM][iRow] = createIVPWMBlock(12, "I7", d2, FlowChartDisplay.modelIVPWM.getI7Value(),
						0);
				iRowIVPWM++;
			}
			/**
			 * At the end of every column create a PWM block, that will send to
			 * the robot the pwm values if all the conditions above it were
			 * satisfied
			 */
			final int valor = Integer.parseInt(iValues[iRow][1].toString());
			final int valor2 = Integer.parseInt(iValues[iRow][2].toString());
			matrixIVPWM[iRowIVPWM][iRow] = createIVPWMBlock(8, "", "", valor, valor2);
		}
	}

	/**
	 * Count the real number of columns. If there were 5 sensors selected, then
	 * it will return 5!
	 */
	private int countRealColumns() {
		int total = 0;
		if (FlowChartDisplay.modelIVPWM.getI0State() == 0) {
			total++;
		}
		if (FlowChartDisplay.modelIVPWM.getI1State() == 0) {
			total++;
		}
		if (FlowChartDisplay.modelIVPWM.getI2State() == 0) {
			total++;
		}
		if (FlowChartDisplay.modelIVPWM.getI3State() == 0) {
			total++;
		}
		if (FlowChartDisplay.modelIVPWM.getI4State() == 0) {
			total++;
		}
		if (FlowChartDisplay.modelIVPWM.getI5State() == 0) {
			total++;
		}
		if (FlowChartDisplay.modelIVPWM.getI6State() == 0) {
			total++;
		}
		if (FlowChartDisplay.modelIVPWM.getI7State() == 0) {
			total++;
		}
		return total;
	}

	private pt.utl.ist.elab.client.webrobot.customizer.Comps.Block createIVPWMBlock(final int tipo, final String d1,
			final String d2, final int valor, final int valor2) {
		pt.utl.ist.elab.client.webrobot.customizer.Models.ModelBlock model;
		pt.utl.ist.elab.client.webrobot.customizer.Comps.Block comp;
		model = getModel(tipo);
		model.setD1(d1);
		model.setD2(d2);
		model.setValor(valor);
		model.setValor2(valor2);
		model.setFlag(1);
		comp = createNewBlock(tipo, model);
		return comp;
	}

	/**
	 * Draw the matrix in the screen
	 */
	private void updateIVPWMDisplay() {
		for (int col = 0; col < colMaxIVPWM; col++) {
			for (int row = 0; row < rowMaxIVPWM; row++) {
				if (matrixIVPWM[row][col] == null) {
					continue;
				}
				/**
				 * Adds the component to the jPanel
				 */
				jPanelIVPWM.add(matrixIVPWM[row][col], new AbsoluteConstraints((col) * COL_WIDTH, (row) * COL_HEIGHT,
						-1, -1));
				matrixIVPWM[row][col].revalidate();
				if (row == 0 && col != (colMaxIVPWM - 1)) {
					matrixIVPWM[row][col].setPaintLeft(true);
					matrixIVPWM[row][col].revalidate();
				}
				if (matrixIVPWM[row][col].getTipo() == 12) {
					matrixIVPWM[row][col].setPaintBottom(true);
					if (matrixIVPWM[row + 1][col] != null && matrixIVPWM[row + 1][col].getTipo() == 12) {
						matrixIVPWM[row][col].setAnotherAnd(true);
					}
					matrixIVPWM[row][col].revalidate();
				}
			}
		}
		jPanelIVPWM.revalidate();
	}

	@Override
	public void dataModelWaiting() {
	}

	@Override
	public void dataModelStarted() {
		headerAvailable(expModel.getAcquisitionConfig());
	}

	@Override
	public void dataModelStartedNoData() {
	}

	@Override
	public void dataModelEnded() {
	}

	@Override
	public void dataModelError() {
	}

	@Override
	public DataDisplayEnum getDisplayType() {
		return DataDisplayEnum.CHART;
	}

	class JPanelIVPWM extends javax.swing.JPanel {
		/**
		 * 
		 */
		private static final long serialVersionUID = -6837998997279366155L;
		public java.awt.Color darkBlue = java.awt.Color.blue.darker();
		public java.awt.Color highlightColor = new java.awt.Color(darkBlue.getRed(), darkBlue.getGreen(),
				darkBlue.getBlue(), 80);
		public java.awt.Color transparent = new java.awt.Color(java.awt.Color.black.getRed(),
				java.awt.Color.black.getGreen(), java.awt.Color.black.getBlue(), 0);

		@Override
		public void paint(final java.awt.Graphics g) {
			final int xi = currentIVPWMcol * COL_WIDTH;
			final int yi = 0;
			final int yf = rowMaxIVPWM * COL_HEIGHT;
			final int xoldi = lastIVPWMcol * COL_WIDTH;
			super.paint(g);
			g.setColor(transparent);
			g.fillRect(xoldi, yi, COL_WIDTH, yf);
			g.setColor(highlightColor);
			g.fillRect(xi, yi, COL_WIDTH, yf);
			// finishedPaint=true;
		}
	}

	class JPanelContainer extends javax.swing.JPanel {
		/**
		 * 
		 */
		private static final long serialVersionUID = 1395032219683988728L;
		public java.awt.Color darkBlue = java.awt.Color.blue.darker();
		public java.awt.Color highlightColor = new java.awt.Color(darkBlue.getRed(), darkBlue.getGreen(),
				darkBlue.getBlue(), 80);
		public java.awt.Color transparent = new java.awt.Color(java.awt.Color.black.getRed(),
				java.awt.Color.black.getGreen(), java.awt.Color.black.getBlue(), 0);

		@Override
		public void paint(final java.awt.Graphics g) {
			super.paint(g);
			g.setColor(transparent);
			g.fillRect(0, 0, maxColumn * COL_WIDTH, maxRow * COL_HEIGHT);
			g.setColor(highlightColor);
			for (int col = currentCol; col > 0; col--) {
				for (int row = currentRow; row > 1; row--) {
					if (matrix[row][col] != null) {
						g.fillRect((col - 1) * COL_WIDTH, (row - 1) * COL_HEIGHT, COL_WIDTH, COL_HEIGHT);
						if ((matrix[row - 1][col] != null && isHorLine(row, col))
								|| (matrix[row][col - 1] != null && matrix[row][col - 1].isPaintLeft())) {
							currentRow = row;
							break;
						}
					} else {
						currentRow = row + 1;
						break;
					}
				}
			}
			finishedPaint = true;
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel jPanelIVPWM;
	private javax.swing.JScrollPane jScrollPaneContainer;
	private javax.swing.JScrollPane jScrollPaneIVPWM;
	private javax.swing.JPanel jPanelContainer;
	// End of variables declaration//GEN-END:variables
	private final int row = 1;
	private final int column = 1;
	private int maxRow = 1;
	private int maxColumn = 1;
	private final int COL_WIDTH = 77;
	private final int COL_HEIGHT = 45;
	private final int MAX_COLUMNS = 1000;
	private final int MAX_ROWS = 1000;
	private int counter;
	private int counter2 = 0;
	private int iValuesSize = 0;
	private int rowMaxIVPWM = 0;
	private int colMaxIVPWM = 0;
	private int currentRow = 2;
	private int currentCol = 1;
	private boolean endedRowCol;
	private ExpDataModel model;
	private final javax.swing.ImageIcon icon = new javax.swing.ImageIcon(getClass().getResource(
			"/pt/utl/ist/elab/client/webrobot/displays/resources/Flow16.gif"));
	private final String name = "Diagrama de estados";
	private String flow;
	private final pt.utl.ist.elab.client.webrobot.customizer.Comps.Block[][] matrix = new pt.utl.ist.elab.client.webrobot.customizer.Comps.Block[MAX_ROWS][MAX_COLUMNS];
	private final String[][] matrixWiring = new String[MAX_ROWS][MAX_COLUMNS];
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.Block[][] matrixIVPWM;
	private Object iValues[][];

	private pt.utl.ist.elab.client.webrobot.customizer.Models.ModelAtribui modelAtribui;
	private pt.utl.ist.elab.client.webrobot.customizer.Models.ModelCompAndBin modelCompAndBin;
	private pt.utl.ist.elab.client.webrobot.customizer.Models.ModelCompAndInt modelCompAndInt;
	private pt.utl.ist.elab.client.webrobot.customizer.Models.ModelCompBin modelCompBin;
	private pt.utl.ist.elab.client.webrobot.customizer.Models.ModelCompInt modelCompInt;
	private static pt.utl.ist.elab.client.webrobot.customizer.Models.ModelConfInOut modelConfInOut = new pt.utl.ist.elab.client.webrobot.customizer.Models.ModelConfInOut();
	private pt.utl.ist.elab.client.webrobot.customizer.Models.ModelDireita modelDireita;
	private pt.utl.ist.elab.client.webrobot.customizer.Models.ModelEsquerda modelEsquerda;
	private pt.utl.ist.elab.client.webrobot.customizer.Models.ModelFrente modelFrente;
	private static pt.utl.ist.elab.client.webrobot.customizer.Models.ModelIVPWM modelIVPWM = new pt.utl.ist.elab.client.webrobot.customizer.Models.ModelIVPWM();
	private pt.utl.ist.elab.client.webrobot.customizer.Models.ModelIncDec modelIncDec;
	private pt.utl.ist.elab.client.webrobot.customizer.Models.ModelMarchAtras modelMarchAtras;
	private pt.utl.ist.elab.client.webrobot.customizer.Models.ModelPWM modelPWM;
	private pt.utl.ist.elab.client.webrobot.customizer.Models.ModelSetReset modelSetReset;
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.CompInt compInt;
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.CompBin compBin;
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.CompAndInt compAndInt;
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.CompAndBin compAndBin;
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.Atribui atribui;
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.IncDec incDec;
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.SetReset setReset;
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.PWM pwm;
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.IVPWM ivpwm = new pt.utl.ist.elab.client.webrobot.customizer.Comps.IVPWM(
			FlowChartDisplay.modelIVPWM);
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.Frente frente;
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.MarchAtras marchAtras;
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.Direita direita;
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.Esquerda esquerda;
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.HorLine horLine;
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.Configs.IntroMethod introMethod;
	private pt.utl.ist.elab.client.webrobot.customizer.Comps.Configs.SubBlock subBlock;
	private final javax.swing.JButton jButtonProgStart;
	private boolean isFlowValid;
	private boolean isFlowing;

	private ExpDataModel expModel = null;
}
