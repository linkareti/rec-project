/*
 * CGCustomizer.java
 *
 * Created on October 27, 2004, 03:35 AM
 */

package pt.utl.ist.elab.client.vcg;

/**
 *
 * @author  nomead
 *
 * regua -> dm
 * luz -> dm
 * angInit -> graus
 *
 */
import org.opensourcephysics.display.Circle;
import org.opensourcephysics.display.DrawingPanel;
import org.opensourcephysics.display.axes.XAxis;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.metadata.HardwareInfo;
import com.linkare.rec.data.synch.Frequency;
import com.linkare.rec.impl.client.customizer.ICustomizerListener;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

public class CGCustomizer extends javax.swing.JPanel implements com.linkare.rec.impl.client.customizer.ICustomizer {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6700734317441548008L;
	private InteractiveBalancaTorcao balanca;
	private final Circle luzCol;
	private final DrawingPanel reg;
	private final double[] consts = new double[] { 0, 0, 0 }; // c,k,g

	/** Creates new form CGCustomizer */
	public CGCustomizer() {
		initComponents();

		java.awt.GridBagConstraints gridBagConstraints;

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridheight = 1;
		gridBagConstraints.gridwidth = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = .7;
		gridBagConstraints.weighty = .7;
		add(balanca = new InteractiveBalancaTorcao(), gridBagConstraints);

		reg = new DrawingPanel();
		reg.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"cg$rec.exp.customizer.balanca.title.14", "Target")));
		reg.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.balanca.tip.14", "Target"));
		final XAxis norm = new XAxis("dm");
		reg.addDrawable(norm);
		reg.setMinimumSize(new java.awt.Dimension(150, 100));
		reg.setPreferredSize(new java.awt.Dimension(150, 100));
		reg.setPreferredMinMaxX(0, 10);
		reg.enableInspector(false);
		luzCol = new Circle(5, 0, 10);
		reg.addDrawable(luzCol);

		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridheight = 1;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = .7;
		gridBagConstraints.weighty = 0;
		add(reg, gridBagConstraints);

		final java.util.Hashtable htK = new java.util.Hashtable(9);
		htK.put(new Integer(-89), new javax.swing.JLabel("" + (-89)));
		for (int i = -70; i <= 70; i += 20) {
			htK.put(new Integer(i), new javax.swing.JLabel("" + i));
		}
		htK.put(new Integer(89), new javax.swing.JLabel("" + 89));
		angInitSlider.setLabelTable(htK);
	}

	public void update() {
		angInitSlider.setValue((int) Math.round(balanca.getAngle() * 180 / Math.PI));
		s0Slider.setValue((int) Math.round(balanca.getS0() * 10));
		dSlider.setValue((int) Math.round(balanca.getD()));
		lSlider.setValue((int) Math.round(balanca.getL() / 10));

		final double[] masses = balanca.getMasses();

		mm0Label.setText("[" + CGCustomizer.trimDecimalN(Math.round(masses[0] * 1e3) * 1e-3, 3) + "]");
		mm1Label.setText("[" + CGCustomizer.trimDecimalN(Math.round(masses[1] * 1e3) * 1e-3, 3) + "]");
		mM0Label.setText("[" + CGCustomizer.trimDecimalN(Math.round(masses[2] * 1e3) * 1e-3, 3) + "]");
		mM1Label.setText("[" + CGCustomizer.trimDecimalN(Math.round(masses[3] * 1e3) * 1e-3, 3) + "]");

		updateRegua();
	}

	public static String trimDecimalN(final double val, final int n) {
		final String str = Double.toString(val);
		String str1;
		String str2 = "";
		try {
			str1 = str.substring(0, str.indexOf(".") + n + 1);
		} catch (final StringIndexOutOfBoundsException e) {
			str1 = str;
		}
		try {
			str2 = str.substring(str.indexOf("E"), str.length());
		} catch (final StringIndexOutOfBoundsException e) {
		}

		return str1.concat(str2);
	}

	/*
	 * luzX (cm) -> luz (dm) reguaSize (cm) -> regua (dm)
	 */
	public void updateRegua() {
		luzCol.setX(balanca.getLuzX() / 10 + balanca.getReguaSize() / 20);
		reg.setPreferredMinMaxX(0, balanca.getReguaSize() / 10);
		reg.repaint();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		java.awt.GridBagConstraints gridBagConstraints;

		expButtonGroup = new javax.swing.ButtonGroup();
		constsButtonGroup = new javax.swing.ButtonGroup();
		configPanel = new javax.swing.JPanel();
		expPanel = new javax.swing.JPanel();
		expCRadioButton = new javax.swing.JRadioButton();
		expGRadioButton = new javax.swing.JRadioButton();
		constPanel = new javax.swing.JPanel();
		randConstRadioButton = new javax.swing.JRadioButton();
		realConstRadioButton = new javax.swing.JRadioButton();
		sameConstRadioButton = new javax.swing.JRadioButton();
		angInitPanel = new javax.swing.JPanel();
		angInitSlider = new javax.swing.JSlider();
		angInitTextField = new javax.swing.JTextField();
		propPanel = new javax.swing.JPanel();
		lPanel = new javax.swing.JPanel();
		lSlider = new javax.swing.JSlider();
		lTextField = new javax.swing.JTextField();
		s0Panel = new javax.swing.JPanel();
		s0Slider = new javax.swing.JSlider();
		s0TextField = new javax.swing.JTextField();
		dPanel = new javax.swing.JPanel();
		dSlider = new javax.swing.JSlider();
		dTextField = new javax.swing.JTextField();
		mPanel = new javax.swing.JPanel();
		mm1Label = new javax.swing.JLabel();
		mm0Label = new javax.swing.JLabel();
		mM1Label = new javax.swing.JLabel();
		mM0Label = new javax.swing.JLabel();
		btnPanel = new javax.swing.JPanel();
		controlBtnPanel = new javax.swing.JPanel();
		okButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		defConfBtnPanel = new javax.swing.JPanel();
		defaultButton = new javax.swing.JButton();
		tbsNsPanel = new javax.swing.JPanel();
		tbsPanel = new javax.swing.JPanel();
		tbsSlider = new javax.swing.JSlider();
		tbsTextField = new javax.swing.JTextField();
		samplesPanel = new javax.swing.JPanel();
		samplesSlider = new javax.swing.JSlider();
		samplesTextField = new javax.swing.JTextField();

		setLayout(new java.awt.GridBagLayout());

		setMinimumSize(new java.awt.Dimension(600, 600));
		setPreferredSize(new java.awt.Dimension(600, 600));
		configPanel.setLayout(new java.awt.GridBagLayout());

		configPanel.setMinimumSize(new java.awt.Dimension(250, 400));
		configPanel.setPreferredSize(new java.awt.Dimension(250, 400));
		expPanel.setLayout(new java.awt.GridBagLayout());

		expPanel.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"cg$rec.exp.customizer.title.1", "Experiment")));
		expPanel.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.1", "Experiment Goal"));
		expPanel.setMinimumSize(new java.awt.Dimension(250, 50));
		expPanel.setPreferredSize(new java.awt.Dimension(250, 50));
		expCRadioButton.setText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.title.2",
				"Torsion Constant"));
		expCRadioButton.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.3",
				"Fiber Torsion Constant"));
		expButtonGroup.add(expCRadioButton);
		expCRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				expCRadioButtonStateChanged(evt);
			}
		});

		expPanel.add(expCRadioButton, new java.awt.GridBagConstraints());

		expGRadioButton.setSelected(true);
		expGRadioButton.setText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.title.3", "G"));
		expGRadioButton.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.3",
				"Gravitational Constant"));
		expButtonGroup.add(expGRadioButton);
		expPanel.add(expGRadioButton, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		configPanel.add(expPanel, gridBagConstraints);

		constPanel.setLayout(new java.awt.GridBagLayout());

		constPanel.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"cg$rec.exp.customizer.title.4", "Constants")));
		constPanel.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.4",
				"Constants nature"));
		constPanel.setMinimumSize(new java.awt.Dimension(250, 50));
		constPanel.setPreferredSize(new java.awt.Dimension(250, 50));
		randConstRadioButton.setText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.title.5", "Random"));
		randConstRadioButton.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.5",
				"Variable constants"));
		constsButtonGroup.add(randConstRadioButton);
		constPanel.add(randConstRadioButton, new java.awt.GridBagConstraints());

		realConstRadioButton.setSelected(true);
		realConstRadioButton.setText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.title.6", "Real"));
		realConstRadioButton.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.6",
				"Real value constants"));
		constsButtonGroup.add(realConstRadioButton);
		constPanel.add(realConstRadioButton, new java.awt.GridBagConstraints());

		sameConstRadioButton.setText(ReCResourceBundle
				.findStringOrDefault("cg$rec.exp.customizer.title.13", "The same"));
		sameConstRadioButton.setToolTipText(ReCResourceBundle.findStringOrDefault("rec.exp.customizer.tip.13",
				"The same constants used in the last simulation"));
		constsButtonGroup.add(sameConstRadioButton);
		constPanel.add(sameConstRadioButton, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		configPanel.add(constPanel, gridBagConstraints);

		angInitPanel.setLayout(new java.awt.GridBagLayout());

		angInitPanel.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"cg$rec.exp.customizer.title.7", "Initial Angle (degrees)")));
		angInitPanel.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.7",
				"Initial Angle (degrees)"));
		angInitPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		angInitPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		angInitSlider.setMaximum(89);
		angInitSlider.setMinimum(-89);
		angInitSlider.setMinorTickSpacing(10);
		angInitSlider.setPaintLabels(true);
		angInitSlider.setPaintTicks(true);
		angInitSlider.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.7",
				"Initial Angle (degrees)"));
		angInitSlider.setValue(0);
		angInitSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		angInitSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				angInitSliderStateChanged(evt);
			}
		});
		angInitSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			public void mouseDragged(final java.awt.event.MouseEvent evt) {
				angInitSliderMouseDragged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		angInitPanel.add(angInitSlider, gridBagConstraints);

		angInitTextField.setColumns(4);
		angInitTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		angInitTextField.setText("0");
		angInitTextField.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.7",
				"Initial Angle (degrees)"));
		angInitTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(final java.awt.event.FocusEvent evt) {
				angInitTextFieldFocusLost(evt);
			}
		});

		angInitPanel.add(angInitTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		configPanel.add(angInitPanel, gridBagConstraints);

		propPanel.setLayout(new java.awt.GridLayout(4, 0));

		propPanel.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"cg$rec.exp.customizer.title.8", "Properties")));
		propPanel.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.8",
				"General properties"));
		propPanel.setMinimumSize(new java.awt.Dimension(250, 300));
		propPanel.setPreferredSize(new java.awt.Dimension(250, 380));
		lPanel.setLayout(new java.awt.GridBagLayout());

		lPanel.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"cg$rec.exp.customizer.title.9", "L (dm)")));
		lPanel.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.9",
				"Distance between the axis and the target"));
		lSlider.setFont(new java.awt.Font("MS Sans Serif", 0, 11));
		lSlider.setMajorTickSpacing(10);
		lSlider.setMinimum(20);
		lSlider.setMinorTickSpacing(5);
		lSlider.setPaintLabels(true);
		lSlider.setPaintTicks(true);
		lSlider.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.9",
				"Distance between the axis and the target"));
		lSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		lSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				lSliderStateChanged(evt);
			}
		});
		lSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			public void mouseDragged(final java.awt.event.MouseEvent evt) {
				lSliderMouseDragged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		lPanel.add(lSlider, gridBagConstraints);

		lTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		lTextField.setText("50");
		lTextField.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.9",
				"Distance between the axis and the target"));
		lTextField.setPreferredSize(new java.awt.Dimension(43, 20));
		lTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(final java.awt.event.FocusEvent evt) {
				lTextFieldFocusLost(evt);
			}
		});

		lPanel.add(lTextField, new java.awt.GridBagConstraints());

		propPanel.add(lPanel);

		s0Panel.setLayout(new java.awt.GridBagLayout());

		s0Panel.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"cg$rec.exp.customizer.title.10", "S0 (mm/10)")));
		s0Panel.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.10",
				"Distance between the bigger and the smaller spheres"));
		s0Slider.setMajorTickSpacing(200);
		s0Slider.setMaximum(1000);
		s0Slider.setMinimum(400);
		s0Slider.setMinorTickSpacing(100);
		s0Slider.setPaintLabels(true);
		s0Slider.setPaintTicks(true);
		s0Slider.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.10",
				"Distance between the bigger and the smaller spheres"));
		s0Slider.setValue(465);
		s0Slider.setPreferredSize(new java.awt.Dimension(36, 24));
		s0Slider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				s0SliderStateChanged(evt);
			}
		});
		s0Slider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			public void mouseDragged(final java.awt.event.MouseEvent evt) {
				s0SliderMouseDragged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		s0Panel.add(s0Slider, gridBagConstraints);

		s0TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		s0TextField.setText("465");
		s0TextField.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.10",
				"Distance between the bigger and the smaller spheres"));
		s0TextField.setPreferredSize(new java.awt.Dimension(43, 20));
		s0TextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(final java.awt.event.FocusEvent evt) {
				s0TextFieldFocusLost(evt);
			}
		});

		s0Panel.add(s0TextField, new java.awt.GridBagConstraints());

		propPanel.add(s0Panel);

		dPanel.setLayout(new java.awt.GridBagLayout());

		dPanel.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"cg$rec.exp.customizer.title.11", "d (mm)")));
		dPanel.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.11",
				"Half the bar's size"));
		dSlider.setMajorTickSpacing(20);
		dSlider.setMinimum(10);
		dSlider.setMinorTickSpacing(10);
		dSlider.setPaintLabels(true);
		dSlider.setPaintTicks(true);
		dSlider.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.11",
				"Half the bar's size"));
		dSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		dSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				dSliderStateChanged(evt);
			}
		});
		dSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			public void mouseDragged(final java.awt.event.MouseEvent evt) {
				dSliderMouseDragged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		dPanel.add(dSlider, gridBagConstraints);

		dTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		dTextField.setText("50");
		dTextField.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.11",
				"Half the bar's size"));
		dTextField.setPreferredSize(new java.awt.Dimension(43, 20));
		dTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(final java.awt.event.FocusEvent evt) {
				dTextFieldFocusLost(evt);
			}
		});

		dPanel.add(dTextField, new java.awt.GridBagConstraints());

		propPanel.add(dPanel);

		mPanel.setLayout(new java.awt.GridLayout(2, 2));

		mPanel.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"cg$rec.exp.customizer.title.12", "Masses (Kg)")));
		mPanel.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.12",
				"1st row are the smaller spheres (Editable through the Torsion Beam View)"));
		mm1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		mm1Label.setText("[0.015]");
		mm1Label.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.14",
				"Smaller sphere (Left)"));
		mm1Label.setPreferredSize(new java.awt.Dimension(35, 20));
		mPanel.add(mm1Label);

		mm0Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		mm0Label.setText("[0.015]");
		mm0Label.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.15",
				"Smaller sphere (Right)"));
		mPanel.add(mm0Label);

		mM1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		mM1Label.setText("[1.5]");
		mM1Label.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.16",
				"Bigger sphere (Left)"));
		mPanel.add(mM1Label);

		mM0Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		mM0Label.setText("[1.5]");
		mM0Label.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.17",
				"Bigger sphere (Right)"));
		mPanel.add(mM0Label);

		propPanel.add(mPanel);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 3.0;
		configPanel.add(propPanel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weighty = 0.7;
		add(configPanel, gridBagConstraints);

		btnPanel.setLayout(new java.awt.GridBagLayout());

		okButton.setText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.title.ok", "OK"));
		okButton.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.ok",
				"Run the simulation"));
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		controlBtnPanel.add(okButton);

		cancelButton.setText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.title.cancel", "Cancel"));
		cancelButton.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.cancel",
				"Cancel the experiment"));
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		controlBtnPanel.add(cancelButton);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		btnPanel.add(controlBtnPanel, gridBagConstraints);

		defaultButton.setText(ReCResourceBundle
				.findStringOrDefault("cg$rec.exp.customizer.title.dfc", "Default config"));
		defaultButton.setToolTipText(ReCResourceBundle.findStringOrDefault("cg$rec.exp.customizer.tip.dfc",
				"Load the default parameters of the experiment"));
		defaultButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				defaultButtonActionPerformed(evt);
			}
		});

		defConfBtnPanel.add(defaultButton);

		btnPanel.add(defConfBtnPanel, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		add(btnPanel, gridBagConstraints);

		tbsNsPanel.setLayout(new java.awt.GridBagLayout());

		tbsPanel.setLayout(new java.awt.GridBagLayout());

		tbsPanel.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"cg$rec.exp.customizer.title.tbs", "TBS")));
		tbsPanel.setToolTipText(ReCResourceBundle.findStringOrDefault("ReCExpMM$rec.exp.customizer.tip.tbs",
				"Time between samples"));
		tbsPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		tbsSlider.setMajorTickSpacing(100);
		tbsSlider.setMaximum(500);
		tbsSlider.setMinimum(50);
		tbsSlider.setMinorTickSpacing(50);
		tbsSlider.setOrientation(javax.swing.JSlider.VERTICAL);
		tbsSlider.setPaintLabels(true);
		tbsSlider.setPaintTicks(true);
		tbsSlider.setToolTipText(ReCResourceBundle.findStringOrDefault("ReCExpMM$rec.exp.customizer.tip.tbs",
				"Time between samples"));
		tbsSlider.setValue(100);
		tbsSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				tbsSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		tbsPanel.add(tbsSlider, gridBagConstraints);

		tbsTextField.setColumns(4);
		tbsTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		tbsTextField.setText("100");
		tbsTextField.setToolTipText(ReCResourceBundle.findStringOrDefault("ReCExpMM$rec.exp.customizer.tip.tbs",
				"Time between samples"));
		tbsTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(final java.awt.event.FocusEvent evt) {
				tbsTextFieldFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		tbsPanel.add(tbsTextField, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
		tbsNsPanel.add(tbsPanel, gridBagConstraints);

		samplesPanel.setLayout(new java.awt.GridBagLayout());

		samplesPanel.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle.findStringOrDefault(
				"cg$rec.exp.customizer.title.samples", "N Samples")));
		samplesPanel.setToolTipText(ReCResourceBundle.findStringOrDefault("ReCExpMM$rec.exp.customizer.tip.samples",
				"Number of samples"));
		samplesPanel.setMinimumSize(new java.awt.Dimension(70, 83));
		samplesPanel.setPreferredSize(new java.awt.Dimension(82, 224));
		samplesSlider.setMajorTickSpacing(100);
		samplesSlider.setMaximum(500);
		samplesSlider.setMinimum(1);
		samplesSlider.setMinorTickSpacing(50);
		samplesSlider.setOrientation(javax.swing.JSlider.VERTICAL);
		samplesSlider.setPaintLabels(true);
		samplesSlider.setPaintTicks(true);
		samplesSlider.setToolTipText(ReCResourceBundle.findStringOrDefault("ReCExpMM$rec.exp.customizer.tip.samples",
				"Number of samples"));
		samplesSlider.setValue(100);
		samplesSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				samplesSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		samplesPanel.add(samplesSlider, gridBagConstraints);

		samplesTextField.setColumns(4);
		samplesTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		samplesTextField.setText("100");
		samplesTextField.setToolTipText(ReCResourceBundle.findStringOrDefault(
				"ReCExpMM$rec.exp.customizer.tip.samples", "Number of samples"));
		samplesTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(final java.awt.event.FocusEvent evt) {
				samplesTextFieldFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		samplesPanel.add(samplesTextField, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
		tbsNsPanel.add(samplesPanel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		add(tbsNsPanel, gridBagConstraints);

	}// GEN-END:initComponents

	private void s0SliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_s0SliderStateChanged
		s0TextField.setText("" + s0Slider.getValue());
	}// GEN-LAST:event_s0SliderStateChanged

	private void s0SliderMouseDragged(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_s0SliderMouseDragged
		balanca.updateS0(s0Slider.getValue() * .1);
	}// GEN-LAST:event_s0SliderMouseDragged

	private void lSliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_lSliderStateChanged
		lTextField.setText("" + lSlider.getValue());
	}// GEN-LAST:event_lSliderStateChanged

	private void dSliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_dSliderStateChanged
		dTextField.setText("" + dSlider.getValue());
	}// GEN-LAST:event_dSliderStateChanged

	private void dSliderMouseDragged(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_dSliderMouseDragged
		balanca.updateD(dSlider.getValue());
	}// GEN-LAST:event_dSliderMouseDragged

	private void lSliderMouseDragged(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lSliderMouseDragged
		balanca.updateL(lSlider.getValue() * 10);
		updateRegua();
	}// GEN-LAST:event_lSliderMouseDragged

	private void angInitTextFieldFocusLost(final java.awt.event.FocusEvent evt) {// GEN-FIRST:event_angInitTextFieldFocusLost
		final double val = CGCustomizer.validateInput(angInitTextField, angInitSlider, 1);
		if (val != -1) {
			balanca.updatePosAngle(val * Math.PI / 180);
		}
	}// GEN-LAST:event_angInitTextFieldFocusLost

	private void samplesTextFieldFocusLost(final java.awt.event.FocusEvent evt) {// GEN-FIRST:event_samplesTextFieldFocusLost
		CGCustomizer.validateInput(samplesTextField, samplesSlider, 0);
	}// GEN-LAST:event_samplesTextFieldFocusLost

	private void tbsTextFieldFocusLost(final java.awt.event.FocusEvent evt) {// GEN-FIRST:event_tbsTextFieldFocusLost
		CGCustomizer.validateInput(tbsTextField, tbsSlider, 0);
	}// GEN-LAST:event_tbsTextFieldFocusLost

	private void angInitSliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_angInitSliderStateChanged
		angInitTextField.setText("" + angInitSlider.getValue());
	}// GEN-LAST:event_angInitSliderStateChanged

	private void samplesSliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_samplesSliderStateChanged
		samplesTextField.setText("" + samplesSlider.getValue());
	}// GEN-LAST:event_samplesSliderStateChanged

	private void tbsSliderStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_tbsSliderStateChanged
		tbsTextField.setText("" + tbsSlider.getValue());
	}// GEN-LAST:event_tbsSliderStateChanged

	private void cancelButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformed
		fireICustomizerListenerCanceled();
	}// GEN-LAST:event_cancelButtonActionPerformed

	private double parseMass(final String mass) {
		return Double.parseDouble(mass.substring(1, mass.length() - 1));
	}

	private void okButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okButtonActionPerformed
		acqConfig.setTotalSamples(samplesSlider.getValue());

		acqConfig.setSelectedFrequency(new Frequency((double) tbsSlider.getValue(), hardwareInfo
				.getHardwareFrequencies(0).getMinimumFrequency().getMultiplier(), hardwareInfo
				.getHardwareFrequencies(0).getMinimumFrequency().getFrequencyDefType()));

		final double d = dSlider.getValue() / 1000d;
		final double[] mm = new double[] { parseMass(mm0Label.getText()), parseMass(mm1Label.getText()) };
		final double[] mM = new double[] { parseMass(mM0Label.getText()), parseMass(mM1Label.getText()) };

		acqConfig.getSelectedHardwareParameter("expGType").setParameterValue(
				"" + (expGRadioButton.isSelected() ? 1 : 0));
		acqConfig.getSelectedHardwareParameter("angInit").setParameterValue("" + angInitSlider.getValue());
		acqConfig.getSelectedHardwareParameter("l").setParameterValue("" + lSlider.getValue() * 10);
		acqConfig.getSelectedHardwareParameter("s0").setParameterValue("" + (float) s0Slider.getValue() / 10000f);
		acqConfig.getSelectedHardwareParameter("d").setParameterValue("" + (float) d);
		acqConfig.getSelectedHardwareParameter("mm0").setParameterValue("" + (float) mm[0]);
		acqConfig.getSelectedHardwareParameter("mm1").setParameterValue("" + (float) mm[1]);
		acqConfig.getSelectedHardwareParameter("mM0").setParameterValue("" + (float) mM[0]);
		acqConfig.getSelectedHardwareParameter("mM1").setParameterValue("" + (float) mM[1]);
		acqConfig.getSelectedHardwareParameter("targetSize").setParameterValue("" + (int) balanca.getReguaSize());

		if (!sameConstRadioButton.isSelected()) {
			final double i = (mm[0] + mm[1]) * d * d + 2 * Math.pow(d - 6.6e-3, 3) * Math.pow(1.25e-3, 2) * Math.PI
					* 2700 / 3 + 2 * Math.pow(6.6e-3, 2) * (mm[0] + mm[1]) / 5;

			consts[0] = 8.263e-9;
			consts[1] = 9.3e-4 * 2 * i;
			consts[2] = 6.67e-11;

			if (!realConstRadioButton.isSelected()) {
				consts[0] *= 2 * Math.random();
				consts[1] *= 2 * Math.random();
				consts[2] *= 2 * Math.random();
			}
		}
		acqConfig.getSelectedHardwareParameter("c").setParameterValue("" + (float) consts[0]);
		acqConfig.getSelectedHardwareParameter("k").setParameterValue("" + (float) consts[1]);
		acqConfig.getSelectedHardwareParameter("g").setParameterValue("" + (float) consts[2]);

		for (int i = 0; i < acqConfig.getSelectedHardwareParameters().length; i++) {
			System.out.println(acqConfig.getSelectedHardwareParameters(i).getParameterName() + " = "
					+ acqConfig.getSelectedHardwareParameters(i).getParameterValue());
		}

		fireICustomizerListenerDone();
	}// GEN-LAST:event_okButtonActionPerformed

	private void defaultButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_defaultButtonActionPerformed
		balanca.config(0, 500, 46.5, 50, 100);
		balanca.setMasses(new double[] { .015, .015, 1.5, 1.5 });
		expGRadioButton.setSelected(true);
		realConstRadioButton.setSelected(true);
		update();
	}// GEN-LAST:event_defaultButtonActionPerformed

	public static double validateInput(final javax.swing.JTextField textField, final javax.swing.JSlider slider,
			final double multiplier) {
		try {
			int val = (int) Math.round(Math.abs(Double.parseDouble(textField.getText())));

			if (val > slider.getMaximum()) {
				val = slider.getMaximum();
			} else if (val < slider.getMinimum()) {
				val = slider.getMinimum();
			}

			textField.setText(Integer.toString(val));
			slider.setValue(val);
			return val * multiplier;
		} catch (final NumberFormatException e) {
			textField.setText(Integer.toString(slider.getValue()));
			return -1;
		}
	}

	private void dTextFieldFocusLost(final java.awt.event.FocusEvent evt) {// GEN-FIRST:event_dTextFieldFocusLost
		final double val = CGCustomizer.validateInput(dTextField, dSlider, 1);
		if (val != -1) {
			balanca.updateD(val);
		}
	}// GEN-LAST:event_dTextFieldFocusLost

	private void lTextFieldFocusLost(final java.awt.event.FocusEvent evt) {// GEN-FIRST:event_lTextFieldFocusLost
		final double val = CGCustomizer.validateInput(lTextField, lSlider, 10);
		if (val != -1) {
			balanca.updateL(val);
		}
	}// GEN-LAST:event_lTextFieldFocusLost

	private void s0TextFieldFocusLost(final java.awt.event.FocusEvent evt) {// GEN-FIRST:event_s0TextFieldFocusLost
		final double val = CGCustomizer.validateInput(s0TextField, s0Slider, .1);
		if (val != -1) {
			balanca.updateS0(val);
		}
	}// GEN-LAST:event_s0TextFieldFocusLost

	private void expCRadioButtonStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_expCRadioButtonStateChanged
		if (expCRadioButton.isSelected()) {
			balanca.cMode();
		} else {
			balanca.gMode();
		}
	}// GEN-LAST:event_expCRadioButtonStateChanged

	private void angInitSliderMouseDragged(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_angInitSliderMouseDragged
		balanca.updatePosAngle(angInitSlider.getValue() * Math.PI / 180);
		updateRegua();
	}// GEN-LAST:event_angInitSliderMouseDragged

	public static void main(final String args[]) {
		final javax.swing.JFrame test = new javax.swing.JFrame();
		test.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(final java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		test.getContentPane().add(new CGCustomizer());
		test.pack();
		test.setVisible(true);
	}

	// ****************************REC********************************************/

	/** Utility field used by event firing mechanism. */
	private javax.swing.event.EventListenerList listenerList = null;

	/**
	 * Registers ICustomizerListener to receive events.
	 * 
	 * @param listener The listener to register.
	 */
	public synchronized void addICustomizerListener(final ICustomizerListener listener) {
		if (listenerList == null) {
			listenerList = new javax.swing.event.EventListenerList();
		}
		listenerList.add(ICustomizerListener.class, listener);
	}

	/**
	 * Removes ICustomizerListener from the list of listeners.
	 * 
	 * @param listener The listener to remove.
	 */
	public synchronized void removeICustomizerListener(final ICustomizerListener listener) {
		listenerList.remove(ICustomizerListener.class, listener);
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerCanceled() {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {
				((ICustomizerListener) listeners[i + 1]).canceled();
			}
		}
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerDone() {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {

				((ICustomizerListener) listeners[i + 1]).done();
			}
		}
	}

	private HardwareInfo hardwareInfo = null;
	private HardwareAcquisitionConfig acqConfig = null;

	public HardwareAcquisitionConfig getAcquisitionConfig() {
		return acqConfig;
	}

	public void setHardwareAcquisitionConfig(final HardwareAcquisitionConfig acqConfig) {
		this.acqConfig = acqConfig;
		if (acqConfig != null) {
			// boolean expGType =
			// Boolean.getBoolean(acqConfig.getSelectedHardwareParameterValue("expGType"));
			final boolean expGType = acqConfig.getSelectedHardwareParameterValue("expGType").trim().equals("1") ? true
					: false;

			final int angInit = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("angInit"));
			final int l = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("l"));
			final float s0 = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("s0"));
			final float d = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("d"));
			final float mm0 = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("mm0"));
			final float mm1 = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("mm1"));
			final float mM0 = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("mM0"));
			final float mM1 = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("mM1"));
			final int targetSize = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("targetSize"));

			expCRadioButton.setSelected(expGType);

			consts[0] = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("c"));
			consts[1] = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("k"));
			consts[2] = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("g"));

			balanca.config(angInit * Math.PI / 180, l, s0 * 1000, d * 1000, targetSize);
			balanca.setMasses(new double[] { mm0, mm1, mM0, mM1 });
			update();
		}
	}

	public void setHardwareInfo(final HardwareInfo hardwareInfo) {
		this.hardwareInfo = hardwareInfo;
	}

	protected HardwareInfo getHardwareInfo() {
		return hardwareInfo;
	}

	public javax.swing.JComponent getCustomizerComponent() {
		return this;
	}

	public javax.swing.ImageIcon getCustomizerIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/vcg/resources/cg_iconified.png"));
	}

	public String getCustomizerTitle() {
		return "Cavendish Experiment Configuration Utility";
	}

	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel angInitPanel;
	private javax.swing.JSlider angInitSlider;
	private javax.swing.JTextField angInitTextField;
	private javax.swing.JPanel btnPanel;
	private javax.swing.JButton cancelButton;
	private javax.swing.JPanel configPanel;
	private javax.swing.JPanel constPanel;
	private javax.swing.ButtonGroup constsButtonGroup;
	private javax.swing.JPanel controlBtnPanel;
	private javax.swing.JPanel dPanel;
	private javax.swing.JSlider dSlider;
	private javax.swing.JTextField dTextField;
	private javax.swing.JPanel defConfBtnPanel;
	private javax.swing.JButton defaultButton;
	private javax.swing.ButtonGroup expButtonGroup;
	private javax.swing.JRadioButton expCRadioButton;
	private javax.swing.JRadioButton expGRadioButton;
	private javax.swing.JPanel expPanel;
	private javax.swing.JPanel lPanel;
	private javax.swing.JSlider lSlider;
	private javax.swing.JTextField lTextField;
	private javax.swing.JLabel mM0Label;
	private javax.swing.JLabel mM1Label;
	private javax.swing.JPanel mPanel;
	private javax.swing.JLabel mm0Label;
	private javax.swing.JLabel mm1Label;
	private javax.swing.JButton okButton;
	private javax.swing.JPanel propPanel;
	private javax.swing.JRadioButton randConstRadioButton;
	private javax.swing.JRadioButton realConstRadioButton;
	private javax.swing.JPanel s0Panel;
	private javax.swing.JSlider s0Slider;
	private javax.swing.JTextField s0TextField;
	private javax.swing.JRadioButton sameConstRadioButton;
	private javax.swing.JPanel samplesPanel;
	private javax.swing.JSlider samplesSlider;
	private javax.swing.JTextField samplesTextField;
	private javax.swing.JPanel tbsNsPanel;
	private javax.swing.JPanel tbsPanel;
	private javax.swing.JSlider tbsSlider;
	private javax.swing.JTextField tbsTextField;
	// End of variables declaration//GEN-END:variables

}
