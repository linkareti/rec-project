/*
 * STDMAPCustomizer.java
 *
 * Created on October 27, 2004, 03:35 AM
 */

package pt.utl.ist.elab.client.vstdmap;

/*
 * @author  Antonio Jose Rodrigues Figueiredo
 *
 */
import pt.utl.ist.elab.client.virtual.guipack.GUtils;
import pt.utl.ist.elab.client.virtual.guipack.InteractiveMenu;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.metadata.HardwareInfo;
import com.linkare.rec.data.synch.Frequency;
import com.linkare.rec.impl.client.customizer.ICustomizerListener;

public class STDMAPCustomizer extends javax.swing.JPanel implements com.linkare.rec.impl.client.customizer.ICustomizer,
		InteractiveMenu {

	private InteractiveSTDMAPAnima stdAnima;
	private int nSamples = 500;

	/** Creates new form CGCustomizer */
	public STDMAPCustomizer() {
		initComponents();

		java.awt.GridBagConstraints gridBagConstraints;

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridheight = 1;
		gridBagConstraints.gridwidth = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1;
		gridBagConstraints.weighty = 1;
		mainPanel.add(stdAnima = new InteractiveSTDMAPAnima(this), gridBagConstraints);
		stdAnima.start();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;

		expButtonGroup = new javax.swing.ButtonGroup();
		constsButtonGroup = new javax.swing.ButtonGroup();
		configPanel = new javax.swing.JPanel();
		staticPanel = new javax.swing.JPanel();
		staticRadioButton = new javax.swing.JRadioButton();
		nonStaticRadioButton = new javax.swing.JRadioButton();
		simulPanel = new javax.swing.JPanel();
		mapRadioButton = new javax.swing.JRadioButton();
		animaRadioButton = new javax.swing.JRadioButton();
		histRadioButton = new javax.swing.JRadioButton();
		mapaTabbedPane = new javax.swing.JTabbedPane();
		generalPanel = new javax.swing.JPanel();
		pcorPanel = new javax.swing.JPanel();
		pcorSlider = new javax.swing.JSlider();
		pcorTextField = new javax.swing.JTextField();
		iterPanel = new javax.swing.JPanel();
		iterSlider = new javax.swing.JSlider();
		iterTextField = new javax.swing.JTextField();
		kPanel = new javax.swing.JPanel();
		kSlider = new javax.swing.JSlider();
		kTextField = new javax.swing.JTextField();
		mainThetaPanel = new javax.swing.JPanel();
		thetaPanel = new javax.swing.JPanel();
		thetaSlider = new javax.swing.JSlider();
		thetaTextField = new javax.swing.JTextField();
		nThetaPanel = new javax.swing.JPanel();
		nThetaSlider = new javax.swing.JSlider();
		nThetaTextField = new javax.swing.JTextField();
		dThetaPanel = new javax.swing.JPanel();
		dThetaSlider = new javax.swing.JSlider();
		dThetaTextField = new javax.swing.JTextField();
		mainIMapaPanel = new javax.swing.JPanel();
		iMapaPanel = new javax.swing.JPanel();
		iMapaSlider = new javax.swing.JSlider();
		iMapaTextField = new javax.swing.JTextField();
		nIMapaPanel = new javax.swing.JPanel();
		nIMapaSlider = new javax.swing.JSlider();
		nIMapaTextField = new javax.swing.JTextField();
		dIMapaPanel = new javax.swing.JPanel();
		dIMapaSlider = new javax.swing.JSlider();
		dIMapaTextField = new javax.swing.JTextField();
		resolutionPanel = new javax.swing.JPanel();
		widthPanel = new javax.swing.JPanel();
		widthSlider = new javax.swing.JSlider();
		widthTextField = new javax.swing.JTextField();
		heightPanel = new javax.swing.JPanel();
		heightSlider = new javax.swing.JSlider();
		heightTextField = new javax.swing.JTextField();
		pixSizePanel = new javax.swing.JPanel();
		pixSizeSlider = new javax.swing.JSlider();
		btnPanel = new javax.swing.JPanel();
		controlBtnPanel = new javax.swing.JPanel();
		okButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		defConfBtnPanel = new javax.swing.JPanel();
		defaultButton = new javax.swing.JButton();
		mainEditPanel = new javax.swing.JPanel();
		editPanel = new javax.swing.JPanel();
		editSlider = new javax.swing.JSlider();
		editTextField = new javax.swing.JTextField();
		editLabel = new javax.swing.JLabel();
		mainPanel = new javax.swing.JPanel();

		setLayout(new java.awt.GridBagLayout());

		setMinimumSize(new java.awt.Dimension(600, 600));
		setPreferredSize(new java.awt.Dimension(600, 600));
		configPanel.setLayout(new java.awt.GridBagLayout());

		configPanel.setMinimumSize(new java.awt.Dimension(290, 400));
		configPanel.setPreferredSize(new java.awt.Dimension(290, 400));
		staticPanel.setLayout(new java.awt.GridBagLayout());

		staticPanel
				.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.BevelBorder(
						javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 51, 153), new java.awt.Color(0,
								51, 153), new java.awt.Color(0, 51, 153), new java.awt.Color(0, 51, 153)),
						java.util.ResourceBundle.getBundle(
								"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
								"rec.exp.customizer.title.1")));
		staticPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.1"));
		staticPanel.setMinimumSize(new java.awt.Dimension(290, 50));
		staticPanel.setPreferredSize(new java.awt.Dimension(290, 50));
		staticRadioButton
				.setText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
						"rec.exp.customizer.title.2"));
		staticRadioButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.2"));
		expButtonGroup.add(staticRadioButton);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.weightx = 1.0;
		staticPanel.add(staticRadioButton, gridBagConstraints);

		nonStaticRadioButton.setSelected(true);
		nonStaticRadioButton
				.setText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
						"rec.exp.customizer.title.3"));
		nonStaticRadioButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.3"));
		expButtonGroup.add(nonStaticRadioButton);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.weightx = 1.0;
		staticPanel.add(nonStaticRadioButton, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		configPanel.add(staticPanel, gridBagConstraints);

		simulPanel.setLayout(new java.awt.GridBagLayout());

		simulPanel
				.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.BevelBorder(
						javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 51, 153), new java.awt.Color(0,
								51, 153), new java.awt.Color(0, 51, 153), new java.awt.Color(0, 51, 153)),
						java.util.ResourceBundle.getBundle(
								"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
								"rec.exp.customizer.title.4")));
		simulPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.4"));
		simulPanel.setMinimumSize(new java.awt.Dimension(290, 100));
		simulPanel.setPreferredSize(new java.awt.Dimension(290, 100));
		mapRadioButton.setSelected(true);
		mapRadioButton.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.24"));
		mapRadioButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.24"));
		constsButtonGroup.add(mapRadioButton);
		mapRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		mapRadioButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mapRadioButtonActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		simulPanel.add(mapRadioButton, gridBagConstraints);

		animaRadioButton.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.25"));
		animaRadioButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.25"));
		constsButtonGroup.add(animaRadioButton);
		animaRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		animaRadioButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				animaRadioButtonActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		simulPanel.add(animaRadioButton, gridBagConstraints);

		histRadioButton.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.26"));
		histRadioButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.26"));
		constsButtonGroup.add(histRadioButton);
		histRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		histRadioButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				histRadioButtonActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		simulPanel.add(histRadioButton, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		configPanel.add(simulPanel, gridBagConstraints);

		mapaTabbedPane
				.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.BevelBorder(
						javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 51, 153), new java.awt.Color(0,
								51, 153), new java.awt.Color(0, 51, 153), new java.awt.Color(0, 51, 153)),
						java.util.ResourceBundle.getBundle(
								"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
								"rec.exp.customizer.title.5")));
		mapaTabbedPane.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.5"));
		mapaTabbedPane.setMinimumSize(new java.awt.Dimension(290, 293));
		mapaTabbedPane.setPreferredSize(new java.awt.Dimension(290, 293));
		generalPanel.setLayout(new java.awt.GridBagLayout());

		generalPanel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(0, 51, 153), new java.awt.Color(0, 51, 153), new java.awt.Color(0, 51, 153),
				new java.awt.Color(0, 51, 153)));
		generalPanel.setMinimumSize(new java.awt.Dimension(290, 90));
		generalPanel.setPreferredSize(new java.awt.Dimension(290, 90));
		pcorPanel.setLayout(new java.awt.GridBagLayout());

		pcorPanel
				.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
						"rec.exp.customizer.title.8")));
		pcorPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.8"));
		pcorPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		pcorPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		editPanel.setVisible(false);
		pcorSlider.setMajorTickSpacing(200);
		pcorSlider.setMaximum(1000);
		pcorSlider.setMinorTickSpacing(50);
		pcorSlider.setPaintLabels(true);
		pcorSlider.setPaintTicks(true);
		pcorSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.8"));
		pcorSlider.setValue(314);
		pcorSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		pcorSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				pcorSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		pcorPanel.add(pcorSlider, gridBagConstraints);

		pcorTextField.setColumns(4);
		pcorTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		pcorTextField.setText("314");
		pcorTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.8"));
		pcorTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				pcorTextFieldFocusLost(evt);
			}
		});

		pcorPanel.add(pcorTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		generalPanel.add(pcorPanel, gridBagConstraints);

		iterPanel.setLayout(new java.awt.GridBagLayout());

		iterPanel
				.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
						"rec.exp.customizer.title.9")));
		iterPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.9"));
		iterPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		iterPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		editPanel.setVisible(false);
		iterSlider.setMajorTickSpacing(40);
		iterSlider.setMaximum(201);
		iterSlider.setMinimum(1);
		iterSlider.setMinorTickSpacing(20);
		iterSlider.setPaintLabels(true);
		iterSlider.setPaintTicks(true);
		iterSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.9"));
		iterSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		iterSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				iterSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		iterPanel.add(iterSlider, gridBagConstraints);

		iterTextField.setColumns(4);
		iterTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		iterTextField.setText("50");
		iterTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.9"));
		iterTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				iterTextFieldFocusLost(evt);
			}
		});

		iterPanel.add(iterTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		generalPanel.add(iterPanel, gridBagConstraints);

		kPanel.setLayout(new java.awt.GridBagLayout());

		kPanel
				.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
						"rec.exp.customizer.title.7")));
		kPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.7"));
		kPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		kPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		editPanel.setVisible(false);
		kSlider.setMajorTickSpacing(200);
		kSlider.setMaximum(1000);
		kSlider.setMinorTickSpacing(50);
		kSlider.setPaintLabels(true);
		kSlider.setPaintTicks(true);
		kSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.7"));
		kSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		kSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				kSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		kPanel.add(kSlider, gridBagConstraints);

		kTextField.setColumns(4);
		kTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		kTextField.setText("50");
		kTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.7"));
		kTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				kTextFieldFocusLost(evt);
			}
		});

		kPanel.add(kTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		generalPanel.add(kPanel, gridBagConstraints);

		mapaTabbedPane.addTab(
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
						.getString("rec.exp.customizer.title.6"), null, generalPanel, java.util.ResourceBundle
						.getBundle("pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
								"rec.exp.customizer.tip.6"));

		mainThetaPanel.setLayout(new java.awt.GridBagLayout());

		mainThetaPanel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(0, 51, 153), new java.awt.Color(0, 51, 153), new java.awt.Color(0, 51, 153),
				new java.awt.Color(0, 51, 153)));
		mainThetaPanel.setMinimumSize(new java.awt.Dimension(290, 90));
		mainThetaPanel.setPreferredSize(new java.awt.Dimension(290, 90));
		thetaPanel.setLayout(new java.awt.GridBagLayout());

		thetaPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.11")));
		thetaPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.11"));
		thetaPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		thetaPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		editPanel.setVisible(false);
		thetaSlider.setMajorTickSpacing(60);
		thetaSlider.setMaximum(360);
		thetaSlider.setMinorTickSpacing(12);
		thetaSlider.setPaintLabels(true);
		thetaSlider.setPaintTicks(true);
		thetaSlider.setToolTipText("Initial Angle (degrees)");
		thetaSlider.setValue(0);
		thetaSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		thetaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				thetaSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		thetaPanel.add(thetaSlider, gridBagConstraints);

		thetaTextField.setColumns(4);
		thetaTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		thetaTextField.setText("0");
		thetaTextField.setToolTipText("Initial Angle (degrees)");
		thetaTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				thetaTextFieldFocusLost(evt);
			}
		});

		thetaPanel.add(thetaTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		mainThetaPanel.add(thetaPanel, gridBagConstraints);

		nThetaPanel.setLayout(new java.awt.GridBagLayout());

		nThetaPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.13")));
		nThetaPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.13"));
		nThetaPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		nThetaPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		editPanel.setVisible(false);
		nThetaSlider.setMajorTickSpacing(5);
		nThetaSlider.setMaximum(31);
		nThetaSlider.setMinimum(1);
		nThetaSlider.setMinorTickSpacing(1);
		nThetaSlider.setPaintLabels(true);
		nThetaSlider.setPaintTicks(true);
		nThetaSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.13"));
		nThetaSlider.setValue(30);
		nThetaSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		nThetaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				nThetaSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		nThetaPanel.add(nThetaSlider, gridBagConstraints);

		nThetaTextField.setColumns(4);
		nThetaTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		nThetaTextField.setText("30");
		nThetaTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.13"));
		nThetaTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				nThetaTextFieldFocusLost(evt);
			}
		});

		nThetaPanel.add(nThetaTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		mainThetaPanel.add(nThetaPanel, gridBagConstraints);

		dThetaPanel.setLayout(new java.awt.GridBagLayout());

		dThetaPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.12")));
		dThetaPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.12"));
		dThetaPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		dThetaPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		editPanel.setVisible(false);
		dThetaSlider.setMajorTickSpacing(60);
		dThetaSlider.setMaximum(360);
		dThetaSlider.setMinorTickSpacing(12);
		dThetaSlider.setPaintLabels(true);
		dThetaSlider.setPaintTicks(true);
		dThetaSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.12"));
		dThetaSlider.setValue(15);
		dThetaSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		dThetaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				dThetaSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		dThetaPanel.add(dThetaSlider, gridBagConstraints);

		dThetaTextField.setColumns(4);
		dThetaTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		dThetaTextField.setText("15");
		dThetaTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.12"));
		dThetaTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				dThetaTextFieldFocusLost(evt);
			}
		});

		dThetaPanel.add(dThetaTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		mainThetaPanel.add(dThetaPanel, gridBagConstraints);

		mapaTabbedPane.addTab(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.10"), null, mainThetaPanel, java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.10"));

		mainIMapaPanel.setLayout(new java.awt.GridBagLayout());

		mainIMapaPanel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(0, 51, 153), new java.awt.Color(0, 51, 153), new java.awt.Color(0, 51, 153),
				new java.awt.Color(0, 51, 153)));
		mainIMapaPanel.setMinimumSize(new java.awt.Dimension(290, 90));
		mainIMapaPanel.setPreferredSize(new java.awt.Dimension(290, 90));
		iMapaPanel.setLayout(new java.awt.GridBagLayout());

		iMapaPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.15")));
		iMapaPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.15"));
		iMapaPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		iMapaPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		editPanel.setVisible(false);
		iMapaSlider.setMajorTickSpacing(60);
		iMapaSlider.setMaximum(360);
		iMapaSlider.setMinorTickSpacing(12);
		iMapaSlider.setPaintLabels(true);
		iMapaSlider.setPaintTicks(true);
		iMapaSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.15"));
		iMapaSlider.setValue(0);
		iMapaSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		iMapaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				iMapaSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		iMapaPanel.add(iMapaSlider, gridBagConstraints);

		iMapaTextField.setColumns(4);
		iMapaTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		iMapaTextField.setText("0");
		iMapaTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.15"));
		iMapaTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				iMapaTextFieldFocusLost(evt);
			}
		});

		iMapaPanel.add(iMapaTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		mainIMapaPanel.add(iMapaPanel, gridBagConstraints);

		nIMapaPanel.setLayout(new java.awt.GridBagLayout());

		nIMapaPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.17")));
		nIMapaPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.17"));
		nIMapaPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		nIMapaPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		editPanel.setVisible(false);
		nIMapaSlider.setMajorTickSpacing(5);
		nIMapaSlider.setMaximum(31);
		nIMapaSlider.setMinimum(1);
		nIMapaSlider.setMinorTickSpacing(1);
		nIMapaSlider.setPaintLabels(true);
		nIMapaSlider.setPaintTicks(true);
		nIMapaSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.17"));
		nIMapaSlider.setValue(5);
		nIMapaSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		nIMapaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				nIMapaSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		nIMapaPanel.add(nIMapaSlider, gridBagConstraints);

		nIMapaTextField.setColumns(4);
		nIMapaTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		nIMapaTextField.setText("5");
		nIMapaTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.17"));
		nIMapaTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				nIMapaTextFieldFocusLost(evt);
			}
		});

		nIMapaPanel.add(nIMapaTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		mainIMapaPanel.add(nIMapaPanel, gridBagConstraints);

		dIMapaPanel.setLayout(new java.awt.GridBagLayout());

		dIMapaPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.16")));
		dIMapaPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.16"));
		dIMapaPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		dIMapaPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		editPanel.setVisible(false);
		dIMapaSlider.setMajorTickSpacing(60);
		dIMapaSlider.setMaximum(360);
		dIMapaSlider.setMinorTickSpacing(12);
		dIMapaSlider.setPaintLabels(true);
		dIMapaSlider.setPaintTicks(true);
		dIMapaSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.16"));
		dIMapaSlider.setValue(20);
		dIMapaSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		dIMapaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				dIMapaSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		dIMapaPanel.add(dIMapaSlider, gridBagConstraints);

		dIMapaTextField.setColumns(4);
		dIMapaTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		dIMapaTextField.setText("20");
		dIMapaTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.16"));
		dIMapaTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				dIMapaTextFieldFocusLost(evt);
			}
		});

		dIMapaPanel.add(dIMapaTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		mainIMapaPanel.add(dIMapaPanel, gridBagConstraints);

		mapaTabbedPane.addTab(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.14"), null, mainIMapaPanel, java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.14"));

		resolutionPanel.setLayout(new java.awt.GridBagLayout());

		resolutionPanel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED,
				new java.awt.Color(0, 51, 153), new java.awt.Color(0, 51, 153), new java.awt.Color(0, 51, 153),
				new java.awt.Color(0, 51, 153)));
		widthPanel.setLayout(new java.awt.GridBagLayout());

		widthPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.19")));
		widthPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.19"));
		widthPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		widthPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		editPanel.setVisible(false);
		widthSlider.setMajorTickSpacing(500);
		widthSlider.setMaximum(1550);
		widthSlider.setMinimum(50);
		widthSlider.setMinorTickSpacing(100);
		widthSlider.setPaintLabels(true);
		widthSlider.setPaintTicks(true);
		widthSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.19"));
		widthSlider.setValue(800);
		widthSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		widthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				widthSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		widthPanel.add(widthSlider, gridBagConstraints);

		widthTextField.setColumns(4);
		widthTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		widthTextField.setText("800");
		widthTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.19"));
		widthTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				widthTextFieldFocusLost(evt);
			}
		});

		widthPanel.add(widthTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		resolutionPanel.add(widthPanel, gridBagConstraints);

		heightPanel.setLayout(new java.awt.GridBagLayout());

		heightPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.20")));
		heightPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.20"));
		heightPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		heightPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		editPanel.setVisible(false);
		heightSlider.setMajorTickSpacing(500);
		heightSlider.setMaximum(1550);
		heightSlider.setMinimum(50);
		heightSlider.setMinorTickSpacing(100);
		heightSlider.setPaintLabels(true);
		heightSlider.setPaintTicks(true);
		heightSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.20"));
		heightSlider.setValue(800);
		heightSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		heightSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				heightSliderStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		heightPanel.add(heightSlider, gridBagConstraints);

		heightTextField.setColumns(4);
		heightTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		heightTextField.setText("800");
		heightTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.20"));
		heightTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				heightTextFieldFocusLost(evt);
			}
		});

		heightPanel.add(heightTextField, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		resolutionPanel.add(heightPanel, gridBagConstraints);

		pixSizePanel.setLayout(new java.awt.GridBagLayout());

		pixSizePanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.21")));
		pixSizePanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.21"));
		pixSizePanel.setMinimumSize(new java.awt.Dimension(250, 80));
		pixSizePanel.setPreferredSize(new java.awt.Dimension(250, 80));
		editPanel.setVisible(false);
		pixSizeSlider.setMajorTickSpacing(1);
		pixSizeSlider.setMaximum(5);
		pixSizeSlider.setPaintLabels(true);
		pixSizeSlider.setPaintTicks(true);
		pixSizeSlider.setSnapToTicks(true);
		pixSizeSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.21"));
		pixSizeSlider.setValue(1);
		pixSizeSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		pixSizePanel.add(pixSizeSlider, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		resolutionPanel.add(pixSizePanel, gridBagConstraints);

		mapaTabbedPane.addTab(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.18"), null, resolutionPanel, java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.18"));

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weighty = 1.0;
		configPanel.add(mapaTabbedPane, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weighty = 1.0;
		add(configPanel, gridBagConstraints);

		btnPanel.setLayout(new java.awt.GridBagLayout());

		okButton.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.ok"));
		okButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.ok"));
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		controlBtnPanel.add(okButton);

		cancelButton.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.title.cancel"));
		cancelButton.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.tip.cancel"));
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		controlBtnPanel.add(cancelButton);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		btnPanel.add(controlBtnPanel, gridBagConstraints);

		defaultButton.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.title.dfc"));
		defaultButton
				.setToolTipText(java.util.ResourceBundle.getBundle(
						"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
						"rec.exp.customizer.tip.dfc"));
		defaultButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				defaultButtonActionPerformed(evt);
			}
		});

		defConfBtnPanel.add(defaultButton);

		btnPanel.add(defConfBtnPanel, new java.awt.GridBagConstraints());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		add(btnPanel, gridBagConstraints);

		mainEditPanel.setLayout(new java.awt.GridBagLayout());

		mainEditPanel.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.BevelBorder(
				javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 51, 153), new java.awt.Color(0, 51, 153),
				new java.awt.Color(0, 51, 153), new java.awt.Color(0, 51, 153)), java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.22")));
		mainEditPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.22"));
		mainEditPanel.setMinimumSize(new java.awt.Dimension(300, 100));
		mainEditPanel.setPreferredSize(new java.awt.Dimension(300, 200));
		mainEditPanel.setEnabled(false);
		editPanel.setLayout(new java.awt.GridBagLayout());

		editPanel.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.23")));
		editPanel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.23"));
		editPanel.setMinimumSize(new java.awt.Dimension(250, 80));
		editPanel.setPreferredSize(new java.awt.Dimension(250, 80));
		editPanel.setVisible(false);
		editSlider.setMajorTickSpacing(60);
		editSlider.setMaximum(360);
		editSlider.setMinorTickSpacing(12);
		editSlider.setPaintLabels(true);
		editSlider.setPaintTicks(true);
		editSlider.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.23"));
		editSlider.setValue(0);
		editSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		editSlider.setEnabled(false);
		editSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				editSliderStateChanged(evt);
			}
		});
		editSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			public void mouseDragged(java.awt.event.MouseEvent evt) {
				editSliderMouseDragged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		editPanel.add(editSlider, gridBagConstraints);

		editTextField.setColumns(4);
		editTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		editTextField.setText("0");
		editTextField.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.23"));
		editTextField.setEnabled(false);
		editTextField.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				editTextFieldFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		editPanel.add(editTextField, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		mainEditPanel.add(editPanel, gridBagConstraints);

		editLabel.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
		editLabel.setForeground(new java.awt.Color(255, 102, 102));
		editLabel.setText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
				.getString("rec.exp.customizer.title.23"));
		editLabel.setToolTipText(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString("rec.exp.customizer.tip.23"));
		editLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		mainEditPanel.add(editLabel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		add(mainEditPanel, gridBagConstraints);

		mainPanel.setLayout(new java.awt.GridBagLayout());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		add(mainPanel, gridBagConstraints);

	}// GEN-END:initComponents

	private void heightSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_heightSliderStateChanged
		heightTextField.setText("" + heightSlider.getValue());
	}// GEN-LAST:event_heightSliderStateChanged

	private void widthSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_widthSliderStateChanged
		widthTextField.setText("" + widthSlider.getValue());
	}// GEN-LAST:event_widthSliderStateChanged

	private void heightTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_heightTextFieldFocusLost
		try {
			double val = GUtils.validateInput(heightTextField, heightSlider, 1);
		} catch (NumberFormatException e) {
			heightTextField.setText(Integer.toString(heightSlider.getValue()));
		}
	}// GEN-LAST:event_heightTextFieldFocusLost

	private void widthTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_widthTextFieldFocusLost
		try {
			double val = GUtils.validateInput(widthTextField, widthSlider, 1);
		} catch (NumberFormatException e) {
			widthTextField.setText(Integer.toString(widthSlider.getValue()));
		}
	}// GEN-LAST:event_widthTextFieldFocusLost

	public void actionPerformed(java.awt.event.ActionEvent e) {
		if (e.getActionCommand().equalsIgnoreCase(
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
						.getString("rec.exp.customizer.editMenu.title.1")))
			updateEditPanel(java.util.ResourceBundle.getBundle(
					"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
					"rec.exp.customizer.editPanel.title.1"), java.util.ResourceBundle.getBundle(
					"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
					"rec.exp.customizer.editPanel.tip.1"), (int) Math.round(stdAnima.getMass()), new int[] { 100, 1001,
					1, 50 });
		else if (e.getActionCommand().equalsIgnoreCase(
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
						.getString("rec.exp.customizer.editMenu.title.2")))
			updateEditPanel(java.util.ResourceBundle.getBundle(
					"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
					"rec.exp.customizer.editPanel.title.2"), java.util.ResourceBundle.getBundle(
					"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
					"rec.exp.customizer.editPanel.tip.2"), (int) Math.round(stdAnima.getLength() * 10), new int[] { 10,
					161, 1, 2 });
		else if (e.getActionCommand().equalsIgnoreCase(
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
						.getString("rec.exp.customizer.editMenu.title.3")))
			updateEditPanel(java.util.ResourceBundle.getBundle(
					"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
					"rec.exp.customizer.editPanel.title.3"), java.util.ResourceBundle.getBundle(
					"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
					"rec.exp.customizer.editPanel.tip.3"), (int) Math.round(stdAnima.getForce() * 10), new int[] { 50,
					250, -250, 10 });
		else if (e.getActionCommand().equalsIgnoreCase(
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
						.getString("rec.exp.customizer.editMenu.title.4")))
			updateEditPanel(java.util.ResourceBundle.getBundle(
					"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
					"rec.exp.customizer.editPanel.title.4"), java.util.ResourceBundle.getBundle(
					"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
					"rec.exp.customizer.editPanel.tip.4"), (int) Math.round((double) stdAnima.getForceDt() / 100d),
					new int[] { 10, 101, 1, 1 });
		else if (e.getActionCommand().equalsIgnoreCase(
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
						.getString("rec.exp.customizer.editMenu.title.5")))
			updateEditPanel(java.util.ResourceBundle.getBundle(
					"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
					"rec.exp.customizer.editPanel.title.5"), java.util.ResourceBundle.getBundle(
					"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
					"rec.exp.customizer.editPanel.tip.5"), (int) Math.round(Math.toDegrees(stdAnima.getTheta())),
					new int[] { 30, 180, -180, 15 });
		else if (e.getActionCommand().equalsIgnoreCase(
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
						.getString("rec.exp.customizer.editMenu.title.6")))
			updateEditPanel(java.util.ResourceBundle.getBundle(
					"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
					"rec.exp.customizer.editPanel.title.6"), java.util.ResourceBundle.getBundle(
					"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
					"rec.exp.customizer.editPanel.tip.6"), (int) Math.round(Math.toDegrees(stdAnima.getThetaVecVel())),
					new int[] { 240, 1440, -1440, 60 });
		else if (e.getActionCommand().equalsIgnoreCase(
				java.util.ResourceBundle.getBundle("pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP")
						.getString("rec.exp.customizer.editMenu.title.7")))
			updateEditPanel(java.util.ResourceBundle.getBundle(
					"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
					"rec.exp.customizer.editPanel.title.7"), java.util.ResourceBundle.getBundle(
					"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
					"rec.exp.customizer.editPanel.tip.7"), this.nSamples, new int[] { 1000, 10010, 10, 500 });
		/*
		 * else if (e.getActionCommand().equalsIgnoreCase("Ok")){
		 * mainPanel.remove(mainPanel.getComponentCount()-1);
		 * stdAnima.setVisible(true); //if (stateCheckBoxMenuItem.isSelected()
		 * || xCheckBoxMenuItem.isSelected() ||
		 * thetaCheckBoxMenuItem.isSelected()) //
		 * mainTabbedPane.setVisible(true); //viewMenu.setEnabled(true);
		 * //helpMenu.setEnabled(true); //fileMenu.setEnabled(true); }
		 */
	}

	private void updateEditPanel(String strTitle, String strTip, int val, int[] sliderConfig) {
		editPanel.remove(editSlider);
		editSlider = new javax.swing.JSlider();
		editSlider.setMaximum(sliderConfig[1]);
		editSlider.setMinimum(sliderConfig[2]);
		editSlider.setMinorTickSpacing(sliderConfig[3]);
		editSlider.setMajorTickSpacing(sliderConfig[0]);
		editSlider.setPaintLabels(true);
		editSlider.setPaintTicks(true);
		editSlider.setToolTipText(strTip);
		editSlider.setValue(val);
		editSlider.setPreferredSize(new java.awt.Dimension(36, 24));
		editSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				editSliderStateChanged(evt);
			}
		});
		editSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			public void mouseDragged(java.awt.event.MouseEvent evt) {
				editSliderMouseDragged(evt);
			}
		});

		java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		editPanel.add(editSlider, gridBagConstraints);

		editTextField.setToolTipText(strTip);
		editTextField.setText(String.valueOf(val));

		editTextField.setEnabled(animaRadioButton.isSelected());
		editSlider.setEnabled(animaRadioButton.isSelected());

		editLabel.setVisible(false);
		((javax.swing.border.TitledBorder) editPanel.getBorder()).setTitle(strTitle);
		editPanel.setToolTipText(strTip);
		editPanel.setVisible(true);
		editPanel.updateUI();
	}

	public void update() {
		String str = ((javax.swing.border.TitledBorder) editPanel.getBorder()).getTitle();

		if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.editPanel.title.2")))
			editSlider.setValue((int) Math.round(stdAnima.getLength() * 10));
		else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.editPanel.title.3")))
			editSlider.setValue((int) Math.round(stdAnima.getForce() * 10));
		else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.editPanel.title.4")))
			editSlider.setValue((int) Math.round((double) stdAnima.getForceDt() / 100d));
		else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.editPanel.title.5")))
			editSlider.setValue((int) Math.round(Math.toDegrees(stdAnima.getTheta())));
		else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.editPanel.title.6")))
			editSlider.setValue((int) Math.round(Math.toDegrees(stdAnima.getThetaVecVel())));
		else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.editPanel.title.1")))
			editSlider.setValue((int) Math.round(stdAnima.getMass()));
		else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.editPanel.title.7")))
			editSlider.setValue(this.nSamples);
	}

	private void editSet(String str, double val) {
		if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.editPanel.title.1")))
			stdAnima.setMass(val);
		else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.editPanel.title.2")))
			stdAnima.setLength(val / 10d);
		else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.editPanel.title.3")))
			stdAnima.setForce(val / 10d);
		else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.editPanel.title.4")))
			stdAnima.setForceDt((int) val * 100);
		else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.editPanel.title.5")))
			stdAnima.setTheta(Math.toRadians(val));
		else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.editPanel.title.6")))
			stdAnima.setThetaVecVel(Math.toRadians(val));
		else if (str.equalsIgnoreCase(java.util.ResourceBundle.getBundle(
				"pt/utl/ist/elab/client/vstdmap/resources/ReCExpSTDMAP").getString(
				"rec.exp.customizer.editPanel.title.7")))
			this.nSamples = (int) val;
	}

	private void editTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_editTextFieldFocusLost
		try {
			double val = GUtils.validateInput(editTextField, editSlider, 1);
			editSet(((javax.swing.border.TitledBorder) editPanel.getBorder()).getTitle(), val);
		} catch (NumberFormatException e) {
			editTextField.setText(Integer.toString(editSlider.getValue()));
		}
	}// GEN-LAST:event_editTextFieldFocusLost

	private void editSliderMouseDragged(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_editSliderMouseDragged
		editSet(((javax.swing.border.TitledBorder) editPanel.getBorder()).getTitle(), editSlider.getValue());
	}// GEN-LAST:event_editSliderMouseDragged

	private void editSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_editSliderStateChanged
		editTextField.setText("" + editSlider.getValue());
	}// GEN-LAST:event_editSliderStateChanged

	private void nIMapaTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_nIMapaTextFieldFocusLost
		try {
			double val = GUtils.validateInput(nIMapaTextField, nIMapaSlider, 1);
		} catch (NumberFormatException e) {
			nIMapaTextField.setText(Integer.toString(nIMapaSlider.getValue()));
		}
	}// GEN-LAST:event_nIMapaTextFieldFocusLost

	private void dIMapaTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_dIMapaTextFieldFocusLost
		try {
			double val = GUtils.validateInput(dIMapaTextField, dIMapaSlider, 1);
		} catch (NumberFormatException e) {
			dIMapaTextField.setText(Integer.toString(dIMapaSlider.getValue()));
		}
	}// GEN-LAST:event_dIMapaTextFieldFocusLost

	private void iMapaTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_iMapaTextFieldFocusLost
		try {
			double val = GUtils.validateInput(iMapaTextField, iMapaSlider, 1);
		} catch (NumberFormatException e) {
			iMapaTextField.setText(Integer.toString(iMapaSlider.getValue()));
		}
	}// GEN-LAST:event_iMapaTextFieldFocusLost

	private void nThetaTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_nThetaTextFieldFocusLost
		try {
			double val = GUtils.validateInput(nThetaTextField, nThetaSlider, 1);
		} catch (NumberFormatException e) {
			nThetaTextField.setText(Integer.toString(nThetaSlider.getValue()));
		}
	}// GEN-LAST:event_nThetaTextFieldFocusLost

	private void dThetaTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_dThetaTextFieldFocusLost
		try {
			double val = GUtils.validateInput(dThetaTextField, dThetaSlider, 1);
		} catch (NumberFormatException e) {
			dThetaTextField.setText(Integer.toString(dThetaSlider.getValue()));
		}
	}// GEN-LAST:event_dThetaTextFieldFocusLost

	private void thetaTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_thetaTextFieldFocusLost
		try {
			double val = GUtils.validateInput(thetaTextField, thetaSlider, 1);
		} catch (NumberFormatException e) {
			thetaTextField.setText(Integer.toString(thetaSlider.getValue()));
		}
	}// GEN-LAST:event_thetaTextFieldFocusLost

	private void iterTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_iterTextFieldFocusLost
		try {
			double val = GUtils.validateInput(iterTextField, iterSlider, 1);
		} catch (NumberFormatException e) {
			iterTextField.setText(Integer.toString(iterSlider.getValue()));
		}
	}// GEN-LAST:event_iterTextFieldFocusLost

	private void pcorTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_pcorTextFieldFocusLost
		try {
			double val = GUtils.validateInput(pcorTextField, pcorSlider, 1);
		} catch (NumberFormatException e) {
			pcorTextField.setText(Integer.toString(pcorSlider.getValue()));
		}
	}// GEN-LAST:event_pcorTextFieldFocusLost

	private void kTextFieldFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_kTextFieldFocusLost
		try {
			double val = GUtils.validateInput(kTextField, kSlider, 1);
		} catch (NumberFormatException e) {
			kTextField.setText(Integer.toString(kSlider.getValue()));
		}
	}// GEN-LAST:event_kTextFieldFocusLost

	private void nIMapaSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_nIMapaSliderStateChanged
		nIMapaTextField.setText("" + nIMapaSlider.getValue());
	}// GEN-LAST:event_nIMapaSliderStateChanged

	private void dIMapaSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_dIMapaSliderStateChanged
		dIMapaTextField.setText("" + dIMapaSlider.getValue());
	}// GEN-LAST:event_dIMapaSliderStateChanged

	private void iMapaSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_iMapaSliderStateChanged
		iMapaTextField.setText("" + iMapaSlider.getValue());
	}// GEN-LAST:event_iMapaSliderStateChanged

	private void nThetaSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_nThetaSliderStateChanged
		nThetaTextField.setText("" + nThetaSlider.getValue());
	}// GEN-LAST:event_nThetaSliderStateChanged

	private void dThetaSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_dThetaSliderStateChanged
		dThetaTextField.setText("" + dThetaSlider.getValue());
	}// GEN-LAST:event_dThetaSliderStateChanged

	private void thetaSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_thetaSliderStateChanged
		thetaTextField.setText("" + thetaSlider.getValue());
	}// GEN-LAST:event_thetaSliderStateChanged

	private void iterSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_iterSliderStateChanged
		iterTextField.setText("" + iterSlider.getValue());
	}// GEN-LAST:event_iterSliderStateChanged

	private void pcorSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_pcorSliderStateChanged
		pcorTextField.setText("" + pcorSlider.getValue());
	}// GEN-LAST:event_pcorSliderStateChanged

	private void kSliderStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_kSliderStateChanged
		kTextField.setText("" + kSlider.getValue());
	}// GEN-LAST:event_kSliderStateChanged

	private void animaRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_animaRadioButtonActionPerformed
		editSlider.setEnabled(true);
		editTextField.setEnabled(true);

		thetaSlider.setEnabled(false);
		nThetaSlider.setEnabled(false);
		dThetaSlider.setEnabled(false);
		thetaTextField.setEnabled(false);
		nThetaTextField.setEnabled(false);
		dThetaTextField.setEnabled(false);

		iMapaSlider.setEnabled(false);
		nIMapaSlider.setEnabled(false);
		dIMapaSlider.setEnabled(false);
		iMapaTextField.setEnabled(false);
		nIMapaTextField.setEnabled(false);
		dIMapaTextField.setEnabled(false);

		kSlider.setEnabled(false);
		iterSlider.setEnabled(false);
		pcorSlider.setEnabled(false);
		kTextField.setEnabled(false);
		iterTextField.setEnabled(false);
		pcorTextField.setEnabled(false);
	}// GEN-LAST:event_animaRadioButtonActionPerformed

	private void histRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_histRadioButtonActionPerformed
		editSlider.setEnabled(false);
		editTextField.setEnabled(false);

		thetaSlider.setEnabled(true);
		nThetaSlider.setEnabled(false);
		dThetaSlider.setEnabled(false);
		thetaTextField.setEnabled(true);
		nThetaTextField.setEnabled(false);
		dThetaTextField.setEnabled(false);

		iMapaSlider.setEnabled(true);
		nIMapaSlider.setEnabled(false);
		dIMapaSlider.setEnabled(false);
		iMapaTextField.setEnabled(true);
		nIMapaTextField.setEnabled(false);
		dIMapaTextField.setEnabled(false);

		kSlider.setEnabled(true);
		iterSlider.setEnabled(true);
		pcorSlider.setEnabled(true);
		kTextField.setEnabled(true);
		iterTextField.setEnabled(true);
		pcorTextField.setEnabled(true);
	}// GEN-LAST:event_histRadioButtonActionPerformed

	private void mapRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_mapRadioButtonActionPerformed
		editSlider.setEnabled(false);
		editTextField.setEnabled(false);

		thetaSlider.setEnabled(true);
		nThetaSlider.setEnabled(true);
		dThetaSlider.setEnabled(true);
		thetaTextField.setEnabled(true);
		nThetaTextField.setEnabled(true);
		dThetaTextField.setEnabled(true);

		iMapaSlider.setEnabled(true);
		nIMapaSlider.setEnabled(true);
		dIMapaSlider.setEnabled(true);
		iMapaTextField.setEnabled(true);
		nIMapaTextField.setEnabled(true);
		dIMapaTextField.setEnabled(true);

		kSlider.setEnabled(true);
		iterSlider.setEnabled(true);
		pcorSlider.setEnabled(true);
		kTextField.setEnabled(true);
		iterTextField.setEnabled(true);
		pcorTextField.setEnabled(true);
	}// GEN-LAST:event_mapRadioButtonActionPerformed

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformed
		fireICustomizerListenerCanceled();
	}// GEN-LAST:event_cancelButtonActionPerformed

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okButtonActionPerformed

		acqConfig.setSelectedFrequency(new Frequency((double) stdAnima.getForceDt(), hardwareInfo
				.getHardwareFrequencies(0).getMinimumFrequency().getMultiplier(), hardwareInfo
				.getHardwareFrequencies(0).getMinimumFrequency().getFrequencyDefType()));

		byte simulType = 0;
		int check = 0;

		if (mapRadioButton.isSelected()) {
			double k = (double) kSlider.getValue() / 100d;
			double pcor = (double) pcorSlider.getValue() / 100d;
			int iter = iterSlider.getValue() * 10;

			double theta = Math.toRadians(thetaSlider.getValue());
			int nTheta = nThetaSlider.getValue();
			double dTheta = Math.toRadians(dThetaSlider.getValue());

			double iMapa = Math.toRadians(iMapaSlider.getValue());
			int nIMapa = nIMapaSlider.getValue();
			double dIMapa = Math.toRadians(dIMapaSlider.getValue());

			acqConfig.setTotalSamples(nTheta * nIMapa * iter + nTheta * nIMapa);

			simulType = 1;

			acqConfig.getSelectedHardwareParameter("k").setParameterValue("" + (float) k);
			acqConfig.getSelectedHardwareParameter("pcor").setParameterValue("" + (float) pcor);
			acqConfig.getSelectedHardwareParameter("iter").setParameterValue("" + iter);

			acqConfig.getSelectedHardwareParameter("theta").setParameterValue("" + (float) theta);
			acqConfig.getSelectedHardwareParameter("nTheta").setParameterValue("" + nTheta);
			acqConfig.getSelectedHardwareParameter("dTheta").setParameterValue("" + (float) dTheta);

			acqConfig.getSelectedHardwareParameter("iMapa").setParameterValue("" + (float) iMapa);
			acqConfig.getSelectedHardwareParameter("nIMapa").setParameterValue("" + nIMapa);
			acqConfig.getSelectedHardwareParameter("dIMapa").setParameterValue("" + (float) dIMapa);
		} else if (animaRadioButton.isSelected()) {
			acqConfig.setTotalSamples(this.nSamples);
			// Force dt = Frequencia
			double length = stdAnima.getLength() / 10d;
			double mass = stdAnima.getMass() / 100d;
			double thetaDot = stdAnima.getThetaVecVel();
			double theta = stdAnima.getTheta();
			double force = stdAnima.getForce();

			simulType = 2;

			acqConfig.getSelectedHardwareParameter("length").setParameterValue("" + (float) length);
			acqConfig.getSelectedHardwareParameter("mass").setParameterValue("" + (float) mass);
			acqConfig.getSelectedHardwareParameter("thetaDot").setParameterValue("" + (float) thetaDot);
			acqConfig.getSelectedHardwareParameter("theta").setParameterValue("" + (float) theta);
			acqConfig.getSelectedHardwareParameter("force").setParameterValue("" + (float) force);
		} else if (histRadioButton.isSelected()) {
			double k = (double) kSlider.getValue() / 100d;
			double pcor = (double) pcorSlider.getValue() / 100d;
			int iter = iterSlider.getValue() * 10;

			double theta = Math.toRadians(thetaSlider.getValue());
			double iMapa = Math.toRadians(iMapaSlider.getValue());

			acqConfig.setTotalSamples(iter + 1);

			simulType = 3;

			acqConfig.getSelectedHardwareParameter("k").setParameterValue("" + (float) k);
			acqConfig.getSelectedHardwareParameter("pcor").setParameterValue("" + (float) pcor);
			acqConfig.getSelectedHardwareParameter("iter").setParameterValue("" + iter);

			acqConfig.getSelectedHardwareParameter("theta").setParameterValue("" + (float) theta);
			acqConfig.getSelectedHardwareParameter("iMapa").setParameterValue("" + (float) iMapa);
		}

		acqConfig.getSelectedHardwareParameter("staticImg").setParameterValue(
				"" + (staticRadioButton.isSelected() ? 1 : 0));
		acqConfig.getSelectedHardwareParameter("simulType").setParameterValue("" + simulType);

		acqConfig.getSelectedHardwareParameter("w").setParameterValue("" + widthSlider.getValue());
		acqConfig.getSelectedHardwareParameter("h").setParameterValue("" + heightSlider.getValue());
		acqConfig.getSelectedHardwareParameter("pixSize").setParameterValue("" + (byte) pixSizeSlider.getValue());

		for (int i = 0; i < acqConfig.getSelectedHardwareParameters().length; i++)
			System.out.println(acqConfig.getSelectedHardwareParameters(i).getParameterName() + " = "
					+ acqConfig.getSelectedHardwareParameters(i).getParameterValue());

		fireICustomizerListenerDone();
	}// GEN-LAST:event_okButtonActionPerformed

	private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_defaultButtonActionPerformed
		this.nSamples = 500;

		nonStaticRadioButton.setSelected(true);
		mapRadioButton.setSelected(true);

		kSlider.setValue(50);
		pcorSlider.setValue(314);
		iterSlider.setValue(50);

		thetaSlider.setValue(0);
		dThetaSlider.setValue(15);
		nThetaSlider.setValue(30);

		iMapaSlider.setValue(0);
		dIMapaSlider.setValue(20);
		nIMapaSlider.setValue(5);

		widthSlider.setValue(800);
		heightSlider.setValue(800);

		stdAnima.config(10, Math.PI / 2, -5, 100, 5, 1000);

		mapRadioButtonActionPerformed(null);

		update();
	}// GEN-LAST:event_defaultButtonActionPerformed

	public static void main(String args[]) {
		javax.swing.JFrame test = new javax.swing.JFrame();
		test.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		test.getContentPane().add(new STDMAPCustomizer());
		test.pack();
		test.show();
	}

	// ****************************REC********************************************/

	/** Utility field used by event firing mechanism. */
	private javax.swing.event.EventListenerList listenerList = null;

	/**
	 * Registers ICustomizerListener to receive events.
	 * 
	 * @param listener The listener to register.
	 */
	public synchronized void addICustomizerListener(ICustomizerListener listener) {
		if (listenerList == null) {
			listenerList = new javax.swing.event.EventListenerList();
		}
		listenerList.add(ICustomizerListener.class, listener);
	}

	/**
	 * Removes ICustomizerListener from the list of listeners.
	 * 
	 * @param listener The listener to remove.
	 */
	public synchronized void removeICustomizerListener(ICustomizerListener listener) {
		listenerList.remove(ICustomizerListener.class, listener);
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerCanceled() {
		if (listenerList == null)
			return;
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {
				((ICustomizerListener) listeners[i + 1]).canceled();
			}
		}
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerDone() {
		if (listenerList == null)
			return;
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {

				((ICustomizerListener) listeners[i + 1]).done();
			}
		}
	}

	private HardwareInfo hardwareInfo = null;
	private HardwareAcquisitionConfig acqConfig = null;

	public HardwareAcquisitionConfig getAcquisitionConfig() {
		return acqConfig;
	}

	public void setHardwareAcquisitionConfig(HardwareAcquisitionConfig acqConfig) {
		this.acqConfig = acqConfig;
		if (acqConfig != null) {

			byte simulType = Byte.parseByte(acqConfig.getSelectedHardwareParameterValue("simulType"));
			if (acqConfig.getSelectedHardwareParameterValue("staticImg").trim().equals("1") ? true : false)
				staticRadioButton.setSelected(true);
			else
				nonStaticRadioButton.setSelected(true);

			// this.nSamples = acqConfig.getTotalSamples();

			widthSlider.setValue(Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("w")));
			heightSlider.setValue(Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("h")));
			pixSizeSlider.setValue(Byte.parseByte(acqConfig.getSelectedHardwareParameterValue("pixSize")));

			if (simulType == 1) {
				mapRadioButton.setSelected(true);
				mapRadioButtonActionPerformed(null);

				float k = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("k"));
				float pcor = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("pcor"));
				int iter = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("iter"));

				float theta = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("theta"));
				int nTheta = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("nTheta"));
				float dTheta = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("dTheta"));

				float iMapa = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("iMapa"));
				int nIMapa = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("nIMapa"));
				float dIMapa = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("dIMapa"));

				kSlider.setValue((int) Math.round(100 * k));
				pcorSlider.setValue((int) Math.round(100 * pcor));
				iterSlider.setValue((int) Math.round((double) iter / 10d));

				thetaSlider.setValue((int) Math.round(Math.toDegrees(theta)));
				nThetaSlider.setValue(nTheta);
				dThetaSlider.setValue((int) Math.round(Math.toDegrees(dTheta)));

				iMapaSlider.setValue((int) Math.round(Math.toDegrees(iMapa)));
				nIMapaSlider.setValue(nIMapa);
				dIMapaSlider.setValue((int) Math.round(Math.toDegrees(dIMapa)));
			} else if (simulType == 2) {
				animaRadioButton.setSelected(true);
				animaRadioButtonActionPerformed(null);

				float length = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("length"));
				float mass = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("mass"));
				float thetaDot = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("thetaDot"));
				float theta = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("theta"));
				float force = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("force"));

				stdAnima.config(length * 10, theta, thetaDot, mass * 100, force, (int) acqConfig.getSelectedFrequency()
						.getFrequency());
				update();
			} else if (simulType == 3) {
				histRadioButton.setSelected(true);
				histRadioButtonActionPerformed(null);

				float k = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("k"));
				float pcor = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("pcor"));
				int iter = Integer.parseInt(acqConfig.getSelectedHardwareParameterValue("iter"));

				float theta = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("theta"));
				float iMapa = Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("iMapa"));

				kSlider.setValue((int) Math.round(100 * k));
				pcorSlider.setValue((int) Math.round(100 * pcor));
				iterSlider.setValue((int) Math.round((double) iter / 10d));

				thetaSlider.setValue((int) Math.round(Math.toDegrees(theta)));
				iMapaSlider.setValue((int) Math.round(Math.toDegrees(iMapa)));
			}
		}
	}

	public void setHardwareInfo(HardwareInfo hardwareInfo) {
		this.hardwareInfo = hardwareInfo;
	}

	protected HardwareInfo getHardwareInfo() {
		return this.hardwareInfo;
	}

	public javax.swing.JComponent getCustomizerComponent() {
		return this;
	}

	public javax.swing.ImageIcon getCustomizerIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/vstdmap/resources/stdmap_iconified.PNG"));
	}

	public String getCustomizerTitle() {
		return "Standard Map Configuration Utility";
	}

	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JRadioButton animaRadioButton;
	private javax.swing.JPanel btnPanel;
	private javax.swing.JButton cancelButton;
	private javax.swing.JPanel configPanel;
	private javax.swing.ButtonGroup constsButtonGroup;
	private javax.swing.JPanel controlBtnPanel;
	private javax.swing.JPanel dIMapaPanel;
	private javax.swing.JSlider dIMapaSlider;
	private javax.swing.JTextField dIMapaTextField;
	private javax.swing.JPanel dThetaPanel;
	private javax.swing.JSlider dThetaSlider;
	private javax.swing.JTextField dThetaTextField;
	private javax.swing.JPanel defConfBtnPanel;
	private javax.swing.JButton defaultButton;
	private javax.swing.JLabel editLabel;
	private javax.swing.JPanel editPanel;
	private javax.swing.JSlider editSlider;
	private javax.swing.JTextField editTextField;
	private javax.swing.ButtonGroup expButtonGroup;
	private javax.swing.JPanel generalPanel;
	private javax.swing.JPanel heightPanel;
	private javax.swing.JSlider heightSlider;
	private javax.swing.JTextField heightTextField;
	private javax.swing.JRadioButton histRadioButton;
	private javax.swing.JPanel iMapaPanel;
	private javax.swing.JSlider iMapaSlider;
	private javax.swing.JTextField iMapaTextField;
	private javax.swing.JPanel iterPanel;
	private javax.swing.JSlider iterSlider;
	private javax.swing.JTextField iterTextField;
	private javax.swing.JPanel kPanel;
	private javax.swing.JSlider kSlider;
	private javax.swing.JTextField kTextField;
	private javax.swing.JPanel mainEditPanel;
	private javax.swing.JPanel mainIMapaPanel;
	private javax.swing.JPanel mainPanel;
	private javax.swing.JPanel mainThetaPanel;
	private javax.swing.JRadioButton mapRadioButton;
	private javax.swing.JTabbedPane mapaTabbedPane;
	private javax.swing.JPanel nIMapaPanel;
	private javax.swing.JSlider nIMapaSlider;
	private javax.swing.JTextField nIMapaTextField;
	private javax.swing.JPanel nThetaPanel;
	private javax.swing.JSlider nThetaSlider;
	private javax.swing.JTextField nThetaTextField;
	private javax.swing.JRadioButton nonStaticRadioButton;
	private javax.swing.JButton okButton;
	private javax.swing.JPanel pcorPanel;
	private javax.swing.JSlider pcorSlider;
	private javax.swing.JTextField pcorTextField;
	private javax.swing.JPanel pixSizePanel;
	private javax.swing.JSlider pixSizeSlider;
	private javax.swing.JPanel resolutionPanel;
	private javax.swing.JPanel simulPanel;
	private javax.swing.JPanel staticPanel;
	private javax.swing.JRadioButton staticRadioButton;
	private javax.swing.JPanel thetaPanel;
	private javax.swing.JSlider thetaSlider;
	private javax.swing.JTextField thetaTextField;
	private javax.swing.JPanel widthPanel;
	private javax.swing.JSlider widthSlider;
	private javax.swing.JTextField widthTextField;
	// End of variables declaration//GEN-END:variables

}
