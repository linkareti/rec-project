<?xml version="1.0" encoding="UTF-8"?>
<!--
		=======================================================
		============ 2009/03/29 Build Rec - Elab ==============
		=======================================================
	-->

<project name="Experiments - build system" default="help" basedir=".">
	<description>
		Compile, package, sign and run the project ReC and each of the experiments.
	</description>

	<property file="build.properties" description="general properties for building project" />

	<import file="generaldefinitions.xml"/>
	
	<!--
		=====================================================
		====================== Generic ======================
		=====================================================
	-->

	<target name="help" description="General usage of the build system, it shows a description of each target, and how to use them">
		<echo>ReC - eBab build system</echo>
	</target>

	<!--
		=====================================================
		================ReC Experiments======================
		=====================================================
	-->

	<macrodef name="clean.experiment">
		<attribute name="experiment.name" />
		<sequential>
			<delete dir="${experiments.classes.dir}/@{experiment.name}" />
			<delete file="${build.dir.compile}/@{experiment.name}Client.jar"/>
			<delete file="${build.dir.compile}/@{experiment.name}Client_sig.jar"/>
			<!--delete file="${client.build.dir}/@{experiment.name}Client.jar"/>
			<delete file="${client.build.dir}/@{experiment.name}Client_sig.jar"/>
			<delete file="${hardwareserver.build.dir}/@{experiment.name}Driver.jar"/>
			<delete file="${hardwareserver.build.dir}/@{experiment.name}Driver_sig.jar"/-->
		</sequential>
	</macrodef>

	<target name="clean.experiment">
		<fail unless="experiment.name"> experiments.name must be set. define it in build.properties or pass 
				it to jvm as arg like -Dexperiment.name="experiment1"</fail>
		<clean.experiment experiment.name="${experiment.name}" />
	</target>

	<target name="clean.experiments.list">
		<fail unless="experiment.list"> experiments.list must be set to clean
					that list of experiments. define it in build.properties or pass 
					it to jvm as arg like -Dexperiment.list="experiment1,experiment2,..."</fail>
		<process.list task="clean.experiment" list="${experiment.list}" attribute.name="experiment.name" />
	</target>


	<macrodef name="compile.experiment.client">
		<attribute name="experiment.name" />
		<sequential>

			<mkdir dir="${experiments.classes.dir}/@{experiment.name}/client" />
			<mkdir dir="${experiments.classes.dir}/@{experiment.name}/client/META-INF" />
			<echo>Compiling experiment client: @{experiment.name}</echo>

			<ant antfile="build.xml" dir="experiments/@{experiment.name}/etc" target="pre-compile" />

			<javac srcdir="experiments/@{experiment.name}/src/java/client" destdir="${experiments.classes.dir}/@{experiment.name}/client" encoding="${javac.encoding}" debug="${javac.debug}" optimize="${javac.optimize}" source="${javac.sourcelevel}" target="${javac.sourcelevel}" deprecation="yes">
				<include name="**/*.java" />
				<classpath>
					<path refid="compile.experiment.client.classpath" />
					<fileset dir="experiments/@{experiment.name}/lib/java/client">
						<include name="**/*.jar" />
					</fileset>
				</classpath>
				<compilerarg value="-Xlint:unchecked, cast, -serial" />
			</javac>

			<copy todir="${experiments.classes.dir}/@{experiment.name}/client" overwrite="true">
				<fileset dir="experiments/@{experiment.name}/src/java/client">
					<exclude name="**/*.java" />
					<exclude name="**/*.form" />
				</fileset>
			</copy>

			<manifest file="${experiments.classes.dir}/@{experiment.name}/client/META-INF/MANIFEST.MF">
				<section name="common">
					<attribute name="Specification-Title" value="${com.linkare.rec.spec.title}" />
					<attribute name="Specification-Version" value="${com.linkare.rec.spec.version}" />
					<attribute name="Specification-Vendor" value="${com.linkare.rec.spec.title}" />
					<attribute name="Implementation-Title" value="${com.linkare.rec.impl.title}" />
					<attribute name="Implementation-Version" value="${com.linkare.rec.impl.version} ${today}" />
					<attribute name="Implementation-Vendor" value="${com.linkare.rec.impl.vendor}" />
				</section>
			</manifest>

			<!--jar.experiment.client experiment.name="@{experiment.name}"/>
			
			<sign.jar.rec jar.name="@{experiment.name}Client.jar" folder="${build.dir.compile}"/-->
			
			<ant antfile="build.xml" dir="experiments/@{experiment.name}/etc" target="post-compile" />

		</sequential>
	</macrodef>

	<macrodef name="compile.experiment.driver">
		<attribute name="experiment.name" />
		<sequential>

			<mkdir dir="${experiments.classes.dir}/@{experiment.name}/server" />
			<mkdir dir="${experiments.classes.dir}/@{experiment.name}/server/META-INF" />
			<echo>Compiling experiment driver: @{experiment.name}</echo>

			<ant antfile="build.xml" dir="experiments/@{experiment.name}/etc" target="pre-compile" />

			<javac srcdir="experiments/@{experiment.name}/src/java/server" destdir="${experiments.classes.dir}/@{experiment.name}/server" encoding="${javac.encoding}" debug="${javac.debug}" optimize="${javac.optimize}" source="${javac.sourcelevel}" target="${javac.sourcelevel}" deprecation="yes">
				<include name="**/*.java" />
				<classpath>
					<path refid="compile.experiment.driver.classpath" />
					<fileset dir="experiments/@{experiment.name}/lib/java/server">
						<include name="**/*.jar" />
					</fileset>
				</classpath>
				<compilerarg value="-Xlint:unchecked, cast, -serial" />
			</javac>

			<copy todir="${experiments.classes.dir}/@{experiment.name}/server" overwrite="true">
				<fileset dir="experiments/@{experiment.name}/src/java/server">
					<exclude name="**/*.java" />
					<exclude name="**/*.form" />
				</fileset>
			</copy>

			<manifest file="${experiments.classes.dir}/@{experiment.name}/server/META-INF/MANIFEST.MF">
				<section name="common">
					<attribute name="Specification-Title" value="${com.linkare.rec.spec.title}" />
					<attribute name="Specification-Version" value="${com.linkare.rec.spec.version}" />
					<attribute name="Specification-Vendor" value="${com.linkare.rec.spec.title}" />
					<attribute name="Implementation-Title" value="${com.linkare.rec.impl.title}" />
					<attribute name="Implementation-Version" value="${com.linkare.rec.impl.version} ${TODAY}" />
					<attribute name="Implementation-Vendor" value="${com.linkare.rec.impl.vendor}" />
				</section>
			</manifest>

			<ant antfile="build.xml" dir="experiments/@{experiment.name}/etc" target="post-compile" />

		</sequential>
	</macrodef>


	<target name="compile.experiment.client">
		<fail unless="experiment.name"> You need to specify which experiment to build with the property experiment.name</fail>
		<compile.experiment.client experiment.name="${experiment.name}" />
	</target>
	
	<target name="compile.experiment.driver">
		<fail unless="experiment.name"> You need to specify which experiment to build with the property experiment.name</fail>
		<compile.experiment.driver experiment.name="${experiment.name}" />
	</target>

	<target name="compile.experiment.drivers.list">
		<fail unless="experiment.list"> experiments.list must be set to compile
			that list of experiments. define it in build.properties or pass 
			it to jvm as arg like -Dexperiment.list="experiment1,experiment2,..."</fail>
		<process.list task="compile.experiment.driver" list="${experiment.list}" attribute.name="experiment.name" />
	</target>

	<target name="compile.experiment.clients.list">
		<fail unless="experiment.list"> experiments.list must be set to compile
			that list of experiments. define it in build.properties or pass 
			it to jvm as arg like -Dexperiment.list="experiment1,experiment2,..."</fail>
		<process.list task="compile.experiment.client" list="${experiment.list}" attribute.name="experiment.name" />
	</target>
	
	
	
	<macrodef name="jar.experiment.client">
	        <attribute name="experiment.name" />
	        <sequential>
	            <mkdir dir="${client.build.dir}"/>
	        	
	        	<ant antfile="build.xml" dir="experiments/@{experiment.name}/etc" target="pre-jar" />
	        	
	        	<jar destfile="${client.build.dir}/@{experiment.name}Client.jar" basedir="${experiments.classes.dir}/@{experiment.name}/client"/>
	        	
	        	<ant antfile="build.xml" dir="experiments/@{experiment.name}/etc" target="post-jar" />
	        	
	        </sequential>
	    </macrodef>

		<macrodef name="jar.experiment.driver">
			<attribute name="experiment.name" />
			<sequential>
				<mkdir dir="${hardwareserver.build.dir}" />

				<ant antfile="build.xml" dir="experiments/@{experiment.name}/etc" target="pre-jar" />

				<jar destfile="${hardwareserver.build.dir}/@{experiment.name}Driver.jar" basedir="${experiments.classes.dir}/@{experiment.name}/server">
				</jar>

				<ant antfile="build.xml" dir="experiments/@{experiment.name}/etc" target="post-jar" />

			</sequential>
		</macrodef>

	<target name="jar.experiment.client">
		<fail unless="experiment.name"> You need to specify which experiment to build with the property experiment.name</fail>
		<jar.experiment.client experiment.name="${experiment.name}" />
	</target>
	
	<target name="jar.experiment.driver">
		<fail unless="experiment.name"> You need to specify which experiment to build with the property experiment.name</fail>
		<jar.experiment.driver experiment.name="${experiment.name}" />
	</target>

	<target name="jar.experiment.clients.list">
		<fail unless="experiment.list"> experiments.list must be set to package
			that list of experiments. define it in build.properties or pass 
			it to jvm as arg like -Dexperiment.list="experiment1,experiment2,..."</fail>
		<process.list task="jar.experiment.client" list="${experiment.list}" attribute.name="experiment.name" />
	</target>

	<target name="jar.experiment.drivers.list">
		<fail unless="experiment.list"> experiments.list must be set to package
			that list of experiments. define it in build.properties or pass 
			it to jvm as arg like -Dexperiment.list="experiment1,experiment2,..."</fail>
		<process.list task="jar.experiment.driver" list="${experiment.list}" attribute.name="experiment.name" />
	</target>
		

	<macrodef name="sign.experiment">
		<attribute name="experiment.name" />

		<sequential>
			<signjar storetype="${elab.storetype}" destDir="${client.build.dir}" keystore="${elab.keystore}" keypass="${elab.keypass}" storepass="${elab.storepass}" alias="${elab.alias}">
				<fileset dir="${client.build.dir}" includes="@{experiment.name}Client.jar" excludes="*_sig.jar" />
					<globmapper from="*.jar" to="*_sig.jar" />
			</signjar>            
		</sequential>	
	</macrodef>
	

	<target name="sign.experiment">
		<fail unless="experiment.name"> You need to specify which experiment to build with the property experiment.name</fail>
		<sign.experiment experiment.name="${experiment.name}"/>
	</target>

	<target name="sign.experiments.list">
		<fail unless="experiment.list"> experiments.list must be set to package
				that list of experiments. define it in build.properties or pass 
				it to jvm as arg like -Dexperiment.list="experiment1,experiment2,..."</fail>
		<process.list task="sign.experiment" list="${experiment.list}" attribute.name="experiment.name" />
	</target>

	<macrodef name="run.experiment.client">
		<attribute name="experiment.name" />
		<sequential>
			<java classname="pt.utl.ist.elab.client.@{experiment.name}.ClientMain" fork="true" failonerror="true">
				<arg value="-h" />
				<classpath>
					<fileset dir="lib/">
						<include name="**/*.jar" />
					</fileset>
					<fileset dir="experiments/@{experiment.name}/lib/java/client/">
						<include name="**/*.jar" />
					</fileset>
					<path refid="rec.common.lib.path" />
					<path refid="rec.client.lib.path" />
					<pathelement location="${rec.common.classes.dir}" />
					<pathelement location="${rec.client.classes.dir}" />
					<pathelement location="${rec.ui.classes.dir}" />
					<pathelement location="${experiments.classes.dir}/@{experiment.name}/client/" />
				</classpath>
				<jvmarg value="-Xms${min.memory}" />
				<jvmarg value="-Xmx${max.memory}" />
				<sysproperty key="rec.multicastcontroller.bindname" value="${rec.multicastcontroller.bindname}" />
				<sysproperty key="rec.multicastcontroller.initref" value="${rec.multicastcontroller.initref}" />
				<sysproperty key="java.util.logging.config.file" value="${java.util.logging.config.file}" />
				<sysproperty key="openorb.profile" value="${experiment.openorb.profile}" />
				<sysproperty key="eLab.@{experiment.name}.HardwareInfo" value="${experiment.eLab.HardwareInfo}" />
				<sysproperty key="org.omg.CORBA.ORBClass" value="${org.omg.CORBA.ORBClass}" />
				<sysproperty key="org.omg.CORBA.ORBSingletonClass" value="${org.omg.CORBA.ORBSingletonClass}" />
				<sysproperty key="com.sun.CORBA.ORBDynamicStubFactoryFactoryClass" value="${com.sun.CORBA.ORBDynamicStubFactoryFactoryClass}" />
				<sysproperty key="openorb.config" value="${openorb.config}" />
				<sysproperty key="openorb.config.virtual" value="${openorb.config.virtual}" />
			</java>
		</sequential>
	</macrodef>

	<macrodef name="run.experiment.driver">
		<attribute name="experiment.name" />
		<sequential>
			<echo>starting @{experiment.name} driver</echo>
			<java classname="pt.utl.ist.elab.driver.@{experiment.name}.ServerMain" fork="true" failonerror="true">
				<arg value="-h" />
				<classpath>
					<fileset dir="lib/">
						<include name="**/*.jar" />
					</fileset>
					<fileset dir="experiments/@{experiment.name}/lib/java/server/">
						<include name="**/*.jar" />
					</fileset>
					<path refid="rec.common.lib.path" />
					<pathelement location="${rec.common.classes.dir}" />
					<pathelement location="${rec.hardwareserver.classes.dir}" />
					<pathelement location="${experiments.classes.dir}/@{experiment.name}/server/" />
				</classpath>
				<jvmarg value="-Xms${min.memory}" />
				<jvmarg value="-Xmx${max.memory}" />
				<sysproperty key="rec.multicastcontroller.bindname" value="${rec.multicastcontroller.bindname}" />
				<sysproperty key="rec.multicastcontroller.initref" value="${rec.multicastcontroller.initref}" />
				<sysproperty key="java.util.logging.config.file" value="${java.util.logging.config.file}" />
				<sysproperty key="openorb.profile" value="${experiment.openorb.profile}" />
				<sysproperty key="eLab.@{experiment.name}.HardwareInfo" value="${experiment.eLab.HardwareInfo}" />
				<sysproperty key="org.omg.CORBA.ORBClass" value="${org.omg.CORBA.ORBClass}" />
				<sysproperty key="org.omg.CORBA.ORBSingletonClass" value="${org.omg.CORBA.ORBSingletonClass}" />
				<sysproperty key="com.sun.CORBA.ORBDynamicStubFactoryFactoryClass" value="${com.sun.CORBA.ORBDynamicStubFactoryFactoryClass}" />
				<sysproperty key="openorb.config" value="${openorb.config}" />
				<sysproperty key="openorb.config.virtual" value="${openorb.config.virtual}" />
			</java>
		</sequential>
	</macrodef>

	<target name="run.experiment.client">
		<fail unless="experiment.name">experiment.name must be set to run a single experiment. 
			Pass it to jvm as arg like -Dexperiment.name="experiment name"</fail>
		<run.experiment.client experiment.name="${experiment.name}" />
	</target>

	<target name="run.experiment.driver">
		<fail unless="experiment.name">experiment.name must be set to run a single experiment. 
			Pass it to jvm as arg like -Dexperiment.name="experiment name"</fail>
		<run.experiment.driver experiment.name="${experiment.name}" />
	</target>

	<macrodef name="debug.experiment.driver">
		<attribute name="experiment.name" />
		<sequential>
			<echo>starting @{experiment.name} driver</echo>
			<java classname="pt.utl.ist.elab.driver.@{experiment.name}.ServerMain" fork="true" failonerror="true">
				<arg value="-h" />
				<classpath>
					<fileset dir="lib/">
						<include name="**/*.jar" />
					</fileset>
					<fileset dir="experiments/@{experiment.name}/lib/java/server/">
						<include name="**/*.jar" />
					</fileset>
					<path refid="rec.common.lib.path" />
					<pathelement location="${rec.common.classes.dir}" />
					<pathelement location="${rec.hardwareserver.classes.dir}" />
					<pathelement location="${experiments.classes.dir}/@{experiment.name}/server/" />
				</classpath>
				<jvmarg value="-Xms${min.memory}" />
				<jvmarg value="-Xmx${max.memory}" />
				<jvmarg value="-Xdebug" />
				<jvmarg value="-Xrunjdwp:transport=dt_socket,address=${experiment.driver.debug.address.port},server=y,suspend=y" />
				<sysproperty key="rec.multicastcontroller.bindname" value="${rec.multicastcontroller.bindname}" />
				<sysproperty key="rec.multicastcontroller.initref" value="${rec.multicastcontroller.initref}" />
				<sysproperty key="java.util.logging.config.file" value="${java.util.logging.config.file}" />
				<sysproperty key="openorb.profile" value="${experiment.openorb.profile}" />
				<sysproperty key="eLab.@{experiment.name}.HardwareInfo" value="${experiment.eLab.HardwareInfo}" />
				<sysproperty key="org.omg.CORBA.ORBClass" value="${org.omg.CORBA.ORBClass}" />
				<sysproperty key="org.omg.CORBA.ORBSingletonClass" value="${org.omg.CORBA.ORBSingletonClass}" />
				<sysproperty key="com.sun.CORBA.ORBDynamicStubFactoryFactoryClass" value="${com.sun.CORBA.ORBDynamicStubFactoryFactoryClass}" />
				<sysproperty key="openorb.config" value="${openorb.config}" />
				<sysproperty key="openorb.config.virtual" value="${openorb.config.virtual}" />
			</java>
		</sequential>
	</macrodef>

	<target name="debug.experiment.driver">
		<fail unless="experiment.name">experiment.name must be set to run a single experiment. 
			Pass it to jvm as arg like -Dexperiment.name="experiment name"</fail>
		<debug.experiment.driver experiment.name="${experiment.name}" />
	</target>
	
	<macrodef name="create.jnlp.for.experiment">
		<attribute name="experiment.name" />
		<sequential>
			<copy file="${template.file}" overwrite="yes" tofile="${client.build.dir}/@{experiment.name}.jnlp" />
			<replace file="${client.build.dir}/${experiment.name}.jnlp" propertyFile="experiments/@{experiment.name}/etc/build.properties">
				<replacefilter token="@codebase@" property="@{experiment.name}.codebase" />
				<replacefilter token="@href@" property="@{experiment.name}.href" />
				<replacefilter token="@title@" property="@{experiment.name}.title" />
				<replacefilter token="@vendor@" property="@{experiment.name}.vendor" />
				<replacefilter token="@homepage@" property="@{experiment.name}.homepage" />
				<replacefilter token="@one-line@" property="@{experiment.name}.one-line" />
				<replacefilter token="@tootip@" property="@{experiment.name}.tootip" />
				<replacefilter token="@short@" property="@{experiment.name}.short" />
				<replacefilter token="@j2se-version@" property="@{experiment.name}.j2se-version" />
				<replacefilter token="@main-class@" property="@{experiment.name}.main-class" />
			</replace>
			<replace file="${client.build.dir}/@{experiment.name}.jnlp" token="&lt;!-- Jar eLab Client --&gt;" value="&lt;jar href=&quot;ELabClient_sig.jar&quot;/&gt;"/>
			<replace file="${client.build.dir}/@{experiment.name}.jnlp" token="&lt;!-- Jar ReC Client --&gt;" value="&lt;jar href=&quot;ReCClient_sig.jar&quot;/&gt;"/>
			<replace file="${client.build.dir}/@{experiment.name}.jnlp" token="&lt;!-- Jar ReC Common --&gt;" value="&lt;jar href=&quot;ReCCommon_sig.jar&quot;/&gt;"/>
			<replace file="${client.build.dir}/@{experiment.name}.jnlp" token="&lt;!--End Experiment Jars--&gt;" >
				<replacevalue><![CDATA[<jar href="client/@temporary.experiment.jar@" main="true"/>
		<!--End Experiment Jars-->]]></replacevalue>
			</replace>
		<replace file="${client.build.dir}/@{experiment.name}.jnlp" token="@temporary.experiment.jar@" value="client/@{experiment.name}Client_sig.jar"/>
		
		</sequential>
	</macrodef>

	<macrodef name="build.experiment">
		<attribute name="experiment.name" />
		<sequential>
			<clean.experiment experiment.name="@{experiment.name}" />
			<compile.experiment.client experiment.name="@{experiment.name}" />
			<compile.experiment.driver experiment.name="@{experiment.name}" />
			<jar.experiment.client experiment.name="@{experiment.name}" />
			<jar.experiment.driver experiment.name="@{experiment.name}" />
			<sign.experiment experiment.name="${experiment.name}" />
			<create.jnlp.for.experiment experiment.name="@{experiment.name}" />
		</sequential>
	</macrodef>
	

	<target name="build.experiment">
		<fail unless="experiment.name">experiment.name must be set to build a single experiment jnlp. 
			Pass it to jvm as arg like -Dexperiment.name="experiment name"</fail>
		<build.experiment experiment.name="${experiment.name}" />
	</target>

	<target name="build.experiments.list">
		<fail unless="experiment.list"> experiments.list must be set to build
				that list of experiments. define it in build.properties or pass 
				it to jvm as arg like -Dexperiment.list="experiment1,experiment2,..."</fail>
		<process.list task="build.experiment" list="${experiment.list}" attribute.name="experiment.name" />
	</target>
	
</project>