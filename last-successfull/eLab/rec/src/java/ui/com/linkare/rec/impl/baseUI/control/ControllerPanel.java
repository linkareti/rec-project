/*
 * ControllerPanel.java
 *
 * Created on July 22, 2004, 5:08 PM
 */

package com.linkare.rec.impl.baseUI.control;

/**
 *
 * @author AndrÃ© Neto - LEFT - IST
 */
import java.awt.Point;
import java.beans.PropertyChangeEvent;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import javax.swing.ImageIcon;

import com.linkare.rec.impl.i18n.ReCResourceBundle;

public class ControllerPanel extends javax.swing.JPanel implements java.io.Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = -869866736417188281L;
	private static String UI_CLIENT_LOGGER = "ReC.baseUI";

	static {
		final Logger l = LogManager.getLogManager().getLogger(ControllerPanel.UI_CLIENT_LOGGER);
		if (l == null) {
			LogManager.getLogManager().addLogger(Logger.getLogger(ControllerPanel.UI_CLIENT_LOGGER));
		}
	}

	/** Creates new form ControllerPanel */
	public ControllerPanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		jButtonConfigure = new javax.swing.JButton();
		jButtonPlay = new javax.swing.JButton();
		jButtonStop = new javax.swing.JButton();

		setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 2, 5));

		jButtonConfigure.setIcon(ReCResourceBundle.findImageIconOrDefault("ReCBaseUI$rec.bui.icon.customize",
				new ImageIcon(getClass().getResource("/com/linkare/rec/impl/baseUI/resources/Preferences16.gif"))));
		jButtonConfigure.setToolTipText(ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.tip.customize",
				"Customize the experiment!"));
		jButtonConfigure.setBorder(null);
		jButtonConfigure.setMinimumSize(new java.awt.Dimension(10, 10));
		jButtonConfigure.setPreferredSize(new java.awt.Dimension(16, 16));
		jButtonConfigure.setEnabled(false);
		jButtonConfigure.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonConfigureActionPerformed(evt);
			}
		});

		add(jButtonConfigure);

		jButtonPlay.setIcon(ReCResourceBundle.findImageIconOrDefault("ReCBaseUI$rec.bui.icon.play", new ImageIcon(
				getClass().getResource("/com/linkare/rec/impl/baseUI/resources/Play16.gif"))));
		jButtonPlay.setToolTipText(ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.tip.start",
				"Start the experiment!"));
		jButtonPlay.setBorder(null);
		jButtonPlay.setMinimumSize(new java.awt.Dimension(10, 10));
		jButtonPlay.setPreferredSize(new java.awt.Dimension(16, 16));
		jButtonPlay.setEnabled(false);
		jButtonPlay.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonPlayActionPerformed(evt);
			}
		});

		add(jButtonPlay);

		jButtonStop.setIcon(ReCResourceBundle.findImageIconOrDefault("ReCBaseUI$rec.bui.icon.stop", new ImageIcon(
				getClass().getResource("/com/linkare/rec/impl/baseUI/resources/Stop16.gif"))));
		jButtonStop.setToolTipText(ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.tip.stop",
				"Stop the experiment!"));
		jButtonStop.setBorder(null);
		jButtonStop.setMinimumSize(new java.awt.Dimension(10, 10));
		jButtonStop.setPreferredSize(new java.awt.Dimension(16, 16));
		jButtonStop.setEnabled(false);
		jButtonStop.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonStopActionPerformed(evt);
			}
		});

		add(jButtonStop);

	}// GEN-END:initComponents

	private void jButtonStopActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonStopActionPerformed
	{// GEN-HEADEREND:event_jButtonStopActionPerformed
		firePropertyChangeListenerPropertyChange(new PropertyChangeEvent(this, "stop", Boolean.FALSE, Boolean.TRUE));
	}// GEN-LAST:event_jButtonStopActionPerformed

	private void jButtonPlayActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonPlayActionPerformed
	{// GEN-HEADEREND:event_jButtonPlayActionPerformed
		firePropertyChangeListenerPropertyChange(new PropertyChangeEvent(this, "play", Boolean.FALSE, Boolean.TRUE));
	}// GEN-LAST:event_jButtonPlayActionPerformed

	private void jButtonConfigureActionPerformed(final java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonConfigureActionPerformed
	{// GEN-HEADEREND:event_jButtonConfigureActionPerformed
		firePropertyChangeListenerPropertyChange(new PropertyChangeEvent(this, "customize", Boolean.FALSE, Boolean.TRUE));
	}// GEN-LAST:event_jButtonConfigureActionPerformed

	/**
	 * Getter for property enablePlay.
	 * 
	 * @return Value of property enablePlay.
	 */
	public boolean isEnablePlay() {
		return enablePlay;
	}

	/**
	 * Setter for property enablePlay.
	 * 
	 * @param enablePlay New value of property enablePlay.
	 */
	public void setEnablePlay(final boolean enablePlay) {
		this.enablePlay = enablePlay;
		jButtonPlay.setEnabled(enablePlay);
	}

	/**
	 * Getter for property enableStop.
	 * 
	 * @return Value of property enableStop.
	 */
	public boolean isEnableStop() {
		return enableStop;
	}

	/**
	 * Setter for property enableStop.
	 * 
	 * @param enableStop New value of property enableStop.
	 */
	public void setEnableStop(final boolean enableStop) {
		this.enableStop = enableStop;
		jButtonStop.setEnabled(enableStop);
	}

	/**
	 * Getter for property enableCustomize.
	 * 
	 * @return Value of property enableCustomize.
	 */
	public boolean isEnableCustomize() {
		return enableCustomize;
	}

	/**
	 * Setter for property enableCustomize.
	 * 
	 * @param enableCustomize New value of property enableCustomize.
	 */
	public void setEnableCustomize(final boolean enableCustomize) {
		this.enableCustomize = enableCustomize;
		jButtonConfigure.setEnabled(enableCustomize);
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param event The event to be fired
	 */
	private void firePropertyChangeListenerPropertyChange(final java.beans.PropertyChangeEvent event) {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == java.beans.PropertyChangeListener.class) {
				((java.beans.PropertyChangeListener) listeners[i + 1]).propertyChange(event);
			}
		}
	}

	public void showCustomizerTip(final com.linkare.rec.impl.baseUI.utils.TipFactory tipfact, final String message,
			final int time) {
		final Point locationCustomizer = jButtonConfigure.getLocationOnScreen();
		locationCustomizer.x = locationCustomizer.x + jButtonConfigure.getWidth() - 5;
		locationCustomizer.y = locationCustomizer.y + jButtonConfigure.getHeight() / 2 - 35;
		tipfact.showTipWithTimeout(jButtonConfigure, message, time, locationCustomizer);
	}

	/**
	 * Registers PropertyChangeListener to receive events.
	 * 
	 * @param listener The listener to register.
	 */
	@Override
	public synchronized void addPropertyChangeListener(final java.beans.PropertyChangeListener listener) {
		if (listenerList == null) {
			listenerList = new javax.swing.event.EventListenerList();
		}
		listenerList.add(java.beans.PropertyChangeListener.class, listener);
	}

	/**
	 * Removes PropertyChangeListener from the list of listeners.
	 * 
	 * @param listener The listener to remove.
	 */
	@Override
	public synchronized void removePropertyChangeListener(final java.beans.PropertyChangeListener listener) {
		listenerList.remove(java.beans.PropertyChangeListener.class, listener);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButtonConfigure;
	private javax.swing.JButton jButtonPlay;
	private javax.swing.JButton jButtonStop;
	// End of variables declaration//GEN-END:variables

	/**
	 * Holds value of property enablePlay.
	 */
	private boolean enablePlay = false;

	/**
	 * Holds value of property enableStop.
	 */
	private boolean enableStop = false;

	/**
	 * Holds value of property enableCustomize.
	 */
	private boolean enableCustomize = false;

	/** Utility field used by event firing mechanism. */
	private javax.swing.event.EventListenerList listenerList = null;

}
