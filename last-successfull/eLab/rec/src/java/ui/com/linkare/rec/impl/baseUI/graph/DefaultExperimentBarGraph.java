/*
 * DefaultExperimentGraph.java
 *
 * Created on 7 de Maio de 2003, 18:47
 */

package com.linkare.rec.impl.baseUI.graph;

import java.util.logging.LogManager;
import java.util.logging.Logger;

import javax.swing.Icon;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYBarRenderer;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.impl.client.experiment.ExpDataDisplay;
import com.linkare.rec.impl.client.experiment.ExpDataModel;
import com.linkare.rec.impl.client.experiment.ExpDataModelListener;
import com.linkare.rec.impl.client.experiment.NewExpDataEvent;

/**
 * 
 * @author Jos√© Pedro Pereira - Linkare TI
 */
public class DefaultExperimentBarGraph extends javax.swing.JPanel implements ExpDataDisplay, ExpDataModelListener {
	private static String UI_CLIENT_LOGGER = "ReC.baseUI";

	static {
		Logger l = LogManager.getLogManager().getLogger(UI_CLIENT_LOGGER);
		if (l == null) {
			LogManager.getLogManager().addLogger(Logger.getLogger(UI_CLIENT_LOGGER));
		}
	}

	/** Creates new form DefaultExperimentGraph */
	public DefaultExperimentBarGraph() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		defaultHistogramDatasetProxy = new com.linkare.rec.impl.client.experiment.DefaultHistogramDatasetProxy();
		scrollPane = new javax.swing.JScrollPane();
		labelWaitData = new javax.swing.JLabel();

		setLayout(new java.awt.BorderLayout());

		labelWaitData.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		labelWaitData.setText("waiting for data...");
		scrollPane.setViewportView(labelWaitData);

		add(scrollPane, java.awt.BorderLayout.CENTER);

	}// GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JScrollPane scrollPane;
	private com.linkare.rec.impl.client.experiment.DefaultHistogramDatasetProxy defaultHistogramDatasetProxy;
	private javax.swing.JLabel labelWaitData;

	// End of variables declaration//GEN-END:variables

	public javax.swing.JComponent getDisplay() {
		return this;
	}

	public Icon getIcon() {
		return new javax.swing.ImageIcon(getClass().getResource("/com/linkare/rec/impl/baseUI/resources/chart16.gif"));
	}

	private ExpDataModel model = null;

	public void setExpDataModel(ExpDataModel model) {
		this.model = model;
		defaultHistogramDatasetProxy.setChannelDisplay(getChannelDisplay());
		defaultHistogramDatasetProxy.setExpDataModel(model);
		if (model != null)
			model.addExpDataModelListener(this);
	}

	public String getName() {
		return "Histogram";
	}

	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	public javax.swing.JToolBar getToolBar() {
		return null;
	}

	public void dataModelRunning() {// BIG SILENT NOOP
	}

	public void dataModelStoped() {// BIG SILENT NOOP
	}

	/*
	 * public void headerAvailable(HardwareAcquisitionConfig header) {
	 * NumberAxis hitsAxis = new NumberAxis("Hits");
	 * hitsAxis.setAutoRange(true); hitsAxis.setAutoRangeStickyZero(false);
	 * hitsAxis.setAutoRangeIncludesZero(false);
	 * 
	 * com.linkare.rec.data.metadata.Scale
	 * scale=header.getChannelsConfig(getChannelDisplay()).getSelectedScale();
	 * String
	 * chn=header.getChannelsConfig(getChannelDisplay()).getChannelName();
	 * String pus=scale.getPhysicsUnitSymbol(); String
	 * multiplier=scale.getMultiplier().toString();
	 * 
	 * NumberAxis valueAxis = new NumberAxis(chn+" ["+multiplier+pus+"]");
	 * 
	 * //NumberAxis valueAxis = new VerticalNumberAxis("Acquisition Channels");
	 * valueAxis.setAutoRange(true); valueAxis.setAutoRangeStickyZero(false);
	 * valueAxis.setAutoRangeIncludesZero(false);
	 * 
	 * XYToolTipGenerator tooltipGenerator = new StandardXYToolTipGenerator();
	 * 
	 * XYPlot plot = new XYPlot(defaultHistogramDatasetProxy,valueAxis,hitsAxis,
	 * new XYBarRenderer(0.1));
	 * 
	 * chart = new JFreeChart(header.getFamiliarName(),
	 * JFreeChart.DEFAULT_TITLE_FONT, plot, true);
	 * 
	 * ChartPanel panel=new
	 * ChartPanel(chart,350,250,350,250,350,250,true,true,true,true,true,true);
	 * panel.setPreferredSize(new java.awt.Dimension(350,250));
	 * //panel.setMinimumSize(new java.awt.Dimension(350,250));
	 * //panel.setSize(new java.awt.Dimension(350,250));
	 * panel.setMouseZoomable(true,false);
	 * 
	 * scrollPane.remove(labelWaitData); scrollPane.setViewportView(panel);
	 * 
	 * }
	 */

	private boolean isScaleSet = false;

	private JFreeChart chart = null;

	/** Holds value of property channelDisplay. */
	private int channelDisplay = 0;

	public void newSamples(NewExpDataEvent evt) {

	}

	/**
	 * Getter for property channelDisplay.
	 * 
	 * @return Value of property channelDisplay.
	 */
	public int getChannelDisplay() {
		return this.channelDisplay;
	}

	/**
	 * Setter for property channelDisplay.
	 * 
	 * @param channelDisplay New value of property channelDisplay.
	 */
	public void setChannelDisplay(int channelDisplay) {
		this.channelDisplay = channelDisplay;
		defaultHistogramDatasetProxy.setChannelDisplay(channelDisplay);
	}

	public void dataModelEnded() {
	}

	public void dataModelError() {
	}

	public void dataModelStarted() {
		if (header == null)
			headerAvailable(model.getAcquisitionConfig());
	}

	private HardwareAcquisitionConfig header = null;

	private void headerAvailable(HardwareAcquisitionConfig header) {
		if (header == null)
			return;

		this.header = header;
		NumberAxis hitsAxis = new NumberAxis("Hits");
		hitsAxis.setAutoRange(true);
		hitsAxis.setAutoRangeStickyZero(false);
		hitsAxis.setAutoRangeIncludesZero(false);

		com.linkare.rec.data.metadata.Scale scale = header.getChannelsConfig(getChannelDisplay()).getSelectedScale();
		String chn = header.getChannelsConfig(getChannelDisplay()).getChannelName();
		String pus = scale.getPhysicsUnitSymbol();
		String multiplier = scale.getMultiplier().toString();

		NumberAxis valueAxis = new NumberAxis(chn + " [" + multiplier + pus + "]");

		// NumberAxis valueAxis = new
		// VerticalNumberAxis("Acquisition Channels");
		valueAxis.setAutoRange(true);
		valueAxis.setAutoRangeStickyZero(false);
		valueAxis.setAutoRangeIncludesZero(false);

		XYToolTipGenerator tooltipGenerator = new StandardXYToolTipGenerator();

		XYPlot plot = new XYPlot(defaultHistogramDatasetProxy, valueAxis, hitsAxis, new XYBarRenderer(0.1));

		chart = new JFreeChart(header.getFamiliarName(), JFreeChart.DEFAULT_TITLE_FONT, plot, true);

		ChartPanel panel = new ChartPanel(chart, 350, 250, 350, 250, 350, 250, true, true, true, true, true, true);
		panel.setPreferredSize(new java.awt.Dimension(350, 250));
		// panel.setMinimumSize(new java.awt.Dimension(350,250));
		// panel.setSize(new java.awt.Dimension(350,250));
		panel.setMouseZoomable(true, false);

		scrollPane.remove(labelWaitData);
		scrollPane.setViewportView(panel);
	}

	public void dataModelStartedNoData() {
		if (header == null)
			headerAvailable(model.getAcquisitionConfig());
	}

	public void dataModelWaiting() {
	}

}
