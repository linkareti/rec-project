/*
 * TabClosablePanel.java
 *
 * Created on August 4, 2004, 2:06 PM
 */

package com.linkare.rec.impl.baseUI;

/**
 * 
 * @author AndrÃ© Neto - LEFT - IST
 */
public class TabClosablePanel extends javax.swing.JPanel {

	/** Creates new form TabClosablePanel */
	public TabClosablePanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		jPanel1 = new javax.swing.JPanel();
		jButtonClose = new javax.swing.JButton();

		setLayout(new java.awt.BorderLayout());

		jPanel1.setLayout(new java.awt.BorderLayout());

		jButtonClose.setIcon(com.linkare.rec.impl.i18n.ReCResourceBundle.findImageIconOrDefault(
				"ReCBaseUI$rec.bui.icon.close", new javax.swing.ImageIcon(getClass().getResource(
						"/com/linkare/rec/impl/baseUI/resources/Close16.gif"))));
		jButtonClose.setToolTipText(com.linkare.rec.impl.i18n.ReCResourceBundle.findStringOrDefault(
				"ReCBaseUI$rec.bui.tip.closeTab", "Close the current tab"));
		jButtonClose.setBorder(null);
		jButtonClose.setPreferredSize(new java.awt.Dimension(16, 16));
		jButtonClose.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonCloseActionPerformed(evt);
			}
		});

		jPanel1.add(jButtonClose, java.awt.BorderLayout.EAST);

		add(jPanel1, java.awt.BorderLayout.NORTH);

	}// GEN-END:initComponents

	private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButtonCloseActionPerformed
	{// GEN-HEADEREND:event_jButtonCloseActionPerformed
		firePropertyChangeListenerPropertyChange(new java.beans.PropertyChangeEvent(this, "closed", Boolean.FALSE,
				Boolean.TRUE));
	}// GEN-LAST:event_jButtonCloseActionPerformed

	/**
	 * Registers PropertyChangeListener to receive events.
	 * 
	 * @param listener The listener to register.
	 */
	public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener listener) {
		if (listenerList == null) {
			listenerList = new javax.swing.event.EventListenerList();
		}
		listenerList.add(java.beans.PropertyChangeListener.class, listener);
	}

	/**
	 * Removes PropertyChangeListener from the list of listeners.
	 * 
	 * @param listener The listener to remove.
	 */
	public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener listener) {
		listenerList.remove(java.beans.PropertyChangeListener.class, listener);
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param event The event to be fired
	 */
	private void firePropertyChangeListenerPropertyChange(java.beans.PropertyChangeEvent event) {
		if (listenerList == null)
			return;
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == java.beans.PropertyChangeListener.class) {
				((java.beans.PropertyChangeListener) listeners[i + 1]).propertyChange(event);
			}
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButtonClose;
	private javax.swing.JPanel jPanel1;
	// End of variables declaration//GEN-END:variables

	/**
	 * Utility field used by event firing mechanism.
	 */
	private javax.swing.event.EventListenerList listenerList = null;

}
