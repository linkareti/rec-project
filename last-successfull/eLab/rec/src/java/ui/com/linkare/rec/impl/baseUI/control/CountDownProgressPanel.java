/*
 * CountDownProgressPanel.java
 *
 * Created on July 27, 2004, 4:25 PM
 */

package com.linkare.rec.impl.baseUI.control;

/**
 *
 * @author AndrÃ© Neto - LEFT - IST
 */
import java.util.logging.LogManager;
import java.util.logging.Logger;

import com.linkare.rec.impl.i18n.ReCResourceBundle;

public class CountDownProgressPanel extends javax.swing.JPanel {
	private static String UI_CLIENT_LOGGER = "ReC.baseUI";

	static {
		Logger l = LogManager.getLogManager().getLogger(UI_CLIENT_LOGGER);
		if (l == null) {
			LogManager.getLogManager().addLogger(Logger.getLogger(UI_CLIENT_LOGGER));
		}
	}

	private String lockFor = ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.lbl.lockableFor",
			"Lockable for: ");

	/** Creates new form CountDownProgressPanel */
	public CountDownProgressPanel() {
		initComponents();
	}

	private class Runner extends Thread {
		public void run() {
			counter = countDownFrom;
			stop = false;
			jProgressBar.setMaximum(countDownFrom);
			jProgressBar.setMinimum(countDownTo);
			jProgressBar.setStringPainted(true);
			try {
				while (counter >= countDownTo && !stop) {
					jProgressBar.setValue(counter);
					jProgressBar.setString(lockFor + " " + counter + "s !");
					counter -= updateRate;
					sleep(updateRate * 1000);
				}

				firePropertyChangeListenerPropertyChange(new java.beans.PropertyChangeEvent(this, "progressEnd",
						Boolean.FALSE, Boolean.TRUE));
				jProgressBar.setString("");
				jProgressBar.setValue(0);
				stop = true;
			} catch (InterruptedException ignored) {
			}
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		jProgressBar = new javax.swing.JProgressBar();

		setLayout(new java.awt.BorderLayout());

		jProgressBar.setPreferredSize(new java.awt.Dimension(180, 18));
		add(jProgressBar, java.awt.BorderLayout.CENTER);

	}// GEN-END:initComponents

	public static void main(String args[]) {
		new CountDownProgressPanel();
	}

	public void startCounting() {
		new Runner().start();
	}

	/**
	 * Getter for property countDownFrom.
	 * 
	 * @return Value of property countDownFrom.
	 */
	public int getCountDownFrom() {
		return this.countDownFrom;
	}

	/**
	 * Setter for property countDownFrom.
	 * 
	 * @param countDownFrom New value of property countDownFrom.
	 */
	public void setCountDownFrom(int countDownFrom) {
		this.countDownFrom = countDownFrom;
	}

	/**
	 * Getter for property countDownTo.
	 * 
	 * @return Value of property countDownTo.
	 */
	public int getCountDownTo() {
		return this.countDownTo;
	}

	/**
	 * Setter for property countDownTo.
	 * 
	 * @param countDownTo New value of property countDownTo.
	 */
	public void setCountDownTo(int countDownTo) {
		this.countDownTo = countDownTo;
	}

	/**
	 * Getter for property updateRate.
	 * 
	 * @return Value of property updateRate.
	 */
	public int getUpdateRate() {
		return this.updateRate;
	}

	/**
	 * Setter for property updateRate.
	 * 
	 * @param updateRate New value of property updateRate.
	 */
	public void setUpdateRate(int updateRate) {
		this.updateRate = updateRate;
	}

	/**
	 * Getter for property counter.
	 * 
	 * @return Value of property counter.
	 */
	public int getCounter() {
		return this.counter;
	}

	/**
	 * Getter for property stop.
	 * 
	 * @return Value of property stop.
	 */
	public boolean isStop() {
		return this.stop;
	}

	/**
	 * Setter for property stop.
	 * 
	 * @param stop New value of property stop.
	 */
	public void setStop(boolean stop) {
		this.stop = stop;
	}

	/**
	 * Getter for property indeterminate.
	 * 
	 * @return Value of property indeterminate.
	 */
	public boolean isIndeterminate() {
		return this.indeterminate;
	}

	/**
	 * Setter for property indeterminate.
	 * 
	 * @param indeterminate New value of property indeterminate.
	 */
	public void setIndeterminate(boolean indeterminate) {
		this.indeterminate = indeterminate;
		jProgressBar.setIndeterminate(indeterminate);
	}

	/**
	 * Registers PropertyChangeListener to receive events.
	 * 
	 * @param listener The listener to register.
	 */
	public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener listener) {
		if (listenerList == null) {
			listenerList = new javax.swing.event.EventListenerList();
		}
		listenerList.add(java.beans.PropertyChangeListener.class, listener);
	}

	/**
	 * Removes PropertyChangeListener from the list of listeners.
	 * 
	 * @param listener The listener to remove.
	 */
	public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener listener) {
		listenerList.remove(java.beans.PropertyChangeListener.class, listener);
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param event The event to be fired
	 */
	private void firePropertyChangeListenerPropertyChange(java.beans.PropertyChangeEvent event) {
		if (listenerList == null)
			return;
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == java.beans.PropertyChangeListener.class) {
				((java.beans.PropertyChangeListener) listeners[i + 1]).propertyChange(event);
			}
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JProgressBar jProgressBar;
	// End of variables declaration//GEN-END:variables

	/**
	 * Holds value of property countDownFrom.
	 */
	private int countDownFrom = 10;

	/**
	 * Holds value of property countDownTo.
	 */
	private int countDownTo = 0;

	/**
	 * Holds value of property updateRate.
	 */
	private int updateRate = 1;

	/**
	 * Holds value of property counter.
	 */
	private int counter;

	/**
	 * Holds value of property stop.
	 */
	private boolean stop = true;

	/**
	 * Utility field used by event firing mechanism.
	 */
	private javax.swing.event.EventListenerList listenerList = null;

	/**
	 * Holds value of property indeterminate.
	 */
	private boolean indeterminate;

}
