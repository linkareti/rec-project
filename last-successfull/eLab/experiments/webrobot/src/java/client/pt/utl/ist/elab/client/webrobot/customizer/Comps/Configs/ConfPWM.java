/*
 * ConfCompBin.java
 *
 * Created on 28 de Janeiro de 2003, 19:06
 */

package pt.utl.ist.elab.client.webrobot.customizer.Comps.Configs;

import javax.swing.JLabel;

/**
 * 
 * @author Andr�
 */
public class ConfPWM extends javax.swing.JDialog {

	/**
	 * 
	 */
	private static final long serialVersionUID = 4369597833470516609L;

	/** Creates new form ConfCompBin */
	public ConfPWM(final java.awt.Frame parent, final boolean modal,
			final pt.utl.ist.elab.client.webrobot.customizer.Models.ModelPWM model) {
		super(parent, modal);
		this.model = model;
		initComponents();
		readModel();
		setCancel(false);
		jButtonOk.requestFocus();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;

		buttonGroup = new javax.swing.ButtonGroup();
		jPanelOpts = new javax.swing.JPanel();
		jPanelTop = new javax.swing.JPanel();
		jCheckBoxPWM1 = new javax.swing.JCheckBox();
		jTextFieldPWM1 = new javax.swing.JTextField();
		jPanelPWM1 = new javax.swing.JPanel();
		jSliderPWM1 = new javax.swing.JSlider();
		jLabel1 = new javax.swing.JLabel();
		jPanelBottom = new javax.swing.JPanel();
		jCheckBoxPWM2 = new javax.swing.JCheckBox();
		jTextFieldPWM2 = new javax.swing.JTextField();
		jPanelPWM2 = new javax.swing.JPanel();
		jSliderPWM2 = new javax.swing.JSlider();
		jPanelOkCancel = new javax.swing.JPanel();
		jButtonOk = new javax.swing.JButton();
		jButtonCancel = new javax.swing.JButton();

		setTitle("Configura\u00e7\u00e3o do PWM");
		addKeyListener(new java.awt.event.KeyAdapter() {
			@Override
			public void keyPressed(final java.awt.event.KeyEvent evt) {
				formKeyPressed(evt);
			}
		});

		addMouseListener(new java.awt.event.MouseAdapter() {
			@Override
			public void mouseClicked(final java.awt.event.MouseEvent evt) {
				formMouseClicked(evt);
			}
		});

		addWindowListener(new java.awt.event.WindowAdapter() {
			@Override
			public void windowClosing(final java.awt.event.WindowEvent evt) {
				closeDialog(evt);
			}
		});

		jPanelOpts.setLayout(new java.awt.GridBagLayout());

		jPanelOpts.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
		jPanelOpts.setForeground(new java.awt.Color(51, 0, 102));
		jPanelOpts.setMinimumSize(new java.awt.Dimension(296, 180));
		jPanelOpts.setPreferredSize(new java.awt.Dimension(296, 180));
		jPanelTop.setLayout(new java.awt.GridBagLayout());

		jCheckBoxPWM1.setForeground(new java.awt.Color(51, 0, 102));
		jCheckBoxPWM1.setText("PWM-1 Roda Esquerda");
		if (model.getFlag() == 1 || model.getFlag() == 2) {
			jCheckBoxPWM1.setSelected(true);
		} else {
			jCheckBoxPWM1.setSelected(false);
		}
		jCheckBoxPWM1.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jCheckBoxPWM1StateChanged(evt);
			}
		});

		jPanelTop.add(jCheckBoxPWM1, new java.awt.GridBagConstraints());

		jTextFieldPWM1.setColumns(3);
		jTextFieldPWM1.setForeground(new java.awt.Color(51, 0, 102));
		jTextFieldPWM1.setText("" + model.getValor());
		if (jCheckBoxPWM1.isSelected()) {
			jTextFieldPWM1.setEnabled(true);
		} else {
			jTextFieldPWM1.setEnabled(false);
		}
		jTextFieldPWM1.addKeyListener(new java.awt.event.KeyAdapter() {
			@Override
			public void keyReleased(final java.awt.event.KeyEvent evt) {
				jTextFieldPWM1KeyReleased(evt);
			}
		});

		jPanelTop.add(jTextFieldPWM1, new java.awt.GridBagConstraints());

		jSliderPWM1.setMajorTickSpacing(25);
		jSliderPWM1.setMaximum(255);
		jSliderPWM1.setPaintLabels(true);
		jSliderPWM1.setPaintTicks(true);
		jSliderPWM1.setValue(model.getValor());
		final java.util.Hashtable<Integer, JLabel> labelTable = new java.util.Hashtable();
		labelTable.put(new Integer(0), new javax.swing.JLabel("Atr�s"));
		labelTable.put(new Integer(128), new javax.swing.JLabel("Parado"));
		labelTable.put(new Integer(255), new javax.swing.JLabel("Frente"));
		jSliderPWM1.setLabelTable(labelTable);
		if (jCheckBoxPWM1.isSelected()) {
			jSliderPWM1.setEnabled(true);
		} else {
			jSliderPWM1.setEnabled(false);
		}

		jSliderPWM1.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jSliderPWM1StateChanged(evt);
			}
		});

		jPanelPWM1.add(jSliderPWM1);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		jPanelTop.add(jPanelPWM1, gridBagConstraints);

		jPanelOpts.add(jPanelTop, new java.awt.GridBagConstraints());

		jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/webrobot/customizer/Comps/Icons/pwm.gif")));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridheight = 2;
		jPanelOpts.add(jLabel1, gridBagConstraints);

		jPanelBottom.setLayout(new java.awt.GridBagLayout());

		jCheckBoxPWM2.setForeground(new java.awt.Color(51, 0, 102));
		jCheckBoxPWM2.setText("PWM-2 Roda Direita");
		if (model.getFlag() == 1 || model.getFlag() == 3) {
			jCheckBoxPWM2.setSelected(true);
		} else {
			jCheckBoxPWM2.setSelected(false);
		}
		jCheckBoxPWM2.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jCheckBoxPWM2StateChanged(evt);
			}
		});

		jPanelBottom.add(jCheckBoxPWM2, new java.awt.GridBagConstraints());

		jTextFieldPWM2.setColumns(3);
		jTextFieldPWM2.setForeground(new java.awt.Color(51, 0, 102));
		jTextFieldPWM2.setText("" + model.getValor2());
		if (jCheckBoxPWM2.isSelected()) {
			jTextFieldPWM2.setEnabled(true);
		} else {
			jTextFieldPWM2.setEnabled(false);
		}
		jTextFieldPWM2.addKeyListener(new java.awt.event.KeyAdapter() {
			@Override
			public void keyReleased(final java.awt.event.KeyEvent evt) {
				jTextFieldPWM2KeyReleased(evt);
			}
		});

		jPanelBottom.add(jTextFieldPWM2, new java.awt.GridBagConstraints());

		jSliderPWM2.setMajorTickSpacing(25);
		jSliderPWM2.setMaximum(255);
		jSliderPWM2.setPaintLabels(true);
		jSliderPWM2.setPaintTicks(true);
		jSliderPWM2.setValue(model.getValor2());
		jSliderPWM2.setLabelTable(labelTable);
		if (jCheckBoxPWM2.isSelected()) {
			jSliderPWM2.setEnabled(true);
		} else {
			jSliderPWM2.setEnabled(false);
		}

		jSliderPWM2.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jSliderPWM2StateChanged(evt);
			}
		});

		jPanelPWM2.add(jSliderPWM2);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		jPanelBottom.add(jPanelPWM2, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		jPanelOpts.add(jPanelBottom, gridBagConstraints);

		getContentPane().add(jPanelOpts, java.awt.BorderLayout.CENTER);

		jPanelOkCancel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
		jPanelOkCancel.setForeground(new java.awt.Color(51, 0, 102));
		jButtonOk.setForeground(new java.awt.Color(51, 0, 102));
		jButtonOk.setText("Ok");
		jButtonOk.setPreferredSize(new java.awt.Dimension(73, 26));
		jButtonOk.addKeyListener(new java.awt.event.KeyAdapter() {
			@Override
			public void keyReleased(final java.awt.event.KeyEvent evt) {
				jButtonOkKeyReleased(evt);
			}
		});

		jButtonOk.addMouseListener(new java.awt.event.MouseAdapter() {
			@Override
			public void mousePressed(final java.awt.event.MouseEvent evt) {
				jButtonOkMousePressed(evt);
			}
		});

		jPanelOkCancel.add(jButtonOk);

		jButtonCancel.setForeground(new java.awt.Color(51, 0, 102));
		jButtonCancel.setText("Cancel");
		jButtonCancel.addMouseListener(new java.awt.event.MouseAdapter() {
			@Override
			public void mousePressed(final java.awt.event.MouseEvent evt) {
				jButtonCancelMousePressed(evt);
			}
		});

		jPanelOkCancel.add(jButtonCancel);

		getContentPane().add(jPanelOkCancel, java.awt.BorderLayout.SOUTH);

		pack();
	}// GEN-END:initComponents

	private void jButtonOkKeyReleased(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_jButtonOkKeyReleased
		if (evt.getKeyCode() == 10) {
			jButtonOkMousePressed(null);
		} else if (evt.getKeyCode() == 27) {
			jButtonCancelMousePressed(null);
		}
	}// GEN-LAST:event_jButtonOkKeyReleased

	private void formKeyPressed(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_formKeyPressed
		if (evt.getKeyCode() == 10) {
			jButtonOkMousePressed(null);
		} else if (evt.getKeyCode() == 27) {
			jButtonCancelMousePressed(null);
		}
	}// GEN-LAST:event_formKeyPressed

	private void jCheckBoxPWM1StateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jCheckBoxPWM1StateChanged
		if (jCheckBoxPWM1.isSelected()) {
			jSliderPWM1.setEnabled(true);
			jTextFieldPWM1.setEnabled(true);
		} else {
			jSliderPWM1.setEnabled(false);
			jTextFieldPWM1.setEnabled(false);
		}
	}// GEN-LAST:event_jCheckBoxPWM1StateChanged

	private void jCheckBoxPWM2StateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jCheckBoxPWM2StateChanged
		if (jCheckBoxPWM2.isSelected()) {
			jSliderPWM2.setEnabled(true);
			jTextFieldPWM2.setEnabled(true);
		} else {
			jSliderPWM2.setEnabled(false);
			jTextFieldPWM2.setEnabled(false);
		}
	}// GEN-LAST:event_jCheckBoxPWM2StateChanged

	private void jTextFieldPWM2KeyReleased(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_jTextFieldPWM2KeyReleased
		try {
			if (new Integer(jTextFieldPWM2.getText()).intValue() < 1) {
				jTextFieldPWM2.setText("" + 1);
			} else if (new Integer(jTextFieldPWM2.getText()).intValue() > 255) {
				jTextFieldPWM2.setText("" + 255);
			}
			jSliderPWM2.setValue(new Integer(jTextFieldPWM2.getText()).intValue());
		} catch (final NumberFormatException nfe) {
		}
	}// GEN-LAST:event_jTextFieldPWM2KeyReleased

	private void jSliderPWM2StateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jSliderPWM2StateChanged
		jTextFieldPWM2.setText("" + jSliderPWM2.getValue());
	}// GEN-LAST:event_jSliderPWM2StateChanged

	private void jTextFieldPWM1KeyReleased(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_jTextFieldPWM1KeyReleased
		try {
			if (new Integer(jTextFieldPWM1.getText()).intValue() < 1) {
				jTextFieldPWM1.setText("" + 1);
			} else if (new Integer(jTextFieldPWM1.getText()).intValue() > 255) {
				jTextFieldPWM1.setText("" + 255);
			}
			jSliderPWM1.setValue(new Integer(jTextFieldPWM1.getText()).intValue());
		} catch (final NumberFormatException nfe) {
		}
	}// GEN-LAST:event_jTextFieldPWM1KeyReleased

	private void jSliderPWM1StateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jSliderPWM1StateChanged
		jTextFieldPWM1.setText("" + jSliderPWM1.getValue());
	}// GEN-LAST:event_jSliderPWM1StateChanged

	private void formMouseClicked(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_formMouseClicked
		this.requestFocus();
	}// GEN-LAST:event_formMouseClicked

	private void jButtonCancelMousePressed(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jButtonCancelMousePressed
		setCancel(true);
		closeDialog(null);
	}// GEN-LAST:event_jButtonCancelMousePressed

	private void jButtonOkMousePressed(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jButtonOkMousePressed
		if (checkTextValues.isOK(jTextFieldPWM1) && checkTextValues.isOK(jTextFieldPWM2)) {
			if (jCheckBoxPWM1.isSelected() && jCheckBoxPWM2.isSelected()) {
				model.setValor(new Integer(jTextFieldPWM1.getText()).intValue());
				model.setValor2(new Integer(jTextFieldPWM2.getText()).intValue());
				model.setFlag(1);
			} else if (jCheckBoxPWM1.isSelected() && !jCheckBoxPWM2.isSelected()) {
				model.setValor(new Integer(jTextFieldPWM1.getText()).intValue());
				model.setValor2(0);
				model.setFlag(2);
			} else if (!jCheckBoxPWM1.isSelected() && jCheckBoxPWM2.isSelected()) {
				model.setValor(0);
				model.setValor2(new Integer(jTextFieldPWM2.getText()).intValue());
				model.setFlag(3);
			} else {
				model.setValor(0);
				model.setValor2(0);
				model.setFlag(1);
			}
			closeDialog(null);
		}
	}// GEN-LAST:event_jButtonOkMousePressed

	/** Closes the dialog */
	private void closeDialog(final java.awt.event.WindowEvent evt) {// GEN-FIRST:event_closeDialog
		if (evt != null) {
			setCancel(true);
		}
		setVisible(false);
		dispose();
	}// GEN-LAST:event_closeDialog

	// DEBUG!!!!!!!!!!!
	/**
	 * @param args the command line arguments
	 * 
	 *            public static void main(String args[]) { new ConfPWM(new
	 *            javax.swing.JFrame(), true).show(); }
	 */

	public void readModel() {
		if (model.getFlag() == 1) {
			jCheckBoxPWM1.setSelected(true);
			jSliderPWM1.setValue(model.getValor());
			jTextFieldPWM1.setText("" + model.getValor());
			jCheckBoxPWM2.setSelected(true);
			jSliderPWM2.setValue(model.getValor2());
			jTextFieldPWM2.setText("" + model.getValor2());
		} else if (model.getFlag() == 2) {
			jCheckBoxPWM1.setSelected(true);
			jSliderPWM1.setValue(model.getValor());
			jTextFieldPWM1.setText("" + model.getValor());
			jCheckBoxPWM2.setSelected(false);
			jSliderPWM2.setValue(model.getValor2());
			jTextFieldPWM2.setText("" + model.getValor2());
		} else {
			jCheckBoxPWM1.setSelected(false);
			jSliderPWM1.setValue(model.getValor());
			jTextFieldPWM1.setText("" + model.getValor());
			jCheckBoxPWM2.setSelected(true);
			jSliderPWM2.setValue(model.getValor2());
			jTextFieldPWM2.setText("" + model.getValor2());
		}
	}

	public pt.utl.ist.elab.client.webrobot.customizer.Models.ModelPWM getModel() {
		return model;
	}

	/**
	 * Getter for property cancel.
	 * 
	 * @return Value of property cancel.
	 */
	public boolean isCancel() {
		return cancel;
	}

	/**
	 * Setter for property cancel.
	 * 
	 * @param cancel New value of property cancel.
	 */
	public void setCancel(final boolean cancel) {
		this.cancel = cancel;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JCheckBox jCheckBoxPWM1;
	private javax.swing.JPanel jPanelOpts;
	private javax.swing.JPanel jPanelOkCancel;
	private javax.swing.JSlider jSliderPWM1;
	private javax.swing.JButton jButtonCancel;
	private javax.swing.ButtonGroup buttonGroup;
	private javax.swing.JPanel jPanelPWM2;
	private javax.swing.JPanel jPanelBottom;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JTextField jTextFieldPWM1;
	private javax.swing.JPanel jPanelPWM1;
	private javax.swing.JSlider jSliderPWM2;
	private javax.swing.JButton jButtonOk;
	private javax.swing.JTextField jTextFieldPWM2;
	private javax.swing.JCheckBox jCheckBoxPWM2;
	private javax.swing.JPanel jPanelTop;
	// End of variables declaration//GEN-END:variables
	// My variables
	private final pt.utl.ist.elab.client.webrobot.customizer.Models.ModelPWM model;
	private final pt.utl.ist.elab.client.webrobot.customizer.Utils.CheckTextValues checkTextValues = new pt.utl.ist.elab.client.webrobot.customizer.Utils.CheckTextValues(
			this);
	private final java.text.DecimalFormat df = new java.text.DecimalFormat("##0.00");

	/** Holds value of property cancel. */
	private boolean cancel = false;
}
