/*
 * RadioactividadeCustomizer.java
 *
 * Created on 16 de Maio de 2003, 10:11
 */

package pt.utl.ist.elab.client.planck;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.metadata.HardwareInfo;
import com.linkare.rec.impl.client.customizer.ICustomizerListener;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

/**
 * 
 * @author Jos√© Pedro Pereira - Linkare TI
 */
public class PlanckCustomizer extends javax.swing.JPanel implements com.linkare.rec.impl.client.customizer.ICustomizer {

	java.text.DecimalFormat df = null;

	/** Creates new form RadioactividadeCustomizer */
	public PlanckCustomizer() {
		initComponents();
		java.util.Hashtable ht = new java.util.Hashtable(10);
		ht.put(new Integer(120), new javax.swing.JLabel("" + 12));
		ht.put(new Integer(130), new javax.swing.JLabel("" + 13));
		ht.put(new Integer(140), new javax.swing.JLabel("" + 14));
		ht.put(new Integer(150), new javax.swing.JLabel("" + 15));
		ht.put(new Integer(160), new javax.swing.JLabel("" + 16));
		ht.put(new Integer(170), new javax.swing.JLabel("" + 17));
		ht.put(new Integer(180), new javax.swing.JLabel("" + 18));
		ht.put(new Integer(190), new javax.swing.JLabel("" + 19));
		ht.put(new Integer(200), new javax.swing.JLabel("" + 20));
		ht.put(new Integer(210), new javax.swing.JLabel("" + 21));
		ht.put(new Integer(220), new javax.swing.JLabel("" + 22));
		jSliderAng.setLabelTable(ht);

		jSliderAng.setEnabled(false);
		jTextFieldAng.setEnabled(false);
		/*
		 * jSliderNumSamples.setMaximum(500); jSliderNumSamples.repaint();
		 */

		System.out.println(jSliderNumSamples.getMajorTickSpacing());
		jSliderNumSamples.setValue(200);
		jTextFieldSamples.setText("200");
		df = new java.text.DecimalFormat();
		df.setMaximumFractionDigits(1);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		java.awt.GridBagConstraints gridBagConstraints;

		buttonGroup1 = new javax.swing.ButtonGroup();
		buttonGroup2 = new javax.swing.ButtonGroup();
		buttonGroup3 = new javax.swing.ButtonGroup();
		jPanel7 = new javax.swing.JPanel();
		jPanel4 = new javax.swing.JPanel();
		jRadioButtonVar = new javax.swing.JRadioButton();
		jRadioButtonFix = new javax.swing.JRadioButton();
		jPanel3 = new javax.swing.JPanel();
		jPanel5 = new javax.swing.JPanel();
		jPanel8 = new javax.swing.JPanel();
		jRadioButtonColor1 = new javax.swing.JRadioButton();
		jRadioButtonColor2 = new javax.swing.JRadioButton();
		jRadioButtonColor3 = new javax.swing.JRadioButton();
		jRadioButtonColor4 = new javax.swing.JRadioButton();
		jPanel9 = new javax.swing.JPanel();
		jRadioButtonGray0 = new javax.swing.JRadioButton();
		jRadioButtonGray20 = new javax.swing.JRadioButton();
		jRadioButtonGray40 = new javax.swing.JRadioButton();
		jRadioButtonGray60 = new javax.swing.JRadioButton();
		jRadioButtonGray80 = new javax.swing.JRadioButton();
		jRadioButtonGray90 = new javax.swing.JRadioButton();
		jPanel1 = new javax.swing.JPanel();
		jSliderAng = new javax.swing.JSlider();
		jTextFieldAng = new javax.swing.JTextField();
		jPanel6 = new javax.swing.JPanel();
		jSliderNumSamples = new javax.swing.JSlider();
		jTextFieldSamples = new javax.swing.JTextField();
		jPanel2 = new javax.swing.JPanel();
		btnOK = new javax.swing.JButton();
		btnCancel = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		btnDefaults = new javax.swing.JButton();
		jLabel3 = new javax.swing.JLabel();

		setLayout(new java.awt.BorderLayout());

		setMinimumSize(new java.awt.Dimension(420, 460));
		setPreferredSize(new java.awt.Dimension(420, 460));
		jPanel7.setLayout(new java.awt.BorderLayout());

		jPanel4.setLayout(new java.awt.GridBagLayout());

		jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
		jRadioButtonVar.setSelected(true);
		jRadioButtonVar.setText(ReCResourceBundle.findString("planck$rec.exp.customizer.title.1.check.1"));
		buttonGroup1.add(jRadioButtonVar);
		jRadioButtonVar.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				jRadioButtonVarItemStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		jPanel4.add(jRadioButtonVar, gridBagConstraints);

		jRadioButtonFix.setText(ReCResourceBundle.findString("planck$rec.exp.customizer.title.1.check.2"));
		buttonGroup1.add(jRadioButtonFix);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		jPanel4.add(jRadioButtonFix, gridBagConstraints);

		jPanel7.add(jPanel4, java.awt.BorderLayout.NORTH);

		jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));

		jPanel3.setMinimumSize(new java.awt.Dimension(350, 160));
		jPanel5.setLayout(new java.awt.GridLayout(1, 2));

		jPanel5.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findString("planck$rec.exp.customizer.title.2")));
		jPanel5.setMinimumSize(new java.awt.Dimension(350, 150));
		jPanel5.setPreferredSize(new java.awt.Dimension(350, 150));
		jPanel8.setLayout(new java.awt.GridLayout(4, 1));

		jPanel8.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findString("planck$rec.exp.customizer.title.2.1")));
		jPanel8.setMinimumSize(new java.awt.Dimension(117, 200));
		jPanel8.setPreferredSize(new java.awt.Dimension(117, 200));
		jRadioButtonColor1.setForeground(new java.awt.Color(204, 51, 255));
		jRadioButtonColor1.setSelected(true);
		jRadioButtonColor1.setText(ReCResourceBundle.findString("planck$rec.exp.customizer.title.2.1.check.1"));
		buttonGroup2.add(jRadioButtonColor1);
		jPanel8.add(jRadioButtonColor1);

		jRadioButtonColor2.setForeground(new java.awt.Color(255, 255, 0));
		jRadioButtonColor2.setText(ReCResourceBundle.findString("planck$rec.exp.customizer.title.2.1.check.2"));
		buttonGroup2.add(jRadioButtonColor2);
		jPanel8.add(jRadioButtonColor2);

		jRadioButtonColor3.setForeground(new java.awt.Color(102, 204, 0));
		jRadioButtonColor3.setText(ReCResourceBundle.findString("planck$rec.exp.customizer.title.2.1.check.3"));
		buttonGroup2.add(jRadioButtonColor3);
		jPanel8.add(jRadioButtonColor3);

		jRadioButtonColor4.setForeground(new java.awt.Color(185, 185, 185));
		jRadioButtonColor4.setText(ReCResourceBundle.findString("planck$rec.exp.customizer.title.2.1.check.4"));
		buttonGroup2.add(jRadioButtonColor4);
		jPanel8.add(jRadioButtonColor4);

		jPanel5.add(jPanel8);

		jPanel9.setLayout(new java.awt.GridLayout(3, 2));

		jPanel9.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findString("planck$rec.exp.customizer.title.2.2")));
		jPanel9.setMinimumSize(new java.awt.Dimension(117, 200));
		jPanel9.setPreferredSize(new java.awt.Dimension(117, 200));
		jRadioButtonGray0.setForeground(new java.awt.Color(185, 185, 185));
		jRadioButtonGray0.setText("0%");
		buttonGroup3.add(jRadioButtonGray0);
		jPanel9.add(jRadioButtonGray0);

		jRadioButtonGray20.setForeground(new java.awt.Color(158, 158, 158));
		jRadioButtonGray20.setText("20%");
		buttonGroup3.add(jRadioButtonGray20);
		jPanel9.add(jRadioButtonGray20);

		jRadioButtonGray40.setForeground(new java.awt.Color(121, 121, 121));
		jRadioButtonGray40.setSelected(true);
		jRadioButtonGray40.setText("40%");
		buttonGroup3.add(jRadioButtonGray40);
		jPanel9.add(jRadioButtonGray40);

		jRadioButtonGray60.setForeground(new java.awt.Color(84, 84, 84));
		jRadioButtonGray60.setText("60%");
		buttonGroup3.add(jRadioButtonGray60);
		jPanel9.add(jRadioButtonGray60);

		jRadioButtonGray80.setForeground(new java.awt.Color(57, 57, 57));
		jRadioButtonGray80.setText("80%");
		buttonGroup3.add(jRadioButtonGray80);
		jPanel9.add(jRadioButtonGray80);

		jRadioButtonGray90.setForeground(new java.awt.Color(40, 40, 40));
		jRadioButtonGray90.setText("90%");
		buttonGroup3.add(jRadioButtonGray90);
		jPanel9.add(jRadioButtonGray90);

		jPanel5.add(jPanel9);

		jPanel3.add(jPanel5);

		jPanel1.setLayout(new java.awt.GridBagLayout());

		jPanel1.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findString("planck$rec.exp.customizer.title.3")));
		jPanel1.setMinimumSize(new java.awt.Dimension(350, 80));
		jPanel1.setPreferredSize(new java.awt.Dimension(350, 80));
		jSliderAng.setMajorTickSpacing(10);
		jSliderAng.setMaximum(220);
		jSliderAng.setMinimum(120);
		jSliderAng.setPaintLabels(true);
		jSliderAng.setPaintTicks(true);
		jSliderAng.setMaximumSize(new java.awt.Dimension(1000, 32767));
		jSliderAng.setMinimumSize(new java.awt.Dimension(355, 80));
		jSliderAng.setPreferredSize(new java.awt.Dimension(355, 80));
		jSliderAng.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				jSliderAngStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		gridBagConstraints.weighty = 10.0;
		jPanel1.add(jSliderAng, gridBagConstraints);

		jTextFieldAng.setColumns(3);
		jTextFieldAng.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		jTextFieldAng.setText("12");
		jTextFieldAng.setMaximumSize(new java.awt.Dimension(30, 16));
		jTextFieldAng.setMinimumSize(new java.awt.Dimension(30, 16));
		jTextFieldAng.setPreferredSize(new java.awt.Dimension(37, 16));
		jTextFieldAng.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				jTextFieldAngFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel1.add(jTextFieldAng, gridBagConstraints);

		jPanel3.add(jPanel1);

		jPanel6.setLayout(new java.awt.GridBagLayout());

		jPanel6.setBorder(new javax.swing.border.TitledBorder(ReCResourceBundle
				.findString("planck$rec.exp.customizer.title.4")));
		jPanel6.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
		jPanel6.setMinimumSize(new java.awt.Dimension(350, 80));
		jPanel6.setPreferredSize(new java.awt.Dimension(350, 80));
		jSliderNumSamples.setMajorTickSpacing(50);
		jSliderNumSamples.setMaximum(300);
		jSliderNumSamples.setPaintLabels(true);
		jSliderNumSamples.setPaintTicks(true);
		jSliderNumSamples.setMaximumSize(new java.awt.Dimension(1000, 32767));
		jSliderNumSamples.setMinimumSize(new java.awt.Dimension(355, 80));
		jSliderNumSamples.setPreferredSize(new java.awt.Dimension(355, 80));
		jSliderNumSamples.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				jSliderNumSamplesStateChanged(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weighty = 10.0;
		jPanel6.add(jSliderNumSamples, gridBagConstraints);

		jTextFieldSamples.setColumns(4);
		jTextFieldSamples.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		jTextFieldSamples.setText("200");
		jTextFieldSamples.setMaximumSize(new java.awt.Dimension(30, 16));
		jTextFieldSamples.setMinimumSize(new java.awt.Dimension(30, 16));
		jTextFieldSamples.setPreferredSize(new java.awt.Dimension(48, 16));
		jTextFieldSamples.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				jTextFieldSamplesFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel6.add(jTextFieldSamples, gridBagConstraints);

		jPanel3.add(jPanel6);

		jPanel7.add(jPanel3, java.awt.BorderLayout.CENTER);

		add(jPanel7, java.awt.BorderLayout.CENTER);

		jPanel2.setLayout(new java.awt.GridBagLayout());

		jPanel2.setMinimumSize(new java.awt.Dimension(350, 42));
		jPanel2.setPreferredSize(new java.awt.Dimension(350, 42));
		btnOK.setText(ReCResourceBundle.findString("planck$rec.exp.planck.lbl.ok"));
		btnOK.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnOKActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		jPanel2.add(btnOK, gridBagConstraints);

		btnCancel.setText(ReCResourceBundle.findString("planck$rec.exp.planck.lbl.cancel"));
		btnCancel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnCancelActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		jPanel2.add(btnCancel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 10.0;
		jPanel2.add(jLabel1, gridBagConstraints);

		btnDefaults.setText(ReCResourceBundle.findString("planck$rec.exp.dftcfg.planck.title.1"));
		btnDefaults.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnDefaultsActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 1;
		jPanel2.add(btnDefaults, gridBagConstraints);

		jLabel3.setText("    ");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weighty = 1.0;
		jPanel2.add(jLabel3, gridBagConstraints);

		add(jPanel2, java.awt.BorderLayout.SOUTH);

	}// GEN-END:initComponents

	private void jRadioButtonVarItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_jRadioButtonVarItemStateChanged
		if (evt.getStateChange() == evt.SELECTED) {
			jSliderAng.setEnabled(false);
			jTextFieldAng.setEnabled(false);
			// jSliderNumSamples.setMaximum(500);
			// jSliderNumSamples.setMajorTickSpacing(300);
			// jSliderNumSamples.setMinorTickSpacing(0);
		} else {
			jSliderAng.setEnabled(true);
			jTextFieldAng.setEnabled(true);
			/*
			 * jSliderNumSamples.setMaximum(1000);
			 * jSliderNumSamples.setMajorTickSpacing(100);
			 * jSliderNumSamples.setMinorTickSpacing(0);
			 */
		}
	}// GEN-LAST:event_jRadioButtonVarItemStateChanged

	private void jTextFieldSamplesFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextFieldSamplesFocusLost
		String strNumSamples = jTextFieldSamples.getText();
		if (strNumSamples.trim().equals(""))
			return;
		try {
			int numSamples = Integer.parseInt(strNumSamples);
			if (numSamples <= jSliderNumSamples.getMaximum() && numSamples > jSliderNumSamples.getMinimum())
				jSliderNumSamples.setValue(numSamples);
			else
				jTextFieldSamples.setText("" + jSliderNumSamples.getValue());
		} catch (Exception e) {
			jTextFieldSamples.setText("" + jSliderNumSamples.getValue());
		}
	}// GEN-LAST:event_jTextFieldSamplesFocusLost

	private void jTextFieldAngFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextFieldAngFocusLost
		String strAng = jTextFieldAng.getText();
		if (strAng.trim().equals(""))
			return;
		try {
			int Ang = (int) (10 * Float.parseFloat(strAng));
			if (Ang <= jSliderAng.getMaximum() && Ang > jSliderAng.getMinimum())
				jSliderAng.setValue(Ang);
			else
				jTextFieldAng.setText(df.format(jSliderAng.getValue() / 10f));
		} catch (Exception e) {
			jTextFieldAng.setText(df.format(jSliderAng.getValue() / 10f));
		}
	}// GEN-LAST:event_jTextFieldAngFocusLost

	private void jSliderAngStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jSliderAngStateChanged
		jTextFieldAng.setText(df.format(jSliderAng.getValue() / 10f));
	}// GEN-LAST:event_jSliderAngStateChanged

	private void jSliderNumSamplesStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jSliderNumSamplesStateChanged
		if (jSliderNumSamples.getValue() == 0) {
			jSliderNumSamples.setValue(1);

		}
		jTextFieldSamples.setText("" + jSliderNumSamples.getValue());
	}// GEN-LAST:event_jSliderNumSamplesStateChanged

	private void btnDefaultsActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnDefaultsActionPerformed
	{// GEN-HEADEREND:event_btnDefaultsActionPerformed
		jSliderNumSamples.setValue(200);
		jTextFieldSamples.setText("200");
		jSliderAng.setValue(15);
		jTextFieldAng.setText("15");
		jRadioButtonVar.setSelected(true);
		jRadioButtonColor1.setSelected(true);
		jRadioButtonGray60.setSelected(true);
	}// GEN-LAST:event_btnDefaultsActionPerformed

	private void btnCancelActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnCancelActionPerformed
	{// GEN-HEADEREND:event_btnCancelActionPerformed
		fireICustomizerListenerCanceled();
	}// GEN-LAST:event_btnCancelActionPerformed

	private void btnOKActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnOKActionPerformed
	{// GEN-HEADEREND:event_btnOKActionPerformed
		acqConfig.setTotalSamples(jSliderNumSamples.getValue());

		String mode = "";
		String filter1 = "";
		String filter2 = "";

		if (jRadioButtonVar.isSelected()) {
			mode = "All";
		} else {
			mode = "Fixed";
		}

		if (jRadioButtonColor1.isSelected()) {
			filter1 = "Pink";
		} else if (jRadioButtonColor2.isSelected()) {
			filter1 = "Yellow";
		} else if (jRadioButtonColor3.isSelected()) {
			filter1 = "Green";
		} else {
			filter1 = "Transparent";
		}

		if (jRadioButtonGray0.isSelected()) {
			filter2 = "0";
		} else if (jRadioButtonGray20.isSelected()) {
			filter2 = "20";
		} else if (jRadioButtonGray40.isSelected()) {
			filter2 = "40";
		} else if (jRadioButtonGray60.isSelected()) {
			filter2 = "60";
		} else if (jRadioButtonGray80.isSelected()) {
			filter2 = "80";
		} else {
			filter2 = "90";
		}

		acqConfig.getSelectedHardwareParameter("Mode").setParameterValue(mode);
		acqConfig.getSelectedHardwareParameter("Filter1").setParameterValue(filter1);
		acqConfig.getSelectedHardwareParameter("Filter2").setParameterValue(filter2);
		acqConfig.getSelectedHardwareParameter("AngPos").setParameterValue("" + (jSliderAng.getValue() / 10f));

		int nSamples = 0;
		if (jRadioButtonVar.isSelected()) {
			acqConfig.getSelectedHardwareParameter("AngPos").setParameterValue("" + 12);
		}

		nSamples = jSliderNumSamples.getValue();

		acqConfig.setTotalSamples(nSamples);

		for (int i = 0; i < acqConfig.getSelectedHardwareParameters().length; i++) {
			System.out.println(acqConfig.getSelectedHardwareParameters()[i].getParameterName() + "="
					+ acqConfig.getSelectedHardwareParameters()[i].getParameterValue());
		}

		System.out.println("Total samples = " + nSamples);

		fireICustomizerListenerDone();
	}// GEN-LAST:event_btnOKActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnCancel;
	private javax.swing.JButton btnDefaults;
	private javax.swing.JButton btnOK;
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.ButtonGroup buttonGroup2;
	private javax.swing.ButtonGroup buttonGroup3;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JPanel jPanel7;
	private javax.swing.JPanel jPanel8;
	private javax.swing.JPanel jPanel9;
	private javax.swing.JRadioButton jRadioButtonColor1;
	private javax.swing.JRadioButton jRadioButtonColor2;
	private javax.swing.JRadioButton jRadioButtonColor3;
	private javax.swing.JRadioButton jRadioButtonColor4;
	private javax.swing.JRadioButton jRadioButtonFix;
	private javax.swing.JRadioButton jRadioButtonGray0;
	private javax.swing.JRadioButton jRadioButtonGray20;
	private javax.swing.JRadioButton jRadioButtonGray40;
	private javax.swing.JRadioButton jRadioButtonGray60;
	private javax.swing.JRadioButton jRadioButtonGray80;
	private javax.swing.JRadioButton jRadioButtonGray90;
	private javax.swing.JRadioButton jRadioButtonVar;
	private javax.swing.JSlider jSliderAng;
	private javax.swing.JSlider jSliderNumSamples;
	private javax.swing.JTextField jTextFieldAng;
	private javax.swing.JTextField jTextFieldSamples;
	// End of variables declaration//GEN-END:variables

	/** Utility field used by event firing mechanism. */
	private javax.swing.event.EventListenerList listenerList = null;

	/**
	 * Registers ICustomizerListener to receive events.
	 * 
	 * @param listener The listener to register.
	 */
	public synchronized void addICustomizerListener(ICustomizerListener listener) {
		if (listenerList == null) {
			listenerList = new javax.swing.event.EventListenerList();
		}
		listenerList.add(ICustomizerListener.class, listener);
	}

	/**
	 * Removes ICustomizerListener from the list of listeners.
	 * 
	 * @param listener The listener to remove.
	 */
	public synchronized void removeICustomizerListener(ICustomizerListener listener) {
		listenerList.remove(ICustomizerListener.class, listener);
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerCanceled() {
		if (listenerList == null)
			return;
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {
				((ICustomizerListener) listeners[i + 1]).canceled();
			}
		}
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerDone() {
		if (listenerList == null)
			return;
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {

				((ICustomizerListener) listeners[i + 1]).done();
			}
		}
	}

	private HardwareInfo hardwareInfo = null;
	private HardwareAcquisitionConfig acqConfig = null;

	public HardwareAcquisitionConfig getAcquisitionConfig() {
		return acqConfig;
	}

	public void setHardwareAcquisitionConfig(HardwareAcquisitionConfig acqConfig) {
		this.acqConfig = acqConfig;
		if (acqConfig != null) {
			jSliderNumSamples.setValue(acqConfig.getTotalSamples());

			jSliderAng.setValue((int) (Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("AngPos")) * 10));

			String sMode = acqConfig.getSelectedHardwareParameterValue("Mode");
			if (sMode.equalsIgnoreCase("All")) {
				jRadioButtonVar.setSelected(true);
			} else {
				jRadioButtonFix.setSelected(true);
			}

			String filter1 = acqConfig.getSelectedHardwareParameterValue("Filter1");
			if (filter1.equalsIgnoreCase("Pink")) {
				jRadioButtonColor1.setSelected(true);
			} else if (filter1.equalsIgnoreCase("Yellow")) {
				jRadioButtonColor2.setSelected(true);
			} else if (filter1.equalsIgnoreCase("Green")) {
				jRadioButtonColor3.setSelected(true);
			} else {
				jRadioButtonColor4.setSelected(true);
			}

			String filter2 = acqConfig.getSelectedHardwareParameterValue("Filter2");
			if (filter2.equalsIgnoreCase("0")) {
				jRadioButtonGray0.setSelected(true);
			} else if (filter2.equalsIgnoreCase("20")) {
				jRadioButtonGray20.setSelected(true);
			} else if (filter2.equalsIgnoreCase("40")) {
				jRadioButtonGray40.setSelected(true);
			} else if (filter2.equalsIgnoreCase("60")) {
				jRadioButtonGray60.setSelected(true);
			} else if (filter2.equalsIgnoreCase("80")) {
				jRadioButtonGray80.setSelected(true);
			} else {
				jRadioButtonGray90.setSelected(true);
			}
		}
	}

	public void setHardwareInfo(HardwareInfo hardwareInfo) {
		this.hardwareInfo = hardwareInfo;
	}

	protected HardwareInfo getHardwareInfo() {
		return this.hardwareInfo;
	}

	public javax.swing.JComponent getCustomizerComponent() {
		return this;
	}

	public javax.swing.ImageIcon getCustomizerIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/planck/resources/planck_iconified.gif"));
	}

	public String getCustomizerTitle() {
		return ReCResourceBundle.findString("planck$rec.exp.customizer.title");
	}

	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	public static void main(String args[]) {
		ReCResourceBundle.loadResourceBundle("planck",
				"recresource:///pt/utl/ist/elab/client/planck/resources/messages");
		javax.swing.JFrame jf = new javax.swing.JFrame();
		PlanckCustomizer pc = new PlanckCustomizer();
		jf.getContentPane().add(pc, java.awt.BorderLayout.CENTER);
		jf.pack();
		jf.show();
	}
}
