/*
 * DefaultExperimentGraph.java
 *
 * Created on 7 de Maio de 2003, 18:47
 */

package pt.utl.ist.elab.client.meteo.displays;

import java.text.SimpleDateFormat;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import javax.swing.Icon;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.impl.client.experiment.ExpDataDisplay;
import com.linkare.rec.impl.client.experiment.ExpDataModel;
import com.linkare.rec.impl.client.experiment.ExpDataModelListener;
import com.linkare.rec.impl.client.experiment.NewExpDataEvent;

/**
 * 
 * @author Jos√© Pedro Pereira - Linkare TI
 */
public class DefaultTimeExperimentGraph extends javax.swing.JPanel implements ExpDataDisplay, ExpDataModelListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = 3346506712021056751L;
	private static String UI_CLIENT_LOGGER = "ReC.baseUI";
	private DefaultTimeDatasetProxy defaultTimeDatasetProxy = null;

	static {
		final Logger l = LogManager.getLogManager().getLogger(DefaultTimeExperimentGraph.UI_CLIENT_LOGGER);
		if (l == null) {
			LogManager.getLogManager().addLogger(Logger.getLogger(DefaultTimeExperimentGraph.UI_CLIENT_LOGGER));
		}
	}

	/** Creates new form DefaultExperimentGraph */
	public DefaultTimeExperimentGraph() {
		defaultTimeDatasetProxy = new DefaultTimeDatasetProxy();
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		scrollPane = new javax.swing.JScrollPane();
		labelWaitData = new javax.swing.JLabel();

		setLayout(new java.awt.BorderLayout());

		labelWaitData.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		labelWaitData.setText("waiting for data...");
		scrollPane.setViewportView(labelWaitData);

		add(scrollPane, java.awt.BorderLayout.CENTER);

	}// GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JScrollPane scrollPane;
	private javax.swing.JLabel labelWaitData;
	// End of variables declaration//GEN-END:variables

	/** Holds value of property channelX. */
	private int channelTime;

	/** Holds value of property channelY. */
	private int channelY;

	@Override
	public javax.swing.JComponent getDisplay() {
		return this;
	}

	@Override
	public Icon getIcon() {
		return new javax.swing.ImageIcon("/com/linkare/rec/impl/baseUI/resources/chart16.gif");
	}

	private ExpDataModel model = null;

	@Override
	public void setExpDataModel(final ExpDataModel model) {
		defaultTimeDatasetProxy.setExpDataModel(model);
		model.addExpDataModelListener(this);
		this.model = model;
	}

	@Override
	public String getName() {
		return "Time Chart";
	}

	@Override
	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	@Override
	public javax.swing.JToolBar getToolBar() {
		return null;
	}

	public void headerAvailable(final HardwareAcquisitionConfig header) {
		final DateAxis dAxis = new DateAxis("Time");
		dAxis.setAutoRange(true);

		dAxis.setTickUnit(new DateTickUnit(DateTickUnit.SECOND, 1, new SimpleDateFormat("HH:mm:ss dd-MMM-yyyy")));
		dAxis.setVerticalTickLabels(true);

		final NumberAxis yAxis = new NumberAxis("Valor");
		yAxis.setAutoRange(true);
		yAxis.setAutoRangeStickyZero(false);
		yAxis.setAutoRangeIncludesZero(false);

		final XYToolTipGenerator tooltipGenerator = new StandardXYToolTipGenerator();

		final XYPlot plot = new XYPlot(defaultTimeDatasetProxy, dAxis, yAxis, new StandardXYItemRenderer(
				StandardXYItemRenderer.SHAPES_AND_LINES, tooltipGenerator));

		final JFreeChart chart = new JFreeChart("meteo", JFreeChart.DEFAULT_TITLE_FONT, plot, true);
		final ChartPanel panel = new ChartPanel(chart);

		panel.setPreferredSize(new java.awt.Dimension(350, 300));
		// panel.setMinimumSize(panel.getPreferredSize());
		// panel.setSize(panel.getPreferredSize());

		panel.setMouseZoomable(true, false);

		scrollPane.remove(labelWaitData);
		scrollPane.setViewportView(panel);
	}

	private final boolean isScaleSet = false;

	@Override
	public void newSamples(final NewExpDataEvent evt) {

	}

	/**
	 * Getter for property channelDisplayY.
	 * 
	 * @return Value of property channelDisplayY.
	 */
	public int getChannelTime() {
		return defaultTimeDatasetProxy.getChannelTime();
	}

	/**
	 * Setter for property channelDisplayX.
	 * @param channelTime 
	 * 
	 * @param channelDisplayX New value of property channelDisplayX.
	 */
	public void setChannelTime(final int channelTime) {
		defaultTimeDatasetProxy.setChannelTime(channelTime);
	}

	/**
	 * Getter for property channelDisplayX.
	 * 
	 * @return Value of property channelDisplayX.
	 */
	public int getChannelDisplayY() {
		return defaultTimeDatasetProxy.getChannelDisplayY();
	}

	/**
	 * Setter for property channelDisplayY.
	 * 
	 * @param channelDisplayY New value of property channelDisplayY.
	 */
	public void setChannelDisplayY(final int channelDisplayY) {
		defaultTimeDatasetProxy.setChannelDisplayY(channelDisplayY);
	}

	public DefaultTimeDatasetProxy getDefaultTimeDatasetProxy() {
		return defaultTimeDatasetProxy;
	}

	public javax.swing.JScrollPane getScrollPane() {
		return scrollPane;
	}

	public javax.swing.JLabel getLabel() {
		return labelWaitData;
	}

	@Override
	public void dataModelEnded() {
	}

	@Override
	public void dataModelError() {
	}

	@Override
	public void dataModelStarted() {
		if (model != null) {
			headerAvailable(model.getAcquisitionConfig());
		}
	}

	@Override
	public void dataModelStartedNoData() {
	}

	@Override
	public void dataModelStoped() {// BIG SILENT NOOP
	}

	@Override
	public void dataModelWaiting() {
	}

}
