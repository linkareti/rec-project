/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DiscosCustomizerPanel.java
 *
 * Created on 09-Nov-2010, 11:29:48
 */
package pt.utl.ist.elab.client.discos;

import java.util.Dictionary;
import java.util.Hashtable;

import javax.swing.JFormattedTextField;
import javax.swing.JLabel;

import com.linkare.rec.data.Multiplier;
import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.metadata.HardwareInfo;
import com.linkare.rec.data.synch.Frequency;
import com.linkare.rec.data.synch.FrequencyDefType;
import com.linkare.rec.impl.client.customizer.ICustomizerListener;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

/**
 * 
 * @author npadriano
 */
public class DiscosCustomizerPanel extends javax.swing.JPanel implements
		com.linkare.rec.impl.client.customizer.ICustomizer {

	/** Generated UID */
	private static final long serialVersionUID = -6367415208236048245L;

	public static final int NUMBER_OF_SAMPLES_FOR_SERIES = 1625;
	public static final int PROTOCOL_1_WAIT_MS = 20000;
	public static final int PROTOCOL_2_SAMPLING_INTERVAL_MS = 44;

	/** Creates new form DiscosCustomizerPanel */
	public DiscosCustomizerPanel() {
		initComponents();

		initComponentsManual();
		validateScreen();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupCalibration = new javax.swing.ButtonGroup();
        buttonGroupEnergyConservationIsPolarization = new javax.swing.ButtonGroup();
        jTabbedPaneDiscos = new javax.swing.JTabbedPane();
        jPanelAngularMomentum = new javax.swing.JPanel();
        jPanelAngularMomentumMaxVelocity = new javax.swing.JPanel();
        jSliderAngularMomentumMaxVelocity = new javax.swing.JSlider();
        jFormattedTextFieldAngularMomentumMaxVelocity = new javax.swing.JFormattedTextField();
        jPanelAngularMomentumServoVelocity = new javax.swing.JPanel();
        jSliderAngularMomentumServoVelocity = new javax.swing.JSlider();
        jFormattedTextFieldAngularMomentumServoVelocity = new javax.swing.JFormattedTextField();
        jLabelAngularMomentumVerification = new javax.swing.JLabel();
        jPanelMomentInertia = new javax.swing.JPanel();
        jPanelMomentInertiaMaxVelocity = new javax.swing.JPanel();
        jSliderMomentInertiaMaxVelocity = new javax.swing.JSlider();
        jFormattedTextFieldMomentInertiaMaxVelocity = new javax.swing.JFormattedTextField();
        jPanelMomentInertiaRelayVelocity = new javax.swing.JPanel();
        jSliderMomentInertiaRelayVelocity = new javax.swing.JSlider();
        jFormattedTextFieldMomentInertiaRelayVelocity = new javax.swing.JFormattedTextField();
        jLabelMomentInertiaVerification = new javax.swing.JLabel();
        jPanelControlButtons = new javax.swing.JPanel();
        jButtonOk = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jButtonDefaultConfig = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(350, 490));
        setName("OpticaCustomizer"); // NOI18N
        setPreferredSize(new java.awt.Dimension(350, 490));
        setLayout(new java.awt.BorderLayout());

        jTabbedPaneDiscos.setName("jTabbedPaneDiscos"); // NOI18N
        jTabbedPaneDiscos.setPreferredSize(new java.awt.Dimension(350, 417));
        jTabbedPaneDiscos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneDiscosStateChanged(evt);
            }
        });

        jPanelAngularMomentum.setName("jPanelAngularMomentum"); // NOI18N
        jPanelAngularMomentum.setPreferredSize(new java.awt.Dimension(350, 372));

        jPanelAngularMomentumMaxVelocity.setBorder(javax.swing.BorderFactory.createTitledBorder("Velocidade m√°xima do disco"));
        jPanelAngularMomentumMaxVelocity.setName("jPanelAngularMomentumMaxVelocity"); // NOI18N
        jPanelAngularMomentumMaxVelocity.setPreferredSize(new java.awt.Dimension(330, 126));

        jSliderAngularMomentumMaxVelocity.setMajorTickSpacing(300);
        jSliderAngularMomentumMaxVelocity.setMaximum(1500);
        jSliderAngularMomentumMaxVelocity.setMinimum(300);
        jSliderAngularMomentumMaxVelocity.setMinorTickSpacing(1);
        jSliderAngularMomentumMaxVelocity.setPaintLabels(true);
        jSliderAngularMomentumMaxVelocity.setSnapToTicks(true);
        jSliderAngularMomentumMaxVelocity.setValue(1000);
        jSliderAngularMomentumMaxVelocity.setMinimumSize(new java.awt.Dimension(250, 16));
        jSliderAngularMomentumMaxVelocity.setName("jSliderAngularMomentumMaxVelocity"); // NOI18N
        jSliderAngularMomentumMaxVelocity.setPreferredSize(new java.awt.Dimension(250, 42));
        jSliderAngularMomentumMaxVelocity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderAngularMomentumMaxVelocityStateChanged(evt);
            }
        });

        jFormattedTextFieldAngularMomentumMaxVelocity.setText(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getString("jFormattedTextFieldAngularMomentumMaxVelocity.text")); // NOI18N
        jFormattedTextFieldAngularMomentumMaxVelocity.setMaximumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldAngularMomentumMaxVelocity.setMinimumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldAngularMomentumMaxVelocity.setName("jFormattedTextFieldAngularMomentumMaxVelocity"); // NOI18N
        jFormattedTextFieldAngularMomentumMaxVelocity.setPreferredSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldAngularMomentumMaxVelocity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldAngularMomentumMaxVelocityFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanelAngularMomentumMaxVelocityLayout = new javax.swing.GroupLayout(jPanelAngularMomentumMaxVelocity);
        jPanelAngularMomentumMaxVelocity.setLayout(jPanelAngularMomentumMaxVelocityLayout);
        jPanelAngularMomentumMaxVelocityLayout.setHorizontalGroup(
            jPanelAngularMomentumMaxVelocityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAngularMomentumMaxVelocityLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSliderAngularMomentumMaxVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFormattedTextFieldAngularMomentumMaxVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelAngularMomentumMaxVelocityLayout.setVerticalGroup(
            jPanelAngularMomentumMaxVelocityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAngularMomentumMaxVelocityLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAngularMomentumMaxVelocityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFormattedTextFieldAngularMomentumMaxVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSliderAngularMomentumMaxVelocity, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanelAngularMomentumServoVelocity.setBorder(javax.swing.BorderFactory.createTitledBorder("Velocidade de acoplagem"));
        jPanelAngularMomentumServoVelocity.setName("jPanelAngularMomentumServoVelocity"); // NOI18N
        jPanelAngularMomentumServoVelocity.setPreferredSize(new java.awt.Dimension(330, 95));

        jSliderAngularMomentumServoVelocity.setMajorTickSpacing(300);
        jSliderAngularMomentumServoVelocity.setMaximum(1500);
        jSliderAngularMomentumServoVelocity.setMinimum(300);
        jSliderAngularMomentumServoVelocity.setMinorTickSpacing(1);
        jSliderAngularMomentumServoVelocity.setPaintLabels(true);
        jSliderAngularMomentumServoVelocity.setSnapToTicks(true);
        jSliderAngularMomentumServoVelocity.setValue(900);
        jSliderAngularMomentumServoVelocity.setMinimumSize(new java.awt.Dimension(250, 16));
        jSliderAngularMomentumServoVelocity.setName("jSliderAngularMomentumServoVelocity"); // NOI18N
        jSliderAngularMomentumServoVelocity.setPreferredSize(new java.awt.Dimension(250, 42));
        jSliderAngularMomentumServoVelocity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderAngularMomentumServoVelocityStateChanged(evt);
            }
        });

        jFormattedTextFieldAngularMomentumServoVelocity.setText(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getString("jFormattedTextFieldAngularMomentumServoVelocity.text")); // NOI18N
        jFormattedTextFieldAngularMomentumServoVelocity.setMaximumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldAngularMomentumServoVelocity.setMinimumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldAngularMomentumServoVelocity.setName("jFormattedTextFieldAngularMomentumServoVelocity"); // NOI18N
        jFormattedTextFieldAngularMomentumServoVelocity.setPreferredSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldAngularMomentumServoVelocity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldAngularMomentumServoVelocityFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanelAngularMomentumServoVelocityLayout = new javax.swing.GroupLayout(jPanelAngularMomentumServoVelocity);
        jPanelAngularMomentumServoVelocity.setLayout(jPanelAngularMomentumServoVelocityLayout);
        jPanelAngularMomentumServoVelocityLayout.setHorizontalGroup(
            jPanelAngularMomentumServoVelocityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAngularMomentumServoVelocityLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSliderAngularMomentumServoVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFormattedTextFieldAngularMomentumServoVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanelAngularMomentumServoVelocityLayout.setVerticalGroup(
            jPanelAngularMomentumServoVelocityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAngularMomentumServoVelocityLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAngularMomentumServoVelocityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFormattedTextFieldAngularMomentumServoVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSliderAngularMomentumServoVelocity, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabelAngularMomentumVerification.setForeground(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getColor("jLabelAngularMomentumVerification.foreground")); // NOI18N
        jLabelAngularMomentumVerification.setText(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getString("jLabelAngularMomentumVerification.text")); // NOI18N
        jLabelAngularMomentumVerification.setEnabled(false);
        jLabelAngularMomentumVerification.setName("jLabelAngularMomentumVerification"); // NOI18N

        javax.swing.GroupLayout jPanelAngularMomentumLayout = new javax.swing.GroupLayout(jPanelAngularMomentum);
        jPanelAngularMomentum.setLayout(jPanelAngularMomentumLayout);
        jPanelAngularMomentumLayout.setHorizontalGroup(
            jPanelAngularMomentumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAngularMomentumLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAngularMomentumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelAngularMomentumMaxVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelAngularMomentumServoVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAngularMomentumVerification))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelAngularMomentumLayout.setVerticalGroup(
            jPanelAngularMomentumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAngularMomentumLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelAngularMomentumMaxVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelAngularMomentumServoVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelAngularMomentumVerification)
                .addContainerGap(125, Short.MAX_VALUE))
        );

        jTabbedPaneDiscos.addTab(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getString("jPanelAngularMomentum.TabConstraints.tabTitle"), jPanelAngularMomentum); // NOI18N

        jPanelMomentInertia.setName("jPanelMomentInertia"); // NOI18N
        jPanelMomentInertia.setPreferredSize(new java.awt.Dimension(350, 372));

        jPanelMomentInertiaMaxVelocity.setBorder(javax.swing.BorderFactory.createTitledBorder("Velocidade m√°xima do disco"));
        jPanelMomentInertiaMaxVelocity.setName("jPanelMomentInertiaMaxVelocity"); // NOI18N
        jPanelMomentInertiaMaxVelocity.setPreferredSize(new java.awt.Dimension(330, 126));

        jSliderMomentInertiaMaxVelocity.setMajorTickSpacing(300);
        jSliderMomentInertiaMaxVelocity.setMaximum(1500);
        jSliderMomentInertiaMaxVelocity.setMinimum(300);
        jSliderMomentInertiaMaxVelocity.setMinorTickSpacing(1);
        jSliderMomentInertiaMaxVelocity.setPaintLabels(true);
        jSliderMomentInertiaMaxVelocity.setSnapToTicks(true);
        jSliderMomentInertiaMaxVelocity.setValue(1000);
        jSliderMomentInertiaMaxVelocity.setMinimumSize(new java.awt.Dimension(250, 16));
        jSliderMomentInertiaMaxVelocity.setName("jSliderMomentInertiaMaxVelocity"); // NOI18N
        jSliderMomentInertiaMaxVelocity.setPreferredSize(new java.awt.Dimension(250, 42));
        jSliderMomentInertiaMaxVelocity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderMomentInertiaMaxVelocityStateChanged(evt);
            }
        });

        jFormattedTextFieldMomentInertiaMaxVelocity.setText(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getString("jFormattedTextFieldMomentInertiaMaxVelocity.text")); // NOI18N
        jFormattedTextFieldMomentInertiaMaxVelocity.setMaximumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldMomentInertiaMaxVelocity.setMinimumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldMomentInertiaMaxVelocity.setName("jFormattedTextFieldMomentInertiaMaxVelocity"); // NOI18N
        jFormattedTextFieldMomentInertiaMaxVelocity.setPreferredSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldMomentInertiaMaxVelocity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldMomentInertiaMaxVelocityFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanelMomentInertiaMaxVelocityLayout = new javax.swing.GroupLayout(jPanelMomentInertiaMaxVelocity);
        jPanelMomentInertiaMaxVelocity.setLayout(jPanelMomentInertiaMaxVelocityLayout);
        jPanelMomentInertiaMaxVelocityLayout.setHorizontalGroup(
            jPanelMomentInertiaMaxVelocityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMomentInertiaMaxVelocityLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSliderMomentInertiaMaxVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFormattedTextFieldMomentInertiaMaxVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelMomentInertiaMaxVelocityLayout.setVerticalGroup(
            jPanelMomentInertiaMaxVelocityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMomentInertiaMaxVelocityLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMomentInertiaMaxVelocityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFormattedTextFieldMomentInertiaMaxVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSliderMomentInertiaMaxVelocity, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanelMomentInertiaRelayVelocity.setBorder(javax.swing.BorderFactory.createTitledBorder("Velocidade de travagem electromagn√©tica"));
        jPanelMomentInertiaRelayVelocity.setName("jPanelMomentInertiaRelayVelocity"); // NOI18N
        jPanelMomentInertiaRelayVelocity.setPreferredSize(new java.awt.Dimension(330, 95));

        jSliderMomentInertiaRelayVelocity.setMajorTickSpacing(300);
        jSliderMomentInertiaRelayVelocity.setMaximum(1500);
        jSliderMomentInertiaRelayVelocity.setMinimum(300);
        jSliderMomentInertiaRelayVelocity.setMinorTickSpacing(1);
        jSliderMomentInertiaRelayVelocity.setPaintLabels(true);
        jSliderMomentInertiaRelayVelocity.setSnapToTicks(true);
        jSliderMomentInertiaRelayVelocity.setValue(900);
        jSliderMomentInertiaRelayVelocity.setMinimumSize(new java.awt.Dimension(250, 16));
        jSliderMomentInertiaRelayVelocity.setName("jSliderMomentInertiaRelayVelocity"); // NOI18N
        jSliderMomentInertiaRelayVelocity.setPreferredSize(new java.awt.Dimension(250, 42));
        jSliderMomentInertiaRelayVelocity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderMomentInertiaRelayVelocityStateChanged(evt);
            }
        });

        jFormattedTextFieldMomentInertiaRelayVelocity.setText(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getString("jFormattedTextFieldMomentInertiaRelayVelocity.text")); // NOI18N
        jFormattedTextFieldMomentInertiaRelayVelocity.setMaximumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldMomentInertiaRelayVelocity.setMinimumSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldMomentInertiaRelayVelocity.setName("jFormattedTextFieldMomentInertiaRelayVelocity"); // NOI18N
        jFormattedTextFieldMomentInertiaRelayVelocity.setPreferredSize(new java.awt.Dimension(40, 19));
        jFormattedTextFieldMomentInertiaRelayVelocity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldMomentInertiaRelayVelocityFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanelMomentInertiaRelayVelocityLayout = new javax.swing.GroupLayout(jPanelMomentInertiaRelayVelocity);
        jPanelMomentInertiaRelayVelocity.setLayout(jPanelMomentInertiaRelayVelocityLayout);
        jPanelMomentInertiaRelayVelocityLayout.setHorizontalGroup(
            jPanelMomentInertiaRelayVelocityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMomentInertiaRelayVelocityLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSliderMomentInertiaRelayVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFormattedTextFieldMomentInertiaRelayVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelMomentInertiaRelayVelocityLayout.setVerticalGroup(
            jPanelMomentInertiaRelayVelocityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMomentInertiaRelayVelocityLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMomentInertiaRelayVelocityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFormattedTextFieldMomentInertiaRelayVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSliderMomentInertiaRelayVelocity, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabelMomentInertiaVerification.setForeground(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getColor("jLabelMomentInertiaVerification.foreground")); // NOI18N
        jLabelMomentInertiaVerification.setText(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getString("jLabelMomentInertiaVerification.text")); // NOI18N
        jLabelMomentInertiaVerification.setEnabled(false);
        jLabelMomentInertiaVerification.setName("jLabelMomentInertiaVerification"); // NOI18N

        javax.swing.GroupLayout jPanelMomentInertiaLayout = new javax.swing.GroupLayout(jPanelMomentInertia);
        jPanelMomentInertia.setLayout(jPanelMomentInertiaLayout);
        jPanelMomentInertiaLayout.setHorizontalGroup(
            jPanelMomentInertiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMomentInertiaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMomentInertiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelMomentInertiaMaxVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelMomentInertiaRelayVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMomentInertiaVerification))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelMomentInertiaLayout.setVerticalGroup(
            jPanelMomentInertiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMomentInertiaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelMomentInertiaMaxVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelMomentInertiaRelayVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelMomentInertiaVerification)
                .addContainerGap(125, Short.MAX_VALUE))
        );

        jTabbedPaneDiscos.addTab(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getString("jPanelMomentInertia.TabConstraints.tabTitle"), jPanelMomentInertia); // NOI18N

        add(jTabbedPaneDiscos, java.awt.BorderLayout.CENTER);

        jPanelControlButtons.setName("jPanelControlButtons"); // NOI18N
        jPanelControlButtons.setPreferredSize(new java.awt.Dimension(350, 37));

        jButtonOk.setLabel(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getString("Ok.label")); // NOI18N
        jButtonOk.setName("Ok"); // NOI18N
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jButtonCancel.setLabel(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getString("Cancel.label")); // NOI18N
        jButtonCancel.setName("Cancel"); // NOI18N
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonDefaultConfig.setLabel(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getString("DefaultConfig.label")); // NOI18N
        jButtonDefaultConfig.setName("DefaultConfig"); // NOI18N
        jButtonDefaultConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDefaultConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelControlButtonsLayout = new javax.swing.GroupLayout(jPanelControlButtons);
        jPanelControlButtons.setLayout(jPanelControlButtonsLayout);
        jPanelControlButtonsLayout.setHorizontalGroup(
            jPanelControlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelControlButtonsLayout.createSequentialGroup()
                .addComponent(jButtonOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCancel)
                .addGap(18, 18, 18)
                .addComponent(jButtonDefaultConfig)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanelControlButtonsLayout.setVerticalGroup(
            jPanelControlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelControlButtonsLayout.createSequentialGroup()
                .addGroup(jPanelControlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOk)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonDefaultConfig))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonOk.getAccessibleContext().setAccessibleName(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getString("Ok.AccessibleContext.accessibleName")); // NOI18N
        jButtonCancel.getAccessibleContext().setAccessibleName(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getString("jButtonCancel.AccessibleContext.accessibleName")); // NOI18N
        jButtonDefaultConfig.getAccessibleContext().setAccessibleName(org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DiscosCustomizerPanel.class).getString("jButtonDefaultConfig.AccessibleContext.accessibleName")); // NOI18N

        add(jPanelControlButtons, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

        private void jTabbedPaneDiscosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPaneDiscosStateChanged
            validateScreen();
}//GEN-LAST:event_jTabbedPaneDiscosStateChanged

        private void jFormattedTextFieldAngularMomentumServoVelocityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldAngularMomentumServoVelocityFocusLost
            formattedTextChanged(jSliderAngularMomentumServoVelocity, jFormattedTextFieldAngularMomentumServoVelocity);
            validateScreen();
}//GEN-LAST:event_jFormattedTextFieldAngularMomentumServoVelocityFocusLost

        private void jSliderAngularMomentumServoVelocityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderAngularMomentumServoVelocityStateChanged
            sliderChanged(jSliderAngularMomentumServoVelocity, jFormattedTextFieldAngularMomentumServoVelocity);
            validateScreen();
}//GEN-LAST:event_jSliderAngularMomentumServoVelocityStateChanged

        private void jFormattedTextFieldAngularMomentumMaxVelocityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldAngularMomentumMaxVelocityFocusLost
            formattedTextChanged(jSliderAngularMomentumMaxVelocity, jFormattedTextFieldAngularMomentumMaxVelocity);
            validateScreen();
}//GEN-LAST:event_jFormattedTextFieldAngularMomentumMaxVelocityFocusLost

        private void jSliderAngularMomentumMaxVelocityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderAngularMomentumMaxVelocityStateChanged
            sliderChanged(jSliderAngularMomentumMaxVelocity, jFormattedTextFieldAngularMomentumMaxVelocity);
            validateScreen();
}//GEN-LAST:event_jSliderAngularMomentumMaxVelocityStateChanged

        private void jSliderMomentInertiaMaxVelocityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderMomentInertiaMaxVelocityStateChanged
            sliderChanged(jSliderMomentInertiaMaxVelocity, jFormattedTextFieldMomentInertiaMaxVelocity);
            validateScreen();
}//GEN-LAST:event_jSliderMomentInertiaMaxVelocityStateChanged

        private void jFormattedTextFieldMomentInertiaMaxVelocityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldMomentInertiaMaxVelocityFocusLost
            formattedTextChanged(jSliderMomentInertiaMaxVelocity, jFormattedTextFieldMomentInertiaMaxVelocity);
            validateScreen();
}//GEN-LAST:event_jFormattedTextFieldMomentInertiaMaxVelocityFocusLost

        private void jSliderMomentInertiaRelayVelocityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderMomentInertiaRelayVelocityStateChanged
            sliderChanged(jSliderMomentInertiaRelayVelocity, jFormattedTextFieldMomentInertiaRelayVelocity);
            validateScreen();
}//GEN-LAST:event_jSliderMomentInertiaRelayVelocityStateChanged

        private void jFormattedTextFieldMomentInertiaRelayVelocityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldMomentInertiaRelayVelocityFocusLost
            formattedTextChanged(jSliderMomentInertiaRelayVelocity, jFormattedTextFieldMomentInertiaRelayVelocity);
            validateScreen();
}//GEN-LAST:event_jFormattedTextFieldMomentInertiaRelayVelocityFocusLost

	private void jButtonCancelActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonCancelActionPerformed
		fireICustomizerListenerCanceled();
	}// GEN-LAST:event_jButtonCancelActionPerformed

	private void jButtonDefaultConfigActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonDefaultConfigActionPerformed
		// tab MomentoAngular
		jSliderAngularMomentumMaxVelocity.setValue(1000);
		jFormattedTextFieldAngularMomentumMaxVelocity.setText("1000");
		jSliderAngularMomentumServoVelocity.setValue(900);
		jFormattedTextFieldAngularMomentumServoVelocity.setText("900");

		// tab MomentoInercia
		jSliderMomentInertiaMaxVelocity.setValue(1000);
		jFormattedTextFieldMomentInertiaMaxVelocity.setText("1000");
		jSliderMomentInertiaRelayVelocity.setValue(900);
		jFormattedTextFieldMomentInertiaRelayVelocity.setText("900");

	}// GEN-LAST:event_jButtonDefaultConfigActionPerformed

	private void jButtonOkActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonOkActionPerformed

		int selectCheckBoxCount = 0;
		int nsamples = 0;
		Frequency freq = null;

		// inicializar parametros
		int protocol = 1;
		int servovel = 900;
                int relayvel = 900;
		int maxvel = 1000;
                        
		protocol = jTabbedPaneDiscos.getSelectedIndex() + 1;

		switch (protocol) {
		case 1:
			maxvel = (int) jSliderAngularMomentumMaxVelocity.getValue();
			servovel = (int) jSliderAngularMomentumServoVelocity.getValue();

                        //COMENTEI PARA COMPILAR
			//final int time = (int) Math.ceil((OpticaCustomizerPanel.PROTOCOL_1_WAIT_MS + nsamples * delay) / nsamples);
			//freq = new Frequency(time, Multiplier.mili, FrequencyDefType.SamplingIntervalType);
			break;

		case 2:
			maxvel = (int) jSliderMomentInertiaMaxVelocity.getValue();
			relayvel = (int) jSliderMomentInertiaRelayVelocity.getValue();
                        
                        //COMENTEI PARA COMPILAR
			//nsamples = OpticaCustomizerPanel.NUMBER_OF_SAMPLES_FOR_SERIES;
			//freq = new Frequency(OpticaCustomizerPanel.PROTOCOL_2_SAMPLING_INTERVAL_MS, Multiplier.mili,
			//		FrequencyDefType.SamplingIntervalType);
			break;

		default:
			// TODO protocolo inv√°lido
			return;
		}
                
                //COMENTEI PARA COMPILAR
		acqConfig.setTotalSamples(2500);
		acqConfig.getSelectedHardwareParameter("protocolo").setParameterValue(String.valueOf(protocol));
		acqConfig.getSelectedHardwareParameter("servovel").setParameterValue(String.valueOf(servovel));
		acqConfig.getSelectedHardwareParameter("relayvel").setParameterValue(String.valueOf(relayvel));
		acqConfig.getSelectedHardwareParameter("maxvel").setParameterValue(String.valueOf(maxvel));

                //COMENTEI PARA COMPILAR
		//acqConfig.setSelectedFrequency(freq);

		fireICustomizerListenerDone();
	}// GEN-LAST:event_jButtonOkActionPerformed

	//private void jTabbedPaneDiscosStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jTabbedPaneDiscosStateChanged
	//	validateScreen();
	//}// GEN-LAST:event_jTabbedPaneDiscosStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupCalibration;
    private javax.swing.ButtonGroup buttonGroupEnergyConservationIsPolarization;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonDefaultConfig;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JFormattedTextField jFormattedTextFieldAngularMomentumMaxVelocity;
    private javax.swing.JFormattedTextField jFormattedTextFieldAngularMomentumServoVelocity;
    private javax.swing.JFormattedTextField jFormattedTextFieldMomentInertiaMaxVelocity;
    private javax.swing.JFormattedTextField jFormattedTextFieldMomentInertiaRelayVelocity;
    private javax.swing.JLabel jLabelAngularMomentumVerification;
    private javax.swing.JLabel jLabelMomentInertiaVerification;
    private javax.swing.JPanel jPanelAngularMomentum;
    private javax.swing.JPanel jPanelAngularMomentumMaxVelocity;
    private javax.swing.JPanel jPanelAngularMomentumServoVelocity;
    private javax.swing.JPanel jPanelControlButtons;
    private javax.swing.JPanel jPanelMomentInertia;
    private javax.swing.JPanel jPanelMomentInertiaMaxVelocity;
    private javax.swing.JPanel jPanelMomentInertiaRelayVelocity;
    private javax.swing.JSlider jSliderAngularMomentumMaxVelocity;
    private javax.swing.JSlider jSliderAngularMomentumServoVelocity;
    private javax.swing.JSlider jSliderMomentInertiaMaxVelocity;
    private javax.swing.JSlider jSliderMomentInertiaRelayVelocity;
    private javax.swing.JTabbedPane jTabbedPaneDiscos;
    // End of variables declaration//GEN-END:variables

	/**
	 * Registers ICustomizerListener to receive events.
	 * 
	 * @param listener The listener to register.
	 */
	@Override
	public synchronized void addICustomizerListener(final ICustomizerListener listener) {
		if (listenerList == null) {
			listenerList = new javax.swing.event.EventListenerList();
		}
		listenerList.add(ICustomizerListener.class, listener);
	}

	/**
	 * Removes ICustomizerListener from the list of listeners.
	 * 
	 * @param listener The listener to remove.
	 */
	@Override
	public synchronized void removeICustomizerListener(final ICustomizerListener listener) {
		listenerList.remove(ICustomizerListener.class, listener);
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerCanceled() {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {
				((ICustomizerListener) listeners[i + 1]).canceled();
			}
		}
	}

	/**
	 * Notifies all registered listeners about the event.
	 * 
	 * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
	 */
	private void fireICustomizerListenerDone() {
		if (listenerList == null) {
			return;
		}
		final Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ICustomizerListener.class) {

				((ICustomizerListener) listeners[i + 1]).done();
			}
		}
	}

	private HardwareInfo hardwareInfo = null;
	private HardwareAcquisitionConfig acqConfig = null;

	@Override
	public HardwareAcquisitionConfig getAcquisitionConfig() {
		return acqConfig;
	}

	@Override
	public void setHardwareAcquisitionConfig(final HardwareAcquisitionConfig acqConfig) {
		this.acqConfig = acqConfig;
		if (acqConfig != null) {
			System.out.println("DiscosCustomizer.setHardwareAcquisitionConfig(HardwareAcquisitionConfig  acqConfig)");
			System.out.println("acqConfig: [" + acqConfig + "]");

			// TODO
			// int nsamples = acqConfig.getTotalSamples();
			// sldNumSamples.setValue(nsamples);
			// tfNumSamples.setText("" + nsamples);
			//
			// int freq = (int) acqConfig.getSelectedFrequency().getFrequency();
			// sldFreq.setValue(freq);
			// tfFreq.setText("" + freq);
			//
			// float pos1f =
			// Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("UserPosLow"));
			// int pos1 = (int) Math.floor(pos1f * 1000.F);
			// sldPos1.setValue(pos1);
			// tfPos1.setValue(new Float(pos1f));
			//
			// float pos2f =
			// Float.parseFloat(acqConfig.getSelectedHardwareParameterValue("UserPosHigh"));
			// int pos2 = (int) Math.floor(pos2f * 1000.F);
			// sldPos2.setValue(pos2);
			// tfPos2.setValue(new Float(pos2f));
		}
	}

	@Override
	public void setHardwareInfo(final HardwareInfo hardwareInfo) {
		this.hardwareInfo = hardwareInfo;
	}

	protected HardwareInfo getHardwareInfo() {
		return hardwareInfo;
	}

	@Override
	public javax.swing.JComponent getCustomizerComponent() {
		return this;
	}

	@Override
	public javax.swing.ImageIcon getCustomizerIcon() {
		return new javax.swing.ImageIcon(getClass().getResource(
				"/pt/utl/ist/elab/client/discos/resources/discos_iconified.gif"));
	}

	@Override
	public String getCustomizerTitle() {
		return ReCResourceBundle.findStringOrDefault("discos$rec.exp.discos.customizer.title","discos$rec.exp.discos.customizer.title");
	}

	@Override
	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}

	private void installDecimalFormatter(final JFormattedTextField ftf) {
		/*
		 * DecimalFormat formatDecimal = new DecimalFormat("0.0");
		 * formatDecimal.setDecimalSeparatorAlwaysShown(true);
		 * formatDecimal.setGroupingUsed(false);
		 * formatDecimal.setMinimumFractionDigits(1);
		 * 
		 * NumberFormatter formatter = new NumberFormatter(formatDecimal);
		 * formatter.setCommitsOnValidEdit(true);
		 * formatter.setOverwriteMode(true); formatter.install(ftf);
		 */
	}

	private void installNaturalFormatter(final JFormattedTextField ftf) {
		/*
		 * DecimalFormat naturalFormat = new DecimalFormat("0");
		 * naturalFormat.setDecimalSeparatorAlwaysShown(false);
		 * naturalFormat.setGroupingUsed(false);
		 * naturalFormat.setMinimumFractionDigits(0);
		 * 
		 * NumberFormatter formatter = new NumberFormatter(naturalFormat);
		 * formatter.setCommitsOnValidEdit(true);
		 * formatter.setOverwriteMode(true); formatter.install(ftf);
		 */
	}

	private void initComponentsManual() {
            
		// TODO
		// checkMaxNumSamples();
		// checkMaxTime();
		// checkPosOverlap();

	}

	private void validateScreen() {
		boolean valid = true;
		final int protocol = jTabbedPaneDiscos.getSelectedIndex() + 1;

		switch (protocol) {
		case 1:
			// velocity verification
			if (jSliderAngularMomentumServoVelocity.getValue() <= jSliderAngularMomentumMaxVelocity.getValue()) {
				jLabelAngularMomentumVerification.setEnabled(false);
			} else {
				jLabelAngularMomentumVerification.setEnabled(true);
				valid = false;
			}
			break;
		case 2:
			// velocity verification
			if (jSliderMomentInertiaRelayVelocity.getValue() <= jSliderMomentInertiaMaxVelocity.getValue()) {
				jLabelMomentInertiaVerification.setEnabled(false);
			} else {
				jLabelMomentInertiaVerification.setEnabled(true);
				valid = false;
			}
			break;
                }
		jButtonOk.setEnabled(valid);
	}

	private void sliderMultipliedChanged(final javax.swing.JSlider slider,
			final javax.swing.JFormattedTextField textField) {
		textField.setText(Float.toString((float) slider.getValue() / 10.F));
	}

	private void sliderChanged(final javax.swing.JSlider slider, final javax.swing.JFormattedTextField textField) {
		textField.setText(Integer.toString(slider.getValue()));
	}

	private void formattedMultipliedTextChanged(final javax.swing.JSlider slider,
			final javax.swing.JFormattedTextField textField) {
		String strPos1 = textField.getText();
		if (strPos1.trim().equals("")) {
			return;
		}
		strPos1 = strPos1.replace(",", ".");
		try {
			final int pos1 = (int) (Float.parseFloat(strPos1) * 10.F);
			if (pos1 <= slider.getMaximum() && pos1 >= slider.getMinimum()) {
				// slider.setValue(pos1 - slider.getMinimum());
				slider.setValue(pos1);
			} else {
				textField.setValue(Float.toString((float) slider.getValue() / 10.F));
			}
		} catch (final Exception e) {
			textField.setValue(Float.toString((float) slider.getValue() / 10.F));
		}
	}

	private void formattedTextChanged(final javax.swing.JSlider slider, final javax.swing.JFormattedTextField textField) {
		String strPos1 = textField.getText();
		if (strPos1.trim().equals("")) {
			return;
		}
		strPos1 = strPos1.replace(",", ".");
		try {
			final int pos1 = (int) Integer.parseInt(strPos1);
			if (pos1 <= slider.getMaximum() && pos1 >= slider.getMinimum()) {
				// slider.setValue(pos1 - slider.getMinimum());
				slider.setValue(pos1);
			} else {
				textField.setValue(slider.getValue());
			}
		} catch (final Exception e) {
			textField.setValue(slider.getValue());
		}
	}
}
