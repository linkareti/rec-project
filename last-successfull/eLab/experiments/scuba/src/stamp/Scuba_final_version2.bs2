'{$STAMP BS2}

'Nota que existe um protocolo nas mensagens:
' PC -> STAMP - minúsculas
' STAMP -> PC - maiúsculas

'******* DEFAULT VARIABLES ********

speedCon   	con     16468			'16572/4800 16468/9600 16780/2400 17197/1200
spaceByte	var	byte			'Byte auxiliar (Space)
TX		con	16
RX		con	16
CTS		con	3

'******* END DEFAULT VARIABLES *******


'******* SPECIFIC VARIABLES *******
Pos	data(2)			'ultima posicao do step motor
i	var	word		'contador auxiliar
j	var	word		'contador auxiliar
x	var	word		'posicao a atingir (de 0 a 900 mm) input 0 a 900 em mm, step 10 mm erro 1mm
p	var	word		'posicao absoluta (em voltas step motor)
xini	var	word		'posicao inicial em milimetros
xfin	var	word		'posicao final em milimetros	
dx	var	word		'intervalo entre pontos	(milimetros)
npontos	var	word		'numero de pontos a adquirir (<500, e npontos<(45*(ABS(xfin-xini))
press0	var	word		'valor lido pelo ADC1 no canal 0 (0 -> 2048 <=> 0 -> 10KPa, erro 20 Pa)
press1	var	word		'valor lido pelo ADC1 no canal 1 (0 -> 2048 <=> 0 -> 10KPa, erro 20 Pa)
press2	var	word		'valor lido pelo ADC1 no canal 2 (0 -> 2048 <=> 0 -> 10KPa, erro 20 Pa)
press3	var	word		'valor lido pelo ADC1 no canal 3 (0 -> 2048 <=> 0 -> 10KPa, erro 20 Pa)
config 	var	nib		'nibble de configuração enviado aos ADCs
calib	var	bit		'flag utilizada pra calibrar (=1 calibra, 0 n calibra)
invert	var	bit		'Desce ou sobe consoante xfin>xini
noinvert var 	bit		' Se 1 desce se 0 sobe

convx 	con	45		'Converte posicao em steps
CLK	con	14		'linha de clock
CS1	con	13		'chip select ADC1		
CS2	con	12		'chip select ADC2
dataio	con	15
'******* END SPECIFIC VARIABLES *******


'********************************************
'Configuração inicial

InitConfig:	'rotina de inicializacao
	read Pos,p
	DIRC=%1111
	OUTC=%0000
	gosub FlashLight
	low 4
	i=0


'********************************************
'Reset - retorna à base...
Reset:
	gosub FlashLight 'Pisca as luzinhas em cada reset... assim sabemos que lá está...
	'goto MainWait


'********************************************
'Não foi configurado
Not_Configured:
	low 4				'desliga as luzes
	SerOut TX,speedCon,["CONFIG_START_NOT_DONE",cr]


'********************************************
'Aguarda um ConfigStart pacientemente, enquanto vai informando quem é!
MainWait:
	high CTS
	SerOut TX,speedCon,["ELAB_SCUBA_STAMP_V02",cr]				' Identifica-se
	Serin RX,speedCon,3000,Not_Configured,[wait("cfg "),dec3 xini,spaceByte,dec3 xfin,spaceByte,dec3 npontos,spaceByte,bin1 calib]
'	low CTS ' does not low CTS?
'********************************************
'Ok, configurado! Get Ready...
Configured:

	SerOut TX,speedCon,[cr,"CONFIG_START_ACCEPTED",cr]	'Aceitou a configuracao
	xini=xini/10
	xfin=xfin/10
	pause 200
	high 4					'liga as luzes
	If (calib = 0) then no_calib	        'Faz a calibração se for pedida
	
	debug "A calibrar...",cr,$A
	x = 0
	gosub posi
	For j=1 to 200			'força todos os tubos para a posição zero
		outC=%0001
		pause 2
		outC=%0011
		pause 2
		outC=%0010
		pause 2
		outC=%0110
		pause 2
		outC=%0100
		pause 2
		outC=%1100
		pause 2
		outC=%1000
		pause 2
		outC=%1001
		pause 2
		pause 10
	next
	p=0
	x=100
	gosub posi
	'debug "fim de calibracao", cr, $A
	pause 100
	p = 0
	write pos,p
	OutC = %0000
no_calib:
	x = convx*xini
	gosub posi
	invert=0
	noinvert=1
	if xfin>xini then desce
	invert=1	'sobe
	noinvert=0
desce:
	dx = (convx*(ABS(xfin-xini)))/npontos 
	i=0
	goto AcqLoopEnter

	

'********************************************
'Set... Go!

AcqLoopEnter:
	SerOut TX,speedCon,["STARTED",cr]		' Avisa que vai arrancar a rotina de aquisicao

AcqLoop:
	
	x=((convx*xini) + ((i*dx)*noinvert)-((i*dx)*invert))				'npontos < (1450/xini/2)
	'debug "status: ",dec i," ",dec (10*x)/convx," ",dec dx," ",dec1 noinvert,cr,$A
	gosub posi
	pause 400	
	
	config = %1011
	low CS1							' Activate the ADC.
	shiftout dataio,CLK,lsbfirst,[config\4]			' Send config bits.
	shiftin dataio,CLK,msbpost,[press0\12] 			' Get data bits.						' Deactivate the ADC.
	high CS1
		
	config = %1111						' Mede a pressão
	low CS1 						' Activate the ADC.
	shiftout dataio,CLK,lsbfirst,[config\4]			' Send config bits.
	shiftin dataio,CLK,msbpost,[press1\12] 			' Get data bits.
	high CS1		
	
	config = %1011
	low CS2 						' Activate the ADC.
	shiftout dataio,CLK,lsbfirst,[config\4]			' Send config bits.
	shiftin dataio,CLK,msbpost,[press2\12] 			' Get data bits.						' Deactivate the ADC.
	high CS2
		
	config = %1111						' Mede a pressão
	low CS2 						' Activate the ADC.
	shiftout dataio,CLK,lsbfirst,[config\4]			' Send config bits.
	shiftin dataio,CLK,msbpost,[press3\12] 			' Get data bits.
	high CS2		
	

'	press0=0
'	press1=1024
'	press2=1500
'	press3=2047

	SerOut TX,speedCon,["PRESSOES ",dec4 press0," ",dec4 press1," ",dec4 press2," ",dec4 press3," ",dec3 (10*x)/convx,cr]
	goto Continue

Continue:
	i=i+1
	if i > npontos then StopIt			
	goto AcqLoop

'********************************************
'Stop It!
StopIt:
	goto MainWait


'*********************************************
' Função de calibração dos tubos - Força tudo a zero
Calibration:	
	'debug "A calibrar...",cr,$A
	x = 0
	gosub posi
	For j=1 to 200			'força todos os tubos para a posição zero
		outC=%0001
		pause 2
		outC=%0011
		pause 2
		outC=%0010
		pause 2
		outC=%0110
		pause 2
		outC=%0100
		pause 2
		outC=%1100
		pause 2
		outC=%1000
		pause 2
		outC=%1001
		pause 2
		pause 10
	next
	p=0
	x=100
	gosub posi
	'debug "fim de calibracao", cr, $A
	pause 1000
	p = 0
	write pos,p
	OutC = %0000
return

'***********************************************
' Procedimento posi 
'*************************************************** 
'*	coloca os sensores na altura desejada      *
'***************************************************
posi:
	if x<p then go_up

	go_down:
		for j=1 to x-p
			outC=%0001
			pause 2
			outC=%1001
			pause 2
			outC=%1000
			pause 2
			outC=%1100
			pause 2
			outC=%0100
			pause 2
			outC=%0110
			pause 2
			outC=%0010
			pause 2
			outC=%0011
			pause 2
		next
		p=x
		write pos,p
		OutC = %0000
	return

	go_up:
		for j=1 to p-x
			outC=%0001
			pause 2
			outC=%0011
			pause 2
			outC=%0010
			pause 2
			outC=%0110
			pause 2
			outC=%0100
			pause 2
			outC=%1100
			pause 2
			outC=%1000
			pause 2
			outC=%1001
			pause 2
		next
		p=x
		write Pos,p
		outC = %0000
	return

return

'********************************************
' Função faz piscar 4 vezes o led vermelho para debug
FlashLight:
	low 7
	for i=0 to 4
		out7 = 0
		pause 100
		out7 = 1
		pause 100
	next
	out7 = 0
return
'********************************************