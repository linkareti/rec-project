/*
 * UserAnalysisPanel.java
 *
 * Created on 26 de Junho de 2003, 14:51
 */

package pt.utl.ist.elab.client.aleatorio.displays;

import java.util.Iterator;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.JFileChooser;
import javax.swing.SwingConstants;

/**
 * 
 * @author Pedro Carvalho - LEFT - IST
 */
public class UserAnalysisDisplay extends javax.swing.JPanel implements
		com.linkare.rec.impl.client.experiment.ExpDataDisplay,
		com.linkare.rec.impl.client.experiment.ExpDataModelListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = 178147959330980830L;

	/** Creates new form AleatorioUserAnalysisPanel */
	public UserAnalysisDisplay() {
		initComponents();
		initMyComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()// GEN-BEGIN:initComponents
	{
		java.awt.GridBagConstraints gridBagConstraints;

		fullScrollPane = new javax.swing.JScrollPane();
		fullPanel = new javax.swing.JPanel();
		imageScrollPane = new javax.swing.JScrollPane();
		resultsPanel = new javax.swing.JPanel();
		numberOfSpotsText = new javax.swing.JTextField();
		numberOfDiceText = new javax.swing.JTextField();
		controlsScrollPane = new javax.swing.JScrollPane();
		controlsPanel = new javax.swing.JPanel();
		fileControlsPanel = new javax.swing.JPanel();
		loadButton = new javax.swing.JButton();
		saveButton = new javax.swing.JButton();
		fromExperimentButton = new javax.swing.JButton();
		imageControlsPanel = new javax.swing.JPanel();
		originalButton = new javax.swing.JButton();
		BWButton = new javax.swing.JButton();
		edgesButton = new javax.swing.JButton();
		houghButton = new javax.swing.JButton();
		convolutionButton = new javax.swing.JButton();
		countHoughButton = new javax.swing.JButton();
		countConvolutionButton = new javax.swing.JButton();
		refineHoughCountButton = new javax.swing.JButton();
		refineConvCountButton = new javax.swing.JButton();
		varsScrollPane = new javax.swing.JScrollPane();
		varsPanel = new javax.swing.JPanel();
		BWThresholdSlider = new javax.swing.JSlider();
		houghVarsPanel = new javax.swing.JPanel();
		houghThreshold1Slider = new javax.swing.JSlider();
		houghThreshold2Slider = new javax.swing.JSlider();
		houghThreshold3Slider = new javax.swing.JSlider();
		convolutionThresholdSlider = new javax.swing.JSlider();
		diceVariablesPanel = new javax.swing.JPanel();
		radiusOfSpotSlider = new javax.swing.JSlider();
		widthOfDieSlider = new javax.swing.JSlider();
		numberOfExpectedDiceText = new javax.swing.JTextField();

		setLayout(new java.awt.BorderLayout());

		fullScrollPane.setPreferredSize(new java.awt.Dimension(100, 100));
		fullPanel.setLayout(new java.awt.GridBagLayout());

		imageScrollPane.setPreferredSize(new java.awt.Dimension(500, 240));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		fullPanel.add(imageScrollPane, gridBagConstraints);

		resultsPanel.setLayout(new java.awt.GridBagLayout());

		resultsPanel.setBorder(new javax.swing.border.TitledBorder("Results"));
		resultsPanel.setName("resultsPanel");
		numberOfSpotsText.setColumns(10);
		numberOfSpotsText.setEditable(false);
		numberOfSpotsText.setBorder(new javax.swing.border.TitledBorder("Number of Spots"));
		numberOfSpotsText.setMinimumSize(new java.awt.Dimension(63, 20));
		numberOfSpotsText.setName("numberOfSpotsText");
		resultsPanel.add(numberOfSpotsText, new java.awt.GridBagConstraints());

		numberOfDiceText.setColumns(10);
		numberOfDiceText.setEditable(false);
		numberOfDiceText.setBorder(new javax.swing.border.TitledBorder("Number of Dice"));
		numberOfDiceText.setMinimumSize(new java.awt.Dimension(63, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		resultsPanel.add(numberOfDiceText, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		fullPanel.add(resultsPanel, gridBagConstraints);

		controlsScrollPane.setBorder(new javax.swing.border.TitledBorder(null, "Controls",
				javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
		controlsPanel.setName("controlsPanel");
		fileControlsPanel.setLayout(new java.awt.GridBagLayout());

		fileControlsPanel.setBorder(new javax.swing.border.TitledBorder("File"));
		fileControlsPanel.setName("fileControlsPanel");
		loadButton.setMnemonic('l');
		loadButton.setText("Load");
		loadButton.setName("Threshold");
		loadButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				loadButtonActionPerformedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
		fileControlsPanel.add(loadButton, gridBagConstraints);

		saveButton.setMnemonic('s');
		saveButton.setText("Save");
		saveButton.setName("saveButton");
		saveButton.setEnabled(false);
		saveButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				saveButtonActionPerformedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		fileControlsPanel.add(saveButton, gridBagConstraints);

		fromExperimentButton.setMnemonic('x');
		fromExperimentButton.setText("From Experiment");
		fromExperimentButton.setName("fromExperimentButton");
		fromExperimentButton.setEnabled(false);
		fromExperimentButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				fromExperimentButtonActionPerformedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
		fileControlsPanel.add(fromExperimentButton, gridBagConstraints);

		controlsPanel.add(fileControlsPanel);

		imageControlsPanel.setLayout(new java.awt.GridBagLayout());

		imageControlsPanel.setBorder(new javax.swing.border.TitledBorder("Image"));
		imageControlsPanel.setName("imageControlsPanel");
		originalButton.setMnemonic('o');
		originalButton.setText("Original");
		originalButton.setName("originalButton");
		originalButton.setEnabled(false);
		originalButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				originalButtonActionPerformedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridheight = 2;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
		imageControlsPanel.add(originalButton, gridBagConstraints);

		BWButton.setMnemonic('b');
		BWButton.setText("B&W");
		BWButton.setName("BWButton");
		BWButton.setEnabled(false);
		BWButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				BWButtonActionPerformedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridheight = 2;
		gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
		imageControlsPanel.add(BWButton, gridBagConstraints);

		edgesButton.setMnemonic('e');
		edgesButton.setText("Edges");
		edgesButton.setName("edgesButton");
		edgesButton.setEnabled(false);
		edgesButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				edgesButtonActionPerformedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
		imageControlsPanel.add(edgesButton, gridBagConstraints);

		houghButton.setMnemonic('h');
		houghButton.setText("Hough");
		houghButton.setName("houghButton");
		houghButton.setEnabled(false);
		houghButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				houghButtonActionPerformedHandler(evt);
			}
		});

		imageControlsPanel.add(houghButton, new java.awt.GridBagConstraints());

		convolutionButton.setMnemonic('c');
		convolutionButton.setText("Convolution");
		convolutionButton.setName("convolutionButton");
		convolutionButton.setEnabled(false);
		convolutionButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				convolutionButtonActionPerformedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
		imageControlsPanel.add(convolutionButton, gridBagConstraints);

		countHoughButton.setMnemonic('u');
		countHoughButton.setText("Count Hough");
		countHoughButton.setName("countHoughButton");
		countHoughButton.setEnabled(false);
		countHoughButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				countHoughButtonActionPerformedHandler(evt);
			}
		});

		imageControlsPanel.add(countHoughButton, new java.awt.GridBagConstraints());

		countConvolutionButton.setMnemonic('n');
		countConvolutionButton.setText("Count Convolution");
		countConvolutionButton.setName("countConvolutionButton");
		countConvolutionButton.setEnabled(false);
		countConvolutionButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				countConvolutionActionPerformedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
		imageControlsPanel.add(countConvolutionButton, gridBagConstraints);

		refineHoughCountButton.setMnemonic('f');
		refineHoughCountButton.setText("Refine Count");
		refineHoughCountButton.setName("fullCountButton");
		refineHoughCountButton.setEnabled(false);
		refineHoughCountButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				refineHoughCountButtonActionPerformedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 5;
		gridBagConstraints.gridy = 0;
		imageControlsPanel.add(refineHoughCountButton, gridBagConstraints);

		refineConvCountButton.setMnemonic('i');
		refineConvCountButton.setText("Refine Count");
		refineConvCountButton.setEnabled(false);
		refineConvCountButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				refineConvCountButtonActionPerformedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 5;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
		imageControlsPanel.add(refineConvCountButton, gridBagConstraints);

		controlsPanel.add(imageControlsPanel);

		controlsScrollPane.setViewportView(controlsPanel);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.ipadx = 105;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		fullPanel.add(controlsScrollPane, gridBagConstraints);

		varsPanel.setLayout(new java.awt.GridBagLayout());

		varsPanel.setMinimumSize(new java.awt.Dimension(220, 493));
		varsPanel.setName("varsPanel");
		BWThresholdSlider.setMajorTickSpacing(51);
		BWThresholdSlider.setMaximum(255);
		BWThresholdSlider.setPaintLabels(true);
		BWThresholdSlider.setBorder(new javax.swing.border.TitledBorder("Black&White Threshold: "
				+ String.valueOf(BWThresholdSlider.getValue())));
		BWThresholdSlider.setMinimumSize(new java.awt.Dimension(200, 56));
		BWThresholdSlider.setName("BWSlider");
		BWThresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				BWThresholdSliderStateChangedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
		varsPanel.add(BWThresholdSlider, gridBagConstraints);

		houghVarsPanel.setLayout(new java.awt.GridBagLayout());

		houghVarsPanel.setBorder(new javax.swing.border.TitledBorder("For the Hough Transform"));
		houghVarsPanel.setMinimumSize(new java.awt.Dimension(210, 193));
		houghVarsPanel.setName("houghVarsPanel");
		houghThreshold1Slider.setMajorTickSpacing(51);
		houghThreshold1Slider.setMaximum(255);
		houghThreshold1Slider.setPaintLabels(true);
		houghThreshold1Slider.setBorder(new javax.swing.border.TitledBorder("Threshold1: "
				+ String.valueOf(houghThreshold1Slider.getValue())));
		houghThreshold1Slider.setMinimumSize(new java.awt.Dimension(200, 56));
		houghThreshold1Slider.setName("houghThreshold1Slider");
		houghThreshold1Slider.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				houghThreshold1SliderStateChangedHandler(evt);
			}
		});

		houghVarsPanel.add(houghThreshold1Slider, new java.awt.GridBagConstraints());

		houghThreshold2Slider.setMajorTickSpacing(51);
		houghThreshold2Slider.setMaximum(255);
		houghThreshold2Slider.setPaintLabels(true);
		houghThreshold2Slider.setBorder(new javax.swing.border.TitledBorder("Threshold2: "
				+ String.valueOf(houghThreshold2Slider.getValue())));
		houghThreshold2Slider.setMinimumSize(new java.awt.Dimension(200, 56));
		houghThreshold2Slider.setName("houghThreshold2Slider");
		houghThreshold2Slider.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				houghThreshold2SliderStateChangedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		houghVarsPanel.add(houghThreshold2Slider, gridBagConstraints);

		houghThreshold3Slider.setMajorTickSpacing(51);
		houghThreshold3Slider.setMaximum(255);
		houghThreshold3Slider.setPaintLabels(true);
		houghThreshold3Slider.setBorder(new javax.swing.border.TitledBorder("Threshold3: "
				+ String.valueOf(houghThreshold3Slider.getValue())));
		houghThreshold3Slider.setMinimumSize(new java.awt.Dimension(200, 56));
		houghThreshold3Slider.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				houghThreshold3SliderStateChangedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		houghVarsPanel.add(houghThreshold3Slider, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		varsPanel.add(houghVarsPanel, gridBagConstraints);

		convolutionThresholdSlider.setMajorTickSpacing(51);
		convolutionThresholdSlider.setMaximum(255);
		convolutionThresholdSlider.setPaintLabels(true);
		convolutionThresholdSlider.setBorder(new javax.swing.border.TitledBorder("Convolution Threshold: "
				+ String.valueOf(convolutionThresholdSlider.getValue())));
		convolutionThresholdSlider.setMinimumSize(new java.awt.Dimension(200, 41));
		convolutionThresholdSlider.setName("convolutionThresholdSlider");
		convolutionThresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				convolutionThresholdSliderStateChangedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
		varsPanel.add(convolutionThresholdSlider, gridBagConstraints);

		diceVariablesPanel.setLayout(new java.awt.GridBagLayout());

		diceVariablesPanel.setBorder(new javax.swing.border.TitledBorder("Dice"));
		diceVariablesPanel.setMinimumSize(new java.awt.Dimension(210, 178));
		diceVariablesPanel.setName("diceVariablesPanel");
		radiusOfSpotSlider.setMajorTickSpacing(51);
		radiusOfSpotSlider.setMaximum(255);
		radiusOfSpotSlider.setPaintLabels(true);
		radiusOfSpotSlider.setBorder(new javax.swing.border.TitledBorder("Radius of Spot: "
				+ String.valueOf(radiusOfSpotSlider.getValue())));
		radiusOfSpotSlider.setMinimumSize(new java.awt.Dimension(200, 56));
		radiusOfSpotSlider.setName("radiusOfSpotSlider");
		radiusOfSpotSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				radiusOfSpotSliderStateChangedHandler(evt);
			}
		});

		diceVariablesPanel.add(radiusOfSpotSlider, new java.awt.GridBagConstraints());

		widthOfDieSlider.setMajorTickSpacing(51);
		widthOfDieSlider.setMaximum(255);
		widthOfDieSlider.setPaintLabels(true);
		widthOfDieSlider.setBorder(new javax.swing.border.TitledBorder("Width of Die: "
				+ String.valueOf(widthOfDieSlider.getValue())));
		widthOfDieSlider.setMinimumSize(new java.awt.Dimension(200, 56));
		widthOfDieSlider.setName("widthOfDieSlider");
		widthOfDieSlider.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				widthOfDieSliderStateChangedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		diceVariablesPanel.add(widthOfDieSlider, gridBagConstraints);

		numberOfExpectedDiceText.setBackground(new java.awt.Color(204, 204, 204));
		numberOfExpectedDiceText.setColumns(18);
		numberOfExpectedDiceText.setHorizontalAlignment(SwingConstants.CENTER);
		numberOfExpectedDiceText.setText("14");
		numberOfExpectedDiceText.setToolTipText("Must be lower than " + Integer.MAX_VALUE);
		numberOfExpectedDiceText.setBorder(new javax.swing.border.TitledBorder("Expected Number of Dice"));
		numberOfExpectedDiceText.setMinimumSize(new java.awt.Dimension(198, 41));
		numberOfExpectedDiceText.addKeyListener(new java.awt.event.KeyAdapter() {
			@Override
			public void keyTyped(final java.awt.event.KeyEvent evt) {
				numberOfExpectedDiceTextKeyPressedHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
		diceVariablesPanel.add(numberOfExpectedDiceText, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		varsPanel.add(diceVariablesPanel, gridBagConstraints);

		varsScrollPane.setViewportView(varsPanel);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
		fullPanel.add(varsScrollPane, gridBagConstraints);

		fullScrollPane.setViewportView(fullPanel);

		add(fullScrollPane, java.awt.BorderLayout.CENTER);

	}// GEN-END:initComponents

	private void refineConvCountButtonActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_refineConvCountButtonActionPerformedHandler
		// Add your handling code here:
		imagePanel.refineCount(imagePanel.IMAGE_CONVOLUTION);
		numberOfSpotsText.setText(String.valueOf(imagePanel.getCenterCounter()));
		numberOfDiceText.setText(String.valueOf(imagePanel.getClusterCounter()));
		this.repaint();
	}// GEN-LAST:event_refineConvCountButtonActionPerformedHandler

	private void numberOfExpectedDiceTextKeyPressedHandler(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_numberOfExpectedDiceTextKeyPressedHandler
		// Add your handling code here:
		if (!isNumber(numberOfExpectedDiceText.getText())) {
			numberOfExpectedDiceText.setText("");
		}
	}// GEN-LAST:event_numberOfExpectedDiceTextKeyPressedHandler

	private void houghThreshold3SliderStateChangedHandler(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_houghThreshold3SliderStateChangedHandler
		// Add your handling code here:
		houghThreshold3Slider.setBorder(new javax.swing.border.TitledBorder("Threshold3: "
				+ String.valueOf(houghThreshold3Slider.getValue())));
		// ((javax.swing.border.TitledBorder)houghThreshold3Slider.getBorder()).setTitle("Hough Threshold 3: "
		// + String.valueOf(houghThreshold3Slider.getValue()) );
		BWThreshold = BWThresholdSlider.getValue();
		houghThreshold1 = houghThreshold1Slider.getValue();
		houghThreshold2 = houghThreshold2Slider.getValue();
		houghThreshold3 = houghThreshold3Slider.getValue();
		convolutionThreshold = convolutionThresholdSlider.getValue();
		radiusOfSpot = radiusOfSpotSlider.getValue();
		widthOfDie = widthOfDieSlider.getValue();
		try {
			numberOfExpectedDice = Integer.parseInt(numberOfExpectedDiceText.getText());
		} catch (final NumberFormatException e) {
			numberOfExpectedDice = UserAnalysisDisplay.NUMBER_OF_EXPECTED_DICE;
		}

		if (imagePanel != null) {
			imagePanel.setParams(BWThreshold, radiusOfSpot, houghThreshold1, houghThreshold2, houghThreshold3,
					convolutionThreshold, widthOfDie, numberOfExpectedDice);
		}
	}// GEN-LAST:event_houghThreshold3SliderStateChangedHandler

	private void fromExperimentButtonActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_fromExperimentButtonActionPerformedHandler
		// Add your handling code here:
		if (userAnalysisSingleton.getImage() != null) {
			imagePanel = new AnalysisPanel(userAnalysisSingleton.getImage());
			// imagePanel.setImage(userAnalysisSingleton.getImage());
			imagePanel.setPreferredSize(new java.awt.Dimension(imagePanel.imageWidth, imagePanel.imageHeight));
			imageScrollPane.setViewportView(imagePanel);
			BWThreshold = BWThresholdSlider.getValue();
			houghThreshold1 = houghThreshold1Slider.getValue();
			houghThreshold2 = houghThreshold2Slider.getValue();
			houghThreshold3 = houghThreshold3Slider.getValue();
			convolutionThreshold = convolutionThresholdSlider.getValue();
			radiusOfSpot = radiusOfSpotSlider.getValue();
			widthOfDie = widthOfDieSlider.getValue();
			try {
				numberOfExpectedDice = Integer.parseInt(numberOfExpectedDiceText.getText());
			} catch (final NumberFormatException e) {
				numberOfExpectedDice = UserAnalysisDisplay.NUMBER_OF_EXPECTED_DICE;
			}

			if (imagePanel != null) {
				imagePanel.setParams(BWThreshold, radiusOfSpot, houghThreshold1, houghThreshold2, houghThreshold3,
						convolutionThreshold, widthOfDie, numberOfExpectedDice);
			}
			saveButton.setEnabled(true);
			originalButton.setEnabled(true);
			BWButton.setEnabled(true);
		}// if
		this.repaint();
	}// GEN-LAST:event_fromExperimentButtonActionPerformedHandler

	private void initMyComponents() {
		imagePanel = new AnalysisPanel();
		imagePanel.setImage(userAnalysisSingleton.getImage());
		chooser.setFileFilter(imageFilter);
	}

	private void refineHoughCountButtonActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_refineHoughCountButtonActionPerformedHandler
		// Add your handling code here:
		imagePanel.refineCount(imagePanel.IMAGE_HOUGH);
		numberOfSpotsText.setText(String.valueOf(imagePanel.getCenterCounter()));
		numberOfDiceText.setText(String.valueOf(imagePanel.getClusterCounter()));
		this.repaint();
	}// GEN-LAST:event_refineHoughCountButtonActionPerformedHandler

	private void countConvolutionActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_countConvolutionActionPerformedHandler
		// Add your handling code here:
		imagePanel.convolutionCount();
		numberOfSpotsText.setText(String.valueOf(imagePanel.getConvolutionCenterCounter()));
		// numberOfDiceText.setText(String.valueOf(imagePanel.getClusterCounter()));
		refineConvCountButton.setEnabled(true);
		this.repaint();
	}// GEN-LAST:event_countConvolutionActionPerformedHandler

	private void countHoughButtonActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_countHoughButtonActionPerformedHandler
		// Add your handling code here:
		imagePanel.houghCount();
		numberOfSpotsText.setText(String.valueOf(imagePanel.getHoughCenterCounter()));
		// numberOfDiceText.setText(String.valueOf(imagePanel.getClusterCounter()));
		refineHoughCountButton.setEnabled(true);
		this.repaint();
	}// GEN-LAST:event_countHoughButtonActionPerformedHandler

	private void convolutionButtonActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_convolutionButtonActionPerformedHandler
		// Add your handling code here:
		imagePanel.convolutionTransform();
		countConvolutionButton.setEnabled(true);
		this.repaint();
	}// GEN-LAST:event_convolutionButtonActionPerformedHandler

	private void houghButtonActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_houghButtonActionPerformedHandler
		// Add your handling code here:
		imagePanel.houghTransform();
		countHoughButton.setEnabled(true);
		this.repaint();
	}// GEN-LAST:event_houghButtonActionPerformedHandler

	private void edgesButtonActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_edgesButtonActionPerformedHandler
		// Add your handling code here:
		imagePanel.edgeDetector();
		houghButton.setEnabled(true);
		this.repaint();
	}// GEN-LAST:event_edgesButtonActionPerformedHandler

	private void BWButtonActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_BWButtonActionPerformedHandler
		// Add your handling code here:
		imagePanel.conversionBW();
		edgesButton.setEnabled(true);
		convolutionButton.setEnabled(true);
		this.repaint();
	}// GEN-LAST:event_BWButtonActionPerformedHandler

	private void originalButtonActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_originalButtonActionPerformedHandler
		// Add your handling code here:
		imagePanel.setImage(imagePanel.getImage(AnalysisPanel.IMAGE_ORIGINAL));
		BWThreshold = BWThresholdSlider.getValue();
		houghThreshold1 = houghThreshold1Slider.getValue();
		houghThreshold2 = houghThreshold2Slider.getValue();
		houghThreshold3 = houghThreshold3Slider.getValue();
		convolutionThreshold = convolutionThresholdSlider.getValue();
		radiusOfSpot = radiusOfSpotSlider.getValue();
		widthOfDie = widthOfDieSlider.getValue();
		try {
			numberOfExpectedDice = Integer.parseInt(numberOfExpectedDiceText.getText());
		} catch (final NumberFormatException e) {
			numberOfExpectedDice = UserAnalysisDisplay.NUMBER_OF_EXPECTED_DICE;
		}

		if (imagePanel != null) {
			imagePanel.setParams(BWThreshold, radiusOfSpot, houghThreshold1, houghThreshold2, houghThreshold3,
					convolutionThreshold, widthOfDie, numberOfExpectedDice);
		}
		this.repaint();
	}// GEN-LAST:event_originalButtonActionPerformedHandler

	private void saveButtonActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveButtonActionPerformedHandler
		// Add your handling code here:
		chooser.setFileFilter(jpegImageFilter);
		final javax.swing.JSlider jpegQualitySlider = new javax.swing.JSlider();
		jpegQualitySlider.setValue(75);
		jpegQualitySlider.setMaximum(100);
		jpegQualitySlider.setPaintLabels(true);
		jpegQualitySlider.setBorder(new javax.swing.border.TitledBorder(null, "Small File <--JPEG Quality--> Better",
				javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

		chooser.setAccessory(jpegQualitySlider);
		int returnVal = chooser.showSaveDialog(this);// more stuff to do here!!!
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			java.io.File file = chooser.getSelectedFile();
			if (file.exists()) {
				int act = javax.swing.JOptionPane.showConfirmDialog(null, file.toString() + " exists.  Overwrite?");

				while (act == javax.swing.JOptionPane.NO_OPTION) {
					returnVal = chooser.showSaveDialog(null);
					act = javax.swing.JOptionPane.showConfirmDialog(null, file.toString() + " exists.  Overwrite?");
				}

				if (act == javax.swing.JOptionPane.CANCEL_OPTION) {
					file = null;
				} else if (act == javax.swing.JOptionPane.OK_OPTION) {
					saveImageToFile(file.getAbsolutePath(), imagePanel.getImage(imagePanel.getCurrentImageType()),
							jpegQualitySlider.getValue());
				}
			} else {
				final java.awt.Image imageToSave = imagePanel.getImage(imagePanel.getCurrentImageType());
				final java.awt.MediaTracker tracker = new java.awt.MediaTracker(this);
				tracker.addImage(imageToSave, 0);
				try {
					tracker.waitForAll();
				} catch (final InterruptedException e) {
					e.printStackTrace();
					System.exit(1);
				}
				System.out.println("Saving image with dims:" + imageToSave.getWidth(this) + "x"
						+ imageToSave.getHeight(this));
				if (file.getAbsolutePath().indexOf(".jpg") == -1) {
					saveImageToFile(file.getAbsolutePath() + ".jpg", imageToSave, jpegQualitySlider.getValue());
				} else {
					saveImageToFile(file.getAbsolutePath(), imageToSave, jpegQualitySlider.getValue());
				}
			}// else
		}

		this.repaint();
	}// GEN-LAST:event_saveButtonActionPerformedHandler

	private void loadButtonActionPerformedHandler(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_loadButtonActionPerformedHandler
		// Add your handling code here:
		chooser.setFileFilter(imageFilter);
		chooser.showOpenDialog(this);
		final java.io.File imageFile = chooser.getSelectedFile();

		if (imageFile != null) {
			final java.awt.Image image = openImage(imageFile.getAbsolutePath());
			imagePanel = new AnalysisPanel(image);

			// imagePanel.setImage(image);
			while (image.getWidth(imagePanel) < 0) {
				try {
					Thread.currentThread().sleep(50);
				} catch (final InterruptedException e) {
				}
			}

			System.out.println("Imagem lida!\nwidth:" + image.getWidth(imagePanel) + ", height:"
					+ image.getHeight(imagePanel));
			imagePanel
					.setPreferredSize(new java.awt.Dimension(image.getWidth(imagePanel), image.getHeight(imagePanel)));
			imageScrollPane.setViewportView(imagePanel);
			BWThreshold = BWThresholdSlider.getValue();
			houghThreshold1 = houghThreshold1Slider.getValue();
			houghThreshold2 = houghThreshold2Slider.getValue();
			houghThreshold3 = houghThreshold3Slider.getValue();
			convolutionThreshold = convolutionThresholdSlider.getValue();
			radiusOfSpot = radiusOfSpotSlider.getValue();
			widthOfDie = widthOfDieSlider.getValue();
			try {
				numberOfExpectedDice = Integer.parseInt(numberOfExpectedDiceText.getText());
			} catch (final NumberFormatException e) {
				numberOfExpectedDice = UserAnalysisDisplay.NUMBER_OF_EXPECTED_DICE;
			}

			if (imagePanel != null) {
				imagePanel.setParams(BWThreshold, radiusOfSpot, houghThreshold1, houghThreshold2, houghThreshold3,
						convolutionThreshold, widthOfDie, numberOfExpectedDice);
				// imageViewingPanel.add(imagePanel,java.awt.BorderLayout.CENTER);
				// imageScrollPane.setViewportView(imagePanel);
				// int[] dimIm = imagePanel.imageSize();
			}

			// imagePanel.setSize(new java.awt.Dimension(dimIm[0], dimIm[1]));

			saveButton.setEnabled(true);
			originalButton.setEnabled(true);
			BWButton.setEnabled(true);
			edgesButton.setEnabled(false);
			houghButton.setEnabled(false);
			countHoughButton.setEnabled(false);
			refineConvCountButton.setEnabled(false);
			refineHoughCountButton.setEnabled(false);
			convolutionButton.setEnabled(false);
			countConvolutionButton.setEnabled(false);
			this.repaint();
		}
	}// GEN-LAST:event_loadButtonActionPerformedHandler

	private void widthOfDieSliderStateChangedHandler(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_widthOfDieSliderStateChangedHandler
		// Add your handling code here:
		// widthOfDieSlider.setBorder(null);
		widthOfDieSlider.setBorder(new javax.swing.border.TitledBorder("Width of Die: "
				+ String.valueOf(widthOfDieSlider.getValue())));
		// ((javax.swing.border.TitledBorder)widthOfDieSlider.getBorder()).setTitle("WidthOfDie: "
		// + String.valueOf(widthOfDieSlider.getValue()) );
		BWThreshold = BWThresholdSlider.getValue();
		houghThreshold1 = houghThreshold1Slider.getValue();
		houghThreshold2 = houghThreshold2Slider.getValue();
		houghThreshold3 = houghThreshold3Slider.getValue();
		convolutionThreshold = convolutionThresholdSlider.getValue();
		radiusOfSpot = radiusOfSpotSlider.getValue();
		widthOfDie = widthOfDieSlider.getValue();
		try {
			numberOfExpectedDice = Integer.parseInt(numberOfExpectedDiceText.getText());
		} catch (final NumberFormatException e) {
			numberOfExpectedDice = UserAnalysisDisplay.NUMBER_OF_EXPECTED_DICE;
		}

		if (imagePanel != null) {
			imagePanel.setParams(BWThreshold, radiusOfSpot, houghThreshold1, houghThreshold2, houghThreshold3,
					convolutionThreshold, widthOfDie, numberOfExpectedDice);
		}
	}// GEN-LAST:event_widthOfDieSliderStateChangedHandler

	private void radiusOfSpotSliderStateChangedHandler(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_radiusOfSpotSliderStateChangedHandler
		// Add your handling code here:
		// radiusOfSpotSlider.setBorder(null);
		radiusOfSpotSlider.setBorder(new javax.swing.border.TitledBorder("Radius of Spot: "
				+ String.valueOf(radiusOfSpotSlider.getValue())));
		// ((javax.swing.border.TitledBorder)radiusOfSpotSlider.getBorder()).setTitle("Radius of Spot: "
		// + String.valueOf(radiusOfSpotSlider.getValue()) );
		BWThreshold = BWThresholdSlider.getValue();
		houghThreshold1 = houghThreshold1Slider.getValue();
		houghThreshold2 = houghThreshold2Slider.getValue();
		houghThreshold3 = houghThreshold3Slider.getValue();
		convolutionThreshold = convolutionThresholdSlider.getValue();
		radiusOfSpot = radiusOfSpotSlider.getValue();
		widthOfDie = widthOfDieSlider.getValue();
		try {
			numberOfExpectedDice = Integer.parseInt(numberOfExpectedDiceText.getText());
		} catch (final NumberFormatException e) {
			numberOfExpectedDice = UserAnalysisDisplay.NUMBER_OF_EXPECTED_DICE;
		}

		if (imagePanel != null) {
			imagePanel.setParams(BWThreshold, radiusOfSpot, houghThreshold1, houghThreshold2, houghThreshold3,
					convolutionThreshold, widthOfDie, numberOfExpectedDice);
		}
	}// GEN-LAST:event_radiusOfSpotSliderStateChangedHandler

	private void convolutionThresholdSliderStateChangedHandler(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_convolutionThresholdSliderStateChangedHandler
		// Add your handling code here:
		// convolutionThresholdSlider.setBorder(null);
		convolutionThresholdSlider.setBorder(new javax.swing.border.TitledBorder("Convolution Threshold: "
				+ String.valueOf(convolutionThresholdSlider.getValue())));
		// ((javax.swing.border.TitledBorder)convolutionThresholdSlider.getBorder()).setTitle("Convolution Threshold: "
		// + String.valueOf(convolutionThresholdSlider.getValue()) );
		BWThreshold = BWThresholdSlider.getValue();
		houghThreshold1 = houghThreshold1Slider.getValue();
		houghThreshold2 = houghThreshold2Slider.getValue();
		houghThreshold3 = houghThreshold3Slider.getValue();
		convolutionThreshold = convolutionThresholdSlider.getValue();
		radiusOfSpot = radiusOfSpotSlider.getValue();
		widthOfDie = widthOfDieSlider.getValue();
		try {
			numberOfExpectedDice = Integer.parseInt(numberOfExpectedDiceText.getText());
		} catch (final NumberFormatException e) {
			numberOfExpectedDice = UserAnalysisDisplay.NUMBER_OF_EXPECTED_DICE;
		}

		if (imagePanel != null) {
			imagePanel.setParams(BWThreshold, radiusOfSpot, houghThreshold1, houghThreshold2, houghThreshold3,
					convolutionThreshold, widthOfDie, numberOfExpectedDice);
		}
	}// GEN-LAST:event_convolutionThresholdSliderStateChangedHandler

	private void houghThreshold2SliderStateChangedHandler(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_houghThreshold2SliderStateChangedHandler
		// Add your handling code here:
		// houghThreshold2Slider.setBorder(null);
		houghThreshold2Slider.setBorder(new javax.swing.border.TitledBorder("Threshold2: "
				+ String.valueOf(houghThreshold2Slider.getValue())));
		// ((javax.swing.border.TitledBorder)houghThreshold2Slider.getBorder()).setTitle("Hough Threshold 2: "
		// + String.valueOf(houghThreshold2Slider.getValue()) );
		BWThreshold = BWThresholdSlider.getValue();
		houghThreshold1 = houghThreshold1Slider.getValue();
		houghThreshold2 = houghThreshold2Slider.getValue();
		houghThreshold3 = houghThreshold3Slider.getValue();
		convolutionThreshold = convolutionThresholdSlider.getValue();
		radiusOfSpot = radiusOfSpotSlider.getValue();
		widthOfDie = widthOfDieSlider.getValue();
		try {
			numberOfExpectedDice = Integer.parseInt(numberOfExpectedDiceText.getText());
		} catch (final NumberFormatException e) {
			numberOfExpectedDice = UserAnalysisDisplay.NUMBER_OF_EXPECTED_DICE;
		}

		if (imagePanel != null) {
			imagePanel.setParams(BWThreshold, radiusOfSpot, houghThreshold1, houghThreshold2, houghThreshold3,
					convolutionThreshold, widthOfDie, numberOfExpectedDice);
		}
	}// GEN-LAST:event_houghThreshold2SliderStateChangedHandler

	private void houghThreshold1SliderStateChangedHandler(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_houghThreshold1SliderStateChangedHandler
		// Add your handling code here:
		// houghThreshold1Slider.setBorder(null);
		houghThreshold1Slider.setBorder(new javax.swing.border.TitledBorder("Threshold1: "
				+ String.valueOf(houghThreshold1Slider.getValue())));
		// ((javax.swing.border.TitledBorder)houghThreshold1Slider.getBorder()).setTitle("Hough Threshold 1: "
		// + String.valueOf(houghThreshold1Slider.getValue()) );
		BWThreshold = BWThresholdSlider.getValue();
		houghThreshold1 = houghThreshold1Slider.getValue();
		houghThreshold2 = houghThreshold2Slider.getValue();
		houghThreshold3 = houghThreshold3Slider.getValue();
		convolutionThreshold = convolutionThresholdSlider.getValue();
		radiusOfSpot = radiusOfSpotSlider.getValue();
		widthOfDie = widthOfDieSlider.getValue();
		try {
			numberOfExpectedDice = Integer.parseInt(numberOfExpectedDiceText.getText());
		} catch (final NumberFormatException e) {
			numberOfExpectedDice = UserAnalysisDisplay.NUMBER_OF_EXPECTED_DICE;
		}

		if (imagePanel != null) {
			imagePanel.setParams(BWThreshold, radiusOfSpot, houghThreshold1, houghThreshold2, houghThreshold3,
					convolutionThreshold, widthOfDie, numberOfExpectedDice);
		}
	}// GEN-LAST:event_houghThreshold1SliderStateChangedHandler

	private void BWThresholdSliderStateChangedHandler(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_BWThresholdSliderStateChangedHandler
		// Add your handling code here:
		// BWThresholdSlider.setBorder(null);
		BWThresholdSlider.setBorder(new javax.swing.border.TitledBorder("Black&White Threshold: "
				+ String.valueOf(BWThresholdSlider.getValue())));
		// ((javax.swing.border.TitledBorder)BWThresholdSlider.getBorder()).setTitle("Black&White Threshold: "
		// + String.valueOf(BWThresholdSlider.getValue()) );
		BWThreshold = BWThresholdSlider.getValue();
		houghThreshold1 = houghThreshold1Slider.getValue();
		houghThreshold2 = houghThreshold2Slider.getValue();
		houghThreshold3 = houghThreshold3Slider.getValue();
		convolutionThreshold = convolutionThresholdSlider.getValue();
		radiusOfSpot = radiusOfSpotSlider.getValue();
		widthOfDie = widthOfDieSlider.getValue();
		try {
			numberOfExpectedDice = Integer.parseInt(numberOfExpectedDiceText.getText());
		} catch (final NumberFormatException e) {
			numberOfExpectedDice = UserAnalysisDisplay.NUMBER_OF_EXPECTED_DICE;
		}

		if (imagePanel != null) {
			imagePanel.setParams(BWThreshold, radiusOfSpot, houghThreshold1, houghThreshold2, houghThreshold3,
					convolutionThreshold, widthOfDie, numberOfExpectedDice);
		}
	}// GEN-LAST:event_BWThresholdSliderStateChangedHandler

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton BWButton;
	private javax.swing.JSlider BWThresholdSlider;
	private javax.swing.JPanel controlsPanel;
	private javax.swing.JScrollPane controlsScrollPane;
	private javax.swing.JButton convolutionButton;
	private javax.swing.JSlider convolutionThresholdSlider;
	private javax.swing.JButton countConvolutionButton;
	private javax.swing.JButton countHoughButton;
	private javax.swing.JPanel diceVariablesPanel;
	private javax.swing.JButton edgesButton;
	private javax.swing.JPanel fileControlsPanel;
	private javax.swing.JButton fromExperimentButton;
	private javax.swing.JPanel fullPanel;
	private javax.swing.JScrollPane fullScrollPane;
	private javax.swing.JButton houghButton;
	private javax.swing.JSlider houghThreshold1Slider;
	private javax.swing.JSlider houghThreshold2Slider;
	private javax.swing.JSlider houghThreshold3Slider;
	private javax.swing.JPanel houghVarsPanel;
	private javax.swing.JPanel imageControlsPanel;
	private javax.swing.JScrollPane imageScrollPane;
	private javax.swing.JButton loadButton;
	private javax.swing.JTextField numberOfDiceText;
	private javax.swing.JTextField numberOfExpectedDiceText;
	private javax.swing.JTextField numberOfSpotsText;
	private javax.swing.JButton originalButton;
	private javax.swing.JSlider radiusOfSpotSlider;
	private javax.swing.JButton refineConvCountButton;
	private javax.swing.JButton refineHoughCountButton;
	private javax.swing.JPanel resultsPanel;
	private javax.swing.JButton saveButton;
	private javax.swing.JPanel varsPanel;
	private javax.swing.JScrollPane varsScrollPane;
	private javax.swing.JSlider widthOfDieSlider;
	// End of variables declaration//GEN-END:variables

	// My Vars

	private com.linkare.rec.impl.client.experiment.ExpDataModel model;
	private final String name = "User Image Analysis";
	private final javax.swing.Icon icon = new javax.swing.ImageIcon(getClass().getResource(
			"/pt/utl/ist/elab/client/aleatorio/resources/AleatorioIcon.gif"));
	/** Filter for the file chooser, so we only load known images */
	private final pt.utl.ist.elab.client.aleatorio.utils.ImageFilter imageFilter = new pt.utl.ist.elab.client.aleatorio.utils.ImageFilter();
	private final pt.utl.ist.elab.client.aleatorio.utils.JPEGImageFilter jpegImageFilter = new pt.utl.ist.elab.client.aleatorio.utils.JPEGImageFilter();
	private final javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();

	private AnalysisPanel imagePanel = null;
	private final pt.utl.ist.elab.client.aleatorio.utils.StorageSingleton userAnalysisSingleton = pt.utl.ist.elab.client.aleatorio.utils.StorageSingleton
			.getSingleton();

	private byte[] configurationByteArray;
	private int[] configurationValues;

	private int BWThreshold;
	private int houghThreshold1;
	private int houghThreshold2;
	private int houghThreshold3;
	private int convolutionThreshold;
	private int radiusOfSpot;
	private int widthOfDie;
	private int numberOfExpectedDice;
	private static final int NUMBER_OF_EXPECTED_DICE = 14;

	private static String UI_CLIENT_LOGGER = "ReC.baseUI";
	static {
		final Logger l = LogManager.getLogManager().getLogger(UserAnalysisDisplay.UI_CLIENT_LOGGER);
		if (l == null) {
			LogManager.getLogManager().addLogger(Logger.getLogger(UserAnalysisDisplay.UI_CLIENT_LOGGER));
		}
	}

	/**
	 * ExpDataDisplay Implementation
	 */
	public void setExpDataModel(final com.linkare.rec.impl.client.experiment.ExpDataModel model) {
		if (model != null) {
			fromExperimentButton.setEnabled(true);
		}

		if (this.model != null) {
			model.removeExpDataModelListener(this);
		}

		this.model = model;

		if (this.model != null) {
			this.model.addExpDataModelListener(this);
		}

	}// setExpDataModel(ExpDataModel model)

	public javax.swing.JComponent getDisplay() {
		return this;
	}// getDisplay()

	public String getName() {
		return name;
	}// getName()

	public javax.swing.Icon getIcon() {
		return icon;
	}// getIcon()

	public javax.swing.JMenuBar getMenuBar() {
		return null;
	}// getMenuBar()

	public javax.swing.JToolBar getToolBar() {
		return null;
	}// getToolBar()

	/**
	 * ExpDataModelListener implementation
	 */

	public void newSamples(final com.linkare.rec.impl.client.experiment.NewExpDataEvent evt) {
		for (int i = evt.getSamplesStartIndex(); i <= evt.getSamplesEndIndex(); i++) {
			if (model.getValueAt(i, model.getChannelIndex("Configuration")) != null) {
				// System.out.println("Configuring!");
				configurationByteArray = model.getValueAt(i, model.getChannelIndex("Configuration")).getValue()
						.getByteArrayValue().getData();
				configurationValues = byteArray2IntArray(configurationByteArray);

				BWThresholdSlider.setValue(configurationValues[0]);
				radiusOfSpotSlider.setValue(configurationValues[1]);
				houghThreshold1Slider.setValue(configurationValues[2]);
				houghThreshold2Slider.setValue(configurationValues[3]);
				houghThreshold3Slider.setValue(configurationValues[4]);
				convolutionThresholdSlider.setValue(configurationValues[5]);
				widthOfDieSlider.setValue(configurationValues[6]);
				numberOfExpectedDiceText.setText(String.valueOf(configurationValues[7]));
			}// if__configuration
		}
	}// newSamples(NewExpDataEvent evt)

	public void dataModelStoped() {
	}// dataModelStoped()

	public void dataModelRunning() {
	}// dataModelRunning()

	public void headerAvailable(final com.linkare.rec.data.config.HardwareAcquisitionConfig header) {
	}// headerAvailable(HardwareAcquisitionConfig header)

	/**
	 * Utilities
	 * 
	 * @param filename
	 * @return
	 */

	public java.awt.Image openImage(final String filename) {
		final java.awt.Toolkit toolkit = java.awt.Toolkit.getDefaultToolkit();
		return (toolkit.getImage(filename));
	}

	private void saveImageToFile(final String fileName, final java.awt.Image image, final int quality) {
		try {
			final java.awt.image.BufferedImage bImage = new java.awt.image.BufferedImage(imagePanel.getWidth(),
					imagePanel.getHeight(), java.awt.image.BufferedImage.TYPE_4BYTE_ABGR);

			// Copy from Image to BufferedImage
			final java.awt.Graphics2D g = (java.awt.Graphics2D) bImage.getGraphics();
			g.drawImage(image, 0, 0, this);
			g.dispose();

			final java.io.FileOutputStream out = new java.io.FileOutputStream(fileName);
			Iterator<ImageWriter> imageWritersByFormatName = ImageIO.getImageWritersByFormatName("jpeg");
			ImageWriter writer = imageWritersByFormatName.next();

			ImageWriteParam writeParam = writer.getDefaultWriteParam();
			writeParam.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
			writeParam.setCompressionQuality((float) ((float) quality / 100.));

			writer.setOutput(ImageIO.createImageOutputStream(out));
			writer.write(bImage);
			
			out.flush();
			out.close();
		} catch (final Exception e) {
			e.printStackTrace();
		}
	}

	private boolean isNumber(final String numberString) {
		int numberInt;
		if (numberString != "") {
			try {
				numberInt = Integer.parseInt(numberString);
			} catch (final NumberFormatException e) {
				return false;
			}
		}// if
		return true;
	}// isNumber

	private int[] byteArray2IntArray(final byte[] byteArray) {
		final int[] temp = new int[byteArray.length / 4];

		for (int index = 0; index < temp.length; index++) {
			temp[index] = (int) (byteArray[4 * index] & 0xff) << 24;
			temp[index] += (int) (byteArray[4 * index + 1] & 0xff) << 16;
			temp[index] += (int) (byteArray[4 * index + 2] & 0xff) << 8;
			temp[index] += (int) (byteArray[4 * index + 3] & 0xff);
		}
		return temp;
	}

	public void dataModelWaiting() {
	}

	public void dataModelStarted() {
	}

	public void dataModelStartedNoData() {
	}

	public void dataModelEnded() {
	}

	public void dataModelError() {
	}

	// byteArray2IntArray(byte[] byteArray)
}
