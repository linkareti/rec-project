'{$STAMP BS2}

CS 		con	13 			' Selecciona o chip;	12->ADC1 ; 13->ADC2
CLK 		con 	14 			' Clock Para os ADCs.
DIO_n 		con 	15 			' Pino de I/O para os dados.
config 		var 	nib 			' Configuração para o ADC.
AD 		var 	word 			' Variável para guardar ois 12 bits do ADC.
startB 		var 	config.bit0 		' Start bit para o ADC.
sglDif 		var 	config.bit1 		' Modo monocanal or diferencial.
chsel 		var 	config.bit2 		' Selecção do canal do ADC.
msbf 		var 	config.bit3 		' Lowbit para terminar a transferência.
alt		var	word			' Guarda a altura da massa do Pendulo em mm. O input pode ir de 0 a 50
i		var 	word			' Contador auxiliar
teta		var 	byte			' Guarda a amplitude inicial do pendulo. vai de zero a 135.
sk		var	byte			' byte auxiliar (skip)
npontos		var	word			' número de pontos a adquirir 
freq		var 	word			' frequencia de sampling de 58Hz quando =0 e até...

CTS		con	3
TX		con	16
RX		con	16
speed   	con     16468			'16572/4800 16468/9600 16780/2400 17197/1200

low 	CTS
gosub Pisca
high 	CS 					' Deactivate ADC to begin.
high 	DIO_n					' Set data pin for first start bit.
chsel = 0 

again: 							
	gosub Amplitude
	gosub Altura
	debug "alt: ",DEC alt," ang: ",DEC teta,cr 	' Display data.
	high CTS
	SerOut TX,speed,["ready",$D,$A]
	Serin RX,speed,7000,noASW,[wait("relay "),dec2 alt,sk,dec3 teta,sk,dec4 npontos,sk, dec2 freq]
	pause 10
	gosub Amplitude
	pause 20
	gosub Altura
	pause 20					'
	gosub converte 					' Get data from ADC.
	goto again 					' Endless loop.
:noASW
	goto again

converte:
 
	config = config | %1011 				' Set all bits except oddSign.
	gosub Arranca
	For i = 0 to npontos
		low CS 						' Activate the ADC.
		shiftout DIO_n,CLK,lsbfirst,[config\4]		' Send config bits.
		shiftin DIO_n,CLK,msbpost,[AD\12] 		' Get data bits.
		high CS						' Deactivate the ADC.
		debug DEC AD,sk,DEC i,cr					' devolve os valores
		next						
	return 							' Return to program.

'Função para controlar a altura do pendulo

Altura:

	DIR8=1
	low 8
	For i = 0 to 20
		PULSOUT 8,720+((alt*616)/50)
  		Pause 20
		next
	low 8
	return


' Poe o pendulo na posição inicial
Amplitude:

	DIR9=1
	low 9
	For i = 0 to 20
		PULSOUT 9,730+teta
  		Pause 20
		next
	low 9
	return

'liberta o pendulo da posicao inicial

Arranca:

	DIR9=1
	low 9
	For i = 0 to 20
		PULSOUT 9,430
  		Pause 20
		next
	low 9
	return


' Função faz piscar 4 vezes o led vermelho para debug

Pisca:
	low 7
	for i=0 to 4
		out7 = 0
		pause 400
		out7 = 1
		pause 400
		next
	return
	


