<?xml version="1.0" encoding="UTF-8"?>
<!--
		=======================================================
		============ 2009/03/29 Build Rec - Elab ==============
		=======================================================
	-->

<project name="ReC - eLab build system" default="help" basedir=".">
	<description>
		Compile, package, sign and run the project ReC and each of the experiments.
	</description>

	<property file="build.properties" description="general properties for building project" />

	<!--
		=====================================================
		====================== Generic ======================
		=====================================================
	-->

	<target name="help" description="General usage of the build system, it shows a description of each target, and how to use them">
		<echo>ReC - eBab build system</echo>
	</target>

	<!--
		=====================================================
		==================== REC Common =====================
		=====================================================
	-->

	<property name="rec.common.build.dir" value="${build.dir}/rec/common">
	</property>
	<property name="rec.common.dist.dir" value="${dist.dir}/rec/common">
	</property>

	<property name="rec.common.src.java.dir" value="rec/src/java/common">
	</property>

	<property name="rec.lib.dir" value="rec/lib">
	</property>
	<property name="rec.lib.java.common.dir" value="${rec.lib.dir}/java/common/">
	</property>
	<property name="rec.lib.compile.common.dir" value="${rec.lib.dir}/compile/common/">
	</property>

	<path id="rec.compile.common.classpath">
		<fileset dir="${rec.lib.compile.common.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rec.lib.java.common.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="clean.rec.common" description="Delete the build folder containing the common shared compiled code.">
		<delete dir="${rec.common.build.dir}" />
	</target>

	<target name="compile.rec.common" description="Compile the common part of the ReC project independently.">
		<mkdir dir="${rec.common.build.dir}" />
		<javac srcdir="${rec.common.src.java.dir}" destdir="${rec.common.build.dir}" encoding="${javac.encoding}" debug="${javac.debug}" optimize="${javac.optimize}" source="${javac.sourcelevel}" target="${javac.sourcelevel}" deprecation="yes">
			<include name="**/*.java" />
			<classpath refid="rec.compile.common.classpath" />
			<compilerarg value="-Xlint:unchecked, cast, -serial" />
		</javac>
	</target>

	<target name="jar.rec.common" description="Create a jar with the common part of the ReC project.">
		<mkdir dir="${rec.common.dist.dir}" />
		<jar destfile="${rec.common.dist.dir}/ReCCommon.jar" basedir="${rec.common.build.dir}">
			<include name="**/*.class" />
		</jar>
	</target>

	<target name="sign.rec.common">
		<signjar destDir="${rec.common.dist.dir}" keystore="${keystore}" keypass="${keypass}" storepass="${storepass}" alias="${alias}">
			<fileset dir="${rec.common.dist.dir}" includes="ReCCommon.jar" excludes="*_sig.jar" />
			<globmapper from="*.jar" to="*_sig.jar" />
		</signjar>
	</target>

	<target name="dist.rec.common" depends="clean.rec.common,compile.rec.common,jar.rec.common,sign.rec.common">

	</target>

	<!--
		=====================================================
		==================== ReC Client =====================
		=====================================================
	-->

	<property name="rec.client.build.dir" value="${build.dir}/rec/client">
	</property>
	<property name="rec.client.dist.dir" value="${dist.dir}/rec/client">
	</property>

	<property name="rec.client.src.java.dir" value="rec/src/java/client">
	</property>
	<property name="rec.ui.src.java.dir" value="rec/src/java/ui">
	</property>

	<property name="rec.lib.java.client.dir" value="${rec.lib.dir}/java/client/">
	</property>
	<property name="rec.lib.compile.client.dir" value="${rec.lib.dir}/compile/client/">
	</property>

	<path id="rec.compile.client.classpath">
		<fileset dir="lib/">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rec.lib.compile.client.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rec.lib.java.client.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="rec.compile.client.dependencies.classpath">
		<path refid="rec.compile.client.classpath" />
		<pathelement location="${rec.common.build.dir}/" />
	</path>

	<target name="clean.rec.client" description="Delete the build folder containing the common shared compiled code.">
		<delete dir="${rec.client.build.dir}" />
	</target>

	<target name="compile.rec.client">
		<mkdir dir="${rec.client.build.dir}" />
		<javac srcdir="${rec.client.src.java.dir}" destdir="${rec.client.build.dir}" encoding="${javac.encoding}" debug="${javac.debug}" optimize="${javac.optimize}" source="${javac.sourcelevel}" target="${javac.sourcelevel}" deprecation="yes">
			<include name="**/*.java" />
			<classpath refid="rec.compile.client.dependencies.classpath" />
			<compilerarg value="-Xlint:unchecked, cast, -serial" />
		</javac>

		<javac srcdir="${rec.ui.src.java.dir}" destdir="${rec.client.build.dir}" encoding="${javac.encoding}" debug="${javac.debug}" optimize="${javac.optimize}" source="${javac.sourcelevel}" target="${javac.sourcelevel}" deprecation="yes">
			<include name="**/*.java" />
			<classpath refid="rec.compile.client.dependencies.classpath" />
			<compilerarg value="-Xlint:unchecked, cast, -serial" />
		</javac>
	</target>

	<target name="jar.rec.client">
		<mkdir dir="${rec.client.dist.dir}" />
		<jar destfile="${rec.client.dist.dir}/ReCClient.jar" basedir="${rec.client.build.dir}">
			<include name="**/*.class" />
		</jar>
	</target>

	<target name="sign.rec.client">
		<signjar destDir="${rec.client.dist.dir}" keystore="${keystore}" keypass="${keypass}" storepass="${storepass}" alias="${alias}">
			<fileset dir="${rec.client.dist.dir}" includes="ReCClient.jar" excludes="*_sig.jar" />
			<globmapper from="*.jar" to="*_sig.jar" />
		</signjar>
	</target>

	<target name="dist.rec.client" depends="clean.rec.client,compile.rec.client,jar.rec.client,sign.rec.client">

	</target>

	<!--
		=====================================================
		================ ReC Hardware Server ================
		=====================================================
	-->

	<property name="rec.hardwareserver.build.dir" value="${build.dir}/rec/hardwareserver">
	</property>
	<property name="rec.hardwareserver.dist.dir" value="${dist.dir}/rec/hardwareserver">
	</property>

	<property name="rec.hardwareserver.src.java.dir" value="rec/src/java/hardwareserver">
	</property>

	<property name="rec.lib.java.hardwareserver.dir" value="${rec.lib.dir}/java/hardwareserver/">
	</property>
	<property name="rec.lib.compile.hardwareserver.dir" value="${rec.lib.dir}/compile/hardwareserver/">
	</property>

	<path id="rec.compile.hardwareserver.classpath">
		<fileset dir="lib/">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rec.lib.compile.hardwareserver.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rec.lib.java.hardwareserver.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="rec.compile.hardwareserver.dependencies.classpath">
		<path refid="rec.compile.hardwareserver.classpath" />
		<pathelement location="${rec.common.build.dir}/" />
	</path>

	<target name="clean.rec.hardwareserver">
		<delete dir="${rec.hardwareserver.build.dir}" />
	</target>

	<target name="compile.rec.hardwareserver">
		<mkdir dir="${rec.hardwareserver.build.dir}" />
		<javac srcdir="${rec.hardwareserver.src.java.dir}" destdir="${build.dir}/ReC/hardwareserver" encoding="${javac.encoding}" debug="${javac.debug}" optimize="${javac.optimize}" source="${javac.sourcelevel}" target="${javac.sourcelevel}" deprecation="yes">
			<include name="**/*.java" />
			<classpath refid="rec.compile.hardwareserver.dependencies.classpath" />
			<compilerarg value="-Xlint:unchecked, cast, -serial" />
		</javac>
	</target>

	<target name="jar.rec.hardwareserver">
		<mkdir dir="${rec.hardwareserver.dist.dir}" />
		<jar destfile="${rec.hardwareserver.dist.dir}/ReCHardwareServer.jar" basedir="${rec.hardwareserver.build.dir}">
			<include name="**/*.class" />
		</jar>
	</target>

	<target name="dist.rec.hardwareserver" depends="clean.rec.hardwareserver,compile.rec.hardwareserver,jar.rec.hardwareserver">

	</target>

	<!--
		=====================================================
		============= ReC Multicast Controller===============
		=====================================================
	-->

	<property name="rec.multicast.build.dir" value="${build.dir}/rec/multicast">
	</property>
	<property name="rec.multicast.dist.dir" value="${dist.dir}/rec/multicast">
	</property>

	<property name="rec.multicast.src.java.dir" value="rec/src/java/multicast">
	</property>

	<property name="rec.lib.java.multicast.dir" value="${rec.lib.dir}/java/multicast/">
	</property>
	<property name="rec.lib.compile.multicast.dir" value="${rec.lib.dir}/compile/multicast/">
	</property>

	<path id="rec.compile.multicastcontroller.classpath">
		<fileset dir="lib/">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rec.lib.compile.multicast.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rec.lib.java.multicast.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="rec.compile.multicastcontroller.dependencies.classpath">
		<path refid="rec.compile.multicastcontroller.classpath" />
		<pathelement location="${rec.common.build.dir}/" />
	</path>

	<target name="clean.rec.multicastcontroller">
		<delete dir="${rec.multicast.build.dir}" />
	</target>

	<target name="compile.rec.multicastcontroller">
		<mkdir dir="${rec.multicast.build.dir}" />
		<javac srcdir="${rec.multicast.src.java.dir}" destdir="${rec.multicast.build.dir}" encoding="${javac.encoding}" debug="${javac.debug}" optimize="${javac.optimize}" source="${javac.sourcelevel}" target="${javac.sourcelevel}" deprecation="yes">
			<include name="**/*.java" />
			<classpath refid="rec.compile.multicastcontroller.dependencies.classpath" />
			<compilerarg value="-Xlint:unchecked, cast, -serial" />
		</javac>
	</target>

	<target name="jar.rec.multicastcontroller">
		<mkdir dir="${rec.multicast.dist.dir}" />
		<jar destfile="${rec.multicast.dist.dir}/ReCMulticastController.jar" basedir="${rec.multicast.build.dir}">
			<include name="**/*.class" />
			<manifest>
				<attribute name="Main-Class" value="com.linkare.rec.impl.multicast.startup.MultiCastControllerMain" />
				<section name="Implementarion details">
					<attribute name="Implementation-Title" value="ReC Multicast Controller" />
					<attribute name="Implementation-Version" value="${version} ${TODAY}" />
					<attribute name="Implementation-Vendor" value="Linkare TI" />
				</section>
			</manifest>
		</jar>
	</target>

	<target name="dist.rec.multicastcontroller" depends="clean.rec.multicastcontroller,compile.rec.multicastcontroller,jar.rec.multicastcontroller">

	</target>

	<target name="debug.rec.multicast">
		<java jar="${rec.multicast.dist.dir}/ReCMulticastController.jar" fork="true" failonerror="true" maxmemory="256m">
			<arg value="-h" />
			<classpath>
				<pathelement path="${java.class.path}" />
			</classpath>
			<jvmarg value="-Xdebug" />
			<jvmarg value="-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=y" />
			<jvmarg value="-Xms${min.memory}" />
			<jvmarg value="-Xmx${max.memory}" />
		</java>
	</target>

	<target name="run.rec.multicast">
		<java jar="${rec.multicast.dist.dir}/ReCMulticastController.jar" fork="true" failonerror="true" maxmemory="256m">
			<arg value="-h" />
			<classpath>
				<pathelement path="${java.class.path}" />
			</classpath>
			<jvmarg value="-Xms${min.memory}" />
			<jvmarg value="-Xmx${max.memory}" />
		</java>
	</target>

	<!--
		=====================================================
		=================== Elab Client =====================
		=====================================================
	-->

	<property name="elab.client.build.dir" value="${build.dir}/elab/client">
	</property>
	<property name="elab.client.dist.dir" value="${dist.dir}/elab/client">
	</property>

	<property name="elab.client.src.java.dir" value="elab/src/java/client">
	</property>
	<property name="elab.ui.src.java.dir" value="elab/src/java/ui">
	</property>

	<property name="elab.lib.dir" value="elab/lib">
	</property>
	<property name="elab.lib.java.client.dir" value="${elab.lib.dir}/java/client/">
	</property>
	<property name="elab.lib.compile.client.dir" value="${elab.lib.dir}/compile/client/">
	</property>

	<path id="elab.compile.client.classpath">
		<fileset dir="lib/">
			<include name="**/*.jar" />
		</fileset>
		<!--fileset dir="${elab.lib.compile.client.dir}">
			<include name="**/*.jar" />
		</fileset-->
		<fileset dir="${elab.lib.java.client.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="elab.compile.client.dependencies.classpath">
		<path refid="elab.compile.client.classpath" />
		<pathelement location="${rec.client.build.dir}/" />
	</path>

	<target name="clean.elab.client">
		<delete dir="${elab.client.build.dir}" />
	</target>

	<target name="compile.elab.client">
		<mkdir dir="${elab.client.build.dir}" />
		<javac srcdir="${elab.client.src.java.dir}" destdir="${elab.client.build.dir}" encoding="${javac.encoding}" debug="${javac.debug}" optimize="${javac.optimize}" source="${javac.sourcelevel}" target="${javac.sourcelevel}" deprecation="yes">
			<include name="**/*.java" />
			<classpath refid="elab.compile.client.dependencies.classpath" />
			<compilerarg value="-Xlint:unchecked, cast, -serial" />
		</javac>

		<javac srcdir="${elab.ui.src.java.dir}" destdir="${elab.client.build.dir}" encoding="${javac.encoding}" debug="${javac.debug}" optimize="${javac.optimize}" source="${javac.sourcelevel}" target="${javac.sourcelevel}" deprecation="yes">
			<include name="**/*.java" />
			<classpath refid="elab.compile.client.dependencies.classpath" />
			<compilerarg value="-Xlint:unchecked, cast, -serial" />
		</javac>
	</target>

	<target name="jar.elab.client">
		<mkdir dir="${elab.client.dist.dir}" />
		<jar destfile="${elab.client.dist.dir}/ELabClient.jar" basedir="${elab.client.build.dir}">
			<include name="**/*.class" />
		</jar>
	</target>

	<target name="sign.elab.client">
		<signjar destDir="${elab.client.dist.dir}" keystore="${keystore}" keypass="${keypass}" storepass="${storepass}" alias="${alias}">
			<fileset dir="${elab.client.dist.dir}" includes="ELabClient.jar" excludes="*_sig.jar" />
			<globmapper from="*.jar" to="*_sig.jar" />
		</signjar>
	</target>

	<target name="dist.elab.client" depends="clean.elab.client,compile.elab.client,jar.elab.client,sign.elab.client">

	</target>

	<!--
		=====================================================
		=================== Elab driver =====================
		=====================================================
	-->

	<property name="elab.hardwareserver.build.dir" value="${build.dir}/elab/hardwareserver">
	</property>
	<property name="elab.hardwareserver.dist.dir" value="${dist.dir}/elab/hardwareserver">
	</property>

	<property name="elab.hardwareserver.src.java.dir" value="elab/src/java/driver">
	</property>

	<property name="elab.lib.java.hardwareserver.dir" value="${elab.lib.dir}/java/driver/">
	</property>

	<path id="elab.compile.hardwareserver.classpath">
		<fileset dir="lib/">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${elab.lib.java.hardwareserver.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="elab.compile.hardwareserver.dependencies.classpath">
		<path refid="elab.compile.hardwareserver.classpath" />
		<pathelement location="${rec.common.build.dir}/" />
		<pathelement location="${rec.hardwareserver.build.dir}/" />
	</path>

	<target name="clean.elab.hardwareserver">
		<delete dir="${elab.hardwareserver.build.dir}" />
	</target>

	<target name="compile.elab.hardwareserver">
		<mkdir dir="${elab.hardwareserver.build.dir}" />
		<javac srcdir="${elab.hardwareserver.src.java.dir}" destdir="${elab.hardwareserver.build.dir}" encoding="${javac.encoding}" debug="${javac.debug}" optimize="${javac.optimize}" source="${javac.sourcelevel}" target="${javac.sourcelevel}" deprecation="yes">
			<include name="**/*.java" />
			<classpath refid="elab.compile.hardwareserver.dependencies.classpath" />
			<compilerarg value="-Xlint:unchecked, cast, -serial" />
		</javac>
	</target>

	<target name="jar.elab.hardwareserver">
		<mkdir dir="${elab.hardwareserver.dist.dir}" />
		<jar destfile="${elab.hardwareserver.dist.dir}/ELabHardwareServer.jar" basedir="${elab.hardwareserver.build.dir}">
			<include name="**/*.class" />
		</jar>
	</target>

	<target name="dist.elab.hardwareserver" depends="clean.elab.hardwareserver,compile.elab.hardwareserver,jar.elab.hardwareserver">

	</target>

	<!--
		=====================================================
		=========== Elab Multicast Controller ===============
		=====================================================
	-->

	<property name="elab.multicast.build.dir" value="${build.dir}/elab/multicast">
	</property>
	<property name="elab.multicast.dist.dir" value="${dist.dir}/elab/multicast">
	</property>

	<property name="elab.multicast.src.java.dir" value="elab/src/java/multicast">
	</property>

	<property name="elab.lib.java.multicast.dir" value="${elab.lib.dir}/java/multicast/">
	</property>

	<path id="elab.compile.multicastcontroller.classpath">
		<fileset dir="lib/">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="elab.compile.multicastcontroller.dependencies.classpath">
		<path refid="elab.compile.multicastcontroller.classpath" />
		<pathelement location="${rec.common.build.dir}/" />
		<pathelement location="${rec.multicast.build.dir}/" />
	</path>

	<target name="clean.elab.multicastcontroller">
		<delete dir="${elab.multicast.build.dir}" />
	</target>

	<target name="compile.elab.multicastcontroller">
		<mkdir dir="${elab.multicast.build.dir}" />
		<javac srcdir="${elab.multicast.src.java.dir}" destdir="${elab.multicast.build.dir}" encoding="${javac.encoding}" debug="${javac.debug}" optimize="${javac.optimize}" source="${javac.sourcelevel}" target="${javac.sourcelevel}" deprecation="yes">
			<include name="**/*.java" />
			<classpath refid="elab.compile.multicastcontroller.dependencies.classpath" />
			<compilerarg value="-Xlint:unchecked, cast, -serial" />
		</javac>
	</target>

	<target name="jar.elab.multicastcontroller">
		<mkdir dir="${elab.multicast.dist.dir}" />
		<jar destfile="${elab.multicast.dist.dir}/ELabMulticastController.jar" basedir="${elab.multicast.build.dir}">
			<include name="**/*.class" />
		</jar>
	</target>

	<target name="dist.elab.multicastcontroller" depends="clean.elab.multicastcontroller,compile.elab.multicastcontroller,jar.elab.multicastcontroller">

	</target>

	<!--
		=====================================================
		===============ReC Entire Project====================
		=====================================================
	-->

	<target name="clean.all" depends="clean.rec.common,clean.rec.client,clean.rec.hardwareserver,clean.rec.multicastcontroller,clean.elab.client,clean.elab.hardwareserver,clean.elab.multicastcontroller,clean.all.experiments">
	</target>

	<target name="compile.all" depends="compile.rec.common,compile.rec.client,compile.rec.hardwareserver,compile.rec.multicastcontroller,compile.elab.client,compile.elab.hardwareserver,compile.elab.multicastcontroller,compile.experiments.list">
	</target>

	<target name="jar.all" depends="jar.rec.common,jar.rec.client,jar.rec.hardwareserver,jar.rec.multicastcontroller,jar.elab.client,jar.elab.hardwareserver,jar.elab.multicastcontroller,jar.experiments.list">
	</target>

	<target name="sign.all" depends="sign.rec.common,sign.rec.client,sign.elab.client,sign.experiments.list">

	</target>

	<target name="dist.all" depends="dist.rec.common,dist.rec.client,dist.rec.hardwareserver,dist.rec.multicastcontroller,dist.elab.client,dist.elab.hardwareserver,dist.elab.multicastcontroller">

	</target>

	<!--
		=====================================================
		================ReC Experiments======================
		=====================================================
	-->

	<property name="experiments.build.dir" value="${build.dir}/experiments">
	</property>
	<property name="experiments.dist.dir" value="${dist.dir}/experiments">
	</property>

	<property name="rec.hardwareserver.src.java.dir" value="rec/src/java/hardwareserver">
	</property>

	<property name="experiment.lib.java.dir" value="${rec.lib.dir}/java/hardwareserver/">
	</property>
	<property name="experiment.compile.dir" value="${rec.lib.dir}/compile/hardwareserver/">
	</property>

	<property name="template.file" value="templates/jnlp/template.xml" />

	<!--MACROS-->

	<macrodef name="process.list">
		<attribute name="list" />
		<attribute name="task" />
		<attribute name="attribute.name" />

		<sequential>
			<script language="javascript">
				<![CDATA[
					var list="@{list}";
					var task="@{task}";
					var attribute_name="@{attribute.name}";
				    var splitVars=list.split(",");
					
				    for(var i=0;i<splitVars.length;i++)
				    {    
						var oTask=project.createTask(task);
						oTask.init();
						oTask.setDynamicAttribute(attribute_name,splitVars[i]);
						oTask.execute();
					}
				]]>
			</script>
		</sequential>
	</macrodef>

	<macrodef name="clean.experiment">
		<attribute name="experiment.name" />
		<sequential>
			<delete dir="${experiments.build.dir}/@{experiment.name}" />
		</sequential>
	</macrodef>

	<macrodef name="compile.experiment">
		<attribute name="experiment.name" />
		<sequential>

			<mkdir dir="${experiments.build.dir}/@{experiment.name}/client" />
			<mkdir dir="${experiments.build.dir}/@{experiment.name}/server" />
			<echo>Compiling experiment: @{experiment}</echo>

			<ant antfile="build.xml" dir="experiments/@{experiment.name}/etc" target="pre-compile" />

			<javac srcdir="experiments/@{experiment.name}/src/java/client" destdir="${experiments.build.dir}/@{experiment.name}/client" encoding="${javac.encoding}" debug="${javac.debug}" optimize="${javac.optimize}" source="${javac.sourcelevel}" target="${javac.sourcelevel}" deprecation="yes">
				<include name="**/*.java" />
				<classpath>
					<pathelement location="${rec.common.build.dir}" />
					<pathelement location="${rec.client.build.dir}" />
					<pathelement location="${rec.ui.build.dir}" />
					<fileset dir="experiments/@{experiment.name}/lib/java/client">
						<include name="**/*.jar" />
					</fileset>
				</classpath>
				<compilerarg value="-Xlint:unchecked, cast, -serial" />
			</javac>

			<javac srcdir="experiments/@{experiment.name}/src/java/server" destdir="${experiments.build.dir}/@{experiment.name}/server" encoding="${javac.encoding}" debug="${javac.debug}" optimize="${javac.optimize}" source="${javac.sourcelevel}" target="${javac.sourcelevel}" deprecation="yes">
				<include name="**/*.java" />
				<classpath>
					<fileset dir="lib/">
						<include name="**/*.jar" />
					</fileset>
					<pathelement location="${rec.common.build.dir}" />
					<pathelement location="${rec.hardwareserver.build.dir}" />
					<fileset dir="experiments/@{experiment.name}/lib/java/server">
						<include name="**/*.jar" />
					</fileset>
				</classpath>
				<compilerarg value="-Xlint:unchecked, cast, -serial" />
			</javac>

			<ant antfile="build.xml" dir="experiments/@{experiment.name}/etc" target="post-compile" />

		</sequential>
	</macrodef>

	<macrodef name="jar.experiment">
		<attribute name="experiment.name" />
		<sequential>
			<mkdir dir="${experiments.dist.dir}/${experiment.name}/client" />
			<mkdir dir="${experiments.dist.dir}/${experiment.name}/server" />

			<ant antfile="build.xml" dir="experiments/@{experiment.name}/etc" target="pre-jar" />

			<jar destfile="${experiments.dist.dir}/${experiment.name}/client/@{experiment.name}Client.jar" basedir="${experiments.build.dir}/${experiment.name}/client">
				<include name="**/*.class" />
			</jar>
			<jar destfile="${experiments.dist.dir}/${experiment.name}/server/@{experiment.name}Driver.jar" basedir="${experiments.build.dir}/${experiment.name}/server">
				<include name="**/*.class" />
			</jar>

			<ant antfile="build.xml" dir="experiments/@{experiment.name}/etc" target="post-jar" />

		</sequential>
	</macrodef>

	<macrodef name="sign.experiment">
		<attribute name="experiment.name" />
		<sequential>
			<signjar jar="${experiments.dist.dir}/${experiment.name}/client/@{experiment.name}Client.jar" signedjar="${experiments.dist.dir}/${experiment.name}/client/@{experiment.name}Client_sig.jar" keystore="${keystore}" keypass="${keypass}" storepass="${storepass}" alias="${alias}" />
			<!--signjar jar="${experiments.dist.dir}/${experiment.name}/server/@{experiment.name}Driver.jar" signedjar="${experiments.dist.dir}/${experiment.name}/server/@{experiment.name}Driver_sig.jar" keystore="${keystore}" keypass="${keypass}" storepass="${storepass}" alias="${alias}" /-->
		</sequential>
	</macrodef>

	<macrodef name="deploy.experiment">
		<attribute name="experiment.name" />
		<sequential>
			<copy todir="${rec.server}/@{rec.server.dir}">
				<fileset file="${experiments.dist.dir}/${experiment.name}/server/@{experiment.name}Driver_sig.jar" />
			</copy>
			<copy todir="${web.server}/@{web.server.dir}">
				<fileset file="${experiments.dist.dir}/${experiment.name}/client/@{experiment.name}Client_sig.jar" />
			</copy>
		</sequential>
	</macrodef>

	<macrodef name="create.jnlp.for.experiment">
		<attribute name="experiment.name" />
		<sequential>
			<copy file="${template.file}" overwrite="yes" tofile="${experiments.dist.dir}/@{experiment.name}/${experiment.name}.jnlp" />
			<replace file="${experiments.dist.dir}/@{experiment.name}/${experiment.name}.jnlp" propertyFile="experiments/@{experiment.name}/etc/build.properties">
				<replacefilter token="@codebase@" property="@{experiment.name}.codebase" />
				<replacefilter token="@href@" property="@{experiment.name}.href" />
				<replacefilter token="@title@" property="@{experiment.name}.title" />
				<replacefilter token="@vendor@" property="@{experiment.name}.vendor" />
				<replacefilter token="@homepage@" property="@{experiment.name}.homepage" />
				<replacefilter token="@one-line@" property="@{experiment.name}.one-line" />
				<replacefilter token="@tootip@" property="@{experiment.name}.tootip" />
				<replacefilter token="@short@" property="@{experiment.name}.short" />
				<replacefilter token="@j2se-version@" property="@{experiment.name}.j2se-version" />
				<replacefilter token="@jar@" value="/client/@{experiment.name}Client_sig.jar" />
				<replacefilter token="@main-class@" property="@{experiment.name}.main-class" />
			</replace>
		</sequential>
	</macrodef>

	<!--/MACROS-->

	<target name="clean.experiment">
		<fail unless="experiment.name"> experiments.name must be set. define it in build.properties or pass 
				it to jvm as arg like -Dexperiment.name="experiment1"</fail>
		<clean.experiment experiment.name="${experiment.name}" />
	</target>

	<target name="clean.experiments.list">
		<fail unless="experiment.list"> experiments.list must be set to clean
					that list of experiments. define it in build.properties or pass 
					it to jvm as arg like -Dexperiment.list="experiment1,experiment2,..."</fail>
		<process.list task="clean.experiment" list="${experiment.list}" attribute.name="experiment.name" />
	</target>

	<target name="clean.all.experiments">
		<delete dir="${experiments.build.dir}" />
	</target>

	<target name="compile.experiment">
		<fail unless="experiment.name"> You need to specify which experiment to build with the property experiment.name</fail>
		<compile.experiment experiment.name="${experiment.name}" />
	</target>

	<target name="compile.experiments.list">
		<fail unless="experiment.list"> experiments.list must be set to compile
			that list of experiments. define it in build.properties or pass 
			it to jvm as arg like -Dexperiment.list="experiment1,experiment2,..."</fail>
		<process.list task="compile.experiment" list="${experiment.list}" attribute.name="experiment.name" />
	</target>

	<target name="jar.experiment">
		<fail unless="experiment.name"> You need to specify which experiment to build with the property experiment.name</fail>
		<jar.experiment experiment.name="${experiment.name}" />
	</target>

	<target name="jar.experiments.list">
		<fail unless="experiment.list"> experiments.list must be set to package
			that list of experiments. define it in build.properties or pass 
			it to jvm as arg like -Dexperiment.list="experiment1,experiment2,..."</fail>
		<process.list task="jar.experiment" list="${experiment.list}" attribute.name="experiment.name" />
	</target>

	<target name="sign.experiment">
		<fail unless="experiment.name"> You need to specify which experiment to build with the property experiment.name</fail>
		<sign.experiment experiment.name="${experiment.name}" />
	</target>

	<target name="sign.experiments.list">
		<fail unless="experiment.list"> experiments.list must be set to package
				that list of experiments. define it in build.properties or pass 
				it to jvm as arg like -Dexperiment.list="experiment1,experiment2,..."</fail>
		<process.list task="sign.experiment" list="${experiment.list}" attribute.name="experiment.name" />
	</target>

	<target name="deploy.experiment">
		<fail unless="experiment.name"> You need to specify which experiment to deploy with the property experiment.name</fail>
		<deploy.experiment experiment.name="${experiment.name}" />
	</target>

	<target name="deploy.experiments.list">
		<fail unless="experiment.list"> experiments.list must be set to deploy
				that list of experiments. define it in build.properties or pass 
				it to jvm as arg like -Dexperiment.list="experiment1,experiment2,..."</fail>
		<process.list task="deploy.experiment" list="${experiment.list}" attribute.name="experiment.name" />
	</target>

	<target name="dist.experiment" depends="clean.experiment,compile.experiment,jar.experiment,sign.experiment">
		<fail unless="experiment.name">experiment.name must be set to build a single experiment jnlp. 
			Pass it to jvm as arg like -Dexperiment.name="experiment name"</fail>
		<create.jnlp.for.experiment experiment.name="${experiment.name}"/>
	</target>
	
	<target name="teste jnlp">
		<create.jnlp.for.experiment experiment.name="${experiment.name}"/>
	</target>

	<target name="dist.experiment.list" depends="clean.experiments.list,compile.experiments.list,jar.experiments.list,sign.experiments.list">
		<fail unless="experiment.list">experiment.list must be set to build the jnlp for that list of experiments. 
			Pass it to jvm as arg like -Dexperiment.list="experiment1,experiment2,..."</fail>
		<process.list task="create.jnlp.for.experiment" list="%{experiment.list}" attribute.name="experiment.name" />
	</target>
	
	<target name="run.experiment">
		
	</target>
	<!--
		================================================================
		========================== Libraries ===========================
		================================================================
		-->
	<target name="sign.libraries">

	</target>

	<target name="deploy.libraries">

	</target>
</project>