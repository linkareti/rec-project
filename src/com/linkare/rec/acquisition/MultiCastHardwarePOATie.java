package com.linkare.rec.acquisition;


/**
* com/linkare/rec/acquisition/MultiCastHardwarePOATie.java .
* Generated by the IDL-to-Java compiler (portable), version "3.1"
* from I:/Projects/REC/IdlCompile/ReC7.idl
* Sabado, 17 de Janeiro de 2004 19H00m GMT
*/


//if you get here in a middle of1 an acquisition call getAllSamplesUntilNow
public class MultiCastHardwarePOATie extends MultiCastHardwarePOA
{

  // Constructors

  public MultiCastHardwarePOATie ( com.linkare.rec.acquisition.MultiCastHardwareOperations delegate ) {
      this._impl = delegate;
  }
  public MultiCastHardwarePOATie ( com.linkare.rec.acquisition.MultiCastHardwareOperations delegate , org.omg.PortableServer.POA poa ) {
      this._impl = delegate;
      this._poa      = poa;
  }
  public com.linkare.rec.acquisition.MultiCastHardwareOperations _delegate() {
      return this._impl;
  }
  public void _delegate (com.linkare.rec.acquisition.MultiCastHardwareOperations delegate ) {
      this._impl = delegate;
  }
  public org.omg.PortableServer.POA _default_POA() {
      if(_poa != null) {
          return _poa;
      }
      else {
          return super._default_POA();
      }
  }

  //that the DataClient must be regsitered...
  public com.linkare.rec.data.metadata.HardwareInfo getHardwareInfo (com.linkare.rec.acquisition.UserInfo user) throws com.linkare.rec.acquisition.NotRegistered, com.linkare.rec.acquisition.NotAuthorized
  {
    return _impl.getHardwareInfo(user);
  } // getHardwareInfo


  //give me a way to build a user interface
  public com.linkare.rec.acquisition.HardwareState getHardwareState (com.linkare.rec.acquisition.UserInfo user) throws com.linkare.rec.acquisition.NotRegistered, com.linkare.rec.acquisition.NotAuthorized
  {
    return _impl.getHardwareState(user);
  } // getHardwareState


  //How are you?
  public void requireLock (com.linkare.rec.acquisition.UserInfo user) throws com.linkare.rec.acquisition.IncorrectStateException, com.linkare.rec.acquisition.NotAvailableException, com.linkare.rec.acquisition.NotOwnerException, com.linkare.rec.acquisition.NotRegistered, com.linkare.rec.acquisition.NotAuthorized
  {
    _impl.requireLock(user);
  } // requireLock

  public void registerDataClient (com.linkare.rec.acquisition.DataClient data_client) throws com.linkare.rec.acquisition.NotAvailableException, com.linkare.rec.acquisition.MaximumClientsReached, com.linkare.rec.acquisition.NotAuthorized
  {
    _impl.registerDataClient(data_client);
  } // registerDataClient

  public void configure (com.linkare.rec.acquisition.UserInfo user, com.linkare.rec.data.config.HardwareAcquisitionConfig configuration) throws com.linkare.rec.acquisition.IncorrectStateException, com.linkare.rec.acquisition.NotAvailableException, com.linkare.rec.acquisition.WrongConfigurationException, com.linkare.rec.acquisition.NotOwnerException, com.linkare.rec.acquisition.NotRegistered, com.linkare.rec.acquisition.NotAuthorized
  {
    _impl.configure(user, configuration);
  } // configure

  public com.linkare.rec.acquisition.DataProducer start (com.linkare.rec.acquisition.UserInfo user) throws com.linkare.rec.acquisition.IncorrectStateException, com.linkare.rec.acquisition.NotAvailableException, com.linkare.rec.acquisition.NotOwnerException, com.linkare.rec.acquisition.NotRegistered, com.linkare.rec.acquisition.NotAuthorized
  {
    return _impl.start(user);
  } // start

  public com.linkare.rec.acquisition.DataProducer startOutput (com.linkare.rec.acquisition.UserInfo user, com.linkare.rec.acquisition.DataProducer data_source) throws com.linkare.rec.acquisition.IncorrectStateException, com.linkare.rec.acquisition.NotAvailableException, com.linkare.rec.acquisition.NotOwnerException, com.linkare.rec.acquisition.NotRegistered, com.linkare.rec.acquisition.NotAuthorized
  {
    return _impl.startOutput(user, data_source);
  } // startOutput

  public void stop (com.linkare.rec.acquisition.UserInfo user) throws com.linkare.rec.acquisition.IncorrectStateException, com.linkare.rec.acquisition.NotAvailableException, com.linkare.rec.acquisition.NotOwnerException, com.linkare.rec.acquisition.NotRegistered, com.linkare.rec.acquisition.NotAuthorized
  {
    _impl.stop(user);
  } // stop

  public void reset (com.linkare.rec.acquisition.UserInfo user) throws com.linkare.rec.acquisition.IncorrectStateException, com.linkare.rec.acquisition.NotAvailableException, com.linkare.rec.acquisition.NotOwnerException, com.linkare.rec.acquisition.NotRegistered, com.linkare.rec.acquisition.NotAuthorized
  {
    _impl.reset(user);
  } // reset

  public com.linkare.rec.acquisition.DataProducer getDataProducer (com.linkare.rec.acquisition.UserInfo user) throws com.linkare.rec.acquisition.IncorrectStateException, com.linkare.rec.acquisition.NotAvailableException, com.linkare.rec.acquisition.NotRegistered, com.linkare.rec.acquisition.NotAuthorized
  {
    return _impl.getDataProducer(user);
  } // getDataProducer


  //VTClientNameList getClientQueue(in DataClient data_client) raises (NotRegistered);
  public com.linkare.rec.acquisition.UserInfo[] getClientList (com.linkare.rec.acquisition.UserInfo user) throws com.linkare.rec.acquisition.NotRegistered, com.linkare.rec.acquisition.NotAuthorized
  {
    return _impl.getClientList(user);
  } // getClientList


  //version 5 added suport for messages
  public void sendMessage (com.linkare.rec.acquisition.UserInfo userFrom, String clientTo, String message) throws com.linkare.rec.acquisition.NotRegistered, com.linkare.rec.acquisition.NotAuthorized
  {
    _impl.sendMessage(userFrom, clientTo, message);
  } // sendMessage

  private com.linkare.rec.acquisition.MultiCastHardwareOperations _impl;
  private org.omg.PortableServer.POA _poa;

} // class MultiCastHardwarePOATie
