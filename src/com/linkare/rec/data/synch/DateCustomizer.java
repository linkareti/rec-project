/*
 * TimeCustomizer.java
 *
 * Created on 2 de Julho de 2002, 15:57
 */

package com.linkare.rec.data.synch;

import java.beans.Beans;
/**
 *
 * @author Jos√© Pedro Pereira - Linkare TI
 */
public class DateCustomizer extends javax.swing.JPanel implements java.beans.Customizer
{

    /** Creates new customizer TimeCustomizer */
    public DateCustomizer()
    {
	initComponents();
	actualizeSelectors();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        mybean = new com.linkare.rec.data.synch.Date();
        dayLbl = new javax.swing.JLabel();
        monthLbl = new javax.swing.JLabel();
        yearLbl = new javax.swing.JLabel();
        dateShowLbl = new javax.swing.JLabel();
        daySelector = new javax.swing.JSpinner();
        monthSelector = new javax.swing.JSpinner();
        yearSelector = new javax.swing.JSpinner();

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(400, 56));
        setPreferredSize(new java.awt.Dimension(400, 56));
        dayLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dayLbl.setText("Dia");
        dayLbl.setLabelFor(daySelector);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(dayLbl, gridBagConstraints);

        monthLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        monthLbl.setText("M\u00eas");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(monthLbl, gridBagConstraints);

        yearLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        yearLbl.setText("Ano");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(yearLbl, gridBagConstraints);

        dateShowLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dateShowLbl.setText(mybean.toString());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(dateShowLbl, gridBagConstraints);

        daySelector.setMinimumSize(new java.awt.Dimension(50, 24));
        daySelector.setModel(new javax.swing.SpinnerNumberModel((int)mybean.getDay(),0,32,1));
        daySelector.setPreferredSize(new java.awt.Dimension(40, 24));
        daySelector.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                daySelectorStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(daySelector, gridBagConstraints);

        monthSelector.setModel(new com.linkare.rec.data.synch.base.SpinnerMonthModel());
        monthSelector.setPreferredSize(new java.awt.Dimension(100, 24));
        monthSelector.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                monthSelectorStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(monthSelector, gridBagConstraints);

        yearSelector.setModel(new javax.swing.SpinnerNumberModel((int)mybean.getYear(),1900,2200,1));
        yearSelector.setPreferredSize(new java.awt.Dimension(70, 24));
        yearSelector.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                yearSelectorStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(yearSelector, gridBagConstraints);

    }

    private void yearSelectorStateChanged(javax.swing.event.ChangeEvent evt)
    {
	actualizeBean();
    }

    private void monthSelectorStateChanged(javax.swing.event.ChangeEvent evt)
    {
	actualizeBean();
    }

    private void daySelectorStateChanged(javax.swing.event.ChangeEvent evt)
    {
	actualizeBean();
    }

    private void yearSelectorActionPerformed(java.awt.event.ActionEvent evt)
    {
	actualizeBean();
    }

    private void daySelectorActionPerformed(java.awt.event.ActionEvent evt)
    {
	actualizeBean();
    }

    private void monthSelectorActionPerformed(java.awt.event.ActionEvent evt)
    {
	actualizeBean();
    }

    public void setObject(Object obj)
    {

	if(Beans.isInstanceOf(obj,Date.class))
	{
	    mybean=(Date)Beans.getInstanceOf(obj,Date.class);
	    actualizeSelectors();
	}
    }

    private boolean actualizingSelectors=false;

    private void actualizeSelectors()
    {
	actualizingSelectors=true;
	daySelector.setValue(new Integer((int)mybean.getDay()));
	monthSelector.setValue(com.linkare.rec.data.synch.base.MonthMap.getMonthNamefromNumber(mybean.getMonth()+java.util.Calendar.JANUARY-1));
	yearSelector.setValue(new Integer((int)mybean.getYear()));
	dateShowLbl.setText(mybean.toString());
	actualizingSelectors=false;
    }

    private void actualizeBean()
    {
	if(actualizingSelectors) return;

	try
	{
	    int day=((Integer)daySelector.getValue()).intValue();
	    int month=com.linkare.rec.data.synch.base.MonthMap.getMonthNumberfromName((String)monthSelector.getValue());
	    int year=((Integer)yearSelector.getValue()).intValue();

	    java.util.GregorianCalendar cl=new java.util.GregorianCalendar(year,month,day);

	    mybean.setDay((byte) cl.get(java.util.Calendar.DATE));
	    mybean.setMonth((byte)(cl.get(java.util.Calendar.MONTH)-java.util.Calendar.JANUARY+1));
	    mybean.setYear((short)(cl.get(java.util.Calendar.YEAR)));

	    firePropertyChange("date",null,mybean);
	    firePropertyChange("year",null,new Short(mybean.getYear()));
	    firePropertyChange("month",null,new Byte(mybean.getMonth()));
	    firePropertyChange("day",null,new Byte(mybean.getDay()));

	    actualizeSelectors();

	    dateShowLbl.setText(mybean.toString());
	}
	catch(Exception e)
	{
	    e.printStackTrace();
	}
    }


    private javax.swing.JSpinner monthSelector;
    private javax.swing.JSpinner yearSelector;
    private javax.swing.JLabel dayLbl;
    private javax.swing.JLabel yearLbl;
    private javax.swing.JLabel dateShowLbl;
    private com.linkare.rec.data.synch.Date mybean;
    private javax.swing.JSpinner daySelector;
    private javax.swing.JLabel monthLbl;


}
