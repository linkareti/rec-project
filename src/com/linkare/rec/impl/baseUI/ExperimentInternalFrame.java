/*
 * ExperimentInternalFrame.java
 *
 * Created on 30 de Abril de 2003, 14:26
 */

package com.linkare.rec.impl.baseUI;

import com.linkare.rec.impl.client.experiment.*;
import java.util.ArrayList;
import javax.swing.JInternalFrame;
import java.util.logging.*;
import com.linkare.rec.impl.logging.LoggerUtil;
import javax.swing.*;
import java.awt.Color;
import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.acquisition.*;
import com.linkare.rec.impl.utils.Defaults;
import com.linkare.rec.impl.i18n.ReCResourceBundle;
/**
 *
 * @author  jp
 */
public class ExperimentInternalFrame extends JInternalFrame implements ExpDataModelListener
{
    private static String UI_CLIENT_LOGGER="ReC.baseUI";
    
    static
    {
        Logger l=LogManager.getLogManager().getLogger(UI_CLIENT_LOGGER);
        if(l==null)
        {
            LogManager.getLogManager().addLogger(Logger.getLogger(UI_CLIENT_LOGGER));
        }
    }
    
    private static final String RUNNING_STR = ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.status.running", "Running");
    private static final String STATUS_STR = ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.status.experiment", "Experiment status");
    private static final String PAUSED_STR = ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.status.paused", "Paused");
    private static final String STOPED_STR = ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.status.stoped", "Stopped");
    private static final String WAITING_STR = ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.status.waitingData", "Waiting for data...");
    private static final String NODATA_STR = ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.status.nodata", "The experiment started but no data was available to fetch");
    private static final String STARTED_NODATA_STR = ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.status.startedNoData", "Started, no data available yet...");
    private static final String DATA_ENDED_STR = ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.status.ended", "Data Ended");
    private static final String DISPLAY_STR = ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.lbl.display", "Display");
    private static final String DATA_MODEL_ERROR1_STR = ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.error.dataModel", "Data Model error!");
    private static final String DATA_MODEL_ERROR2_STR = ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.error.dataModel.2", "Serious error in the data model, data was lost!");
    
    
    /** Creates new form ExperimentInternalFrame */
    public ExperimentInternalFrame()
    {
        super(ReCResourceBundle.findStringOrDefault("ReCBaseUI$rec.bui.title.expInternalFrame", "Experiment internal Frame"));
        initComponents();
        experimentProgressBar.setString("");
        experimentProgressBar.setStringPainted(true);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel41 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnPlayExperiment = new javax.swing.JButton();
        btnPauseExperiment = new javax.swing.JButton();
        experimentProgressBar = new javax.swing.JProgressBar();
        jLabel11 = new javax.swing.JLabel();
        lblExpStatus = new javax.swing.JLabel();
        trafficLightPanel1 = new com.linkare.rec.impl.baseUI.control.TrafficLightPanel();
        jPanelCenter = new javax.swing.JPanel();
        tabPaneExperiment = new javax.swing.JTabbedPane();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setToolTipText("");
        setFrameIcon(ReCResourceBundle.findImageIconOrDefault("ReCBaseUI$rec.bui.icon.experiment", new ImageIcon(getClass().getResource("/com/linkare/rec/impl/baseUI/resources/Experiment16.gif"))));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel41.setLayout(new java.awt.GridBagLayout());

        btnPlayExperiment.setIcon(ReCResourceBundle.findImageIconOrDefault("ReCBaseUI$rec.bui.icon.play", new ImageIcon(getClass().getResource("/com/linkare/rec/impl/baseUI/resources/Play16.gif"))));
        btnPlayExperiment.setBorder(null);
        btnPlayExperiment.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnPlayExperiment.setMaximumSize(new java.awt.Dimension(16, 16));
        btnPlayExperiment.setPreferredSize(new java.awt.Dimension(16, 16));
        btnPlayExperiment.setEnabled(false);
        btnPlayExperiment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayExperimentActionPerformed(evt);
            }
        });

        jPanel1.add(btnPlayExperiment);

        btnPauseExperiment.setIcon(ReCResourceBundle.findImageIconOrDefault("ReCBaseUI$rec.bui.icon.paused", new ImageIcon(getClass().getResource("/com/linkare/rec/impl/baseUI/resources/Pause16.gif"))));
        btnPauseExperiment.setBorder(null);
        btnPauseExperiment.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnPauseExperiment.setMaximumSize(new java.awt.Dimension(16, 16));
        btnPauseExperiment.setPreferredSize(new java.awt.Dimension(16, 16));
        btnPauseExperiment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseExperimentActionPerformed(evt);
            }
        });

        jPanel1.add(btnPauseExperiment);

        jPanel41.add(jPanel1, new java.awt.GridBagConstraints());

        experimentProgressBar.setBorder(new javax.swing.border.EtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel41.add(experimentProgressBar, gridBagConstraints);

        jLabel11.setText(STATUS_STR);
        jPanel41.add(jLabel11, new java.awt.GridBagConstraints());

        lblExpStatus.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblExpStatus.setText(RUNNING_STR);
        lblExpStatus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel41.add(lblExpStatus, new java.awt.GridBagConstraints());

        jPanel41.add(trafficLightPanel1, new java.awt.GridBagConstraints());

        getContentPane().add(jPanel41, java.awt.BorderLayout.SOUTH);

        jPanelCenter.setLayout(new java.awt.BorderLayout());

        tabPaneExperiment.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tabPaneExperiment.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        tabPaneExperiment.setMinimumSize(new java.awt.Dimension(350, 100));
        tabPaneExperiment.setPreferredSize(new java.awt.Dimension(350, 100));
        tabPaneExperiment.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabPaneExperimentStateChanged(evt);
            }
        });

        jPanelCenter.add(tabPaneExperiment, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanelCenter, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents
    
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameClosed
    {//GEN-HEADEREND:event_formInternalFrameClosed
        if(!killed)
            killInternalFrame();
    }//GEN-LAST:event_formInternalFrameClosed
    
    private JToolBar oldToolBar=null;
	private void tabPaneExperimentStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_tabPaneExperimentStateChanged
	{//GEN-HEADEREND:event_tabPaneExperimentStateChanged
            int selectedIndex=0;
            if((selectedIndex=tabPaneExperiment.getSelectedIndex())!=-1)
            {
                final ExpDataDisplay display=(ExpDataDisplay)dataDisplayList.get(selectedIndex);
                
                SwingUtilities.invokeLater(new Runnable()
                {
                    public void run()
                    {
                        setJMenuBar(display.getMenuBar());
                        
                        if(oldToolBar!=null)
                            getContentPane().remove(oldToolBar);
                        
                        oldToolBar=display.getToolBar();
                        
                        if(oldToolBar!=null)
                            getContentPane().add(oldToolBar,java.awt.BorderLayout.NORTH);
                        
                        repaint();//absolutely needed - tested allready
                    }
                });
            }
	}//GEN-LAST:event_tabPaneExperimentStateChanged
        
	private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameClosing
	{//GEN-HEADEREND:event_formInternalFrameClosing
            if(!killed)
                killInternalFrame();
	}//GEN-LAST:event_formInternalFrameClosing
        
	private void btnPlayExperimentActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPlayExperimentActionPerformed
	{//GEN-HEADEREND:event_btnPlayExperimentActionPerformed
            btnPauseExperiment.setEnabled(true);
            //experimentProgressBar.setIndeterminate(true);
            btnPlayExperiment.setEnabled(false);
            lblExpStatus.setText(RUNNING_STR + "...");
            lblExpStatus.setForeground(new Color(0,153,0));
            //lblExpStatus.startBlinking();
            trafficLightPanel1.changeTrafficStatus(trafficLightPanel1.GREEN);
            if(expDataModel!=null) expDataModel.play();
	}//GEN-LAST:event_btnPlayExperimentActionPerformed
        
	private void btnPauseExperimentActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPauseExperimentActionPerformed
	{//GEN-HEADEREND:event_btnPauseExperimentActionPerformed
            btnPlayExperiment.setEnabled(true);
            //experimentProgressBar.setIndeterminate(false);
            btnPauseExperiment.setEnabled(false);
            //lblExpStatus.stopBlinking();
            lblExpStatus.setText(PAUSED_STR + "...");
            lblExpStatus.setForeground(Color.red);
            trafficLightPanel1.changeTrafficStatus(trafficLightPanel1.BLINK);
            if(expDataModel!=null) expDataModel.pause();
	}//GEN-LAST:event_btnPauseExperimentActionPerformed
        
        private boolean killed = false;
        private void killInternalFrame()
        {
            if(expDataModel!=null)
                expDataModel.stopNow();
            killed = true;
            dispose();
        }
        
        /** Getter for property expDataModel.
         * @return Value of property expDataModel.
         */
        public ExpDataModel getExpDataModel()
        {
            return this.expDataModel;
        }
        
        /** Setter for property expDataModel.
         * @param expDataModel New value of property expDataModel.
         */
        public void setExpDataModel(ExpDataModel expDataModel)
        {
            if(expDataModel!=null)
                expDataModel.removeExpDataModelListener(this);
            this.expDataModel = expDataModel;
            if(expDataModel!=null)
                expDataModel.addExpDataModelListener(this);
            
            if(dataDisplayList!=null)
            {
                Object[] dataDisplayArrObj=dataDisplayList.toArray();
                for(int i=0;i<dataDisplayArrObj.length;i++)
                {
                    ExpDataDisplay display=(ExpDataDisplay)dataDisplayArrObj[i];
                    display.setExpDataModel(expDataModel);
                }
            }
        }
        
        public void dataModelWaiting()
        {
            lblExpStatus.setText(WAITING_STR + "...");
            lblExpStatus.setForeground(new Color(0,153,0));
            //lblExpStatus.startBlinking();
            btnPauseExperiment.setEnabled(true);
            btnPlayExperiment.setEnabled(false);
            experimentProgressBar.setIndeterminate(true);
            trafficLightPanel1.changeTrafficStatus(trafficLightPanel1.BLINK);
        }
        
        public void dataModelStoped()
        {
            if(expDataModel.getTotalSamples() == TOTAL_SAMPLES_UNDEFINED.value)
            {
                lblExpStatus.setText(NODATA_STR + "!");
            }
            else
            {
                experimentProgressBar.setIndeterminate(false);
                lblExpStatus.setText(STOPED_STR + "!");
            }
            //lblExpStatus.stopBlinking();
            lblExpStatus.setForeground(Color.red);
            btnPauseExperiment.setEnabled(false);
            btnPlayExperiment.setEnabled(false);
            experimentProgressBar.setIndeterminate(false);
            experimentProgressBar.setValue(experimentProgressBar.getMaximum());
            experimentProgressBar.setString("100%");
            trafficLightPanel1.changeTrafficStatus(trafficLightPanel1.RED);
        }
        
        public void newSamples(NewExpDataEvent evt)
        {
            lblExpStatus.setText(RUNNING_STR + "...");
            if(getHeader()!=null)
                this.experimentProgressBar.setValue(evt.getSamplesEndIndex());
            if(getHeader()!=null)
            {
                if(getHeader().getTotalSamples() > 1)
                    experimentProgressBar.setString(""+(100*evt.getSamplesEndIndex()/(getHeader().getTotalSamples()-1))+"%");
                else
                    experimentProgressBar.setString("" + (100*evt.getSamplesEndIndex()) + "%");
            }
            
        }
        
        public synchronized void addExpDataDisplay(ExpDataDisplay dataDisplay)
        {
            if (dataDisplayList == null )
            {
                dataDisplayList = new java.util.ArrayList<ExpDataDisplay>();
            }
            
            dataDisplayList.add(dataDisplay);
            
            try
            {
                final Icon icon=dataDisplay.getIcon();
                String nameTab=dataDisplay.getName();
                if(nameTab==null) nameTab = DISPLAY_STR;
                int i=1;
                
                if(tabPaneExperiment.indexOfTab(nameTab)!=-1)
                {
                    while(tabPaneExperiment.indexOfTab(nameTab+" "+i)!=-1)
                        ++i;
                    
                    nameTab+=" " +i;
                }
                
                JComponent displayComp=dataDisplay.getDisplay();
                String nameTabFinal=nameTab;
                tabPaneExperiment.addTab(nameTabFinal,icon,displayComp);
                
            }catch(Exception e)
            {
                LoggerUtil.logThrowable("Couldn't add DataDisplay Component " + dataDisplay + " to ExperimentInternalFrame!",e,Logger.getLogger(UI_CLIENT_LOGGER));
            }                        
            dataDisplay.setExpDataModel(expDataModel);            
        }
        
        public synchronized void removeExpDataDisplay(ExpDataDisplay dataDisplay)
        {
            if (dataDisplayList != null )
            {
                dataDisplayList.remove(dataDisplay);
            }
            
            dataDisplay.setExpDataModel(null);
            
            if(dataDisplay.getDisplay()!=null)
                tabPaneExperiment.remove(dataDisplay.getDisplay());
        }
        
        
        public synchronized void addExpDataDisplayBean(String beanName)
        {
            
            try
            {
                Object dataDisplayTemp=java.beans.Beans.instantiate(this.getClass().getClassLoader(),beanName);
                if(java.beans.Beans.isInstanceOf(dataDisplayTemp,ExpDataDisplay.class))
                    addExpDataDisplay((ExpDataDisplay)dataDisplayTemp);
            }catch(Exception e)
            {
                LoggerUtil.logThrowable("Couldn't init dataDisplay bean :" + beanName,e,Logger.getLogger(UI_CLIENT_LOGGER));
                e.printStackTrace();
            }
            
        }
        
        HardwareAcquisitionConfig header=null;
        
        public void errorOccurred(java.lang.String errorMessage)
        {
            if(expDataModel!=null)
                expDataModel.stopNow();
            
            lblExpStatus.setText(errorMessage);
            //lblExpStatus.stopBlinking();
            lblExpStatus.setForeground(java.awt.Color.red);
            btnPlayExperiment.setEnabled(false);
            btnPauseExperiment.setEnabled(false);
            trafficLightPanel1.changeTrafficStatus(trafficLightPanel1.RED);
        }
        
        public void dataModelEnded()
        {
            lblExpStatus.setText(DATA_ENDED_STR + "...");
            trafficLightPanel1.changeTrafficStatus(trafficLightPanel1.RED);
        }
        
        public void dataModelError()
        {
            if(expDataModel.getTotalSamples() == TOTAL_SAMPLES_UNDEFINED.value)
            {
                lblExpStatus.setText(DATA_MODEL_ERROR2_STR + "!");
                experimentProgressBar.setIndeterminate(false);
            }
            else
            {
                lblExpStatus.setText(DATA_MODEL_ERROR1_STR + "!");
                experimentProgressBar.setIndeterminate(false);
                experimentProgressBar.setValue(experimentProgressBar.getMaximum());
                experimentProgressBar.setString("100%");
            }
            trafficLightPanel1.changeTrafficStatus(trafficLightPanel1.RED);
        }
        
        public void dataModelStarted()
        {
            lblExpStatus.setText(RUNNING_STR + "...");
            if(expDataModel.getAcquisitionConfig() != null)
            {
                getHeader();
            }
            trafficLightPanel1.changeTrafficStatus(trafficLightPanel1.GREEN);
        }
        
        public HardwareAcquisitionConfig getHeader()
        {
            if(header == null)
            {
                header = expDataModel.getAcquisitionConfig();
                if(header!=null)
                {
                    int total_samples=header.getTotalSamples();
                    
                    experimentProgressBar.setIndeterminate(false);
                    experimentProgressBar.setMaximum(total_samples-1);
                    experimentProgressBar.setMinimum(0);
                    experimentProgressBar.setValue(0);
                    experimentProgressBar.setString("0%");
                }
            }
            
            
            return header;
        }
        
        
        public void dataModelStartedNoData()
        {
            lblExpStatus.setText(STARTED_NODATA_STR + "...");
            experimentProgressBar.setIndeterminate(true);
            trafficLightPanel1.changeTrafficStatus(trafficLightPanel1.BLINK);
        }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPauseExperiment;
    private javax.swing.JButton btnPlayExperiment;
    private javax.swing.JProgressBar experimentProgressBar;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanelCenter;
    private javax.swing.JLabel lblExpStatus;
    private javax.swing.JTabbedPane tabPaneExperiment;
    private com.linkare.rec.impl.baseUI.control.TrafficLightPanel trafficLightPanel1;
    // End of variables declaration//GEN-END:variables
    
    /** Holds value of property expDataModel. */
    private ExpDataModel expDataModel;
    
    /** Utility field holding list of ExpDataModelListeners. */
    private transient ArrayList<ExpDataDisplay> dataDisplayList;
    
}
