/*
 * DefaultExperimentGraph.java
 *
 * Created on 7 de Maio de 2003, 18:47
 */

package com.linkare.rec.impl.baseUI.graph;

import java.util.logging.LogManager;
import java.util.logging.Logger;

import javax.swing.Icon;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.impl.client.experiment.ExpDataDisplay;
import com.linkare.rec.impl.client.experiment.ExpDataModel;
import com.linkare.rec.impl.client.experiment.ExpDataModelListener;
import com.linkare.rec.impl.client.experiment.NewExpDataEvent;


/**
 *
 * @author Jos√© Pedro Pereira - Linkare TI
 */
public class DefaultExperimentGraph extends javax.swing.JPanel implements ExpDataDisplay, ExpDataModelListener
{
	private static String UI_CLIENT_LOGGER="ReC.baseUI";
    
    
	static
	{
		Logger l=LogManager.getLogManager().getLogger(UI_CLIENT_LOGGER);
		if(l==null)
		{
			LogManager.getLogManager().addLogger(Logger.getLogger(UI_CLIENT_LOGGER));
		}
	}
	
	/** Creates new form DefaultExperimentGraph */
	public DefaultExperimentGraph()
	{
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents()//GEN-BEGIN:initComponents
	{
	    defaultDatasetProxy = new com.linkare.rec.impl.client.experiment.DefaultDatasetProxy();
	    scrollPane = new javax.swing.JScrollPane();
	    labelWaitData = new javax.swing.JLabel();
	    
	    
	    setLayout(new java.awt.BorderLayout());
	    
	    labelWaitData.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	    labelWaitData.setText("waiting for data...");
	    scrollPane.setViewportView(labelWaitData);
	    
	    add(scrollPane, java.awt.BorderLayout.CENTER);
	    
	}//GEN-END:initComponents


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JScrollPane scrollPane;
	private com.linkare.rec.impl.client.experiment.DefaultDatasetProxy defaultDatasetProxy;
	private javax.swing.JLabel labelWaitData;
	// End of variables declaration//GEN-END:variables

	/** Holds value of property channelX. */
	private int channelX;	

	/** Holds value of property channelY. */
	private int channelY;
	
	public javax.swing.JComponent getDisplay()
	{
		return this;
	}

	public Icon getIcon()
	{
		return new javax.swing.ImageIcon(getClass().getResource("/com/linkare/rec/impl/baseUI/resources/chart16.gif"));
	}

	private ExpDataModel model=null;
	public void setExpDataModel(ExpDataModel model)
	{
	    this.model = model;
	    defaultDatasetProxy.setExpDataModel(model);
	    model.addExpDataModelListener(this);
	}

	public String getName()
	{
		return "Time Series Chart";
	}

	
	public javax.swing.JMenuBar getMenuBar(){ return null;} 
	public javax.swing.JToolBar getToolBar(){ return null;} 
	
	public void dataModelWaiting()
	{//BIG SILENT NOOP
	}
	
	public void dataModelStoped()
	{
            if(header == null && model != null)
                headerAvailable(model.getAcquisitionConfig());
	}
	
        public void newSamples(NewExpDataEvent evt)
	{
            if(header == null && model != null)
                headerAvailable(model.getAcquisitionConfig());
	}
	
	public void dataModelEnded()
	{
            if(header == null && model != null)
                headerAvailable(model.getAcquisitionConfig());
	}
	
	public void dataModelError()
	{
	}
	
	public void dataModelStarted()
	{
            if(header == null && model != null)
                headerAvailable(model.getAcquisitionConfig());
	}
	
	public void dataModelStartedNoData()
	{
	    if(header == null && model != null)
                headerAvailable(model.getAcquisitionConfig());
	}
	    
        private HardwareAcquisitionConfig header = null;
        
        private void headerAvailable(HardwareAcquisitionConfig header)
        {
            if(header == null)
		return;                        
	    	                
            this.header = header;
	    NumberAxis timeAxis = new NumberAxis("Elapsed Time [ms]");
	    timeAxis.setAutoRange(true);
	    timeAxis.setAutoRangeStickyZero(false);
	    timeAxis.setAutoRangeIncludesZero(false);
	    NumberAxis valueAxis = new NumberAxis("Acquisition Channels");
	    valueAxis.setAutoRange(true);
	    valueAxis.setAutoRangeStickyZero(false);
	    valueAxis.setAutoRangeIncludesZero(false);
	    
            XYToolTipGenerator tooltipGenerator = new StandardXYToolTipGenerator();
            
	    XYPlot plot = new XYPlot(defaultDatasetProxy, timeAxis, valueAxis, new StandardXYItemRenderer(StandardXYItemRenderer.SHAPES_AND_LINES,
                                                    tooltipGenerator));
	    
        
	    chart = new JFreeChart(header.getFamiliarName(), JFreeChart.DEFAULT_TITLE_FONT, plot, true);

	    ChartPanel panel=new ChartPanel(chart);
	    panel.setPreferredSize(new java.awt.Dimension(350,300));
	    //panel.setMinimumSize(new java.awt.Dimension(350,300));
	    //panel.setSize(new java.awt.Dimension(350,300));
	    panel.setMouseZoomable(true,false);
	    
	    scrollPane.remove(labelWaitData);
	    scrollPane.setViewportView(panel);
        }
        
	private boolean isScaleSet=false;
	
	private JFreeChart chart =null;
}
