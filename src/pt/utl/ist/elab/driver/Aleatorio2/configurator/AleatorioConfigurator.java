/*
 * AleatorioConfigurator.java
 *
 * Created on 16 de Junho de 2003, 15:13
 */

package pt.utl.ist.elab.driver.Aleatorio2.configurator;

/**
 *
 * @author Pedro Carvalho - LEFT - IST
 */
public class AleatorioConfigurator extends javax.swing.JFrame {
    
    
    
    /**
	 * 
	 */
	private static final long serialVersionUID = 690513689414949840L;

	/** Creates new form AleatorioConfigurator */
    public AleatorioConfigurator() {
        initComponents();
        readProperties();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        aleatorioConfiguratorTab = new javax.swing.JTabbedPane();
        thresholdsTab = new javax.swing.JPanel();
        BWThresholdLabel = new javax.swing.JLabel();
        houghTransformPanel = new javax.swing.JPanel();
        houghThreshold1Label = new javax.swing.JLabel();
        houghThreshold2Label = new javax.swing.JLabel();
        houghThreshold1Combo = new javax.swing.JComboBox();
        houghThreshold2Combo = new javax.swing.JComboBox();
        houghThreshold3Label = new javax.swing.JLabel();
        houghThreshold3Combo = new javax.swing.JComboBox();
        convTransPanel = new javax.swing.JPanel();
        convThresholdLabel = new javax.swing.JLabel();
        convThresholdCombo = new javax.swing.JComboBox();
        BWThresholdCombo = new javax.swing.JComboBox();
        mediaPanel = new javax.swing.JPanel();
        audioPanel = new javax.swing.JPanel();
        minWaveDurationLabel = new javax.swing.JLabel();
        minWaveDurationCombo = new javax.swing.JComboBox();
        maxWaveDurationLabel = new javax.swing.JLabel();
        maxWaveDurationCombo = new javax.swing.JComboBox();
        WaveFrequencyPanel = new javax.swing.JPanel();
        WaveFrequencyLabel = new javax.swing.JLabel();
        waveFrequencyCombo = new javax.swing.JComboBox();
        diceTab = new javax.swing.JPanel();
        numberOfDiceLabel = new javax.swing.JLabel();
        maxWidthOfDieLabel = new javax.swing.JLabel();
        numberOfDiceCombo = new javax.swing.JComboBox();
        maxValueOfDieLabel = new javax.swing.JLabel();
        minValueOfDieLabel = new javax.swing.JLabel();
        maxValueOfDieCombo = new javax.swing.JComboBox();
        minValueOfDieCombo = new javax.swing.JComboBox();
        maxWidthOfDieCombo = new javax.swing.JComboBox();
        radiusOfSpotLabel = new javax.swing.JLabel();
        radiusOfSpotCombo = new javax.swing.JComboBox();
        buttonsPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        applyButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("Aleatorio Configurator");
        setName("Aleatorio Configurator");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        aleatorioConfiguratorTab.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        aleatorioConfiguratorTab.setName("AleatorioConfiguratorTab");
        thresholdsTab.setLayout(new java.awt.GridBagLayout());

        thresholdsTab.setName("thresholdsTab");
        BWThresholdLabel.setText("Black&White Threshold");
        BWThresholdLabel.setToolTipText("Threshold used to discern black from white, in the grayscale. anything above this threshold will be white.");
        BWThresholdLabel.setName("BWThresholdLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 4;
        thresholdsTab.add(BWThresholdLabel, gridBagConstraints);

        houghTransformPanel.setLayout(new java.awt.GridBagLayout());

        houghTransformPanel.setBorder(new javax.swing.border.TitledBorder("Hough Transform"));
        houghTransformPanel.setName("houghTransformPanel");
        houghThreshold1Label.setText("First Threshold");
        houghThreshold1Label.setToolTipText("First threshold used for detection of circles, after applying the Hough Transform.");
        houghThreshold1Label.setName("houghThreshold1Label");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 55;
        houghTransformPanel.add(houghThreshold1Label, gridBagConstraints);

        houghThreshold2Label.setText("Second Threshold");
        houghThreshold2Label.setToolTipText("Second threshold used for detection of circles, after applying the Hough Transform.");
        houghThreshold2Label.setName("houghThreshold2Label");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        houghTransformPanel.add(houghThreshold2Label, gridBagConstraints);

        houghThreshold1Combo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "110", "120", "130", "140", "150", "160", "170", "180", "190", "200", "210", "220", "230", "240", "250", "255" }));
        houghThreshold1Combo.setToolTipText("First threshold used for detection of circles, after applying the Hough Transform.");
        houghThreshold1Combo.setName("houghThreshold1Combo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 61;
        houghTransformPanel.add(houghThreshold1Combo, gridBagConstraints);

        houghThreshold2Combo.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        houghThreshold2Combo.setToolTipText("Second threshold used for detection of circles, after applying the Hough Transform.");
        houghThreshold2Combo.setName("houghThreshold2Combo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 61;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        houghTransformPanel.add(houghThreshold2Combo, gridBagConstraints);

        houghThreshold3Label.setText("Third Threshold");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        houghTransformPanel.add(houghThreshold3Label, gridBagConstraints);

        houghThreshold3Combo.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        houghTransformPanel.add(houghThreshold3Combo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 15;
        thresholdsTab.add(houghTransformPanel, gridBagConstraints);

        convTransPanel.setLayout(new java.awt.GridBagLayout());

        convTransPanel.setBorder(new javax.swing.border.TitledBorder("Convolution Transform"));
        convTransPanel.setName("convTransPanel");
        convThresholdLabel.setText("Convolution Threshold");
        convThresholdLabel.setToolTipText("Threshold used to determine the center of circles, after applying the convolution Transform.");
        convThresholdLabel.setName("convThresholdLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        convTransPanel.add(convThresholdLabel, gridBagConstraints);

        convThresholdCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        convThresholdCombo.setToolTipText("Threshold used to determine the center of circles, after applying the convolution Transform.");
        convThresholdCombo.setName("convThresholdCombo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 61;
        convTransPanel.add(convThresholdCombo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 15;
        thresholdsTab.add(convTransPanel, gridBagConstraints);

        BWThresholdCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        BWThresholdCombo.setToolTipText("Threshold used to discern black from white, in the grayscale. Anything above this threshold will be white.");
        BWThresholdCombo.setName("BWThresholdCombo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 61;
        thresholdsTab.add(BWThresholdCombo, gridBagConstraints);

        aleatorioConfiguratorTab.addTab("Thresholds", thresholdsTab);

        mediaPanel.setLayout(new java.awt.GridBagLayout());

        mediaPanel.setToolTipText("");
        mediaPanel.setName("mediaPanel");
        audioPanel.setLayout(new java.awt.GridBagLayout());

        audioPanel.setBorder(new javax.swing.border.TitledBorder("Audio"));
        audioPanel.setName("audioPanel");
        minWaveDurationLabel.setText("Minimum Wave Duration");
        minWaveDurationLabel.setName("minWaveDurationLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        audioPanel.add(minWaveDurationLabel, gridBagConstraints);

        minWaveDurationCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0.5", "1", "1.5", "2", "2.5", "3", "3.5", "4", "4.5", "5", "5.5", "6", "6.5", "7", "7.5", "8", "8.5", "9", "9.5", "10" }));
        minWaveDurationCombo.setName("minWaveDurationCombo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        audioPanel.add(minWaveDurationCombo, gridBagConstraints);

        maxWaveDurationLabel.setText("Maximum Wave Duration");
        maxWaveDurationLabel.setName("maxWaveDurationLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        audioPanel.add(maxWaveDurationLabel, gridBagConstraints);

        maxWaveDurationCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0.5", "1", "1.5", "2", "2.5", "3", "3.5", "4", "4.5", "5", "5.5", "6", "6.5", "7", "7.5", "8", "8.5", "9", "9.5", "10", "10.5", "11", "11.5", "12", "12.5", "13", "13.5", "14", "14.5", "15", "15.5", "16", "16.5", "17", "17.5", "18", "18.5", "19", "19.5", "20" }));
        maxWaveDurationCombo.setName("maxWaveDurationCombo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 8;
        audioPanel.add(maxWaveDurationCombo, gridBagConstraints);

        WaveFrequencyPanel.setLayout(new java.awt.GridBagLayout());

        WaveFrequencyPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153)));
        WaveFrequencyLabel.setText("Wave Freq. (Hz)");
        WaveFrequencyLabel.setName("WaveFrequencyLabel");
        WaveFrequencyPanel.add(WaveFrequencyLabel, new java.awt.GridBagConstraints());

        waveFrequencyCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        waveFrequencyCombo.setName("waveFrequencyCombo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        WaveFrequencyPanel.add(waveFrequencyCombo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.ipady = 27;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        audioPanel.add(WaveFrequencyPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        mediaPanel.add(audioPanel, gridBagConstraints);

        aleatorioConfiguratorTab.addTab("Media", mediaPanel);

        diceTab.setLayout(new java.awt.GridBagLayout());

        diceTab.setToolTipText("Stuff about dice");
        diceTab.setName("diceTab");
        numberOfDiceLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        numberOfDiceLabel.setText("Number of Dice");
        numberOfDiceLabel.setToolTipText("Number of dice in experiment");
        numberOfDiceLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        numberOfDiceLabel.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 40, 0, 0);
        diceTab.add(numberOfDiceLabel, gridBagConstraints);

        maxWidthOfDieLabel.setText("Maximum Width of Die");
        maxWidthOfDieLabel.setToolTipText("Maximum distance, in pixels, from the center of one dot to another in the same die.");
        maxWidthOfDieLabel.setName("maxWidthOfDieLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(15, 40, 0, 0);
        diceTab.add(maxWidthOfDieLabel, gridBagConstraints);

        numberOfDiceCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        numberOfDiceCombo.setToolTipText("Number of dice in experiment");
        numberOfDiceCombo.setName("numberOfDiceCombo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 61;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 0);
        diceTab.add(numberOfDiceCombo, gridBagConstraints);

        maxValueOfDieLabel.setText("Maximum Value of Die");
        maxValueOfDieLabel.setToolTipText("Minimum value of the face of each die in the experiment.");
        maxValueOfDieLabel.setName("maxValueOfDieLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(15, 40, 0, 0);
        diceTab.add(maxValueOfDieLabel, gridBagConstraints);

        minValueOfDieLabel.setText("Minimum Value of Die");
        minValueOfDieLabel.setToolTipText("Maximum value of the face of each die in the experiment.");
        minValueOfDieLabel.setName("minValueOfDieLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(15, 40, 0, 0);
        diceTab.add(minValueOfDieLabel, gridBagConstraints);

        maxValueOfDieCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        maxValueOfDieCombo.setToolTipText("Minimum value of the face of each die in the experiment.");
        maxValueOfDieCombo.setName("maxValueOfDieCombo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 61;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 0, 0);
        diceTab.add(maxValueOfDieCombo, gridBagConstraints);

        minValueOfDieCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        minValueOfDieCombo.setToolTipText("Maximum value of the face of each die in the experiment.");
        minValueOfDieCombo.setName("minValueOfDieCombo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 61;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 0, 0);
        diceTab.add(minValueOfDieCombo, gridBagConstraints);

        maxWidthOfDieCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        maxWidthOfDieCombo.setToolTipText("Maximum distance, in pixels, from the center of one dot to another in the same die.");
        maxWidthOfDieCombo.setName("maxWidthOfDieCombo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 61;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 0, 0);
        diceTab.add(maxWidthOfDieCombo, gridBagConstraints);

        radiusOfSpotLabel.setText("Radius of Spot");
        radiusOfSpotLabel.setToolTipText("Defines the radius of each spot of the dice in pixels.");
        radiusOfSpotLabel.setName("radiusOfSpotLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 48;
        gridBagConstraints.insets = new java.awt.Insets(15, 40, 0, 0);
        diceTab.add(radiusOfSpotLabel, gridBagConstraints);

        radiusOfSpotCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        radiusOfSpotCombo.setToolTipText("Defines the radius of each spot of the dice in pixels.");
        radiusOfSpotCombo.setName("radiusOfSpotCombo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 61;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 0, 0);
        diceTab.add(radiusOfSpotCombo, gridBagConstraints);

        aleatorioConfiguratorTab.addTab("Dice", diceTab);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 33;
        gridBagConstraints.ipady = 20;
        getContentPane().add(aleatorioConfiguratorTab, gridBagConstraints);

        okButton.setMnemonic('O');
        okButton.setText("OK");
        okButton.setName("okButton");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonHandler(evt);
            }
        });

        buttonsPanel.add(okButton);

        applyButton.setMnemonic('A');
        applyButton.setText("Apply");
        applyButton.setName("applyButton");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonHandler(evt);
            }
        });

        buttonsPanel.add(applyButton);

        cancelButton.setMnemonic('C');
        cancelButton.setText("Cancel");
        cancelButton.setName("cancelButton");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonHandler(evt);
            }
        });

        buttonsPanel.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 191;
        gridBagConstraints.ipady = 4;
        getContentPane().add(buttonsPanel, gridBagConstraints);

        pack();
    }//GEN-END:initComponents

    private void cancelButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonHandler
        // Add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelButtonHandler

    private void okButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonHandler
        // Add your handling code here:
        saveProperties();
        this.dispose();
    }//GEN-LAST:event_okButtonHandler

    private void applyButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonHandler
        // Add your handling code here:
        saveProperties();
    }//GEN-LAST:event_applyButtonHandler
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**Properties stuff...*/     
    java.io.InputStream is=null;
    java.io.File propFile=null;
    String propertiesLocation=null;
    java.util.Properties props=null;

    /**
     *Loads the properties File
     */
    public void readProperties()
    {
        propertiesLocation="AleatorioConfigurator.properties";
        //propertiesLocation="c://Documents and Settings//PC//My Documents//java//Prog//pt//utl//ist//elab//driver//Aleatorio//configurator//AleatorioConfigurator.properties";
        //propertiesLocation=getClass().getResource("AleatorioConfigurator.properties").toString();
        //propertiesLocation=propertiesLocation.substring(6);
        
        while (propertiesLocation.indexOf("%20") != -1)
        {
            String temp = propertiesLocation.substring(propertiesLocation.indexOf("%20")+3);
            propertiesLocation = propertiesLocation.substring(0,propertiesLocation.indexOf("%20"));
            propertiesLocation = propertiesLocation.concat(" " + temp);
        }
        
        propFile=new java.io.File(propertiesLocation);
        try
        {
            is=new java.io.FileInputStream(propFile);
            props=new java.util.Properties();
            props.load(is);            
            is.close();
        }
        catch(java.io.FileNotFoundException fnfe)
        {
            System.out.println("Couldn't find the file...\n"+fnfe);
            System.exit(0);
        }
        catch(java.io.IOException ioe)
        {
            System.out.println("Exception...\n"+ioe);
            System.exit(0);
        }
        
        numberOfDiceCombo.setSelectedItem(props.getProperty("numberOfDice"));
        maxValueOfDieCombo.setSelectedItem(props.getProperty("maxValueOfDie"));
        minValueOfDieCombo.setSelectedItem(props.getProperty("minValueOfDie"));
        maxWidthOfDieCombo.setSelectedItem(props.getProperty("maxWidthOfDie"));
        BWThresholdCombo.setSelectedItem(props.getProperty("BWThreshold"));
        houghThreshold1Combo.setSelectedItem(props.getProperty("houghThreshold1"));
        houghThreshold2Combo.setSelectedItem(props.getProperty("houghThreshold2"));
        houghThreshold3Combo.setSelectedItem(props.getProperty("houghThreshold3"));
        convThresholdCombo.setSelectedItem(props.getProperty("convThreshold"));
        //movieDurationCombo.setSelectedItem(props.getProperty("movieDuration"));
        minWaveDurationCombo.setSelectedItem(props.getProperty("minWaveDuration"));
        maxWaveDurationCombo.setSelectedItem(props.getProperty("maxWaveDuration"));
        waveFrequencyCombo.setSelectedItem(props.getProperty("waveFrequency"));
        radiusOfSpotCombo.setSelectedItem(props.getProperty("radiusOfSpot"));
    }
    
    
    private void saveProperties()
    {
        props.setProperty("numberOfDice",(String)numberOfDiceCombo.getSelectedItem());
        props.setProperty("maxValueOfDie",(String)maxValueOfDieCombo.getSelectedItem());
        props.setProperty("minValueOfDie",(String)minValueOfDieCombo.getSelectedItem());
        props.setProperty("maxWidthOfDie",(String)maxWidthOfDieCombo.getSelectedItem());
        props.setProperty("BWThreshold",(String)BWThresholdCombo.getSelectedItem());
        props.setProperty("houghThreshold1",(String)houghThreshold1Combo.getSelectedItem());
        props.setProperty("houghThreshold2",(String)houghThreshold2Combo.getSelectedItem());
        props.setProperty("houghThreshold3",(String)houghThreshold3Combo.getSelectedItem());
        props.setProperty("convThreshold",(String)convThresholdCombo.getSelectedItem());
        //props.setProperty("movieDuration",(String)movieDurationCombo.getSelectedItem());
        props.setProperty("minWaveDuration",(String)minWaveDurationCombo.getSelectedItem());
        props.setProperty("maxWaveDuration",(String)maxWaveDurationCombo.getSelectedItem());
        
        java.io.FileOutputStream fos=null;
        try
        {
            fos=new java.io.FileOutputStream(propFile);            
            props.store(fos,"Elab:Aleatorio Server properties");
            fos.close();
        }
        catch(java.io.IOException ioe)
        {
            System.out.println("Couldn't write properties file.\n"+ioe);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new AleatorioConfigurator().setVisible(true);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel maxWidthOfDieLabel;
    private javax.swing.JComboBox minValueOfDieCombo;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JPanel houghTransformPanel;
    private javax.swing.JTabbedPane aleatorioConfiguratorTab;
    private javax.swing.JPanel diceTab;
    private javax.swing.JComboBox maxWidthOfDieCombo;
    private javax.swing.JLabel maxValueOfDieLabel;
    private javax.swing.JLabel minWaveDurationLabel;
    private javax.swing.JComboBox maxValueOfDieCombo;
    private javax.swing.JLabel numberOfDiceLabel;
    private javax.swing.JLabel minValueOfDieLabel;
    private javax.swing.JLabel convThresholdLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox minWaveDurationCombo;
    private javax.swing.JPanel thresholdsTab;
    private javax.swing.JComboBox radiusOfSpotCombo;
    private javax.swing.JLabel WaveFrequencyLabel;
    private javax.swing.JComboBox numberOfDiceCombo;
    private javax.swing.JLabel maxWaveDurationLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel mediaPanel;
    private javax.swing.JComboBox convThresholdCombo;
    private javax.swing.JLabel houghThreshold1Label;
    private javax.swing.JLabel radiusOfSpotLabel;
    private javax.swing.JPanel audioPanel;
    private javax.swing.JComboBox maxWaveDurationCombo;
    private javax.swing.JComboBox houghThreshold3Combo;
    private javax.swing.JLabel houghThreshold3Label;
    private javax.swing.JButton applyButton;
    private javax.swing.JLabel houghThreshold2Label;
    private javax.swing.JPanel WaveFrequencyPanel;
    private javax.swing.JComboBox waveFrequencyCombo;
    private javax.swing.JComboBox BWThresholdCombo;
    private javax.swing.JComboBox houghThreshold2Combo;
    private javax.swing.JPanel convTransPanel;
    private javax.swing.JComboBox houghThreshold1Combo;
    private javax.swing.JLabel BWThresholdLabel;
    // End of variables declaration//GEN-END:variables
    
}
