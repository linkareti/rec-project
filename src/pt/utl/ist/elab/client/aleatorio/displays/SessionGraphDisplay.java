/*
 * GraphDisplay.java
 *
 * Created on 23 de Junho de 2003, 18:37
 */

package pt.utl.ist.elab.client.aleatorio.displays;

/**
 *
 * @author Pedro Carvalho - LEFT - IST
 */
public class SessionGraphDisplay extends javax.swing.JPanel implements com.linkare.rec.impl.client.experiment.ExpDataDisplay, com.linkare.rec.impl.client.experiment.ExpDataModelListener{
    
    /** Creates new form GraphDisplay */
    public SessionGraphDisplay() {
        initComponents();
        initMyComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        sessionStatValuesPanel = new javax.swing.JPanel();
        muLabel = new javax.swing.JLabel();
        muText = new javax.swing.JTextField();
        sigmaLabel = new javax.swing.JLabel();
        sigmaText = new javax.swing.JTextField();
        y0Label = new javax.swing.JLabel();
        y0Text = new javax.swing.JTextField();
        ampLabel = new javax.swing.JLabel();
        ampText = new javax.swing.JTextField();
        chiSqLabel = new javax.swing.JLabel();
        chiSqText = new javax.swing.JTextField();
        countsLabel = new javax.swing.JLabel();
        countsText = new javax.swing.JTextField();
        sessionStatScrollPane = new javax.swing.JScrollPane();
        RefreshButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        sessionStatValuesPanel.setLayout(new java.awt.GridLayout(3, 4, 5, 5));

        sessionStatValuesPanel.setBorder(new javax.swing.border.TitledBorder("Session Parameters"));
        sessionStatValuesPanel.setMinimumSize(new java.awt.Dimension(400, 50));
        sessionStatValuesPanel.setName("sessionStatValuesPanel");
        sessionStatValuesPanel.setPreferredSize(new java.awt.Dimension(400, 80));
        muLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        muLabel.setText(" Mean Value =");
        muLabel.setName("muLabel");
        sessionStatValuesPanel.add(muLabel);

        muText.setBackground(new java.awt.Color(204, 204, 204));
        muText.setEditable(false);
        muText.setMinimumSize(new java.awt.Dimension(40, 20));
        muText.setName("muText");
        sessionStatValuesPanel.add(muText);

        sigmaLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        sigmaLabel.setText("Sigma =");
        sigmaLabel.setName("sigmaLabel");
        sessionStatValuesPanel.add(sigmaLabel);

        sigmaText.setBackground(new java.awt.Color(204, 204, 204));
        sigmaText.setEditable(false);
        sigmaText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        sigmaText.setMinimumSize(new java.awt.Dimension(40, 20));
        sigmaText.setName("sigmaText");
        sessionStatValuesPanel.add(sigmaText);

        y0Label.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        y0Label.setText("Y_0 =");
        y0Label.setName("y0Label");
        sessionStatValuesPanel.add(y0Label);

        y0Text.setBackground(new java.awt.Color(204, 204, 204));
        y0Text.setEditable(false);
        y0Text.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        y0Text.setMinimumSize(new java.awt.Dimension(40, 20));
        y0Text.setName("y0Text");
        sessionStatValuesPanel.add(y0Text);

        ampLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ampLabel.setText("Amplitude =");
        ampLabel.setName("ampLabel");
        sessionStatValuesPanel.add(ampLabel);

        ampText.setBackground(new java.awt.Color(204, 204, 204));
        ampText.setEditable(false);
        ampText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ampText.setName("ampText");
        sessionStatValuesPanel.add(ampText);

        chiSqLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        chiSqLabel.setText("\u03c7\u00b2 =");
        sessionStatValuesPanel.add(chiSqLabel);

        chiSqText.setEditable(false);
        sessionStatValuesPanel.add(chiSqText);

        countsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        countsLabel.setText("Counts =");
        sessionStatValuesPanel.add(countsLabel);

        countsText.setEditable(false);
        sessionStatValuesPanel.add(countsText);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(sessionStatValuesPanel, gridBagConstraints);

        sessionStatScrollPane.setBorder(new javax.swing.border.TitledBorder("Session Statistics"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(sessionStatScrollPane, gridBagConstraints);

        RefreshButton.setText("Refresh");
        RefreshButton.setToolTipText("Refresh Graph!");
        RefreshButton.setMinimumSize(new java.awt.Dimension(2, 2));
        RefreshButton.setPreferredSize(new java.awt.Dimension(5, 5));
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformedHandler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        add(RefreshButton, gridBagConstraints);

    }//GEN-END:initComponents

    private void refreshButtonActionPerformedHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformedHandler
        // Add your handling code here:
        double lambda = 0.01; //0.001
        double termEpsilon = 0.01;
        int maxIter = 100;
        Amp = getMax(sessionY);
        
        for (int i=0; i<sessionY.length; i++)
            if (sessionY[i]>0)
                System.out.println("sessionY["+i+"] = "+sessionY[i]);
        
        double[] params = pt.utl.ist.elab.client.aleatorio.utils.LMFit.solve(sessionX,sessionY,mu,sigma,y0,Amp,lambda,termEpsilon,maxIter);
        graphPanel.updateGraph(sessionX, sessionY, params[0], params[1], params[2], params[3]);
        imageStorePanel.setImage(graphPanel.getImage());
        imageStorePanel.repaint();
        
        counts = getCounts(sessionY);
        muText.setText(String.valueOf(params[0]));
        sigmaText.setText(String.valueOf(params[1]));
        y0Text.setText(String.valueOf(params[2]));
        ampText.setText(String.valueOf(params[3]));
        chiSqText.setText(String.valueOf(params[4]));
        countsText.setText(String.valueOf(counts));
    }//GEN-LAST:event_refreshButtonActionPerformedHandler
    
    private void initMyComponents()
    {
        graphPanel = new GraphPanel();
    }//initMyComponents()
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane sessionStatScrollPane;
    private javax.swing.JTextField y0Text;
    private javax.swing.JPanel sessionStatValuesPanel;
    private javax.swing.JTextField ampText;
    private javax.swing.JTextField sigmaText;
    private javax.swing.JLabel ampLabel;
    private javax.swing.JLabel muLabel;
    private javax.swing.JTextField muText;
    private javax.swing.JTextField countsText;
    private javax.swing.JTextField chiSqText;
    private javax.swing.JLabel y0Label;
    private javax.swing.JLabel chiSqLabel;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JLabel countsLabel;
    private javax.swing.JLabel sigmaLabel;
    // End of variables declaration//GEN-END:variables
    
    //My Vars
    private pt.utl.ist.elab.client.aleatorio.utils.StorageSingleton sessionGraphDisplaySingleton = pt.utl.ist.elab.client.aleatorio.utils.StorageSingleton.getSingleton();
    private int numberOfDice, minValueOfDie, maxValueOfDie, counts=0;
    private GraphPanel graphPanel;
    private ImageStorePanel imageStorePanel = new ImageStorePanel();
    private double[] sessionX, sessionY;
    private int[] xx=null;
    private double mu, sigma, y0, Amp;
    private com.linkare.rec.impl.client.experiment.ExpDataModel model;
    private String name = "Session Statistics";
    private javax.swing.Icon icon=new javax.swing.ImageIcon(getClass().getResource("/pt/utl/ist/elab/client/Aleatorio/Resource/AleatorioIcon.gif"));
    
    /**
     *ExpDataDisplay Implementation
     */
    public void setExpDataModel(com.linkare.rec.impl.client.experiment.ExpDataModel model)
    {
        if(this.model!=null)
            model.removeExpDataModelListener(this);
	
	this.model=model;
	
	if(this.model!=null)
            this.model.addExpDataModelListener(this);
        
    }//setExpDataModel(ExpDataModel model)
    
    public javax.swing.JComponent getDisplay()
    {
        return this;
    }//getDisplay()

    public String getName()
    {
        return name;
    }//getName()
    
    public javax.swing.Icon getIcon()
    {
        return icon;
    }//getIcon()
    
    public javax.swing.JMenuBar getMenuBar()
    {
        return null;
    }//getMenuBar()
    
    public javax.swing.JToolBar getToolBar() 
    {
        return null;
    }//getToolBar()

    
    
    /**
     *ExpDataModelListener implementation
     */
    
    public void newSamples(com.linkare.rec.impl.client.experiment.NewExpDataEvent evt)
    {
        int lastSample=evt.getSamplesEndIndex(), firstSample=evt.getSamplesStartIndex();
        for (int i = firstSample; i < lastSample+1;i++)
        {
            if (sessionX == null)
            {
                /*
                byte[] configurationByteArray;
                if (model.getValueAt(lastSample, model.getChannelIndex("Configuration")) != null)
                {
                    configurationByteArray = model.getValueAt(lastSample, model.getChannelIndex("Configuration")).getValue().getByteArrayValue().getData();
                    int[] configurationValues =  byteArray2IntArray(configurationByteArray);
                }//if*/
                if (model.getValueAt(i, model.getChannelIndex("XX")) != null)
                {
                    byte[] xxByteArray = model.getValueAt(i, model.getChannelIndex("XX")).getValue().getByteArrayValue().getData();
                    xx = byteArray2IntArray(xxByteArray); //xx[0] is the first element of sessionX; xx[1] is the last.

                    //System.out.println("xx[0]:"+xx[0]+", xx[1]:"+xx[1]);
                    sessionX = new double[xx[1] - xx[0] + 1];
                    sessionY = new double[sessionX.length];
                    for(int index = 0; index<sessionX.length; index++)
                    {
                        sessionX[index] = (double) (xx[0] + index);
                        sessionY[index] = 0;
                    }
                    //these are just initial values for the fitting algorithm
                    mu = sessionX[sessionX.length/2];
                    sigma = mu / 2.;
                    y0 = 0;
                    //Amp = sessionY[getIndexOfMax(sessionY)];
                    Amp = getMax(sessionY);
                    graphPanel = new GraphPanel(sessionX, sessionY, mu, sigma, y0, Amp);
                    imageStorePanel.setImage(graphPanel.getImage());
                    imageStorePanel.setPreferredSize(new java.awt.Dimension(graphPanel.imageSize()[0],graphPanel.imageSize()[1]));
                    sessionStatScrollPane.setViewportView(imageStorePanel);
                    
                    //while (sessionGraphDisplaySingleton.checkNewValueAvailableSess());   //This might result in something getting stuck!
                                                                        //If it does, we'll have to use some eventListener

                    /*sessionY[sessionGraphDisplaySingleton.sessGetStoredInt() - xx[0]]++;

                    double lambda = 0.01; //0.001
                    double termEpsilon = 0.01;
                    int maxIter = 100;
                    double[] params = pt.utl.ist.elab.client.aleatorio.utils.LMFit.solve(sessionX,sessionY,mu,sigma,y0,Amp,lambda,termEpsilon,maxIter);
                    graphPanel.updateGraph(sessionX, sessionY, mu, sigma, y0, Amp);

                    muText.setText(String.valueOf(params[0]));
                    sigmaText.setText(String.valueOf(params[1]));
                    y0Text.setText(String.valueOf(params[2]));
                    ampText.setText(String.valueOf(params[3]));
                     */
                }//if
            }//if
            if (model.getValueAt(i, model.getChannelIndex("CenterCount")) != null && xx != null)
            {
                //sessionY[sessionGraphDisplaySingleton.sessGetStoredInt() - xx[0]]++;
                sessionY[model.getValueAt(i,model.getChannelIndex("CenterCount")).getValue().getIntValue() - xx[0]]++;
                
                double lambda = 0.01; //0.001
                double termEpsilon = 0.01;
                int maxIter = 100;
                Amp = getMax(sessionY);
                double[] params = pt.utl.ist.elab.client.aleatorio.utils.LMFit.solve(sessionX,sessionY,mu,sigma,y0,Amp,lambda,termEpsilon,maxIter);
                graphPanel.updateGraph(sessionX, sessionY, params[0], params[1], params[2], params[3]);
                imageStorePanel.setImage(graphPanel.getImage());
                imageStorePanel.repaint();
                
                counts++;
                muText.setText(String.valueOf(params[0]));
                sigmaText.setText(String.valueOf(params[1]));
                y0Text.setText(String.valueOf(params[2]));
                ampText.setText(String.valueOf(params[3]));
                chiSqText.setText(String.valueOf(params[4]));
                countsText.setText(String.valueOf(counts));
            }//if
                
        }//for
    }//newSamples(NewExpDataEvent evt)
    
    public void dataModelStoped()
    {
    }//dataModelStoped()
    
    public void dataModelRunning()
    {
    }//dataModelRunning()

    public void headerAvailable(com.linkare.rec.data.config.HardwareAcquisitionConfig header)
    {
    }//headerAvailable(HardwareAcquisitionConfig header)
    
    /**
     *Utilities
     */
    
    private int[] byteArray2IntArray(byte[] byteArray)
    {
        int[] temp = new int[byteArray.length / 4];
        
        for (int index = 0; index < temp.length; index++)
        {
            temp[index] = (int)(byteArray[4*index] & 0xff) << 24;
            temp[index] = (int)(byteArray[4*index+1] & 0xff) << 16;
            temp[index] += (int)(byteArray[4*index+2] & 0xff) << 8;
            temp[index] += (int)(byteArray[4*index+3] & 0xff);
        }
        return temp;
    }//byteArray2IntArray(byte[] byteArray)
    
    /*private int getIndexOfMax(double[] array)
    {
        if(array==null)
            return -1;
        
        double value = array[0];
        int valueIndex = 0;
        for(int index = 1; index < array.length; index++)
            if(array[index] > value)
            {
                valueIndex = index;
                value = array[index];
            }
        return valueIndex;
    }//getIndexOfMax(double[] array)*/
    
    private double getMax(double[] array)
    {
        if(array==null)
            return 0.;
        
        double value = array[0];
        for(int index = 1; index < array.length; index++)
            value = (array[index] > value) ? array[index] : value;
            
        return value;
    }//getMax(double[] array)
    
    private int getCounts(double[] array)
    {
        counts = 0;
        for (int i =0; i<array.length; i++)
        {
            counts += (int)array[i];
        }//for_i
        return counts;
    }
    
    public void dataModelWaiting()
    {
    }
    
    public void dataModelStarted()
    {
    }
    
    public void dataModelStartedNoData()
    {
    }
    
    public void dataModelEnded()
    {
    }
    
    public void dataModelError()
    {
    }
    
//getCounts
}
