/*
 * StatSoundCustomizer.java
 *
 * Created on 11 October 2003, 11:03
 */

package pt.utl.ist.elab.client.serial.stamp.statsound;

import com.linkare.rec.data.config.HardwareAcquisitionConfig;
import com.linkare.rec.data.metadata.HardwareInfo;
import com.linkare.rec.impl.client.customizer.ICustomizerListener;
import com.linkare.rec.impl.i18n.ReCResourceBundle;

/**
 *
 * @author  Andrï¿½
 *
 *TODO
 * 
 *
 *
 *
 */
public class StatSoundCustomizer extends javax.swing.JPanel implements com.linkare.rec.impl.client.customizer.ICustomizer
{
    
    /**Type of experiment*/
    private boolean soundExp=false;
    private boolean pistonExp=true;
    private boolean freqExp=false;
    
    /**Init vars*/
    private final int DEFAULT_NSAMPLES=20;
    private final int DEFAULT_NUM_POINTS=1000;
    private final int DEFAULT_FREQ_INI=250;
    private final int DEFAULT_FREQ_FIN=1000;
    private final int DEFAULT_PISTON_INI=1300;
    private final int DEFAULT_PISTON_FIN=1400;
    private int nSamples;
    private int freqIni;
    private int freqFin;
    private int pistonIni;
    private int pistonFin;
    private int nPoints;
        
    private static final String MAX_SAMPLES_STR = ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.maxsamples");
    
    /**REC*/
    private HardwareInfo hardwareInfo=null;
    private HardwareAcquisitionConfig acqConfig=null;
    private final javax.swing.ImageIcon ICON = new javax.swing.ImageIcon(getClass().getResource("/pt/utl/ist/elab/client/serial/stamp/statsound/resources/sound.gif")); 
    private final String TITLE = ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.customizer.title");;
    
    
    /** Creates new form StatSoundCustomizer */
    public StatSoundCustomizer() {
        initComponents();
        
        String pink = ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsound.lbl.pink");
        String pulse = ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsound.lbl.pulse");
        jComboBoxSoundVel.addItem(pink);
        jComboBoxSoundVel.addItem(pulse);
        
        defaultConfig();        
    }
    
    public void defaultConfig()
    {
        nSamples = DEFAULT_NSAMPLES;
        freqIni = DEFAULT_FREQ_INI;
        freqFin = DEFAULT_FREQ_FIN;
        pistonIni = DEFAULT_PISTON_INI;
        pistonFin = DEFAULT_PISTON_FIN;        
        nPoints = DEFAULT_NUM_POINTS;
        disableAllJPanelComps(jPanelFrequency);
        disableAllJPanelComps(jPanelSoundVel);
        jRadioButtonSoundVel.setEnabled(true);
        jSliderFreqFin.setValue(freqFin);
        jSliderFreqIni.setValue(freqIni);
        jSliderPistonFin.setValue(pistonFin);
        jSliderPistonIni.setValue(pistonIni);
        jTextFieldFreqFin.setText(""+jSliderFreqFin.getValue());
        jTextFieldFreqIni.setText(""+jSliderFreqIni.getValue());
        jTextFieldPistonFin.setText(""+jSliderPistonFin.getValue());
        jTextFieldPistonIni.setText(""+jSliderPistonIni.getValue());
        adjustNSamplesSlider();
        jTextFieldNSamples.setText(""+jSliderNSamples.getValue());        
        jRadioButtonMic2.setSelected(false);
        jRadioButtonMic3.setSelected(false);
        jRadioButtonMic4.setSelected(false);
        jCheckBoxHeat.setSelected(false);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSliderNSamplesPiston = new javax.swing.JSlider();
        jSliderNSamplesFreq = new javax.swing.JSlider();
        jSliderNSamplesSound = new javax.swing.JSlider();
        jPanelTypeExp = new javax.swing.JPanel();
        jRadioButtonStatWaves = new javax.swing.JRadioButton();
        jRadioButtonVaryPiston = new javax.swing.JRadioButton();
        jPanelPiston = new javax.swing.JPanel();
        jSliderPistonFin = new javax.swing.JSlider();
        jTextFieldPistonFin = new javax.swing.JTextField();
        jRadioButtonVaryFreq = new javax.swing.JRadioButton();
        jPanelFrequency = new javax.swing.JPanel();
        jSliderFreqFin = new javax.swing.JSlider();
        jTextFieldFreqFin = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jPanelSoundVel = new javax.swing.JPanel();
        jRadioButtonSoundVel = new javax.swing.JRadioButton();
        jComboBoxSoundVel = new javax.swing.JComboBox();
        jLabelSoundVel = new javax.swing.JLabel();
        jPanelGenConfs = new javax.swing.JPanel();
        jPanelMics = new javax.swing.JPanel();
        jLabelMic1 = new javax.swing.JLabel();
        jLabelMic2 = new javax.swing.JLabel();
        jLabelMic3 = new javax.swing.JLabel();
        jLabelMic4 = new javax.swing.JLabel();
        jLabelCH1 = new javax.swing.JLabel();
        jLabelCH2 = new javax.swing.JLabel();
        jRadioButtonMic1 = new javax.swing.JRadioButton();
        jRadioButtonMic2 = new javax.swing.JRadioButton();
        jRadioButtonMic3 = new javax.swing.JRadioButton();
        jRadioButtonMic4 = new javax.swing.JRadioButton();
        jCheckBoxHeat = new javax.swing.JCheckBox();
        jPanelPistonIni = new javax.swing.JPanel();
        jSliderPistonIni = new javax.swing.JSlider();
        jTextFieldPistonIni = new javax.swing.JTextField();
        jPanelFrequencyIni = new javax.swing.JPanel();
        jSliderFreqIni = new javax.swing.JSlider();
        jTextFieldFreqIni = new javax.swing.JTextField();
        jPanelNSamples = new javax.swing.JPanel();
        jTextFieldNSamples = new javax.swing.JTextField();
        jLabelNSamplesAlert = new javax.swing.JLabel();
        jSliderNSamples = new javax.swing.JSlider();
        jPanelSend = new javax.swing.JPanel();
        jButtonOK = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButtonDefaults = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        jSliderNSamplesPiston.setMajorTickSpacing(40);
        jSliderNSamplesPiston.setMaximum(130);
        jSliderNSamplesPiston.setMinimum(1);
        jSliderNSamplesPiston.setMinorTickSpacing(20);
        jSliderNSamplesPiston.setPaintLabels(true);
        jSliderNSamplesPiston.setPaintTicks(true);
        jSliderNSamplesFreq.setMajorTickSpacing(100);
        jSliderNSamplesFreq.setMaximum(600);
        jSliderNSamplesFreq.setMinimum(1);
        jSliderNSamplesFreq.setMinorTickSpacing(50);
        jSliderNSamplesFreq.setPaintLabels(true);
        jSliderNSamplesFreq.setPaintTicks(true);
        jSliderNSamplesFreq.setValue(100);
        jSliderNSamplesSound.setMajorTickSpacing(500);
        jSliderNSamplesSound.setMaximum(5000);
        jSliderNSamplesSound.setMinimum(500);
        jSliderNSamplesSound.setMinorTickSpacing(1);
        jSliderNSamplesSound.setPaintLabels(true);
        jSliderNSamplesSound.setPaintTicks(true);

        setLayout(new java.awt.BorderLayout());

        jPanelTypeExp.setLayout(new java.awt.GridBagLayout());

        jPanelTypeExp.setBorder(new javax.swing.border.TitledBorder(null, ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.type"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 0, 11), new java.awt.Color(0, 0, 153)));
        jRadioButtonStatWaves.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jRadioButtonStatWaves.setForeground(new java.awt.Color(0, 0, 153));
        jRadioButtonStatWaves.setSelected(true);
        jRadioButtonStatWaves.setText(ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.stat"));
        buttonGroup1.add(jRadioButtonStatWaves);
        jRadioButtonStatWaves.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRadioButtonStatWavesActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelTypeExp.add(jRadioButtonStatWaves, gridBagConstraints);

        jRadioButtonVaryPiston.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jRadioButtonVaryPiston.setForeground(new java.awt.Color(0, 0, 153));
        jRadioButtonVaryPiston.setSelected(true);
        jRadioButtonVaryPiston.setText(ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.vpiston"));
        buttonGroup2.add(jRadioButtonVaryPiston);
        jRadioButtonVaryPiston.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRadioButtonVaryPistonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 20, 0, 0);
        jPanelTypeExp.add(jRadioButtonVaryPiston, gridBagConstraints);

        jPanelPiston.setLayout(new java.awt.GridBagLayout());

        jPanelPiston.setBorder(new javax.swing.border.TitledBorder(null, ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.pistonend"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 0, 11), new java.awt.Color(0, 0, 153)));
        jSliderPistonFin.setMajorTickSpacing(40);
        jSliderPistonFin.setMaximum(1484);
        jSliderPistonFin.setMinimum(1264);
        jSliderPistonFin.setMinorTickSpacing(20);
        jSliderPistonFin.setPaintLabels(true);
        jSliderPistonFin.setPaintTicks(true);
        jSliderPistonFin.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jSliderPistonFinStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.ipady = 13;
        jPanelPiston.add(jSliderPistonFin, gridBagConstraints);

        jTextFieldPistonFin.setColumns(4);
        jTextFieldPistonFin.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jTextFieldPistonFin.setForeground(new java.awt.Color(0, 0, 153));
        jTextFieldPistonFin.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldPistonFin.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                jTextFieldPistonFinFocusLost(evt);
            }
        });
        jTextFieldPistonFin.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextFieldKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        jPanelPiston.add(jTextFieldPistonFin, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 20, 0, 0);
        jPanelTypeExp.add(jPanelPiston, gridBagConstraints);

        jRadioButtonVaryFreq.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jRadioButtonVaryFreq.setForeground(new java.awt.Color(0, 0, 153));
        jRadioButtonVaryFreq.setText(ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.vfreq"));
        buttonGroup2.add(jRadioButtonVaryFreq);
        jRadioButtonVaryFreq.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRadioButtonVaryFreqActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 20, 0, 0);
        jPanelTypeExp.add(jRadioButtonVaryFreq, gridBagConstraints);

        jPanelFrequency.setLayout(new java.awt.GridBagLayout());

        jPanelFrequency.setBorder(new javax.swing.border.TitledBorder(null, ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.efreq"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 0, 11), new java.awt.Color(0, 0, 153)));
        jSliderFreqFin.setFont(new java.awt.Font("Dialog", 0, 12));
        jSliderFreqFin.setMajorTickSpacing(200);
        jSliderFreqFin.setMaximum(2000);
        jSliderFreqFin.setMinimum(100);
        jSliderFreqFin.setMinorTickSpacing(100);
        jSliderFreqFin.setPaintLabels(true);
        jSliderFreqFin.setPaintTicks(true);
        jSliderFreqFin.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jSliderFreqFinStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.ipady = 13;
        jPanelFrequency.add(jSliderFreqFin, gridBagConstraints);

        jTextFieldFreqFin.setColumns(4);
        jTextFieldFreqFin.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jTextFieldFreqFin.setForeground(new java.awt.Color(0, 0, 153));
        jTextFieldFreqFin.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldFreqFin.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                jTextFieldFreqFinFocusLost(evt);
            }
        });
        jTextFieldFreqFin.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextFieldKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        jPanelFrequency.add(jTextFieldFreqFin, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 20, 0, 0);
        jPanelTypeExp.add(jPanelFrequency, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelTypeExp.add(jSeparator1, gridBagConstraints);

        jPanelSoundVel.setLayout(new java.awt.GridBagLayout());

        jRadioButtonSoundVel.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jRadioButtonSoundVel.setForeground(new java.awt.Color(0, 0, 153));
        jRadioButtonSoundVel.setText(ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.soundvel"));
        buttonGroup1.add(jRadioButtonSoundVel);
        jRadioButtonSoundVel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRadioButtonSoundVelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanelSoundVel.add(jRadioButtonSoundVel, gridBagConstraints);

        jComboBoxSoundVel.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jComboBoxSoundVel.setForeground(new java.awt.Color(0, 0, 153));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanelSoundVel.add(jComboBoxSoundVel, gridBagConstraints);

        jLabelSoundVel.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jLabelSoundVel.setForeground(new java.awt.Color(0, 0, 153));
        jLabelSoundVel.setText(ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.waveform"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jPanelSoundVel.add(jLabelSoundVel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        jPanelTypeExp.add(jPanelSoundVel, gridBagConstraints);

        add(jPanelTypeExp, java.awt.BorderLayout.CENTER);

        jPanelGenConfs.setLayout(new java.awt.GridBagLayout());

        jPanelGenConfs.setBorder(new javax.swing.border.TitledBorder(null, ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.mainpars"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 0, 11), new java.awt.Color(0, 0, 153)));
        jPanelMics.setLayout(new java.awt.GridBagLayout());

        jPanelMics.setBorder(new javax.swing.border.TitledBorder(null, ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.channels"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 0, 11), new java.awt.Color(0, 0, 153)));
        jLabelMic1.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jLabelMic1.setForeground(new java.awt.Color(0, 0, 153));
        jLabelMic1.setText("MIC 1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        jPanelMics.add(jLabelMic1, gridBagConstraints);

        jLabelMic2.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jLabelMic2.setForeground(new java.awt.Color(0, 0, 153));
        jLabelMic2.setText("MIC 2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 13, 0, 0);
        jPanelMics.add(jLabelMic2, gridBagConstraints);

        jLabelMic3.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jLabelMic3.setForeground(new java.awt.Color(0, 0, 153));
        jLabelMic3.setText("MIC 3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        jPanelMics.add(jLabelMic3, gridBagConstraints);

        jLabelMic4.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jLabelMic4.setForeground(new java.awt.Color(0, 0, 153));
        jLabelMic4.setText("MIC 4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        jPanelMics.add(jLabelMic4, gridBagConstraints);

        jLabelCH1.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jLabelCH1.setForeground(new java.awt.Color(0, 0, 153));
        jLabelCH1.setText("CH 1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 20, 0, 0);
        jPanelMics.add(jLabelCH1, gridBagConstraints);

        jLabelCH2.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jLabelCH2.setForeground(new java.awt.Color(0, 0, 153));
        jLabelCH2.setText("CH 2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 17, 0, 0);
        jPanelMics.add(jLabelCH2, gridBagConstraints);

        jRadioButtonMic1.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jRadioButtonMic1.setForeground(new java.awt.Color(0, 0, 153));
        jRadioButtonMic1.setSelected(true);
        jRadioButtonMic1.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 20, 0, 0);
        jPanelMics.add(jRadioButtonMic1, gridBagConstraints);

        jRadioButtonMic2.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jRadioButtonMic2.setForeground(new java.awt.Color(0, 0, 153));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 18, 0, 0);
        jPanelMics.add(jRadioButtonMic2, gridBagConstraints);

        jRadioButtonMic3.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jRadioButtonMic3.setForeground(new java.awt.Color(0, 0, 153));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 20, 0, 0);
        jPanelMics.add(jRadioButtonMic3, gridBagConstraints);

        jRadioButtonMic4.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jRadioButtonMic4.setForeground(new java.awt.Color(0, 0, 153));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 20, 0, 0);
        jPanelMics.add(jRadioButtonMic4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelGenConfs.add(jPanelMics, gridBagConstraints);

        jCheckBoxHeat.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jCheckBoxHeat.setForeground(new java.awt.Color(0, 0, 153));
        jCheckBoxHeat.setText(ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.heating"));
        jPanelGenConfs.add(jCheckBoxHeat, new java.awt.GridBagConstraints());

        jPanelPistonIni.setLayout(new java.awt.GridBagLayout());

        jPanelPistonIni.setBorder(new javax.swing.border.TitledBorder(null, ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.pistonstart"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 0, 11), new java.awt.Color(0, 0, 153)));
        jSliderPistonIni.setMajorTickSpacing(40);
        jSliderPistonIni.setMaximum(1484);
        jSliderPistonIni.setMinimum(1264);
        jSliderPistonIni.setMinorTickSpacing(20);
        jSliderPistonIni.setPaintLabels(true);
        jSliderPistonIni.setPaintTicks(true);
        jSliderPistonIni.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jSliderPistonIniStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.ipady = 13;
        jPanelPistonIni.add(jSliderPistonIni, gridBagConstraints);

        jTextFieldPistonIni.setColumns(4);
        jTextFieldPistonIni.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jTextFieldPistonIni.setForeground(new java.awt.Color(0, 0, 153));
        jTextFieldPistonIni.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldPistonIni.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                jTextFieldPistonIniFocusLost(evt);
            }
        });
        jTextFieldPistonIni.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextFieldKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        jPanelPistonIni.add(jTextFieldPistonIni, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanelGenConfs.add(jPanelPistonIni, gridBagConstraints);

        jPanelFrequencyIni.setLayout(new java.awt.GridBagLayout());

        jPanelFrequencyIni.setBorder(new javax.swing.border.TitledBorder(null, ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.freqstart"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 0, 11), new java.awt.Color(0, 0, 153)));
        jSliderFreqIni.setMajorTickSpacing(200);
        jSliderFreqIni.setMaximum(2000);
        jSliderFreqIni.setMinimum(100);
        jSliderFreqIni.setMinorTickSpacing(100);
        jSliderFreqIni.setPaintLabels(true);
        jSliderFreqIni.setPaintTicks(true);
        jSliderFreqIni.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jSliderFreqIniStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.ipady = 13;
        jPanelFrequencyIni.add(jSliderFreqIni, gridBagConstraints);

        jTextFieldFreqIni.setColumns(4);
        jTextFieldFreqIni.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jTextFieldFreqIni.setForeground(new java.awt.Color(0, 0, 153));
        jTextFieldFreqIni.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldFreqIni.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                jTextFieldFreqIniFocusLost(evt);
            }
        });
        jTextFieldFreqIni.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextFieldKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        jPanelFrequencyIni.add(jTextFieldFreqIni, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanelGenConfs.add(jPanelFrequencyIni, gridBagConstraints);

        jPanelNSamples.setLayout(new java.awt.GridBagLayout());

        jPanelNSamples.setBorder(new javax.swing.border.TitledBorder(null, ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.nsamples"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 0, 11), new java.awt.Color(0, 0, 153)));
        jTextFieldNSamples.setColumns(4);
        jTextFieldNSamples.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jTextFieldNSamples.setForeground(new java.awt.Color(0, 0, 153));
        jTextFieldNSamples.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldNSamples.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                jTextFieldNSamplesFocusLost(evt);
            }
        });
        jTextFieldNSamples.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextFieldKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        jPanelNSamples.add(jTextFieldNSamples, gridBagConstraints);

        jLabelNSamplesAlert.setFont(new java.awt.Font("Dialog", 3, 12));
        jLabelNSamplesAlert.setForeground(new java.awt.Color(255, 51, 51));
        jLabelNSamplesAlert.setText(ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.maxsamples"));
        jLabelNSamplesAlert.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        jPanelNSamples.add(jLabelNSamplesAlert, gridBagConstraints);

        jSliderNSamples.setMajorTickSpacing(100);
        jSliderNSamples.setMaximum(600);
        jSliderNSamples.setMinimum(1);
        jSliderNSamples.setMinorTickSpacing(50);
        jSliderNSamples.setPaintLabels(true);
        jSliderNSamples.setPaintTicks(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.ipady = 13;
        jPanelNSamples.add(jSliderNSamples, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanelGenConfs.add(jPanelNSamples, gridBagConstraints);

        add(jPanelGenConfs, java.awt.BorderLayout.WEST);

        jPanelSend.setLayout(new java.awt.GridBagLayout());

        jPanelSend.setMinimumSize(new java.awt.Dimension(350, 42));
        jPanelSend.setPreferredSize(new java.awt.Dimension(350, 42));
        jButtonOK.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jButtonOK.setForeground(new java.awt.Color(0, 0, 153));
        jButtonOK.setText(ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.ok"));
        jButtonOK.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonOKActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanelSend.add(jButtonOK, gridBagConstraints);

        jButtonCancel.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jButtonCancel.setForeground(new java.awt.Color(0, 0, 153));
        jButtonCancel.setText(ReCResourceBundle.findString("ReCExpStatSound$rec.exp.statsoud.lbl.cancel"));
        jButtonCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonCancelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanelSend.add(jButtonCancel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        jPanelSend.add(jLabel1, gridBagConstraints);

        jButtonDefaults.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jButtonDefaults.setForeground(new java.awt.Color(0, 0, 153));
        jButtonDefaults.setText(ReCResourceBundle.findString("ReCExpStatSound$rec.exp.dftcfg.statsound.title.1"));
        jButtonDefaults.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonDefaultsActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        jPanelSend.add(jButtonDefaults, gridBagConstraints);

        jLabel3.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanelSend.add(jLabel3, gridBagConstraints);

        add(jPanelSend, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents

    private void jTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldKeyReleased
        if(evt.getKeyCode()==10)
        {
            evt.getComponent().transferFocus();
        }
    }//GEN-LAST:event_jTextFieldKeyReleased

    private void jButtonDefaultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDefaultsActionPerformed
        defaultConfig();
    }//GEN-LAST:event_jButtonDefaultsActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        fireICustomizerListenerCanceled();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        String typeExp="";
        if(jRadioButtonVaryFreq.isSelected()&&jRadioButtonVaryFreq.isEnabled())
        {
            typeExp = "Vary Freq";
        }
        else if(jRadioButtonVaryPiston.isSelected()&&jRadioButtonVaryPiston.isEnabled())
        {
            typeExp = "Vary Piston";
        }
        else
        {
            typeExp = "Sound Vel";
        }
        
        if(typeExp.equalsIgnoreCase("Sound Vel"))
        {
            acqConfig.setTotalSamples(1);
        }
        else
        {
            acqConfig.setTotalSamples(nSamples);
        }
        
        acqConfig.getSelectedHardwareParameter("Type of experiment").setParameterValue(typeExp);
        acqConfig.getSelectedHardwareParameter("Piston start").setParameterValue(""+pistonIni);
        acqConfig.getSelectedHardwareParameter("Piston end").setParameterValue(""+pistonFin);
        acqConfig.getSelectedHardwareParameter("Frequency start").setParameterValue(""+freqIni);
        acqConfig.getSelectedHardwareParameter("Frequency end").setParameterValue(""+freqFin);
        acqConfig.getSelectedHardwareParameter("Wave form").setParameterValue(""+jComboBoxSoundVel.getSelectedIndex());        
//        acqConfig.getSelectedHardwareParameter("Number of points").setParameterValue(""+nSamples);        
        /**Status = nibble with MIC1MIC2MIC3TEMP*/
        String status="";
        if(jRadioButtonMic2.isSelected())
        {
            status+="1";
        }
        else 
        {
            status+="0";
        }
        if(jRadioButtonMic3.isSelected())
        {
            status+="1";
        }
        else 
        {
            status+="0";
        }
        if(jRadioButtonMic4.isSelected())
        {
            status+="1";
        }
        else 
        {
            status+="0";
        }        
        if(jCheckBoxHeat.isSelected())
        {
            status+="1";
        }
        else 
        {
            status+="0";
        }                    
        acqConfig.getSelectedHardwareParameter("Status").setParameterValue(status);       
        acqConfig.getSelectedHardwareParameter("Calibration").setParameterValue("1");
        for(int i=0;i<acqConfig.getSelectedHardwareParameters().length;i++)
        {
            System.out.println(acqConfig.getSelectedHardwareParameters(i).getParameterName()+"="+acqConfig.getSelectedHardwareParameters(i).getParameterValue());
        }
        fireICustomizerListenerDone();        
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jTextFieldNSamplesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNSamplesFocusLost
        analyseTextField(jTextFieldNSamples,jSliderNSamples);
    }//GEN-LAST:event_jTextFieldNSamplesFocusLost

    private void jTextFieldFreqIniFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldFreqIniFocusLost
        analyseTextField(jTextFieldFreqIni,jSliderFreqIni);
    }//GEN-LAST:event_jTextFieldFreqIniFocusLost

    private void jTextFieldPistonIniFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPistonIniFocusLost
        analyseTextField(jTextFieldPistonIni,jSliderPistonIni);
    }//GEN-LAST:event_jTextFieldPistonIniFocusLost

    private void jTextFieldFreqFinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldFreqFinFocusLost
        analyseTextField(jTextFieldFreqFin,jSliderFreqFin);
    }//GEN-LAST:event_jTextFieldFreqFinFocusLost

    private void jTextFieldPistonFinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPistonFinFocusLost
        analyseTextField(jTextFieldPistonFin,jSliderPistonFin);
    }//GEN-LAST:event_jTextFieldPistonFinFocusLost

    private void jSliderFreqIniStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderFreqIniStateChanged
        freqIni=jSliderFreqIni.getValue();
        jTextFieldFreqIni.setText(""+freqIni);       
        checkMaxSamples();
    }//GEN-LAST:event_jSliderFreqIniStateChanged

    private void jSliderPistonIniStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderPistonIniStateChanged
        pistonIni=jSliderPistonIni.getValue();
        jTextFieldPistonIni.setText(""+pistonIni);
        checkMaxSamples();
    }//GEN-LAST:event_jSliderPistonIniStateChanged

    private void jSliderFreqFinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderFreqFinStateChanged
        freqFin=jSliderFreqFin.getValue();
        jTextFieldFreqFin.setText(""+freqFin);
        checkMaxSamples();
    }//GEN-LAST:event_jSliderFreqFinStateChanged

    private void jSliderPistonFinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderPistonFinStateChanged
        pistonFin=jSliderPistonFin.getValue();
        jTextFieldPistonFin.setText(""+pistonFin);
        checkMaxSamples();
    }//GEN-LAST:event_jSliderPistonFinStateChanged

    private void jRadioButtonSoundVelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSoundVelActionPerformed
        disableAllJPanelComps(jPanelPiston);        
        disableAllJPanelComps(jPanelFrequency);
        enableAllJPanelComps(jPanelSoundVel);  
        jRadioButtonVaryFreq.setEnabled(false);
        jRadioButtonVaryPiston.setEnabled(false);
        pistonExp=false;
        freqExp=false;
        soundExp=true;        
        adjustNSamplesSlider();
    }//GEN-LAST:event_jRadioButtonSoundVelActionPerformed

    private void jRadioButtonVaryFreqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonVaryFreqActionPerformed
        disableAllJPanelComps(jPanelPiston);
        enableAllJPanelComps(jPanelFrequency);        
        pistonExp=false;
        freqExp=true;        
        soundExp=false;                
        adjustNSamplesSlider();
    }//GEN-LAST:event_jRadioButtonVaryFreqActionPerformed

    private void jRadioButtonVaryPistonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonVaryPistonActionPerformed
        disableAllJPanelComps(jPanelFrequency);
        enableAllJPanelComps(jPanelPiston);
        pistonExp=true;
        freqExp=false;
        soundExp=false;        
        adjustNSamplesSlider();
    }//GEN-LAST:event_jRadioButtonVaryPistonActionPerformed

    private void jRadioButtonStatWavesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonStatWavesActionPerformed
        disableAllJPanelComps(jPanelSoundVel);
        if(jRadioButtonVaryPiston.isSelected())
        {
            enableAllJPanelComps(jPanelPiston);            
            pistonExp=true;
            freqExp=false;
        }
        else
        {
            enableAllJPanelComps(jPanelFrequency);
            freqExp=true;
            pistonExp=false;            
        }        
        jRadioButtonVaryFreq.setEnabled(true);
        jRadioButtonVaryPiston.setEnabled(true);
        jRadioButtonSoundVel.setEnabled(true);
        soundExp=false;
        adjustNSamplesSlider();
    }//GEN-LAST:event_jRadioButtonStatWavesActionPerformed
    
    private void jSliderNSamplesStateChanged(javax.swing.event.ChangeEvent evt) {
        nSamples=jSliderNSamples.getValue();
        jTextFieldNSamples.setText(""+nSamples);
        checkMaxSamples();
    }    
    
    /**Event methods end*/
    
    private void enableAllJPanelComps(javax.swing.JPanel jp)
    {
        for(int i=0;i<jp.getComponentCount();i++)
        {
            jp.getComponent(i).setEnabled(true);
        }
    }
    
    private void disableAllJPanelComps(javax.swing.JPanel jp)
    {
        for(int i=0;i<jp.getComponentCount();i++)
        {
            jp.getComponent(i).setEnabled(false);
        }
    }
    
    private void analyseTextField(javax.swing.JTextField jtf, javax.swing.JSlider js)
    {
        String strValue=jtf.getText().trim();
        int value=0;
        try
        {
            value=Integer.parseInt(strValue);
            if(value<js.getMinimum()||value>js.getMaximum())
            {
                jtf.setText(""+js.getValue());
                return;
            }
            js.setValue(value);
        }
        catch(NumberFormatException nfe)
        {
            jtf.setText(""+js.getValue());
        }
    }
    
    private void adjustNSamplesSlider()
    {
        if(jSliderNSamples!=null)
        {
            jPanelNSamples.remove(jSliderNSamples);
            jSliderNSamples=null;
        }
        if(freqExp)
        {
            jSliderNSamples=jSliderNSamplesFreq;
        }
        else if(pistonExp)
        {
            jSliderNSamples=jSliderNSamplesPiston;
        }
        else
        {
            jSliderNSamples=jSliderNSamplesSound;
        }
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.ipady = 13;
        jPanelNSamples.add(jSliderNSamples, gridBagConstraints);
        jSliderNSamples.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderNSamplesStateChanged(evt);
            }
        });        
        nSamples=jSliderNSamples.getValue();
        jTextFieldNSamples.setText(""+nSamples);
        checkMaxSamples();
        jPanelNSamples.updateUI();
    }
    
    private void checkMaxSamples()
    {
        int maxSamples=0;
        if(pistonExp)
        {
            maxSamples=(int)(Math.abs(pistonIni-pistonFin)/1.69231);
        }
        else if(freqExp)
        {
            maxSamples=Math.abs((freqFin-freqIni)*4);
            if(maxSamples>jSliderNSamples.getMaximum())
            {
                maxSamples=jSliderNSamples.getMaximum();
            }
        }
        else 
        {
            maxSamples=jSliderNSamples.getMaximum();
        }
        if(maxSamples==0)
        {
            maxSamples=1;
        }        
        if(nSamples>maxSamples)
        {
            jLabelNSamplesAlert.setEnabled(true);
            jButtonOK.setEnabled(false);
        }
        else
        {
            jLabelNSamplesAlert.setEnabled(false);
            jButtonOK.setEnabled(true);                
        }
        jLabelNSamplesAlert.setText(MAX_SAMPLES_STR+maxSamples);            
    }
    
    public static void main(String args[])
    {
        javax.swing.JFrame jf=new javax.swing.JFrame();
        jf.getContentPane().add(new StatSoundCustomizer());
        jf.pack();
        jf.show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonDefaults;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JCheckBox jCheckBoxHeat;
    private javax.swing.JComboBox jComboBoxSoundVel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelCH1;
    private javax.swing.JLabel jLabelCH2;
    private javax.swing.JLabel jLabelMic1;
    private javax.swing.JLabel jLabelMic2;
    private javax.swing.JLabel jLabelMic3;
    private javax.swing.JLabel jLabelMic4;
    private javax.swing.JLabel jLabelNSamplesAlert;
    private javax.swing.JLabel jLabelSoundVel;
    private javax.swing.JPanel jPanelFrequency;
    private javax.swing.JPanel jPanelFrequencyIni;
    private javax.swing.JPanel jPanelGenConfs;
    private javax.swing.JPanel jPanelMics;
    private javax.swing.JPanel jPanelNSamples;
    private javax.swing.JPanel jPanelPiston;
    private javax.swing.JPanel jPanelPistonIni;
    private javax.swing.JPanel jPanelSend;
    private javax.swing.JPanel jPanelSoundVel;
    private javax.swing.JPanel jPanelTypeExp;
    private javax.swing.JRadioButton jRadioButtonMic1;
    private javax.swing.JRadioButton jRadioButtonMic2;
    private javax.swing.JRadioButton jRadioButtonMic3;
    private javax.swing.JRadioButton jRadioButtonMic4;
    private javax.swing.JRadioButton jRadioButtonSoundVel;
    private javax.swing.JRadioButton jRadioButtonStatWaves;
    private javax.swing.JRadioButton jRadioButtonVaryFreq;
    private javax.swing.JRadioButton jRadioButtonVaryPiston;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSlider jSliderFreqFin;
    private javax.swing.JSlider jSliderFreqIni;
    private javax.swing.JSlider jSliderNSamples;
    private javax.swing.JSlider jSliderNSamplesFreq;
    private javax.swing.JSlider jSliderNSamplesPiston;
    private javax.swing.JSlider jSliderNSamplesSound;
    private javax.swing.JSlider jSliderPistonFin;
    private javax.swing.JSlider jSliderPistonIni;
    private javax.swing.JTextField jTextFieldFreqFin;
    private javax.swing.JTextField jTextFieldFreqIni;
    private javax.swing.JTextField jTextFieldNSamples;
    private javax.swing.JTextField jTextFieldPistonFin;
    private javax.swing.JTextField jTextFieldPistonIni;
    // End of variables declaration//GEN-END:variables

    
    /**REC impl*/
    /** Utility field used by event firing mechanism. */
    private javax.swing.event.EventListenerList listenerList =  null;
	
	
    /** Registers ICustomizerListener to receive events.
     * @param listener The listener to register.
    */
    public synchronized void addICustomizerListener(ICustomizerListener listener)
    {
        if (listenerList == null )
	{
            listenerList = new javax.swing.event.EventListenerList();
        }
	listenerList.add(ICustomizerListener.class, listener);
    }
	
    /** Removes ICustomizerListener from the list of listeners.
    * @param listener The listener to remove.
    */
    
    public synchronized void removeICustomizerListener(ICustomizerListener listener)
    {
        listenerList.remove(ICustomizerListener.class, listener);
    }
	
    /** Notifies all registered listeners about the event.
    *
    * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
    */

    private void fireICustomizerListenerCanceled()
    {
        if (listenerList == null) return;
	Object[] listeners = listenerList.getListenerList();
	for (int i = listeners.length-2; i>=0; i-=2)
        {
            if (listeners[i]==ICustomizerListener.class)
            {
                ((ICustomizerListener)listeners[i+1]).canceled();
            }
        }
    }
	
    /** Notifies all registered listeners about the event.
    *
    * @param param1 Parameter #1 of the <CODE>EventObject<CODE> constructor.
    */
    private void fireICustomizerListenerDone()
    {
        if (listenerList == null) return;
	Object[] listeners = listenerList.getListenerList();
	for (int i = listeners.length-2; i>=0; i-=2)
	{
            if (listeners[i]==ICustomizerListener.class)
            {	
		((ICustomizerListener)listeners[i+1]).done();
            }
        }
    }    
        
    public HardwareAcquisitionConfig getAcquisitionConfig() 
    {
        return acqConfig;
    }
    
    public javax.swing.JComponent getCustomizerComponent() 
    {
        return this;
    }
    
    public javax.swing.ImageIcon getCustomizerIcon() 
    {
        return ICON;
    }
    
    public String getCustomizerTitle() 
    {
        return TITLE;
    }
    
    public javax.swing.JMenuBar getMenuBar() 
    {
        return null;
    }
        
    public void setHardwareAcquisitionConfig(HardwareAcquisitionConfig acqConfig) 
    {
        this.acqConfig=acqConfig;
        if(acqConfig==null)
        {
            return;
        }
        
    }
    
    public void setHardwareInfo(HardwareInfo hardwareInfo) 
    {
        this.hardwareInfo=hardwareInfo;
    }    
}
