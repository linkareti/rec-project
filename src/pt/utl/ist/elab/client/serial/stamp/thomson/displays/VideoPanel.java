/*
 * videoPanel.java
 *
 * Created on 27 de Setembro de 2004, 4:00
 */

package pt.utl.ist.elab.client.serial.stamp.thomson.displays;



import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Insets;
import java.util.Vector;

import javax.swing.border.Border;

import com.linkare.rec.impl.i18n.ReCResourceBundle;
/**
 *
 * @author  ivo
 */
public class VideoPanel extends javax.swing.JPanel implements com.linkare.rec.impl.client.experiment.ExpDataDisplay, com.linkare.rec.impl.client.experiment.ExpDataModelListener
{
    
    private int currentFrame = 0;
    private boolean pause = false;
    private Vector indexes;
    private int[] im_index = null;
    
    /** Creates new form videoPanel */
    public VideoPanel()
    {
        initComponents();
        indexes = new Vector();
    }
    
    private class Player extends Thread
    {
        public void run()
        {
            if(im_index != null)
                System.out.println("numberOfFrameAvailable= " + im_index.length);
            
            while(im_index!= null && currentFrame < im_index.length && !pause)
            {
                currentFrame++;
                //The image is painted when the slider value is updated...
                //paintImage(byteArray2Image(model.getValueAt(im_index[currentFrame], model.getChannelIndex("Video")).getValue().getByteArrayValue().getData()));
                jSliderFrame.setValue(currentFrame);
                try
                {
                    sleep(500);
                }
                catch(InterruptedException ie)
                {
                    ie.printStackTrace();
                }
            }
            
            pause = false;
            //jSliderFrame.setValue(currentFrame);
            play_button.setEnabled(true);
            stop_button.setEnabled(false);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        play_button = new javax.swing.JButton();
        stop_button = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jSliderFrame = new javax.swing.JSlider();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanelVideo = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        play_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pt/utl/ist/elab/client/serial/stamp/thomson/resources/play.gif")));
        play_button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                play_buttonActionPerformed(evt);
            }
        });

        jPanel2.add(play_button);

        stop_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pt/utl/ist/elab/client/serial/stamp/thomson/resources/pause.gif")));
        stop_button.setEnabled(false);
        stop_button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                stop_buttonActionPerformed(evt);
            }
        });

        jPanel2.add(stop_button);

        jPanel1.add(jPanel2, java.awt.BorderLayout.WEST);

        jSliderFrame.setMajorTickSpacing(1);
        jSliderFrame.setMaximum(10);
        jSliderFrame.setMinorTickSpacing(1);
        jSliderFrame.setSnapToTicks(true);
        jSliderFrame.setValue(0);
        jSliderFrame.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jSliderFrameStateChanged(evt);
            }
        });

        jPanel3.add(jSliderFrame);

        jPanel1.add(jPanel3, java.awt.BorderLayout.EAST);

        add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanelVideo.setPreferredSize(new java.awt.Dimension(640, 480));
        jScrollPane1.setViewportView(jPanelVideo);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    private void stop_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop_buttonActionPerformed
        pause = true;
    }//GEN-LAST:event_stop_buttonActionPerformed
    
    private void play_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_play_buttonActionPerformed
        if(currentFrame == (numberOfFrameAvailable - 1))
            currentFrame = 0;
        new Player().start();
        play_button.setEnabled(false);
        stop_button.setEnabled(true);
    }//GEN-LAST:event_play_buttonActionPerformed
    
    private void jSliderFrameStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jSliderFrameStateChanged
    {//GEN-HEADEREND:event_jSliderFrameStateChanged
        if(im_index==null || im_index.length < 1)
            return;
        
        int temp_frame = jSliderFrame.getValue();
        
        if(temp_frame > (im_index.length - 1))
        {
            jSliderFrame.setValue(currentFrame);
            return;
        }
        
        jSliderFrame.setValueIsAdjusting(false);
        
        currentFrame = temp_frame;
        
        paintImage(byteArray2Image(model.getValueAt(im_index[currentFrame], model.getChannelIndex("Video")).getValue().getByteArrayValue().getData()));
    }//GEN-LAST:event_jSliderFrameStateChanged
    
    public static void main(String args[])
    {
        
        javax.swing.JFrame dummy = new javax.swing.JFrame();
        dummy.getContentPane().add(new VideoPanel(), java.awt.BorderLayout.CENTER );
        dummy.pack();
        dummy.show();
    }
    
    
    public void dataModelEnded()
    {
    }
    
    public void dataModelError()
    {
    }
    
    public void dataModelStarted()
    {
    }
    
    public void dataModelStartedNoData()
    {
    }
    
    public void dataModelStoped()
    {
    }
    
    public void dataModelWaiting()
    {
    }
    
    public javax.swing.JComponent getDisplay()
    {
        return this;
    }
    
    public javax.swing.Icon getIcon()
    {
        return new javax.swing.ImageIcon(getClass().getResource("/pt/utl/ist/elab/client/serial/stamp/thomson/resources/thomson_iconified.png"));
    }
    
    public javax.swing.JMenuBar getMenuBar()
    {
        return null;
    }
    
    public javax.swing.JToolBar getToolBar()
    {
        return null;
    }
    
    private int numberOfFrameAvailable = 0;
    
    
    public void newSamples(com.linkare.rec.impl.client.experiment.NewExpDataEvent evt)
    {
        if(model == null)
            return;
        for(int i=evt.getSamplesStartIndex(); i<=evt.getSamplesEndIndex(); i++)
        {
            if(model.getValueAt(i, model.getChannelIndex("Video")) != null)
            {
                indexes.add(new Integer(i));
                im_index = new int[indexes.size()];
                for(int a=0; a<im_index.length; a++)
                {
                    im_index[a] = ((Integer)indexes.get(a)).intValue();
                }
            }
        }
    }
    
    private com.linkare.rec.impl.client.experiment.ExpDataModel model = null;
    public void setExpDataModel(com.linkare.rec.impl.client.experiment.ExpDataModel model)
    {
        if(this.model!=null)
            model.removeExpDataModelListener(this);
        
        this.model=model;
        
        if(this.model!=null)
            this.model.addExpDataModelListener(this);
    }
    
    private void paintImage(java.awt.Image img)
    {
        jPanelVideo.setBorder(new ImageBorder(img, true));
    }
    
    public class ImageBorder implements Border
    {
        private Image image;
        
        /** Creates a new instance of ImageBorder */
        public ImageBorder(Image image, boolean fill)
        {
            this.image = image;
            this.fill = fill;
        }
        
        
        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height)
        {
            if(image == null)
            {
                return;
            }
            if(!fill)
            {
                int x0 = x + (width-image.getWidth(null))/2;
                int y0 = y + (height-image.getHeight(null))/2;
                g.drawImage(image, x0, y0, null);
            }
            else
            {
                g.drawImage(image, 0, 0, width, height,  null);
            }
        }
        
        public Insets getBorderInsets(Component c)
        {
            return new Insets(0,0,0,0);
        }
        
        public boolean isBorderOpaque()
        {
            return true;
        }
        
        private boolean fill = true;
        public void setFill(boolean fill)
        {
            this.fill = fill;
        }
    }
    
    private java.awt.Image byteArray2Image(byte[] byteArray)
    {
        java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
        try
        {
            baos.write(byteArray);
        }
        catch(java.io.IOException e)
        {
            e.printStackTrace();
        }
        
        java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(baos.toByteArray());
        
        javax.imageio.stream.MemoryCacheImageInputStream mciis = new javax.imageio.stream.MemoryCacheImageInputStream(bais);
        
        java.awt.image.BufferedImage bImage = null;
        
        //converting the jpg byteArray into an image
        try
        {
            bImage = javax.imageio.ImageIO.read(mciis);
        }
        catch(java.io.IOException e)
        {
            e.printStackTrace();
        }
        
        return (java.awt.Image) bImage;
    }//byteArray2Image(byte[] byteArray)
    
    public String getName()
    {
        return ReCResourceBundle.findStringOrDefault("ReCExpThomson$rec.exp.display.thomson.title.video", "Video");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelVideo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSliderFrame;
    private javax.swing.JButton play_button;
    private javax.swing.JButton stop_button;
    // End of variables declaration//GEN-END:variables
    
}
