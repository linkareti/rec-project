/*
 * JPanelIV.java
 *
 * Created on 9 de Abril de 2003, 19:21
 */

package pt.utl.ist.elab.client.webrobot.displays.auxUi;

import com.linkare.rec.impl.client.experiment.*;
import com.linkare.rec.data.acquisition.*;
import com.linkare.rec.data.metadata.*;
import com.linkare.rec.data.config.*;

/**
 *
 * @author  Andrï¿½
 */
public class JPanelAnalogic extends javax.swing.JPanel implements ExpDataModelListener
{
    
    /** Creates new form JPanelIV */
    public JPanelAnalogic() {
        initComponents();
        String a=new String(""+3);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jProgressBarA1 = new javax.swing.JProgressBar();
        jProgressBarA2 = new javax.swing.JProgressBar();
        jProgressBarA3 = new javax.swing.JProgressBar();
        jProgressBarA4 = new javax.swing.JProgressBar();
        jLabelA1 = new javax.swing.JLabel();
        jLabelA2 = new javax.swing.JLabel();
        jLabelA3 = new javax.swing.JLabel();
        jLabelA4 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jProgressBarA1.setForeground(new java.awt.Color(0, 153, 0));
        jProgressBarA1.setMaximum(255);
        jProgressBarA1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 51, 153)));
        jProgressBarA1.setMinimumSize(new java.awt.Dimension(10, 21));
        jProgressBarA1.setPreferredSize(new java.awt.Dimension(150, 21));
        jProgressBarA1.setString(new Integer(A1).toString());
        jProgressBarA1.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 8, 0, 0);
        add(jProgressBarA1, gridBagConstraints);

        jProgressBarA2.setForeground(new java.awt.Color(0, 153, 0));
        jProgressBarA2.setMaximum(255);
        jProgressBarA2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 51, 153)));
        jProgressBarA2.setMinimumSize(new java.awt.Dimension(10, 21));
        jProgressBarA2.setPreferredSize(new java.awt.Dimension(150, 21));
        jProgressBarA2.setString(new Integer(A2).toString());
        jProgressBarA2.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(9, 8, 0, 0);
        add(jProgressBarA2, gridBagConstraints);

        jProgressBarA3.setForeground(new java.awt.Color(0, 153, 0));
        jProgressBarA3.setMaximum(255);
        jProgressBarA3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 51, 153)));
        jProgressBarA3.setMinimumSize(new java.awt.Dimension(10, 21));
        jProgressBarA3.setPreferredSize(new java.awt.Dimension(150, 21));
        jProgressBarA3.setString(new Integer(A3).toString());
        jProgressBarA3.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = -1;
        gridBagConstraints.insets = new java.awt.Insets(9, 8, 0, 0);
        add(jProgressBarA3, gridBagConstraints);

        jProgressBarA4.setForeground(new java.awt.Color(0, 153, 0));
        jProgressBarA4.setMaximum(255);
        jProgressBarA4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 51, 153)));
        jProgressBarA4.setPreferredSize(new java.awt.Dimension(150, 21));
        jProgressBarA4.setString(new Integer(A4).toString());
        jProgressBarA4.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 8, 0, 0);
        add(jProgressBarA4, gridBagConstraints);

        jLabelA1.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jLabelA1.setForeground(new java.awt.Color(0, 51, 153));
        jLabelA1.setText("A1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        add(jLabelA1, gridBagConstraints);

        jLabelA2.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jLabelA2.setForeground(new java.awt.Color(0, 51, 153));
        jLabelA2.setText("A2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(9, 10, 0, 0);
        add(jLabelA2, gridBagConstraints);

        jLabelA3.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jLabelA3.setForeground(new java.awt.Color(0, 51, 153));
        jLabelA3.setText("A3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(9, 10, 0, 0);
        add(jLabelA3, gridBagConstraints);

        jLabelA4.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jLabelA4.setForeground(new java.awt.Color(0, 51, 153));
        jLabelA4.setText("A4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        add(jLabelA4, gridBagConstraints);

    }//GEN-END:initComponents

    /** Getter for property A1.
     * @return Value of property A1.
     */
    public int getA1() {
        return this.A1;
    }    
    
    /** Setter for property A1.
     * @param A1 New value of property A1.
     */
    public void setA1(int A1) {
        this.A1 = A1;
        jProgressBarA1.setValue(A1);
        jProgressBarA1.setString(new Integer(A1).toString());                
    }    
    
    /** Getter for property A2.
     * @return Value of property A2.
     */
    public int getA2() {
        return this.A2;
    }
    
    /** Setter for property A2.
     * @param A2 New value of property A2.
     */
    public void setA2(int A2) {
        this.A2 = A2;
        jProgressBarA2.setValue(A2);
        jProgressBarA2.setString(new Integer(A2).toString());                
    }
    
    /** Getter for property A3.
     * @return Value of property A3.
     */
    public int getA3() {
        return this.A3;
    }
    
    /** Setter for property A3.
     * @param A3 New value of property A3.
     */
    public void setA3(int A3) {
        this.A3 = A3;
        jProgressBarA3.setValue(A3);
        jProgressBarA3.setString(new Integer(A3).toString());        
    }
    
    /** Getter for property A4.
     * @return Value of property A4.
     */
    public int getA4() {
        return this.A4;
    }
    
    /** Setter for property A4.
     * @param A4 New value of property A4.
     */
    public void setA4(int A4) {
        this.A4 = A4;
        jProgressBarA4.setValue(A4);
        jProgressBarA4.setString(new Integer(A4).toString());                
    }
    
    public void dataModelRunning() {
    }
    
    public void dataModelStoped() {
    }
    
    public void headerAvailable(HardwareAcquisitionConfig header) {
    }
    
    public void newSamples(NewExpDataEvent evt) 
    {
        int lastSample=evt.getSamplesEndIndex();
        setA1(model.getValueAt(lastSample,16).getValue().getIntValue());
        setA2(model.getValueAt(lastSample,17).getValue().getIntValue());
        setA3(model.getValueAt(lastSample,18).getValue().getIntValue());
        setA4(model.getValueAt(lastSample,19).getValue().getIntValue());        
    }
    
    public void setExpDataModel(ExpDataModel model) 
    {
        if(this.model!=null)
        {
	    model.removeExpDataModelListener(this);
        }
	
	this.model=model;
	
	if(this.model!=null)
        {
	    this.model.addExpDataModelListener(this);	
        }
    }        
    
    public void dataModelEnded()
    {
    }
    
    public void dataModelError()
    {
    }
    
    public void dataModelStarted()
    {
        headerAvailable(model.getAcquisitionConfig());
    }
    
    public void dataModelStartedNoData()
    {
    }
    
    public void dataModelWaiting()
    {
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelA2;
    private javax.swing.JProgressBar jProgressBarA3;
    private javax.swing.JLabel jLabelA3;
    private javax.swing.JProgressBar jProgressBarA4;
    private javax.swing.JProgressBar jProgressBarA2;
    private javax.swing.JLabel jLabelA1;
    private javax.swing.JLabel jLabelA4;
    private javax.swing.JProgressBar jProgressBarA1;
    // End of variables declaration//GEN-END:variables

    private ExpDataModel model=null;    
    
    /** Holds value of property A1. */
    private int A1=0;    
    
    /** Holds value of property A2. */
    private int A2=0;
    
    /** Holds value of property A3. */
    private int A3=0;
    
    /** Holds value of property A4. */
    private int A4=0;   
}
