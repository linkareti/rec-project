package old.configOld;

import com.linkare.rec.impl.protocols.ReCProtocols;
import java.net.*;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import java.util.TreeMap;
import java.util.Collection;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.InputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.FileInputStream;
import org.w3c.dom.Document;
import org.w3c.dom.Attr;
import org.w3c.dom.CDATASection;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;
import org.w3c.dom.Element;
/*
 * File:           ReCBaseUIConfigXMLReader.java
 * Generated from: ReCBaseUIConfigSchema.dtd
 * Date:           22 de Maio de 2003  16:14
 *
 * @author  bruno
 * @version generated by NetBeans XML module
 */
/**
 * This is a scanner of DOM tree.
 *
 * Example:
 * <pre>
 *     javax.xml.parsers.DocumentBuilderFactory builderFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
 *     javax.xml.parsers.DocumentBuilder builder = builderFactory.newDocumentBuilder();
 *     org.w3c.dom.Document document = builder.parse (new org.xml.sax.InputSource (???));
 *     <font color="blue">ReCBaseUIConfigXMLReader scanner = new ReCBaseUIConfigXMLReader (document);</font>
 *     <font color="blue">scanner.visitDocument();</font>
 * </pre>
 *
 * @see org.w3c.dom.Document
 * @see org.w3c.dom.Element
 * @see org.w3c.dom.NamedNodeMap
 */
public class ReCBaseUIConfigXMLReader
{
    /** org.w3c.dom.Document document */
    org.w3c.dom.Document document;
    
    
    
    public static void readReCUIConfig(ReCUIConfig config,String file_loc)
    throws FileNotFoundException,ParserConfigurationException,SAXException,IOException
    {
	readReCUIConfig(config, ReCProtocols.getURL(file_loc));
    }
    
    public static void readReCUIConfig(ReCUIConfig config,URL url)
    throws IOException,ParserConfigurationException,SAXException
    {
	URLConnection con=url.openConnection();
	readReCUIConfig(config,con.getInputStream());
    }
    
    public static void readReCUIConfig(ReCUIConfig config,InputStream is)
    throws ParserConfigurationException,SAXException,IOException
    {
	DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
	factory.setIgnoringElementContentWhitespace(true);
	factory.setIgnoringComments(true);
	//factory.setValidating(true);
	factory.setNamespaceAware(true);
	DocumentBuilder builder = factory.newDocumentBuilder();
	Document document = builder.parse(new InputSource(is));
	ReCBaseUIConfigXMLReader scanner = new ReCBaseUIConfigXMLReader(config,document);
	scanner.visitDocument();
	
    }
    
    
    
    /** Create new ReCBaseUIConfigXMLReader with org.w3c.dom.Document. */
    public ReCBaseUIConfigXMLReader(ReCUIConfig config,org.w3c.dom.Document document)
    {
	this.UIConfiguration=config;
	this.document = document;
    }
    
    /** Scan through org.w3c.dom.Document document. */
    public void visitDocument()
    {
	org.w3c.dom.Element element = document.getDocumentElement();
	if ((element != null) && element.getTagName().equals("ReCBaseUIConfig"))
	{
	    visitElement_ReCBaseUIConfig(element);
	}
    }
    
    /** Scan through org.w3c.dom.Element named ReCBaseUIConfig. */
    void visitElement_ReCBaseUIConfig(org.w3c.dom.Element element)
    { // <ReCBaseUIConfig>
	// element.getValue();
	org.w3c.dom.NamedNodeMap attrs = element.getAttributes();
	for (int i = 0; i < attrs.getLength(); i++)
	{
	    org.w3c.dom.Attr attr = (org.w3c.dom.Attr)attrs.item(i);
	    if (attr.getName().equals("password"))
	    { // <ReCBaseUIConfig password="???">
		UIConfiguration.setPassword(attr.getValue());
	    }
	    else if (attr.getName().equals("iconSponsor"))
	    { // <ReCBaseUIConfig iconSponsor="???">
		
		try
		{
		    URL url=ReCProtocols.getURL(attr.getValue());
		    javax.swing.ImageIcon iconSp=new javax.swing.ImageIcon(url);
		    UIConfiguration.setIconSponsor(iconSp);
		}catch(Exception e)
		{
		    e.printStackTrace();
		}
		
	    }
	    else if (attr.getName().equals("icon"))
	    { // <ReCBaseUIConfig icon="???">
		try
		{
		    URL url=ReCProtocols.getURL(attr.getValue());
		    java.awt.ImageIcon icon=(new javax.swing.ImageIcon(url)).getImage();
		    UIConfiguration.setIcon(icon);
		}catch(Exception e)
		{
		    e.printStackTrace();
		}
		
	    }
	    else if (attr.getName().equals("showUserList"))
	    { // <ReCBaseUIConfig showUserList="???">
		// Not done in just one line to be Case Insensitive (see api docs java.lang.Boolean)
		Boolean bool = new Boolean(attr.getValue());
		UIConfiguration.setShowUsersList(bool.booleanValue());
	    }
	    else if (attr.getName().equals("enterApparatusChatRoom"))
	    { // <ReCBaseUIConfig enterApparatusChatRoom="???">
		// Not done in just one line to be Case Insensitive (see api docs java.lang.Boolean)
		Boolean bool = new Boolean(attr.getValue());
		UIConfiguration.setEnterApparatusChatRoom(bool.booleanValue());
	    }
	    else if (attr.getName().equals("frameTitle"))
	    { // <ReCBaseUIConfig frameTitle="???">
		UIConfiguration.setFrameTitle(attr.getValue());
	    }
	    else if (attr.getName().equals("enableUsersList"))
	    { // <ReCBaseUIConfig enableUsersList="???">
		// Not done in just one line to be Case Insensitive (see api docs java.lang.Boolean)
		Boolean bool = new Boolean(attr.getValue());
		UIConfiguration.setEnableUsersList(bool.booleanValue());
	    }
	    else if (attr.getName().equals("about"))
	    { // <ReCBaseUIConfig about="???">
		try
		{
		    UIConfiguration.setAbout(ReCProtocols.getURL(attr.getValue()));
		}
		catch (MalformedURLException e)
		{/* ignored */}
	    }
	    else if (attr.getName().equals("enableChatFrame"))
	    { // <ReCBaseUIConfig enableChatFrame="???">
		// Not done in just one line to be Case Insensitive (see api docs java.lang.Boolean)
		Boolean bool = new Boolean(attr.getValue());
		UIConfiguration.setEnableChatFrame(bool.booleanValue());
	    }
	    else if (attr.getName().equals("enableVideoFrame"))
	    { // <ReCBaseUIConfig enableVideoFrame="???">
		// Not done in just one line to be Case Insensitive (see api docs java.lang.Boolean)
		Boolean bool = new Boolean(attr.getValue());
		UIConfiguration.setEnableVideoFrame(bool.booleanValue());
	    }
	    else if (attr.getName().equals("username"))
	    { // <ReCBaseUIConfig username="???">
		UIConfiguration.setUsername(attr.getValue());
	    }
	    else if (attr.getName().equals("autoConnectLab"))
	    { // <ReCBaseUIConfig autoConnectLab="???">
		// Not done in just one line to be Case Insensitive (see api docs java.lang.Boolean)
		Boolean bool = new Boolean(attr.getValue());
		UIConfiguration.setAutoConectLab(bool.booleanValue());
	    }
	    else if (attr.getName().equals("showChatFrame"))
	    { // <ReCBaseUIConfig showChatFrame="???">
		// Not done in just one line to be Case Insensitive (see api docs java.lang.Boolean)
		Boolean bool = new Boolean(attr.getValue());
		UIConfiguration.setShowChatFrame(bool.booleanValue());
	    }
	    else if (attr.getName().equals("help"))
	    { // <ReCBaseUIConfig help="???">
		try
		{
		    UIConfiguration.setHelp(ReCProtocols.getURL(attr.getValue()));
		}
		catch(MalformedURLException e)
		{/* ignored */}
	    }
	    else if (attr.getName().equals("usersListRefreshRate"))
	    { // <ReCBaseUIConfig usersListRefreshRate="???">
		try
		{
		    UIConfiguration.setUsersListRefreshRate(Long.parseLong(attr.getValue()));
		}
		catch(NumberFormatException e)
		{/* ignored */}
	    }
	    else if (attr.getName().equals("showVideoFrame"))
	    { // <ReCBaseUIConfig showVideoFrame="???">
		// Not done in just one line to be Case Insensitive (see api docs java.lang.Boolean)
		Boolean bool = new Boolean(attr.getValue());
		UIConfiguration.setShowVideoFrame(bool.booleanValue());
	    }
	}
	org.w3c.dom.NodeList nodes = element.getChildNodes();
	for (int i = 0; i < nodes.getLength(); i++)
	{
	    org.w3c.dom.Node node = nodes.item(i);
	    switch (node.getNodeType())
	    {
		case org.w3c.dom.Node.CDATA_SECTION_NODE:
		    // ((org.w3c.dom.CDATASection)node).getData();
		    break;
		case org.w3c.dom.Node.ELEMENT_NODE:
		    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
		    if (nodeElement.getTagName().equals("localizationResource"))
		    {
			UIConfiguration.addLocalizationResource(visitElement_localizationResource(nodeElement));
		    }
		    else if (nodeElement.getTagName().equals("webResource"))
		    {
			UIConfiguration.addWebResource(visitElement_webResource(nodeElement));
		    }
		    else if (nodeElement.getTagName().equals("lab"))
		    {
			UIConfiguration.addLabConfig(visitElement_lab(nodeElement));
		    }
		    break;
		case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
		    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
		    // ((org.w3c.dom.ProcessingInstruction)node).getData();
		    break;
	    }
	}
    }
    
    /** Scan through org.w3c.dom.Element named apparatus. */
    ApparatusConfig visitElement_apparatus(org.w3c.dom.Element element)
    { // <apparatus>
	// element.getValue();
	org.w3c.dom.NamedNodeMap attrs = element.getAttributes();
	ApparatusConfig apparatus = new ApparatusConfig();
	for (int i = 0; i < attrs.getLength(); i++)
	{
	    org.w3c.dom.Attr attr = (org.w3c.dom.Attr)attrs.item(i);
	    if (attr.getName().equals("videoURL"))
	    { // <apparatus videoURL="???">
		apparatus.setVideoURL(attr.getValue());
	    }
	    if (attr.getName().equals("id"))
	    { // <apparatus id="???">
		apparatus.setId(attr.getValue());
	    }
	}
	org.w3c.dom.NodeList nodes = element.getChildNodes();
	for (int i = 0; i < nodes.getLength(); i++)
	{
	    org.w3c.dom.Node node = nodes.item(i);
	    switch (node.getNodeType())
	    {
		case org.w3c.dom.Node.CDATA_SECTION_NODE:
		    // ((org.w3c.dom.CDATASection)node).getData();
		    break;
		case org.w3c.dom.Node.ELEMENT_NODE:
		    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
		    if (nodeElement.getTagName().equals("localizationResource"))
		    {
			UIConfiguration.addLocalizationResource(visitElement_localizationResource(nodeElement));
		    }
		    else if (nodeElement.getTagName().equals("webResource"))
		    {
			UIConfiguration.addWebResource(visitElement_webResource(nodeElement));
		    }
		    if (nodeElement.getTagName().equals("display"))
		    {
			
			apparatus.addDisplay(visitElement_display(nodeElement));
		    }
		    break;
		case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
		    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
		    // ((org.w3c.dom.ProcessingInstruction)node).getData();
		    break;
	    }
	}
	return apparatus;
    }
    
    /** Scan through org.w3c.dom.Element named apparatusList. */
    ApparatusConfigCollection visitElement_apparatusList(org.w3c.dom.Element element)
    { // <displays>
	// element.getValue();
	org.w3c.dom.NodeList nodes = element.getChildNodes();
	ApparatusConfigCollection apparatusCollection = new ApparatusConfigCollection();
	for (int i = 0; i < nodes.getLength(); i++)
	{
	    org.w3c.dom.Node node = nodes.item(i);
	    switch (node.getNodeType())
	    {
		case org.w3c.dom.Node.CDATA_SECTION_NODE:
		    // ((org.w3c.dom.CDATASection)node).getData();
		    break;
		case org.w3c.dom.Node.ELEMENT_NODE:
		    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
		    if (nodeElement.getTagName().equals("apparatus"))
		    {
			
			apparatusCollection.addApparatusConfig(visitElement_apparatus(nodeElement));
		    }
		    break;
		case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
		    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
		    // ((org.w3c.dom.ProcessingInstruction)node).getData();
		    break;
	    }
	}
	return apparatusCollection;
    }
    
    /** Scan through org.w3c.dom.Element named display. */
    Display visitElement_displaybean(org.w3c.dom.Element element)
    { // <display>
	// element.getValue();
	org.w3c.dom.NamedNodeMap attrs = element.getAttributes();
	Display display = new Display();
	for (int i = 0; i < attrs.getLength(); i++)
	{
	    org.w3c.dom.Attr attr = (org.w3c.dom.Attr)attrs.item(i);
	    if (attr.getName().equals("class"))
	    { // <display href="???">
		display.setBean(attr.getValue());
	    }
	    if (attr.getName().equals("order"))
	    { // <display order="???">
		try
		{
		    display.setOrder(Integer.parseInt(attr.getValue()));
		}
		catch(NumberFormatException e)
		{
		    display.setOrder(0);
		}
	    }
	}
	org.w3c.dom.NodeList nodes = element.getChildNodes();
	for (int i = 0; i < nodes.getLength(); i++)
	{
	    org.w3c.dom.Node node = nodes.item(i);
	    switch (node.getNodeType())
	    {
		case org.w3c.dom.Node.CDATA_SECTION_NODE:
		    // ((org.w3c.dom.CDATASection)node).getData();
		    break;
		case org.w3c.dom.Node.ELEMENT_NODE:
		    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
		    break;
		case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
		    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
		    // ((org.w3c.dom.ProcessingInstruction)node).getData();
		    break;
	    }
	}
	return display;
    }
    
    /** Scan through org.w3c.dom.Element named displays. */
    DisplayCollection visitElement_displays(org.w3c.dom.Element element)
    { // <webResources>
	// element.getValue();
	DisplayCollection displays = new DisplayCollection();
	org.w3c.dom.NodeList nodes = element.getChildNodes();
	for (int i = 0; i < nodes.getLength(); i++)
	{
	    org.w3c.dom.Node node = nodes.item(i);
	    switch (node.getNodeType())
	    {
		case org.w3c.dom.Node.CDATA_SECTION_NODE:
		    // ((org.w3c.dom.CDATASection)node).getData();
		    break;
		case org.w3c.dom.Node.ELEMENT_NODE:
		    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
		    if (nodeElement.getTagName().equals("displaybean"))
		    {
			displays.add(visitElement_displaybean(nodeElement));
		    }
		    break;
		case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
		    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
		    // ((org.w3c.dom.ProcessingInstruction)node).getData();
		    break;
	    }
	}
	return displays;
    }
    
    /** Scan through org.w3c.dom.Element named lab. */
    LabConfig visitElement_lab(org.w3c.dom.Element element)
    { // <lab>
	// element.getValue();
	org.w3c.dom.NamedNodeMap attrs = element.getAttributes();
	LabConfig labConfig = new LabConfig();
	for (int i = 0; i < attrs.getLength(); i++)
	{
	    org.w3c.dom.Attr attr = (org.w3c.dom.Attr)attrs.item(i);
	    if (attr.getName().equals("nsAddress"))
	    { // <lab nsAddress="???">
		labConfig.setNsAddress(attr.getValue());
	    }
	    if (attr.getName().equals("order"))
	    { // <lab order="???">
		try
		{
		    labConfig.setOrder(Integer.parseInt(attr.getValue()));
		}
		catch(NumberFormatException e)
		{
		    labConfig.setOrder(0);
		}
	    }
	    if (attr.getName().equals("displayName"))
	    { // <lab displayName="???">
		// FALTA ir buscar LOCALIZED STRING
		labConfig.setDisplayName(attr.getValue());
	    }
	}
	org.w3c.dom.NodeList nodes = element.getChildNodes();
	for (int i = 0; i < nodes.getLength(); i++)
	{
	    org.w3c.dom.Node node = nodes.item(i);
	    switch (node.getNodeType())
	    {
		case org.w3c.dom.Node.CDATA_SECTION_NODE:
		    // ((org.w3c.dom.CDATASection)node).getData();
		    break;
		case org.w3c.dom.Node.ELEMENT_NODE:
		    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
		    if (nodeElement.getTagName().equals("webResources"))
		    {
			visitElement_webResources(nodeElement,labConfig.getWebResources());
		    }
		    break;
		case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
		    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
		    // ((org.w3c.dom.ProcessingInstruction)node).getData();
		    break;
	    }
	}
	return labConfig;
    }
    
    /** Scan through org.w3c.dom.Element named labs. */
    LabConfigCollection visitElement_labs(org.w3c.dom.Element element)
    { // <labs>
	// element.getValue();
	org.w3c.dom.NodeList nodes = element.getChildNodes();
	LabConfigCollection labs = new LabConfigCollection();
	for (int i = 0; i < nodes.getLength(); i++)
	{
	    org.w3c.dom.Node node = nodes.item(i);
	    switch (node.getNodeType())
	    {
		case org.w3c.dom.Node.CDATA_SECTION_NODE:
		    // ((org.w3c.dom.CDATASection)node).getData();
		    break;
		case org.w3c.dom.Node.ELEMENT_NODE:
		    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
		    if (nodeElement.getTagName().equals("lab"))
		    {
			labs.add(visitElement_lab(nodeElement));
		    }
		    break;
		case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
		    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
		    // ((org.w3c.dom.ProcessingInstruction)node).getData();
		    break;
	    }
	}
	return labs;
    }
    
    /** Scan through org.w3c.dom.Element named webResource. */
    WebResource visitElement_webResource(org.w3c.dom.Element element)
    { // <webResource>
	// element.getValue();
	org.w3c.dom.NamedNodeMap attrs = element.getAttributes();
	WebResource webResource = new WebResource();
	for (int i = 0; i < attrs.getLength(); i++)
	{
	    org.w3c.dom.Attr attr = (org.w3c.dom.Attr)attrs.item(i);
	    if (attr.getName().equals("url"))
	    { // <webResource href="???">
		webResource.setURL(attr.getValue());
	    }
	    //FALTA ir buscar a LOCALIZED STRING
	    if (attr.getName().equals("tooltip"))
	    { // <webResource tooltip="???">
		webResource.setTooltip(attr.getValue());
	    }
	    if (attr.getName().equals("icon"))
	    { // <webResource icon="???">
		webResource.setIconURL(attr.getValue());
	    }
	    if (attr.getName().equals("order"))
	    { // <webResource order="???">
		try
		{
		    webResource.setOrder(Integer.parseInt(attr.getValue()));
		}
		catch(NumberFormatException e)
		{
		    webResource.setOrder(0);
		}
	    }
	    //FALTA ir buscar a LOCALIZED STRING
	    if (attr.getName().equals("displayString"))
	    { // <webResource displayString="???">
		webResource.setDisplayString(attr.getValue());
	    }
	}
	org.w3c.dom.NodeList nodes = element.getChildNodes();
	for (int i = 0; i < nodes.getLength(); i++)
	{
	    org.w3c.dom.Node node = nodes.item(i);
	    switch (node.getNodeType())
	    {
		case org.w3c.dom.Node.CDATA_SECTION_NODE:
		    // ((org.w3c.dom.CDATASection)node).getData();
		    break;
		case org.w3c.dom.Node.ELEMENT_NODE:
		    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
		    break;
		case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
		    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
		    // ((org.w3c.dom.ProcessingInstruction)node).getData();
		    break;
	    }
	}
	return webResource;
    }
    
    /** Scan through org.w3c.dom.Element named webResources. */
    WebResourceCollection visitElement_webResources(org.w3c.dom.Element element,WebResourceCollection webResources)
    { // <webResources>
	// element.getValue();
	//WebResourceCollection webResources = new WebResourceCollection();
	org.w3c.dom.NodeList nodes = element.getChildNodes();
	for (int i = 0; i < nodes.getLength(); i++)
	{
	    org.w3c.dom.Node node = nodes.item(i);
	    switch (node.getNodeType())
	    {
		case org.w3c.dom.Node.CDATA_SECTION_NODE:
		    // ((org.w3c.dom.CDATASection)node).getData();
		    break;
		case org.w3c.dom.Node.ELEMENT_NODE:
		    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
		    if (nodeElement.getTagName().equals("webResource"))
		    {
			webResources.add(visitElement_webResource(nodeElement));
		    }
		    break;
		case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
		    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
		    // ((org.w3c.dom.ProcessingInstruction)node).getData();
		    break;
	    }
	}
	return webResources;
    }
    
    /******************/
    
   /* public static ReCUIConfig getUIConfiguration()
    {
	return UIConfiguration;
    }
    public static LabConfig getLabConfiguration()
    {
	return labConfiguration;
    }
    public static WebResourceCollection getRecWebResources()
    {
	return recWebResources;
    }
    public static ApparatusConfigCollection getApparatusConfig()
    {
	return apparatusConfig;
    }*/
    
    private static ReCUIConfig UIConfiguration =null;
    
}
