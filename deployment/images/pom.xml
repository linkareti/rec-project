<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.linkare</groupId>
        <artifactId>elab</artifactId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>

    <artifactId>images</artifactId>
    <packaging>pom</packaging>

    <name>Docker images</name>
    <description>Docker images</description>

    <dependencies>
        <dependency>
            <groupId>com.linkare</groupId>
            <artifactId>rec.web</artifactId>
            <version>${project.version}</version>
            <type>pom</type>
        </dependency>
        <dependency>
            <groupId>com.linkare</groupId>
            <artifactId>builder</artifactId>
            <version>${project.version}</version>
            <type>pom</type>
        </dependency>
    </dependencies>

    <repositories>
        <repository>
            <id>jfrogjars</id>
            <name>JFrogJars Repository</name>
            <url>https://dl.bintray.com/jfrog/jfrog-jars</url>
        </repository>
    </repositories>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-thirdparty-dependencies</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>mysql</groupId>
                                    <artifactId>mysql-connector-java</artifactId>
                                    <version>${mysql.connector.version}</version>
                                    <type>jar</type>
                                    <outputDirectory>${project.build.directory}/payara/resources</outputDirectory>
                                </artifactItem>
                                <!-- <artifactItem>
                                    <groupId>org.webswing</groupId>
                                    <artifactId>webswing-assembly</artifactId>
                                    <version>${webswing.version}</version>
                                    <classifier>distribution</classifier>
                                    <type>zip</type>
                                    <outputDirectory>${project.build.directory}/webswing/resources</outputDirectory>
                                    <destFileName>webswing.zip</destFileName>
                                </artifactItem> -->
                                <artifactItem>
                                    <!-- https://mvnrepository.com/artifact/net.adoptopenjdk/adoptopenjdk -->
                                    <groupId>net.adoptopenjdk</groupId>
                                    <artifactId>adoptopenjdk</artifactId>
                                    <version>${openjdk.specific.version}</version>
                                    <outputDirectory>${project.build.directory}/openjdk11/resources</outputDirectory>
                                    <type>tar.gz</type>
                                    <classifier>linux</classifier>
                                    <destFileName>openjdk11.tar.gz</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <!-- https://mvnrepository.com/artifact/net.adoptopenjdk/adoptopenjdk -->
                                    <groupId>net.adoptopenjdk</groupId>
                                    <artifactId>adoptopenjdk</artifactId>
                                    <version>${openjdk.specific.version}</version>
                                    <outputDirectory>${project.build.directory}/multicast/resources</outputDirectory>
                                    <type>tar.gz</type>
                                    <classifier>linux</classifier>
                                    <destFileName>openjdk11.tar.gz</destFileName>
                                </artifactItem>
                                <!-- <artifactItem>
                                    <groupId>org.videolan</groupId>
                                    <artifactId>vlc-slim</artifactId>
                                    <version>${vlc-slim.version}</version>
                                    <classifier>x86_64-linux-gnu</classifier>
                                    <type>tar.gz</type>
                                    <outputDirectory>${project.build.directory}/webswing/resources</outputDirectory>
                                    <destFileName>vlc-slim.tar.gz</destFileName>
                                </artifactItem> -->
                                <artifactItem>
                                    <groupId>mysql</groupId>
                                    <artifactId>mysql-connector-java</artifactId>
                                    <version>${mysql.connector.version}</version>
                                    <outputDirectory>${project.build.directory}/upgrade-db/resources</outputDirectory>
                                </artifactItem>

                                <!-- Application -->
                                <!-- Payara -->
                                <artifactItem>
                                    <groupId>com.linkare</groupId>
                                    <artifactId>rec.web</artifactId>
                                    <version>${project.version}</version>
                                    <type>war</type>
                                    <outputDirectory>${project.build.directory}/payara/resources</outputDirectory>
                                </artifactItem>
                                <!-- FIXME - Temporary setup for using locally -->
                                <!-- Webswing -->
                                <artifactItem>
                                    <groupId>com.linkare</groupId>
                                    <artifactId>builder</artifactId>
                                    <version>${project.version}</version>
                                    <classifier>client</classifier>
                                    <type>zip</type>
                                    <outputDirectory>${project.build.directory}/webswing/resources</outputDirectory>
                                    <destFileName>client.zip</destFileName>
                                </artifactItem>
                                <!-- Dependency libraries needed for running client experiments -->
                                <artifactItem>
                                    <groupId>com.sun.xml.bind</groupId>
                                    <artifactId>jaxb-core</artifactId>
                                    <version>${jaxb-core.version}</version>
                                    <type>jar</type>
                                    <outputDirectory>${project.build.directory}/webswing/resources/common
                                    </outputDirectory>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>javax.xml.bind</groupId>
                                    <artifactId>jaxb-api</artifactId>
                                    <version>${jaxb-api.version}</version>
                                    <type>jar</type>
                                    <outputDirectory>${project.build.directory}/webswing/resources/common
                                    </outputDirectory>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>javax.activation</groupId>
                                    <artifactId>activation</artifactId>
                                    <version>${javax.activation.version}</version>
                                    <type>jar</type>
                                    <outputDirectory>${project.build.directory}/webswing/resources/common
                                    </outputDirectory>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>com.sun.xml.bind</groupId>
                                    <artifactId>jaxb-impl</artifactId>
                                    <version>${jaxb-impl.version}</version>
                                    <type>jar</type>
                                    <outputDirectory>${project.build.directory}/webswing/resources/common
                                    </outputDirectory>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>com.linkare</groupId>
                                    <artifactId>builder</artifactId>
                                    <version>${project.version}</version>
                                    <classifier>multicast</classifier>
                                    <type>zip</type>
                                    <destFileName>multicast.zip</destFileName>
                                    <outputDirectory>${project.build.directory}/multicast/resources</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                            <stripVersion>true</stripVersion>
                        </configuration>
                    </execution>
                    <execution>
                        <id>unpack-thirdparty-dependencies</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.liquibase</groupId>
                                    <artifactId>liquibase-core</artifactId>
                                    <version>${liquibase.version}</version>
                                    <type>tar.gz</type>
                                    <outputDirectory>${project.build.directory}/upgrade-db/resources/liquibase
                                    </outputDirectory>
                                </artifactItem>
                                <!-- Application -->
                                <artifactItem>
                                    <groupId>com.linkare</groupId>
                                    <artifactId>rec.web</artifactId>
                                    <version>${project.version}</version>
                                    <classifier>database</classifier>
                                    <type>zip</type>
                                    <outputDirectory>${project.build.directory}/upgrade-db/resources/changelog
                                    </outputDirectory>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>com.linkare</groupId>
                                    <artifactId>rec</artifactId>
                                    <version>${project.version}</version>
                                    <classifier>client-external-libs</classifier>
                                    <type>zip</type>
                                    <outputDirectory>${project.build.directory}/webswing/resources/common
                                    </outputDirectory>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Plugin usado para evitar demasiadas chamadas ao repositorio (maven cache)-->
                <groupId>com.googlecode.maven-download-plugin</groupId>
                <artifactId>download-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-jwilder-dockerize-to-liquibase-resources-dir</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>
                                https://github.com/jwilder/dockerize/releases/download/v${dockerize.version}/dockerize-alpine-linux-amd64-v${dockerize.version}.tar.gz
                            </url>
                            <unpack>true</unpack>
                            <outputDirectory>${project.build.directory}/upgrade-db/resources</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-jwilder-dockerize-to-webswing-resources-dir</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>
                                https://github.com/jwilder/dockerize/releases/download/v${dockerize.version}/dockerize-alpine-linux-amd64-v${dockerize.version}.tar.gz
                            </url>
                            <unpack>true</unpack>
                            <outputDirectory>${project.build.directory}/webswing/resources</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-jwilder-dockerize-to-openjdk-resources-dir</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>
                                https://github.com/jwilder/dockerize/releases/download/v${dockerize.version}/dockerize-alpine-linux-amd64-v${dockerize.version}.tar.gz
                            </url>
                            <unpack>true</unpack>
                            <outputDirectory>${project.build.directory}/openjdk11/resources</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-jwilder-dockerize-to-multicast-resources-dir</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>
                                https://github.com/jwilder/dockerize/releases/download/v${dockerize.version}/dockerize-alpine-linux-amd64-v${dockerize.version}.tar.gz
                            </url>
                            <unpack>true</unpack>
                            <outputDirectory>${project.build.directory}/multicast/resources</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-jwilder-dockerize-to-payara-resources-dir</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>
                                https://github.com/jwilder/dockerize/releases/download/v${dockerize.version}/dockerize-alpine-linux-amd64-v${dockerize.version}.tar.gz
                            </url>
                            <unpack>true</unpack>
                            <outputDirectory>${project.build.directory}/payara/resources</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-webswing-distribution-to-webswing-resources-dir</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>
                                https://docker-hub.elab.linkare.com/nexus/repository/thirdparty/org/webswing/webswing/${webswing.version}/webswing-${webswing.version}-distribution.zip
                            </url>
                            <unpack>false</unpack>
                            <outputDirectory>${project.build.directory}/webswing/resources</outputDirectory>
                            <outputFileName>webswing.zip</outputFileName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-webswing-distribution-to-webswing-admin-resources-dir</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>
                                https://docker-hub.elab.linkare.com/nexus/repository/thirdparty/org/webswing/webswing/${webswing.version}/webswing-${webswing.version}-distribution.zip
                            </url>
                            <unpack>false</unpack>
                            <outputDirectory>${project.build.directory}/webswing-admin/resources</outputDirectory>
                            <outputFileName>webswing.zip</outputFileName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-jwilder-dockerize-to-webswing-admin-resources-dir</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>
                                https://github.com/jwilder/dockerize/releases/download/v${dockerize.version}/dockerize-alpine-linux-amd64-v${dockerize.version}.tar.gz
                            </url>
                            <unpack>true</unpack>
                            <outputDirectory>${project.build.directory}/webswing-admin/resources</outputDirectory>
                        </configuration>
                    </execution>
                    <!-- Application -->
                    <execution>
                        <id>copy-openjfx-to-client-resources-dir</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>https://gluonhq.com/download/javafx-${openjfx.version}-sdk-linux</url>
                            <unpack>false</unpack>
                            <outputDirectory>${project.build.directory}/webswing/resources</outputDirectory>
                            <outputFileName>javafx-sdk.zip</outputFileName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>build-docker-images</id>
                        <phase>${docker.phase.package}</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <workingDirectory>${project.build.directory}</workingDirectory>
                            <executable>docker-compose</executable>
                            <commandlineArgs>--project-name ${git.project.prefix} build --force-rm --no-cache
                            </commandlineArgs>
                        </configuration>
                    </execution>
                    <execution>
                        <id>push-docker-images-to-nexus</id>
                        <phase>${docker.phase.deploy}</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <workingDirectory>${project.build.directory}</workingDirectory>
                            <executable>docker-compose</executable>
                            <commandlineArgs>push</commandlineArgs>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>ant</id>
            <activation>
                <property>
                    <name>pack.docker.images</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>save-multicast-image</id>
                                <phase>${docker.phase.package}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <executable>docker</executable>
                                    <commandlineArgs>save -o ${project.build.directory}/multicast.tar ${repo}/${simplifiedGroupId}/rec.multicast-${openjdk.version}:${project.version}</commandlineArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>save-webswing-image</id>
                                <phase>${docker.phase.package}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <executable>docker</executable>
                                    <commandlineArgs>save -o ${project.build.directory}/webswing.tar ${repo}/${simplifiedGroupId}/webswing-${webswing.version}-${openjdk.version}:${project.version}</commandlineArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>save-webswing-admin-image</id>
                                <phase>${docker.phase.package}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <executable>docker</executable>
                                    <commandlineArgs>save -o ${project.build.directory}/webswing-admin.tar ${repo}/${simplifiedGroupId}/webswing-admin-${webswing.version}-${openjdk.version}:${project.version}</commandlineArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>save-traefik-image</id>
                                <phase>${docker.phase.package}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <executable>docker</executable>
                                    <commandlineArgs>save -o ${project.build.directory}/reverse-proxy.tar ${repo}/${simplifiedGroupId}/traefik-${traefik.version}:${project.version}</commandlineArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>save-rec.web-image</id>
                                <phase>${docker.phase.package}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <executable>docker</executable>
                                    <commandlineArgs>save -o ${project.build.directory}/rec.web.tar ${repo}/${simplifiedGroupId}/rec.web-payara-${payara.docker.version}:${project.version}</commandlineArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>save-rec.web-database-image</id>
                                <phase>${docker.phase.package}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <executable>docker</executable>
                                    <commandlineArgs>save -o ${project.build.directory}/rec.web-db.tar ${repo}/${simplifiedGroupId}/mysql-server-${mysql.version}:${project.version}</commandlineArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>save-rec.web-upgrade-db-image</id>
                                <phase>${docker.phase.package}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <executable>docker</executable>
                                    <commandlineArgs>save -o ${project.build.directory}/rec.web-upgrade-db.tar ${repo}/${simplifiedGroupId}/rec.upgrade-db-liquibase-${liquibase.version}:${project.version}</commandlineArgs>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>